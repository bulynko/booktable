)]}'
{"version":3,"sources":["angular:angular-animate/angular-animate.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,4B;AACA,kD;AACA,e;AACA,G;AACA,oD;;AAEA,yB;AACA,+B;AACA,iC;AACA,kC;AACA,kC;AACA,kC;AACA,mC;AACA,mC;AACA,sC;AACA,oC;AACA,qC;AACA,oC;;AAEA,qB;AACA,qB;;AAEA,8B;AACA,oC;AACA,+B;AACA,oC;;AAEA,wC;AACA,qD;;AAEA,wD;AACA,8F;;AAEA,kF;AACA,4F;AACA,sG;AACA,yF;AACA,yF;AACA,mF;AACA,8F;AACA,0E;AACA,wC;AACA,yF;AACA,0B;AACA,uC;AACA,4D;AACA,Q;AACA,iC;AACA,wC;AACA,C;;AAEA,uF;AACA,0B;AACA,qC;AACA,yD;AACA,Q;AACA,+B;AACA,sC;AACA,C;;AAEA,8B;AACA,8B;AACA,wB;AACA,kC;AACA,qD;AACA,0C;AACA,4C;;AAEA,sD;AACA,4D;AACA,wD;AACA,8D;;AAEA,iC;AACA,oC;AACA,E;;AAEA,uC;AACA,a;AACA,2F;AACA,G;AACA,a;AACA,C;;AAEA,4B;AACA,0B;AACA,mB;AACA,mB;AACA,kC;AACA,kC;AACA,qB;AACA,C;;AAEA,iC;AACA,kB;AACA,gD;AACA,2B;AACA,+B;AACA,G;AACA,gB;AACA,C;;AAEA,8C;AACA,qB;AACA,4B;AACA,e;AACA,sD;AACA,gC;AACA,e;AACA,uC;AACA,oC;AACA,sC;AACA,yC;AACA,0C;AACA,K;AACA,K;AACA,mB;AACA,C;;AAEA,oC;AACA,+B;AACA,iB;AACA,yB;AACA,G;AACA,C;;AAEA,4C;AACA,kC;AACA,6B;AACA,a;AACA,kB;AACA,c;;AAEA,a;AACA,iE;AACA,yD;AACA,gE;AACA,mD;AACA,yB;AACA,S;AACA,c;;AAEA,c;AACA,mD;AACA,c;AACA,K;AACA,G;;AAEA,0C;AACA,2B;AACA,G;AACA,C;;AAEA,sC;AACA,kC;AACA,4C;AACA,yB;AACA,uC;AACA,iB;AACA,K;AACA,G;AACA,C;;AAEA,mD;AACA,kC;AACA,sC;AACA,K;AACA,C;;AAEA,sD;AACA,kC;AACA,yC;AACA,K;AACA,C;;AAEA,iD;AACA,qC;AACA,2B;AACA,sD;AACA,8B;AACA,K;AACA,8B;AACA,4D;AACA,iC;AACA,K;AACA,G;AACA,C;;AAEA,2C;AACA,0B;AACA,4B;AACA,oD;AACA,uC;AACA,yC;AACA,qB;AACA,0B;AACA,M;AACA,8B;AACA,G;AACA,iB;AACA,C;;AAEA,iD;AACA,6C;AACA,2C;AACA,C;;AAEA,qD;AACA,qB;AACA,8B;AACA,wB;AACA,G;AACA,C;;AAEA,mD;AACA,mB;AACA,4B;AACA,sB;AACA,G;AACA,C;;AAEA,6D;AACA,0E;AACA,mF;AACA,8E;;AAEA,sC;AACA,0G;AACA,yC;AACA,G;;AAEA,kF;AACA,mF;;AAEA,6B;;AAEA,oK;AACA,yB;AACA,2C;AACA,G;;AAEA,yB;AACA,uC;AACA,U;AACA,2B;AACA,G;;AAEA,4B;AACA,6C;AACA,U;AACA,8B;AACA,G;;AAEA,gB;AACA,C;;AAEA,2D;AACA,oB;AACA,wB;;AAEA,iB;AACA,4C;;AAEA,sC;AACA,uC;AACA,2B;AACA,K;;AAEA,4C;AACA,0C;AACA,gE;AACA,K;;AAEA,iB;AACA,iB;AACA,mB;AACA,I;;AAEA,uC;AACA,oB;AACA,4B;AACA,wB;AACA,+B;AACA,sC;AACA,2B;AACA,8B;AACA,K;AACA,gB;AACA,iC;AACA,6B;AACA,O;AACA,6B;AACA,K;AACA,K;;AAEA,0C;AACA,4B;AACA,mC;AACA,K;;AAEA,iB;AACA,sC;AACA,uD;AACA,wD;AACA,yB;AACA,0B;AACA,O;AACA,O;AACA,e;AACA,G;;AAEA,iB;AACA,C;;AAEA,8B;AACA,qE;AACA,C;;AAEA,oE;AACA,mB;AACA,c;AACA,2D;AACA,G;AACA,yB;AACA,wF;AACA,G;AACA,4B;AACA,8F;AACA,G;AACA,uB;AACA,yC;AACA,8B;AACA,G;AACA,C;;AAEA,kD;AACA,mC;AACA,oD;AACA,sC;AACA,G;AACA,8B;AACA,+C;AACA,iC;AACA,G;AACA,C;;AAEA,2C;AACA,6D;AACA,gE;AACA,kE;AACA,mD;AACA,yD;AACA,wC;AACA,C;;AAEA,oD;AACA,yC;AACA,qD;AACA,uC;AACA,sB;AACA,C;;AAEA,6C;AACA,2B;AACA,4B;AACA,2B;AACA,C;;AAEA,+B;AACA,mB;AACA,mB;AACA,qB;AACA,C;;AAEA,2B;AACA,iD;AACA,qC;AACA,K;AACA,C;;AAEA,uD;AACA,sB;;AAEA,6B;AACA,0D;AACA,kE;AACA,wC;AACA,gC;AACA,e;AACA,G;;AAEA,+B;;AAEA,oC;AACA,wF;AACA,uF;AACA,I;AACA,wF;AACA,yF;AACA,uD;AACA,K;AACA,2C;AACA,6B;;AAEA,iC;AACA,sB;AACA,W;AACA,iB;AACA,O;AACA,I;;AAEA,mB;;AAEA,uB;AACA,8B;;AAEA,8B;AACA,4C;AACA,iB;AACA,K;;AAEA,oB;AACA,wB;AACA,kC;AACA,S;AACA,K;AACA,G;AACA,G;;AAEA,8C;AACA,0C;AACA,sC;AACA,sE;AACA,mD;AACA,Y;AACA,2D;AACA,mD;AACA,sD;AACA,S;AACA,K;AACA,I;AACA,G;;AAEA,uC;;AAEA,G;AACA,iB;AACA,oB;AACA,e;AACA,E;AACA,e;AACA,sG;AACA,sG;AACA,sG;AACA,yF;AACA,E;AACA,iG;AACA,iF;AACA,E;AACA,W;AACA,oG;AACA,wG;AACA,kG;AACA,wG;AACA,oG;AACA,qB;AACA,E;AACA,6F;AACA,E;AACA,U;AACA,iD;AACA,6C;AACA,8B;AACA,S;AACA,iD;AACA,M;AACA,E;AACA,mF;AACA,E;AACA,Q;AACA,gF;AACA,a;AACA,yC;AACA,8C;AACA,sC;AACA,kC;AACA,wC;AACA,oC;AACA,Y;AACA,Q;AACA,M;AACA,O;AACA,M;AACA,E;AACA,wB;AACA,E;AACA,oI;AACA,4I;AACA,E;AACA,iJ;AACA,6I;AACA,iJ;AACA,uD;AACA,E;AACA,uG;AACA,E;AACA,Q;AACA,gF;AACA,a;AACA,yC;AACA,8C;AACA,sC;AACA,kD;AACA,8B;AACA,kC;AACA,wC;AACA,oC;AACA,Y;AACA,Q;AACA,M;AACA,O;AACA,M;AACA,E;AACA,2F;AACA,E;AACA,S;AACA,8F;AACA,sG;AACA,2B;AACA,kC;AACA,E;AACA,gH;AACA,iB;AACA,oC;AACA,4C;AACA,I;AACA,E;AACA,qB;AACA,oC;AACA,kC;AACA,I;AACA,E;AACA,6B;AACA,4C;AACA,0C;AACA,I;AACA,M;AACA,E;AACA,6I;AACA,E;AACA,iC;AACA,E;AACA,oJ;AACA,oJ;AACA,+C;AACA,E;AACA,Q;AACA,wC;AACA,gC;AACA,8B;AACA,M;AACA,oB;AACA,M;AACA,E;AACA,S;AACA,wB;AACA,kC;AACA,0C;AACA,I;AACA,E;AACA,sB;AACA,sC;AACA,sC;AACA,I;AACA,E;AACA,8B;AACA,8C;AACA,8C;AACA,I;AACA,M;AACA,E;AACA,mK;AACA,uJ;AACA,4J;AACA,yJ;AACA,2D;AACA,E;AACA,sB;AACA,E;AACA,mJ;AACA,yJ;AACA,0H;AACA,E;AACA,Q;AACA,gD;AACA,M;AACA,E;AACA,iE;AACA,E;AACA,Q;AACA,I;AACA,4B;AACA,qB;AACA,E;AACA,mC;AACA,kB;AACA,I;AACA,M;AACA,E;AACA,+J;AACA,gK;AACA,8J;AACA,+E;AACA,E;AACA,qC;AACA,wJ;AACA,mJ;AACA,yJ;AACA,0D;AACA,E;AACA,uJ;AACA,gG;AACA,4F;AACA,E;AACA,gE;AACA,kG;AACA,E;AACA,4I;AACA,iK;AACA,4G;AACA,0F;AACA,8G;AACA,8G;AACA,sH;AACA,0H;AACA,iI;AACA,wJ;AACA,2D;AACA,wJ;AACA,2J;AACA,2J;AACA,mB;AACA,mG;AACA,iH;AACA,oJ;AACA,2F;AACA,qV;AACA,E;AACA,yF;AACA,E;AACA,2F;AACA,iG;AACA,G;AACA,sB;AACA,kB;;AAEA,wC;AACA,8B;;AAEA,6B;AACA,oD;AACA,iD;AACA,0D;AACA,mD;AACA,gD;AACA,yE;AACA,E;;AAEA,qC;AACA,oD;AACA,iD;AACA,mD;AACA,+C;AACA,E;;AAEA,gD;AACA,mD;AACA,C;;AAEA,uD;AACA,gF;AACA,6B;AACA,C;;AAEA,yD;AACA,mC;AACA,+D;AACA,kE;AACA,8C;AACA,c;AACA,4B;;AAEA,qF;AACA,6C;AACA,gC;AACA,O;;AAEA,+F;AACA,6F;AACA,+D;AACA,sB;AACA,mB;AACA,O;AACA,oC;AACA,K;AACA,K;;AAEA,gB;AACA,C;;AAEA,4B;AACA,mB;AACA,oC;AACA,mC;AACA,iF;AACA,gE;AACA,gD;AACA,mD;AACA,K;AACA,mC;AACA,4D;AACA,K;AACA,kB;AACA,C;;AAEA,iC;AACA,kC;AACA,C;;AAEA,qE;AACA,8B;AACA,6B;AACA,0B;AACA,0B;AACA,U;AACA,2B;AACA,G;AACA,wB;AACA,C;;AAEA,mC;AACA,kC;AACA,U;AACA,uB;AACA,kC;AACA,M;;AAEA,0B;AACA,6B;AACA,qC;AACA,M;;AAEA,wB;AACA,6B;AACA,kC;AACA,M;;AAEA,+B;AACA,wB;AACA,gD;AACA,c;AACA,2B;AACA,O;AACA,K;AACA,I;AACA,C;;AAEA,2E;AACA,2C;AACA,kD;;AAEA,oE;AACA,yE;AACA,mE;AACA,wE;;AAEA,uE;;AAEA,0B;AACA,4C;AACA,uC;AACA,uC;AACA,4E;AACA,8E;AACA,K;;AAEA,4E;AACA,4C;;AAEA,qB;AACA,8D;AACA,6D;AACA,8C;AACA,S;AACA,O;;AAEA,mG;AACA,8F;AACA,uC;AACA,qB;AACA,K;;AAEA,mF;AACA,kB;;AAEA,qE;AACA,8E;AACA,oC;AACA,0C;AACA,iD;;AAEA,uB;AACA,oE;;AAEA,oD;;AAEA,gE;;AAEA,wE;AACA,6E;AACA,+E;;AAEA,uD;;AAEA,kD;AACA,S;AACA,O;;AAEA,2B;AACA,K;;AAEA,6B;AACA,0B;AACA,uC;AACA,kC;AACA,gD;AACA,0B;AACA,iC;;AAEA,4E;AACA,wE;AACA,wC;;AAEA,mE;AACA,iE;AACA,uD;AACA,qC;AACA,S;AACA,gC;AACA,S;AACA,K;;AAEA,wD;AACA,6F;AACA,sC;AACA,uC;AACA,iC;AACA,4B;AACA,uB;AACA,qC;AACA,sE;AACA,sC;;AAEA,qB;AACA,K;;AAEA,4C;AACA,qC;AACA,e;AACA,6B;AACA,mC;AACA,4C;AACA,O;;AAEA,iD;;AAEA,+B;AACA,0C;AACA,0C;AACA,0B;AACA,0B;AACA,6B;AACA,iB;AACA,qB;AACA,mB;AACA,uB;AACA,sB;AACA,0B;;AAEA,sF;AACA,4C;AACA,O;;AAEA,0D;AACA,qC;AACA,4B;;AAEA,sD;AACA,mC;AACA,kC;;AAEA,yB;AACA,4E;AACA,0B;AACA,qC;AACA,O;;AAEA,6B;AACA,8E;AACA,O;;AAEA,gC;AACA,wC;AACA,oC;AACA,S;AACA,oF;AACA,O;;AAEA,mF;AACA,gF;AACA,qF;AACA,mF;AACA,oF;AACA,sE;AACA,mE;AACA,gD;AACA,O;;AAEA,0F;AACA,6D;AACA,+E;AACA,uE;AACA,+E;;AAEA,qE;AACA,4E;AACA,6E;AACA,oC;AACA,0B;AACA,oC;AACA,4C;AACA,O;;AAEA,4B;AACA,gC;AACA,qD;AACA,mB;AACA,sC;AACA,qC;AACA,gC;AACA,8B;AACA,U;AACA,c;AACA,kD;AACA,mH;AACA,O;;AAEA,8C;AACA,uD;AACA,O;;AAEA,4B;;AAEA,oC;AACA,yE;AACA,gD;AACA,8C;AACA,O;;AAEA,kC;AACA,mE;AACA,+F;;AAEA,qF;AACA,8C;AACA,4C;AACA,O;;AAEA,kC;AACA,oE;AACA,8C;AACA,4C;AACA,O;;AAEA,6B;AACA,qC;AACA,oC;AACA,yC;AACA,c;;AAEA,oC;;AAEA,iG;AACA,oG;AACA,oG;AACA,oG;AACA,iG;AACA,4F;AACA,6C;AACA,iE;AACA,O;;AAEA,kE;AACA,2C;AACA,4C;AACA,wC;;AAEA,qB;AACA,qE;AACA,oE;AACA,kG;AACA,sD;AACA,yF;AACA,4F;AACA,8E;AACA,kI;AACA,8F;AACA,oE;;AAEA,0E;AACA,oF;;AAEA,4C;AACA,sC;AACA,mD;AACA,oF;AACA,8F;AACA,S;;AAEA,2C;AACA,qC;AACA,kD;AACA,yE;AACA,S;AACA,O;;AAEA,gE;AACA,4C;AACA,O;;AAEA,kC;AACA,mD;;AAEA,yC;AACA,6D;AACA,S;;AAEA,wC;AACA,mE;AACA,S;AACA,O;;AAEA,oF;AACA,uF;AACA,mF;AACA,uE;AACA,iF;AACA,O;;AAEA,2C;AACA,iD;AACA,kC;AACA,+D;AACA,uE;AACA,oE;AACA,uE;AACA,O;;AAEA,iD;;AAEA,kE;AACA,mC;AACA,yC;AACA,sC;AACA,O;;AAEA,+F;AACA,c;AACA,4B;AACA,mB;AACA,2B;AACA,sC;;AAEA,wB;AACA,uB;AACA,6B;AACA,qE;AACA,uB;AACA,Y;;AAEA,mD;;AAEA,gC;;AAEA,+D;AACA,kE;AACA,kE;AACA,gE;AACA,wB;AACA,S;AACA,Q;;AAEA,wB;AACA,gB;AACA,O;;AAEA,2B;AACA,oB;AACA,O;;AAEA,sD;AACA,yE;AACA,8B;AACA,+E;AACA,+B;AACA,gC;;AAEA,gD;AACA,4D;AACA,S;AACA,qD;;AAEA,6C;AACA,sC;;AAEA,kD;AACA,4F;AACA,yF;AACA,8C;AACA,oC;AACA,W;;AAEA,gD;AACA,+C;;AAEA,wF;AACA,sF;AACA,0F;AACA,2F;AACA,wF;AACA,6B;AACA,2B;AACA,S;;AAEA,0E;AACA,qB;AACA,qC;AACA,S;AACA,O;;AAEA,wC;AACA,oC;AACA,2C;AACA,S;;AAEA,2C;AACA,oD;AACA,S;AACA,O;;AAEA,6C;AACA,sC;AACA,qB;AACA,0B;AACA,W;;AAEA,2C;AACA,6B;AACA,gB;;AAEA,gB;AACA,+B;AACA,6B;AACA,0B;AACA,Y;AACA,oB;AACA,U;AACA,O;;AAEA,wB;AACA,oC;AACA,+B;AACA,kB;AACA,iB;AACA,S;;AAEA,mC;;AAEA,4E;AACA,gF;AACA,+E;AACA,wE;AACA,iD;AACA,oC;AACA,6C;AACA,4C;AACA,yE;AACA,6B;AACA,+C;AACA,4D;AACA,a;AACA,wD;AACA,oC;AACA,oB;AACA,W;AACA,U;;AAEA,8F;AACA,iG;AACA,yE;AACA,sC;AACA,gG;AACA,2F;AACA,sF;AACA,yB;AACA,yC;AACA,mE;AACA,0B;AACA,gB;AACA,kC;AACA,S;;AAEA,mF;AACA,wC;AACA,0B;AACA,U;;AAEA,uC;AACA,2B;AACA,U;;AAEA,0C;AACA,wE;AACA,0C;AACA,sC;;AAEA,+B;;AAEA,oD;AACA,+B;AACA,iC;AACA,oC;AACA,a;;AAEA,kD;AACA,oD;;AAEA,8C;AACA,sE;AACA,sD;;AAEA,oE;AACA,6C;AACA,kD;AACA,8C;;AAEA,oC;AACA,sB;AACA,qB;AACA,a;;AAEA,kE;AACA,gE;AACA,W;;AAEA,0C;AACA,kG;AACA,6C;AACA,kC;;AAEA,kD;AACA,mD;AACA,+D;AACA,6C;AACA,sD;AACA,W;;AAEA,+C;AACA,qD;;AAEA,+B;AACA,mD;AACA,uC;AACA,sD;AACA,wD;AACA,6C;AACA,a;AACA,sC;AACA,qD;AACA,wD;AACA,6C;AACA,a;AACA,W;;AAEA,2C;AACA,6C;AACA,W;;AAEA,0C;AACA,4C;AACA,W;;AAEA,iC;AACA,+E;AACA,8C;;AAEA,qE;AACA,wC;AACA,sC;AACA,qD;AACA,4E;AACA,qC;AACA,sD;AACA,oB;AACA,yC;AACA,a;AACA,W;;AAEA,mC;AACA,uE;AACA,iC;AACA,2B;AACA,sC;AACA,c;AACA,uC;AACA,4D;AACA,W;;AAEA,4D;AACA,mD;AACA,S;;AAEA,uC;AACA,+D;;AAEA,iE;AACA,qE;AACA,qB;AACA,+B;AACA,6D;AACA,kC;AACA,a;AACA,kD;AACA,W;AACA,S;;AAEA,6C;AACA,kC;AACA,gD;AACA,4E;;AAEA,0E;AACA,+D;AACA,gG;;AAEA,sE;AACA,yE;AACA,+E;AACA,mF;AACA,iF;AACA,4E;AACA,wE;AACA,iG;AACA,8F;AACA,gG;AACA,sC;AACA,oB;AACA,W;AACA,S;AACA,O;AACA,M;AACA,K;AACA,G;;AAEA,wF;AACA,yD;;AAEA,qD;AACA,iD;;AAEA,iD;AACA,+C;;AAEA,gH;AACA,iH;;AAEA,wE;AACA,mE;;AAEA,sC;AACA,4C;;AAEA,yF;;AAEA,uE;;AAEA,oD;AACA,yD;AACA,+D;AACA,6D;AACA,kE;AACA,kE;AACA,sD;AACA,M;;AAEA,wC;AACA,kC;AACA,gD;AACA,K;;AAEA,oC;AACA,wC;AACA,wC;AACA,qC;AACA,qC;AACA,mB;AACA,K;;AAEA,qE;AACA,gE;AACA,iE;;AAEA,qD;AACA,oD;;AAEA,mD;;AAEA,oC;;AAEA,0D;;AAEA,8D;AACA,6D;AACA,+D;AACA,+D;AACA,yB;AACA,0C;AACA,0B;AACA,uB;AACA,S;AACA,O;;AAEA,uD;;AAEA,c;AACA,2B;AACA,qB;;AAEA,0D;AACA,4C;AACA,oC;AACA,8B;AACA,gD;AACA,+B;AACA,sD;AACA,kD;AACA,0C;AACA,wB;AACA,oC;AACA,mB;AACA,wC;AACA,e;AACA,a;AACA,2D;AACA,kB;AACA,8B;AACA,a;;AAEA,wC;AACA,uB;AACA,yB;AACA,a;;AAEA,wB;;AAEA,4B;AACA,mC;AACA,qC;AACA,a;AACA,W;AACA,S;AACA,Q;;AAEA,8C;AACA,wB;;AAEA,gE;;AAEA,wE;AACA,0D;AACA,gE;AACA,kC;AACA,wB;AACA,uB;AACA,0C;AACA,oB;AACA,wB;AACA,2C;AACA,oB;AACA,W;AACA,iD;AACA,W;AACA,sB;AACA,O;;AAEA,sC;AACA,2C;AACA,6C;AACA,sB;AACA,gD;AACA,W;;AAEA,0E;AACA,sC;AACA,wD;AACA,O;;AAEA,qC;AACA,2C;AACA,O;;AAEA,qC;AACA,oE;AACA,oE;AACA,uE;;AAEA,2C;AACA,8C;AACA,0D;AACA,iE;AACA,qB;AACA,W;;AAEA,0E;AACA,sC;AACA,wD;AACA,O;;AAEA,sB;AACA,uB;AACA,0D;AACA,yD;AACA,O;AACA,K;;AAEA,uE;AACA,8D;AACA,0D;;AAEA,gC;AACA,yC;AACA,uC;AACA,qC;AACA,gF;AACA,uB;AACA,0C;AACA,S;AACA,S;;AAEA,yE;AACA,kF;;AAEA,c;AACA,2B;AACA,oC;;AAEA,8B;AACA,yD;AACA,W;;AAEA,4B;AACA,uD;AACA,W;;AAEA,yD;AACA,qD;AACA,a;;AAEA,4C;AACA,uB;AACA,kF;AACA,a;;AAEA,kE;AACA,oC;AACA,a;;AAEA,wB;;AAEA,4B;AACA,wD;AACA,2B;AACA,e;AACA,W;AACA,S;AACA,Q;AACA,K;;AAEA,wD;AACA,6C;AACA,mD;;AAEA,wC;AACA,+C;AACA,kC;AACA,yC;;AAEA,2E;AACA,6E;AACA,0E;AACA,iD;AACA,gD;AACA,S;AACA,O;;AAEA,6E;AACA,6E;AACA,iD;AACA,uC;AACA,mF;AACA,O;;AAEA,mD;;AAEA,yE;AACA,kF;AACA,2E;AACA,wE;AACA,sD;AACA,K;AACA,K;AACA,G;;AAEA,kE;AACA,kC;AACA,kB;;AAEA,2E;AACA,0D;AACA,2D;;AAEA,uE;AACA,yC;AACA,uD;AACA,iE;AACA,uE;AACA,kE;AACA,wD;AACA,0B;AACA,uB;AACA,O;;AAEA,iD;AACA,qB;AACA,8C;AACA,+B;AACA,4C;AACA,S;AACA,kC;AACA,+C;AACA,S;AACA,O;;AAEA,0C;AACA,gD;;AAEA,qF;AACA,oF;AACA,uF;AACA,oF;AACA,iD;AACA,wB;AACA,8B;AACA,8B;AACA,+B;AACA,6B;AACA,kE;AACA,gB;AACA,gF;AACA,0B;AACA,S;;AAEA,oD;AACA,oF;AACA,S;AACA,iF;AACA,O;;AAEA,+B;AACA,oC;;AAEA,+B;AACA,+B;AACA,gD;AACA,O;;AAEA,c;AACA,2B;AACA,oC;AACA,yB;;AAEA,uB;AACA,qC;AACA,iD;AACA,e;AACA,W;;AAEA,6B;AACA,qC;AACA,6B;AACA,uB;AACA,e;AACA,kB;AACA,2B;AACA,W;;AAEA,sB;AACA,qC;AACA,gD;AACA,e;AACA,W;;AAEA,sC;AACA,4C;AACA,6B;AACA,8B;AACA,c;AACA,gC;AACA,kC;AACA,a;AACA,a;;AAEA,mD;AACA,wB;;AAEA,wC;AACA,mC;AACA,2B;AACA,mD;AACA,qC;AACA,W;;AAEA,6C;AACA,mC;AACA,yD;AACA,oC;AACA,a;AACA,W;AACA,S;AACA,Q;;AAEA,wE;AACA,iB;AACA,wB;AACA,yB;AACA,+D;AACA,kB;;AAEA,0B;AACA,oE;AACA,kB;;AAEA,0B;AACA,mD;AACA,kB;;AAEA,6B;AACA,sD;AACA,kB;;AAEA,kB;AACA,qC;AACA,kB;AACA,S;;AAEA,2B;;AAEA,uC;AACA,oB;AACA,wC;AACA,kC;AACA,W;;AAEA,iD;AACA,+B;AACA,yC;AACA,iD;AACA,yB;AACA,W;AACA,S;;AAEA,oB;AACA,O;;AAEA,oF;AACA,4B;AACA,2C;AACA,sC;AACA,iC;;AAEA,mE;AACA,sC;AACA,uB;AACA,8B;;AAEA,iC;AACA,0D;AACA,8B;AACA,gC;AACA,kD;AACA,2C;AACA,e;AACA,c;;AAEA,0C;AACA,+B;AACA,sC;AACA,gB;AACA,kC;AACA,0C;AACA,e;AACA,e;;AAEA,qG;AACA,+C;AACA,6C;AACA,e;;AAEA,0B;AACA,a;AACA,W;;AAEA,0B;AACA,O;;AAEA,+E;AACA,6F;AACA,sC;AACA,kB;AACA,4C;AACA,yG;AACA,mG;AACA,6C;AACA,mG;AACA,6F;AACA,W;;AAEA,kB;AACA,8C;AACA,W;AACA,kB;AACA,8C;AACA,W;AACA,S;;AAEA,4C;;AAEA,0C;AACA,kD;AACA,2B;AACA,kC;AACA,qD;AACA,wC;AACA,e;AACA,W;;AAEA,+E;;AAEA,yC;AACA,+C;AACA,sD;AACA,e;AACA,Y;AACA,U;AACA,O;AACA,M;;AAEA,wC;AACA,gE;AACA,qC;AACA,8C;AACA,+B;AACA,8E;AACA,kD;AACA,wD;AACA,gC;AACA,S;AACA,O;AACA,qB;AACA,K;AACA,K;AACA,G;;AAEA,uF;AACA,wD;AACA,yF;AACA,oD;AACA,yD;AACA,oE;AACA,gE;AACA,mD;;AAEA,gB;AACA,6B;AACA,sC;;AAEA,gC;AACA,2D;AACA,a;;AAEA,8B;AACA,yD;AACA,a;;AAEA,wD;;AAEA,8C;AACA,kC;AACA,oC;AACA,e;;AAEA,0B;;AAEA,qC;AACA,iC;AACA,4D;AACA,wF;AACA,+B;AACA,mB;AACA,gB;AACA,a;;AAEA,mC;AACA,sC;AACA,a;AACA,W;AACA,U;AACA,c;AACA,kD;AACA,O;AACA,M;;AAEA,iD;AACA,uG;AACA,6C;AACA,yC;AACA,6C;AACA,6C;AACA,2D;AACA,K;AACA,K;AACA,G;;AAEA,6C;AACA,0C;AACA,8E;AACA,2B;AACA,wB;;AAEA,4B;AACA,a;AACA,e;AACA,Y;AACA,I;;AAEA,8E;AACA,8C;AACA,8D;AACA,O;AACA,G;;AAEA,8C;AACA,4B;AACA,gD;AACA,mD;AACA,iC;AACA,G;;AAEA,qE;AACA,wE;AACA,iF;AACA,K;;AAEA,qE;AACA,6E;AACA,8D;AACA,kF;AACA,K;;AAEA,qE;AACA,2E;AACA,sC;AACA,wE;AACA,K;;AAEA,qE;AACA,wG;AACA,+G;AACA,K;;AAEA,uE;AACA,4E;AACA,kE;AACA,K;;AAEA,uE;AACA,+E;AACA,wD;AACA,+E;AACA,K;;AAEA,uE;AACA,kC;AACA,sC;;AAEA,+E;AACA,iH;AACA,K;;AAEA,yF;AACA,iG;AACA,wF;AACA,kG;;AAEA,iD;AACA,iD;AACA,iC;;AAEA,8E;AACA,kF;AACA,8E;AACA,+E;AACA,4C;AACA,yE;AACA,yB;AACA,6B;AACA,0B;;AAEA,gF;AACA,mF;AACA,mF;AACA,qF;AACA,mF;AACA,qF;AACA,wC;AACA,4C;AACA,8C;AACA,0F;AACA,0E;AACA,6C;AACA,uC;AACA,a;AACA,a;AACA,W;AACA,O;AACA,M;;AAEA,8B;;AAEA,0E;AACA,uE;AACA,6D;AACA,gD;AACA,2C;AACA,qC;AACA,uD;AACA,gB;;AAEA,uE;;AAEA,0D;AACA,yD;AACA,K;;AAEA,4C;AACA,2C;;AAEA,uB;AACA,4C;AACA,oB;AACA,0C;AACA,gD;AACA,yC;AACA,W;AACA,W;AACA,O;;AAEA,qB;AACA,K;;AAEA,2D;AACA,wB;AACA,mE;AACA,yC;AACA,W;AACA,S;AACA,K;;AAEA,Y;AACA,gD;AACA,iD;AACA,gE;AACA,sC;AACA,qB;AACA,4B;AACA,W;AACA,Q;;AAEA,iD;AACA,8C;AACA,6B;;AAEA,wD;AACA,kB;AACA,+D;;AAEA,0E;AACA,iE;AACA,8C;AACA,yD;AACA,iF;AACA,4B;AACA,a;AACA,S;AACA,Q;;AAEA,6C;AACA,mE;AACA,+E;AACA,yD;AACA,Q;;AAEA,6D;AACA,gC;AACA,4C;AACA,uD;AACA,Q;;AAEA,yC;AACA,4B;AACA,gC;AACA,oC;AACA,+C;AACA,wC;AACA,wC;;AAEA,6B;AACA,+B;AACA,qC;AACA,gB;AACA,8C;;AAEA,4B;AACA,qC;AACA,iD;AACA,kB;AACA,2C;AACA,gE;;AAEA,iC;AACA,2C;AACA,mC;AACA,oB;AACA,iD;AACA,4B;AACA,0B;AACA,uD;AACA,wC;AACA,oD;AACA,e;AACA,a;AACA,W;AACA,S;;AAEA,oB;AACA,O;AACA,M;;AAEA,sD;AACA,uB;AACA,kD;AACA,oB;AACA,mC;AACA,kC;AACA,O;;AAEA,iD;;AAEA,wD;AACA,wE;AACA,yC;;AAEA,sC;AACA,sD;AACA,O;;AAEA,4D;AACA,gC;AACA,O;;AAEA,yC;AACA,4D;AACA,O;;AAEA,kE;AACA,mC;AACA,O;;AAEA,oD;AACA,4B;AACA,O;;AAEA,gD;AACA,0B;AACA,O;;AAEA,uE;AACA,qE;AACA,iE;AACA,kB;AACA,gB;AACA,sB;AACA,O;;AAEA,wF;AACA,8C;AACA,gB;AACA,sB;AACA,O;;AAEA,wE;;AAEA,2E;AACA,4E;AACA,uC;AACA,kF;AACA,0F;AACA,2D;;AAEA,8F;AACA,0F;AACA,sG;AACA,uE;AACA,O;;AAEA,2B;AACA,gB;AACA,sB;AACA,O;;AAEA,yB;AACA,sC;AACA,O;;AAEA,0B;AACA,iC;AACA,yB;AACA,qB;AACA,qB;AACA,yB;AACA,sB;AACA,Q;;AAEA,iC;AACA,4F;AACA,gC;AACA,0D;AACA,oB;AACA,0B;AACA,kB;AACA,+E;AACA,4C;AACA,W;AACA,S;;AAEA,gG;AACA,kC;AACA,0D;AACA,oE;AACA,sE;AACA,qD;AACA,2C;AACA,oD;AACA,yE;AACA,wE;AACA,kE;AACA,sC;AACA,kB;AACA,wF;AACA,4F;AACA,4C;AACA,W;AACA,gB;AACA,yF;AACA,0F;AACA,+D;AACA,8F;AACA,kC;AACA,4D;AACA,0D;AACA,oB;AACA,8F;;AAEA,mE;AACA,wG;;AAEA,6F;AACA,oD;AACA,8C;AACA,a;AACA,W;AACA,S;AACA,c;AACA,sF;AACA,gF;AACA,oD;AACA,O;;AAEA,kF;AACA,kF;AACA,+E;AACA,qD;AACA,8B;AACA,wG;AACA,sH;AACA,yE;AACA,O;;AAEA,8B;AACA,gB;AACA,4C;AACA,sB;AACA,O;;AAEA,wD;AACA,yD;AACA,qC;;AAEA,yE;;AAEA,0C;AACA,gE;AACA,mD;AACA,kD;;AAEA,iF;AACA,mF;AACA,4D;AACA,mD;;AAEA,2F;AACA,oF;AACA,uD;AACA,wE;AACA,kE;AACA,sF;;AAEA,+D;AACA,4D;AACA,8F;AACA,gE;AACA,+D;AACA,gC;AACA,mC;AACA,oD;AACA,mD;AACA,W;;AAEA,+E;AACA,oF;AACA,yF;AACA,mC;AACA,yB;AACA,W;;AAEA,+F;AACA,8F;AACA,iF;AACA,kC;AACA,gD;AACA,W;;AAEA,iB;AACA,S;;AAEA,uF;AACA,wE;AACA,mG;AACA,wB;AACA,qC;;AAEA,0D;AACA,+E;;AAEA,0C;AACA,yB;AACA,kE;AACA,yE;AACA,4D;AACA,W;AACA,qD;AACA,W;;AAEA,qE;AACA,mC;AACA,mC;AACA,mD;AACA,S;;AAEA,oB;;AAEA,2D;AACA,qD;AACA,4C;AACA,O;;AAEA,oD;AACA,gD;AACA,gD;AACA,+C;AACA,+B;AACA,iC;AACA,O;AACA,K;;AAEA,4C;AACA,qC;AACA,6E;AACA,yC;AACA,uE;AACA,iE;AACA,wB;AACA,6B;AACA,0C;AACA,+B;AACA,gC;AACA,mC;AACA,mD;AACA,a;AACA,kB;AACA,S;AACA,S;AACA,K;;AAEA,kD;AACA,qC;AACA,iD;AACA,0C;AACA,K;;AAEA,wD;AACA,+D;AACA,K;;AAEA,kE;AACA,qG;AACA,yE;AACA,0C;AACA,0B;;AAEA,yD;AACA,uB;AACA,mC;AACA,O;;AAEA,qD;AACA,mC;AACA,2F;AACA,mG;AACA,+E;AACA,S;;AAEA,0C;AACA,mD;AACA,yD;AACA,gB;AACA,S;;AAEA,mE;AACA,iE;AACA,gE;AACA,kE;AACA,uC;AACA,iG;AACA,S;;AAEA,uE;AACA,mE;AACA,iC;AACA,oC;AACA,W;AACA,S;;AAEA,gE;AACA,wE;;AAEA,mC;AACA,2F;AACA,mG;AACA,+E;AACA,qC;AACA,iE;AACA,6B;AACA,yC;AACA,a;AACA,W;AACA,S;;AAEA,mC;AACA,4F;AACA,gF;AACA,yE;AACA,S;;AAEA,+C;AACA,O;;AAEA,uE;AACA,0E;AACA,K;;AAEA,iE;AACA,8B;AACA,4B;;AAEA,qC;AACA,qD;;AAEA,sD;AACA,6B;AACA,qC;AACA,oB;AACA,iD;AACA,K;AACA,K;AACA,G;;AAEA,0D;AACA,qB;;AAEA,4B;AACA,uB;AACA,qC;AACA,sB;AACA,kD;AACA,uB;AACA,O;AACA,qB;AACA,O;AACA,G;;AAEA,qB;AACA,uB;AACA,4B;AACA,oB;AACA,O;AACA,+B;AACA,kD;AACA,M;AACA,I;AACA,G;;AAEA,oE;AACA,qE;;AAEA,wB;AACA,6B;AACA,8B;;AAEA,mD;AACA,kB;;AAEA,W;AACA,qB;AACA,mC;AACA,uB;AACA,e;AACA,O;;AAEA,uC;AACA,iC;AACA,0B;AACA,iB;AACA,S;AACA,gB;AACA,e;AACA,S;AACA,K;AACA,I;;AAEA,mD;AACA,kB;AACA,sB;AACA,uC;AACA,8B;AACA,O;;AAEA,mC;AACA,kC;AACA,uC;AACA,yB;AACA,O;AACA,K;AACA,I;;AAEA,gC;AACA,uB;;AAEA,6B;AACA,oD;AACA,oB;AACA,G;;AAEA,6B;AACA,6B;AACA,6B;AACA,M;;AAEA,wB;AACA,gD;AACA,a;AACA,c;AACA,qC;AACA,O;AACA,M;;AAEA,mB;;AAEA,4B;AACA,0B;AACA,wB;AACA,qD;AACA,sC;AACA,oD;AACA,a;AACA,W;AACA,O;AACA,0B;AACA,M;;AAEA,mD;AACA,mE;AACA,M;;AAEA,gC;AACA,iD;AACA,M;;AAEA,kC;AACA,mD;AACA,M;;AAEA,uB;AACA,4B;AACA,0B;AACA,O;AACA,M;;AAEA,wB;AACA,6B;AACA,2B;AACA,O;AACA,M;;AAEA,qB;AACA,0B;AACA,wB;AACA,O;AACA,0B;AACA,M;;AAEA,wB;AACA,6B;AACA,2B;AACA,O;AACA,2B;AACA,M;;AAEA,kC;AACA,sB;AACA,0C;AACA,yC;AACA,8C;AACA,kC;AACA,W;AACA,O;AACA,M;;AAEA,kC;AACA,gD;AACA,mD;AACA,uB;AACA,W;AACA,uC;AACA,0C;AACA,O;AACA,K;AACA,I;;AAEA,uB;AACA,G;;AAEA,2E;AACA,6C;;AAEA,kC;;AAEA,+C;;AAEA,uC;AACA,6C;AACA,G;;AAEA,kC;AACA,2C;AACA,G;;AAEA,+B;AACA,4C;AACA,G;;AAEA,uG;AACA,wG;;AAEA,4B;AACA,uE;;AAEA,yC;AACA,kC;AACA,sC;;AAEA,0D;AACA,oE;AACA,+C;AACA,sC;AACA,uD;AACA,qC;AACA,2B;AACA,sB;AACA,W;AACA,O;;AAEA,+C;AACA,mC;AACA,O;;AAEA,2B;;AAEA,mC;AACA,0C;AACA,+B;;AAEA,wC;AACA,gD;AACA,uC;;AAEA,wB;AACA,4B;AACA,+C;AACA,4B;AACA,yC;AACA,qD;AACA,a;AACA,kB;AACA,W;AACA,6C;AACA,S;;AAEA,mD;AACA,qB;AACA,O;;AAEA,8B;AACA,wB;AACA,uB;AACA,c;;AAEA,oD;AACA,uC;AACA,S;;AAEA,iD;AACA,iC;AACA,qB;;AAEA,4C;AACA,+B;AACA,2C;AACA,qD;AACA,iC;AACA,6B;AACA,qB;AACA,W;AACA,6B;AACA,uD;AACA,+B;AACA,mC;AACA,a;AACA,kC;AACA,S;;AAEA,yB;AACA,2B;AACA,S;;AAEA,sB;AACA,O;AACA,K;;AAEA,2D;AACA,8C;AACA,iD;AACA,wE;;AAEA,6D;AACA,6D;AACA,6D;AACA,2D;AACA,wC;AACA,qC;AACA,2C;AACA,S;;AAEA,4B;AACA,gB;AACA,sB;AACA,O;;AAEA,iC;;AAEA,6G;AACA,4C;AACA,wB;AACA,qC;AACA,mC;AACA,O;;AAEA,2B;AACA,mE;AACA,mC;AACA,yB;AACA,yB;AACA,qB;AACA,iC;AACA,yB;AACA,iC;AACA,oB;AACA,S;;AAEA,qD;;AAEA,4E;AACA,4E;AACA,sD;AACA,mD;;AAEA,0C;AACA,4B;AACA,iD;AACA,wE;AACA,uE;AACA,sE;AACA,yC;AACA,mC;AACA,kB;AACA,0B;AACA,W;AACA,W;;AAEA,kE;AACA,kC;;AAEA,4D;AACA,sC;;AAEA,6D;AACA,qC;AACA,4G;AACA,kD;AACA,gF;AACA,+E;AACA,sE;AACA,2C;;AAEA,mE;;AAEA,oF;AACA,oF;AACA,wD;AACA,8E;AACA,2C;;AAEA,6C;AACA,kE;AACA,gC;AACA,qD;AACA,iB;AACA,e;;AAEA,sC;AACA,0B;AACA,sB;AACA,yD;AACA,uD;AACA,mC;AACA,mB;AACA,wE;AACA,e;AACA,a;AACA,a;AACA,W;;AAEA,6E;AACA,gF;AACA,sB;AACA,6D;AACA,S;;AAEA,oB;;AAEA,gD;AACA,qC;AACA,uD;AACA,0D;AACA,sB;AACA,gD;AACA,yB;AACA,uC;AACA,4D;AACA,oC;AACA,+B;AACA,W;AACA,W;AACA,uB;AACA,O;;AAEA,4C;AACA,oC;AACA,2B;AACA,wD;AACA,0C;AACA,yC;AACA,sC;AACA,kE;AACA,6E;;AAEA,mC;AACA,wD;;AAEA,mD;AACA,iE;AACA,oD;AACA,2C;AACA,mC;AACA,uC;AACA,gB;AACA,e;AACA,kB;AACA,+C;AACA,W;AACA,W;;AAEA,mC;AACA,8B;AACA,sD;AACA,qC;AACA,iC;;AAEA,6B;AACA,kE;AACA,mE;AACA,iE;AACA,4C;AACA,+C;AACA,iD;AACA,yD;AACA,a;AACA,mB;AACA,W;;AAEA,2D;AACA,uD;AACA,sD;AACA,yC;AACA,mD;AACA,+B;AACA,uC;AACA,4C;AACA,0C;AACA,gB;AACA,iC;AACA,sC;AACA,oC;AACA,gB;AACA,0F;AACA,kC;AACA,8B;AACA,oE;AACA,c;;AAEA,6F;AACA,8F;AACA,uF;AACA,uC;AACA,6C;AACA,oB;AACA,qD;AACA,mD;AACA,a;AACA,W;;AAEA,gD;AACA,iD;AACA,a;AACA,W;;AAEA,kC;AACA,O;;AAEA,4C;AACA,yB;AACA,yB;AACA,yB;;AAEA,4C;AACA,wB;AACA,oD;;AAEA,8C;AACA,8B;AACA,+B;AACA,oB;AACA,a;AACA,W;AACA,S;;AAEA,iC;AACA,O;;AAEA,oD;AACA,oF;AACA,4E;AACA,uD;AACA,sC;AACA,sF;;AAEA,kD;AACA,iD;AACA,uB;AACA,0B;AACA,W;AACA,S;AACA,O;;AAEA,8B;AACA,+C;AACA,0B;AACA,kD;AACA,S;AACA,O;;AAEA,6D;AACA,6C;AACA,yC;AACA,uC;AACA,gB;AACA,oC;AACA,S;;AAEA,kC;AACA,gD;AACA,S;AACA,O;;AAEA,yC;AACA,wC;AACA,4E;AACA,uB;AACA,S;AACA,O;;AAEA,sD;AACA,wD;AACA,8B;;AAEA,gD;AACA,+C;AACA,+B;;AAEA,0B;AACA,qD;AACA,S;;AAEA,kD;AACA,mC;AACA,O;AACA,M;AACA,K;AACA,G;;AAEA,qC;;AAEA,kB;AACA,4B;AACA,yB;AACA,8B;AACA,0B;AACA,0B;AACA,uB;AACA,uB;AACA,8B;AACA,uB;AACA,6B;AACA,E;;AAEA,G;AACA,gB;AACA,kB;AACA,e;AACA,E;AACA,0I;AACA,+I;AACA,E;AACA,gD;AACA,E;AACA,U;AACA,sJ;AACA,0I;AACA,4I;AACA,4D;AACA,E;AACA,uB;AACA,kD;AACA,E;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,0L;AACA,E;AACA,qG;AACA,E;AACA,0B;AACA,E;AACA,uJ;AACA,oI;AACA,E;AACA,qG;AACA,E;AACA,U;AACA,kC;AACA,oB;AACA,S;AACA,iD;AACA,mD;AACA,M;AACA,E;AACA,uG;AACA,E;AACA,S;AACA,gE;AACA,mB;AACA,gC;AACA,e;AACA,I;AACA,E;AACA,iE;AACA,mC;AACA,e;AACA,I;AACA,M;AACA,E;AACA,yJ;AACA,6J;AACA,wJ;AACA,E;AACA,yJ;AACA,E;AACA,S;AACA,gF;AACA,mB;AACA,gC;AACA,e;AACA,I;AACA,mC;AACA,e;AACA,I;AACA,M;AACA,E;AACA,iH;AACA,E;AACA,S;AACA,uE;AACA,wE;AACA,mB;AACA,8C;AACA,sD;AACA,I;AACA,E;AACA,iC;AACA,wB;AACA,sB;AACA,I;AACA,E;AACA,yC;AACA,wB;AACA,sB;AACA,I;AACA,M;AACA,E;AACA,8G;AACA,E;AACA,iC;AACA,E;AACA,+I;AACA,+I;AACA,e;AACA,E;AACA,sH;AACA,E;AACA,U;AACA,oC;AACA,qB;AACA,S;AACA,+C;AACA,E;AACA,U;AACA,kB;AACA,gC;AACA,e;AACA,I;AACA,W;AACA,M;AACA,E;AACA,kJ;AACA,0G;AACA,E;AACA,sJ;AACA,mB;AACA,E;AACA,U;AACA,gD;AACA,uB;AACA,S;AACA,kD;AACA,E;AACA,U;AACA,e;AACA,gC;AACA,I;AACA,sB;AACA,sB;AACA,I;AACA,kB;AACA,uB;AACA,I;AACA,yB;AACA,sB;AACA,I;AACA,W;AACA,M;AACA,E;AACA,gF;AACA,E;AACA,E;AACA,gC;AACA,+I;AACA,0H;AACA,iH;AACA,iH;AACA,8G;AACA,E;AACA,S;AACA,2B;AACA,2C;AACA,+B;AACA,e;AACA,I;AACA,mC;AACA,uF;AACA,4B;AACA,E;AACA,sE;AACA,iF;AACA,6B;AACA,I;AACA,2C;AACA,6C;AACA,e;AACA,I;AACA,M;AACA,E;AACA,6I;AACA,wI;AACA,+H;AACA,oH;AACA,E;AACA,wF;AACA,E;AACA,Q;AACA,gC;AACA,E;AACA,6C;AACA,6C;AACA,6C;AACA,6C;AACA,6C;AACA,E;AACA,4C;AACA,+B;AACA,+C;AACA,+C;AACA,E;AACA,sB;AACA,M;AACA,M;AACA,E;AACA,iF;AACA,E;AACA,iC;AACA,E;AACA,oI;AACA,kI;AACA,E;AACA,kG;AACA,E;AACA,S;AACA,uB;AACA,gC;AACA,I;AACA,qB;AACA,e;AACA,I;AACA,qC;AACA,e;AACA,I;AACA,qB;AACA,e;AACA,I;AACA,qC;AACA,e;AACA,I;AACA,M;AACA,E;AACA,uI;AACA,kD;AACA,E;AACA,E;AACA,iC;AACA,E;AACA,mJ;AACA,kJ;AACA,sE;AACA,E;AACA,oE;AACA,E;AACA,U;AACA,gD;AACA,e;AACA,S;AACA,M;AACA,E;AACA,gJ;AACA,E;AACA,Q;AACA,6C;AACA,a;AACA,iE;AACA,kD;AACA,yC;AACA,8C;AACA,E;AACA,mD;AACA,kD;AACA,S;AACA,E;AACA,wC;AACA,8C;AACA,S;AACA,E;AACA,yC;AACA,+C;AACA,Q;AACA,M;AACA,K;AACA,M;AACA,E;AACA,qI;AACA,gC;AACA,E;AACA,wI;AACA,qH;AACA,E;AACA,U;AACA,0C;AACA,sB;AACA,S;AACA,wD;AACA,0D;AACA,4D;AACA,M;AACA,E;AACA,Q;AACA,gD;AACA,a;AACA,uD;AACA,sD;AACA,S;AACA,0D;AACA,sD;AACA,S;AACA,sE;AACA,sD;AACA,Q;AACA,M;AACA,K;AACA,M;AACA,E;AACA,kC;AACA,E;AACA,yJ;AACA,iK;AACA,6B;AACA,E;AACA,U;AACA,mC;AACA,qB;AACA,S;AACA,M;AACA,E;AACA,Q;AACA,6C;AACA,a;AACA,yC;AACA,+C;AACA,Q;AACA,M;AACA,K;AACA,M;AACA,E;AACA,S;AACA,oB;AACA,gC;AACA,kC;AACA,I;AACA,oC;AACA,6B;AACA,I;AACA,M;AACA,E;AACA,gJ;AACA,+H;AACA,mC;AACA,E;AACA,Q;AACA,uE;AACA,a;AACA,yC;AACA,6E;AACA,4C;AACA,0B;AACA,2B;AACA,oB;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,M;AACA,E;AACA,8J;AACA,E;AACA,wJ;AACA,yJ;AACA,oC;AACA,E;AACA,Q;AACA,uE;AACA,a;AACA,yC;AACA,4C;AACA,0B;AACA,4B;AACA,sC;AACA,8B;AACA,8B;AACA,oB;AACA,E;AACA,6B;AACA,Q;AACA,M;AACA,K;AACA,M;AACA,E;AACA,2D;AACA,E;AACA,S;AACA,4E;AACA,kD;AACA,E;AACA,mE;AACA,wD;AACA,sC;AACA,M;AACA,E;AACA,4J;AACA,E;AACA,8G;AACA,E;AACA,gD;AACA,E;AACA,6F;AACA,4F;AACA,2B;AACA,E;AACA,4F;AACA,mG;AACA,gG;AACA,0E;AACA,E;AACA,uD;AACA,E;AACA,U;AACA,sB;AACA,uC;AACA,S;AACA,E;AACA,qB;AACA,2B;AACA,oE;AACA,O;AACA,E;AACA,4B;AACA,kE;AACA,M;AACA,E;AACA,oF;AACA,wF;AACA,2F;AACA,wF;AACA,gC;AACA,E;AACA,wF;AACA,2F;AACA,gG;AACA,wF;AACA,E;AACA,iF;AACA,4F;AACA,mD;AACA,E;AACA,S;AACA,sB;AACA,iE;AACA,2E;AACA,gC;AACA,I;AACA,M;AACA,E;AACA,uF;AACA,8F;AACA,E;AACA,S;AACA,uD;AACA,gC;AACA,oB;AACA,Y;AACA,W;AACA,gB;AACA,I;AACA,6B;AACA,gC;AACA,I;AACA,4B;AACA,6C;AACA,8B;AACA,I;AACA,6C;AACA,iC;AACA,I;AACA,M;AACA,E;AACA,6G;AACA,0G;AACA,6F;AACA,6F;AACA,0D;AACA,E;AACA,2G;AACA,6D;AACA,E;AACA,S;AACA,0B;AACA,iC;AACA,E;AACA,+D;AACA,uE;AACA,2B;AACA,I;AACA,E;AACA,yB;AACA,+B;AACA,I;AACA,M;AACA,E;AACA,E;AACA,E;AACA,E;AACA,qB;AACA,E;AACA,oC;AACA,kC;AACA,gC;AACA,qD;AACA,6B;AACA,4B;AACA,2B;AACA,Y;AACA,kC;AACA,wC;AACA,Y;AACA,W;AACA,2B;AACA,kE;AACA,6D;AACA,oC;AACA,qC;AACA,gD;AACA,a;AACA,+C;AACA,wC;AACA,sD;AACA,a;AACA,W;AACA,kD;AACA,gC;AACA,gD;AACA,gD;AACA,+C;AACA,0C;AACA,0C;AACA,qD;AACA,gD;AACA,iD;AACA,0C;AACA,gD;AACA,Y;AACA,W;AACA,mD;AACA,iB;AACA,W;AACA,4G;AACA,oD;AACA,qD;;AAEA,oC;AACA,8B;AACA,Y;AACA,W;AACA,2B;AACA,uC;AACA,uC;AACA,uB;AACA,4C;AACA,yC;AACA,uC;AACA,0B;AACA,U;AACA,W;AACA,8B;AACA,oE;AACA,2B;AACA,Y;AACA,W;AACA,gC;AACA,e;AACA,sB;AACA,uB;AACA,O;AACA,gB;AACA,yB;AACA,oB;AACA,wB;AACA,O;AACA,uB;AACA,0B;AACA,O;AACA,0C;AACA,0B;AACA,c;AACA,e;AACA,mB;AACA,yB;AACA,O;AACA,qC;AACA,yB;AACA,mC;AACA,O;AACA,sB;AACA,mC;AACA,O;AACA,sD;AACA,iC;AACA,O;AACA,sC;AACA,oC;AACA,O;AACA,6B;AACA,uB;AACA,O;AACA,W;AACA,Y;AACA,E;AACA,sC;AACA,E;AACA,wH;AACA,sH;AACA,wH;AACA,mH;AACA,2H;AACA,wH;AACA,wH;AACA,4D;AACA,E;AACA,mC;AACA,E;AACA,8G;AACA,gH;AACA,gH;AACA,8G;AACA,iH;AACA,kH;AACA,kG;AACA,E;AACA,+G;AACA,E;AACA,E;AACA,2C;AACA,E;AACA,8J;AACA,+J;AACA,mF;AACA,E;AACA,U;AACA,yD;AACA,M;AACA,E;AACA,Q;AACA,sE;AACA,6C;AACA,iD;AACA,wF;AACA,U;AACA,Q;AACA,O;AACA,M;AACA,E;AACA,0I;AACA,wE;AACA,E;AACA,S;AACA,iF;AACA,iF;AACA,M;AACA,E;AACA,yI;AACA,+E;AACA,E;AACA,E;AACA,uD;AACA,E;AACA,iG;AACA,2G;AACA,yF;AACA,E;AACA,0F;AACA,E;AACA,S;AACA,uC;AACA,8C;AACA,8B;AACA,e;AACA,I;AACA,M;AACA,E;AACA,wD;AACA,E;AACA,Q;AACA,gD;AACA,M;AACA,E;AACA,qH;AACA,iF;AACA,E;AACA,4B;AACA,E;AACA,2I;AACA,0I;AACA,6E;AACA,E;AACA,Q;AACA,kD;AACA,oD;AACA,kC;AACA,M;AACA,M;AACA,E;AACA,gJ;AACA,Y;AACA,E;AACA,qJ;AACA,oH;AACA,wC;AACA,E;AACA,Q;AACA,8E;AACA,4D;AACA,oD;AACA,S;AACA,M;AACA,M;AACA,E;AACA,wH;AACA,G;;AAEA,G;AACA,iB;AACA,iB;AACA,e;AACA,E;AACA,e;AACA,8F;AACA,E;AACA,iF;AACA,G;AACA,+B;AACA,qC;;AAEA,6D;AACA,mD;;AAEA,qD;AACA,yD;;AAEA,qD;AACA,+C;;AAEA,+C;AACA,6D;;AAEA,+C;AACA,4D;;;AAGA,2B","file":"/packages/angular_angular-animate.js","sourcesContent":["/**\n * @license AngularJS v1.4.5\n * (c) 2010-2015 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* jshint ignore:start */\nvar noop        = angular.noop;\nvar extend      = angular.extend;\nvar jqLite      = angular.element;\nvar forEach     = angular.forEach;\nvar isArray     = angular.isArray;\nvar isString    = angular.isString;\nvar isObject    = angular.isObject;\nvar isUndefined = angular.isUndefined;\nvar isDefined   = angular.isDefined;\nvar isFunction  = angular.isFunction;\nvar isElement   = angular.isElement;\n\nvar ELEMENT_NODE = 1;\nvar COMMENT_NODE = 8;\n\nvar ADD_CLASS_SUFFIX = '-add';\nvar REMOVE_CLASS_SUFFIX = '-remove';\nvar EVENT_CLASS_PREFIX = 'ng-';\nvar ACTIVE_CLASS_SUFFIX = '-active';\n\nvar NG_ANIMATE_CLASSNAME = 'ng-animate';\nvar NG_ANIMATE_CHILDREN_DATA = '$$ngAnimateChildren';\n\n// Detect proper transitionend/animationend event names.\nvar CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;\n\n// If unprefixed events are not supported but webkit-prefixed are, use the latter.\n// Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n// Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n// but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n// Register both events in case `window.onanimationend` is not supported because of that,\n// do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n// Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n// therefore there is no reason to test anymore for other vendor prefixes:\n// http://caniuse.com/#search=transition\nif (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {\n  CSS_PREFIX = '-webkit-';\n  TRANSITION_PROP = 'WebkitTransition';\n  TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';\n} else {\n  TRANSITION_PROP = 'transition';\n  TRANSITIONEND_EVENT = 'transitionend';\n}\n\nif (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {\n  CSS_PREFIX = '-webkit-';\n  ANIMATION_PROP = 'WebkitAnimation';\n  ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';\n} else {\n  ANIMATION_PROP = 'animation';\n  ANIMATIONEND_EVENT = 'animationend';\n}\n\nvar DURATION_KEY = 'Duration';\nvar PROPERTY_KEY = 'Property';\nvar DELAY_KEY = 'Delay';\nvar TIMING_KEY = 'TimingFunction';\nvar ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';\nvar ANIMATION_PLAYSTATE_KEY = 'PlayState';\nvar SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\nvar ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\nvar ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\nvar TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\nvar TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\nvar isPromiseLike = function(p) {\n  return p && p.then ? true : false;\n};\n\nfunction assertArg(arg, name, reason) {\n  if (!arg) {\n    throw ngMinErr('areq', \"Argument '{0}' is {1}\", (name || '?'), (reason || \"required\"));\n  }\n  return arg;\n}\n\nfunction mergeClasses(a,b) {\n  if (!a && !b) return '';\n  if (!a) return b;\n  if (!b) return a;\n  if (isArray(a)) a = a.join(' ');\n  if (isArray(b)) b = b.join(' ');\n  return a + ' ' + b;\n}\n\nfunction packageStyles(options) {\n  var styles = {};\n  if (options && (options.to || options.from)) {\n    styles.to = options.to;\n    styles.from = options.from;\n  }\n  return styles;\n}\n\nfunction pendClasses(classes, fix, isPrefix) {\n  var className = '';\n  classes = isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n          ? classes.split(/\\s+/)\n          : [];\n  forEach(classes, function(klass, i) {\n    if (klass && klass.length > 0) {\n      className += (i > 0) ? ' ' : '';\n      className += isPrefix ? fix + klass\n                            : klass + fix;\n    }\n  });\n  return className;\n}\n\nfunction removeFromArray(arr, val) {\n  var index = arr.indexOf(val);\n  if (val >= 0) {\n    arr.splice(index, 1);\n  }\n}\n\nfunction stripCommentsFromElement(element) {\n  if (element instanceof jqLite) {\n    switch (element.length) {\n      case 0:\n        return [];\n        break;\n\n      case 1:\n        // there is no point of stripping anything if the element\n        // is the only element within the jqLite wrapper.\n        // (it's important that we retain the element instance.)\n        if (element[0].nodeType === ELEMENT_NODE) {\n          return element;\n        }\n        break;\n\n      default:\n        return jqLite(extractElementNode(element));\n        break;\n    }\n  }\n\n  if (element.nodeType === ELEMENT_NODE) {\n    return jqLite(element);\n  }\n}\n\nfunction extractElementNode(element) {\n  if (!element[0]) return element;\n  for (var i = 0; i < element.length; i++) {\n    var elm = element[i];\n    if (elm.nodeType == ELEMENT_NODE) {\n      return elm;\n    }\n  }\n}\n\nfunction $$addClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.addClass(elm, className);\n  });\n}\n\nfunction $$removeClass($$jqLite, element, className) {\n  forEach(element, function(elm) {\n    $$jqLite.removeClass(elm, className);\n  });\n}\n\nfunction applyAnimationClassesFactory($$jqLite) {\n  return function(element, options) {\n    if (options.addClass) {\n      $$addClass($$jqLite, element, options.addClass);\n      options.addClass = null;\n    }\n    if (options.removeClass) {\n      $$removeClass($$jqLite, element, options.removeClass);\n      options.removeClass = null;\n    }\n  }\n}\n\nfunction prepareAnimationOptions(options) {\n  options = options || {};\n  if (!options.$$prepared) {\n    var domOperation = options.domOperation || noop;\n    options.domOperation = function() {\n      options.$$domOperationFired = true;\n      domOperation();\n      domOperation = noop;\n    };\n    options.$$prepared = true;\n  }\n  return options;\n}\n\nfunction applyAnimationStyles(element, options) {\n  applyAnimationFromStyles(element, options);\n  applyAnimationToStyles(element, options);\n}\n\nfunction applyAnimationFromStyles(element, options) {\n  if (options.from) {\n    element.css(options.from);\n    options.from = null;\n  }\n}\n\nfunction applyAnimationToStyles(element, options) {\n  if (options.to) {\n    element.css(options.to);\n    options.to = null;\n  }\n}\n\nfunction mergeAnimationOptions(element, target, newOptions) {\n  var toAdd = (target.addClass || '') + ' ' + (newOptions.addClass || '');\n  var toRemove = (target.removeClass || '') + ' ' + (newOptions.removeClass || '');\n  var classes = resolveElementClasses(element.attr('class'), toAdd, toRemove);\n\n  if (newOptions.preparationClasses) {\n    target.preparationClasses = concatWithSpace(newOptions.preparationClasses, target.preparationClasses);\n    delete newOptions.preparationClasses;\n  }\n\n  // noop is basically when there is no callback; otherwise something has been set\n  var realDomOperation = target.domOperation !== noop ? target.domOperation : null;\n\n  extend(target, newOptions);\n\n  // TODO(matsko or sreeramu): proper fix is to maintain all animation callback in array and call at last,but now only leave has the callback so no issue with this.\n  if (realDomOperation) {\n    target.domOperation = realDomOperation;\n  }\n\n  if (classes.addClass) {\n    target.addClass = classes.addClass;\n  } else {\n    target.addClass = null;\n  }\n\n  if (classes.removeClass) {\n    target.removeClass = classes.removeClass;\n  } else {\n    target.removeClass = null;\n  }\n\n  return target;\n}\n\nfunction resolveElementClasses(existing, toAdd, toRemove) {\n  var ADD_CLASS = 1;\n  var REMOVE_CLASS = -1;\n\n  var flags = {};\n  existing = splitClassesToLookup(existing);\n\n  toAdd = splitClassesToLookup(toAdd);\n  forEach(toAdd, function(value, key) {\n    flags[key] = ADD_CLASS;\n  });\n\n  toRemove = splitClassesToLookup(toRemove);\n  forEach(toRemove, function(value, key) {\n    flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n  });\n\n  var classes = {\n    addClass: '',\n    removeClass: ''\n  };\n\n  forEach(flags, function(val, klass) {\n    var prop, allow;\n    if (val === ADD_CLASS) {\n      prop = 'addClass';\n      allow = !existing[klass];\n    } else if (val === REMOVE_CLASS) {\n      prop = 'removeClass';\n      allow = existing[klass];\n    }\n    if (allow) {\n      if (classes[prop].length) {\n        classes[prop] += ' ';\n      }\n      classes[prop] += klass;\n    }\n  });\n\n  function splitClassesToLookup(classes) {\n    if (isString(classes)) {\n      classes = classes.split(' ');\n    }\n\n    var obj = {};\n    forEach(classes, function(klass) {\n      // sometimes the split leaves empty string values\n      // incase extra spaces were applied to the options\n      if (klass.length) {\n        obj[klass] = true;\n      }\n    });\n    return obj;\n  }\n\n  return classes;\n}\n\nfunction getDomNode(element) {\n  return (element instanceof angular.element) ? element[0] : element;\n}\n\nfunction applyGeneratedPreparationClasses(element, event, options) {\n  var classes = '';\n  if (event) {\n    classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n  }\n  if (options.addClass) {\n    classes = concatWithSpace(classes, pendClasses(options.addClass, ADD_CLASS_SUFFIX));\n  }\n  if (options.removeClass) {\n    classes = concatWithSpace(classes, pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX));\n  }\n  if (classes.length) {\n    options.preparationClasses = classes;\n    element.addClass(classes);\n  }\n}\n\nfunction clearGeneratedClasses(element, options) {\n  if (options.preparationClasses) {\n    element.removeClass(options.preparationClasses);\n    options.preparationClasses = null;\n  }\n  if (options.activeClasses) {\n    element.removeClass(options.activeClasses);\n    options.activeClasses = null;\n  }\n}\n\nfunction blockTransitions(node, duration) {\n  // we use a negative delay value since it performs blocking\n  // yet it doesn't kill any existing transitions running on the\n  // same element which makes this safe for class-based animations\n  var value = duration ? '-' + duration + 's' : '';\n  applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n  return [TRANSITION_DELAY_PROP, value];\n}\n\nfunction blockKeyframeAnimations(node, applyBlock) {\n  var value = applyBlock ? 'paused' : '';\n  var key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n  applyInlineStyle(node, [key, value]);\n  return [key, value];\n}\n\nfunction applyInlineStyle(node, styleTuple) {\n  var prop = styleTuple[0];\n  var value = styleTuple[1];\n  node.style[prop] = value;\n}\n\nfunction concatWithSpace(a,b) {\n  if (!a) return b;\n  if (!b) return a;\n  return a + ' ' + b;\n}\n\nfunction $$BodyProvider() {\n  this.$get = ['$document', function($document) {\n    return jqLite($document[0].body);\n  }];\n}\n\nvar $$rAFSchedulerFactory = ['$$rAF', function($$rAF) {\n  var queue, cancelFn;\n\n  function scheduler(tasks) {\n    // we make a copy since RAFScheduler mutates the state\n    // of the passed in array variable and this would be difficult\n    // to track down on the outside code\n    queue = queue.concat(tasks);\n    nextTick();\n  }\n\n  queue = scheduler.queue = [];\n\n  /* waitUntilQuiet does two things:\n   * 1. It will run the FINAL `fn` value only when an uncancelled RAF has passed through\n   * 2. It will delay the next wave of tasks from running until the quiet `fn` has run.\n   *\n   * The motivation here is that animation code can request more time from the scheduler\n   * before the next wave runs. This allows for certain DOM properties such as classes to\n   * be resolved in time for the next animation to run.\n   */\n  scheduler.waitUntilQuiet = function(fn) {\n    if (cancelFn) cancelFn();\n\n    cancelFn = $$rAF(function() {\n      cancelFn = null;\n      fn();\n      nextTick();\n    });\n  };\n\n  return scheduler;\n\n  function nextTick() {\n    if (!queue.length) return;\n\n    var items = queue.shift();\n    for (var i = 0; i < items.length; i++) {\n      items[i]();\n    }\n\n    if (!cancelFn) {\n      $$rAF(function() {\n        if (!cancelFn) nextTick();\n      });\n    }\n  }\n}];\n\nvar $$AnimateChildrenDirective = [function() {\n  return function(scope, element, attrs) {\n    var val = attrs.ngAnimateChildren;\n    if (angular.isString(val) && val.length === 0) { //empty attribute\n      element.data(NG_ANIMATE_CHILDREN_DATA, true);\n    } else {\n      attrs.$observe('ngAnimateChildren', function(value) {\n        value = value === 'on' || value === 'true';\n        element.data(NG_ANIMATE_CHILDREN_DATA, value);\n      });\n    }\n  };\n}];\n\nvar ANIMATE_TIMER_KEY = '$$animateCss';\n\n/**\n * @ngdoc service\n * @name $animateCss\n * @kind object\n *\n * @description\n * The `$animateCss` service is a useful utility to trigger customized CSS-based transitions/keyframes\n * from a JavaScript-based animation or directly from a directive. The purpose of `$animateCss` is NOT\n * to side-step how `$animate` and ngAnimate work, but the goal is to allow pre-existing animations or\n * directives to create more complex animations that can be purely driven using CSS code.\n *\n * Note that only browsers that support CSS transitions and/or keyframe animations are capable of\n * rendering animations triggered via `$animateCss` (bad news for IE9 and lower).\n *\n * ## Usage\n * Once again, `$animateCss` is designed to be used inside of a registered JavaScript animation that\n * is powered by ngAnimate. It is possible to use `$animateCss` directly inside of a directive, however,\n * any automatic control over cancelling animations and/or preventing animations from being run on\n * child elements will not be handled by Angular. For this to work as expected, please use `$animate` to\n * trigger the animation and then setup a JavaScript animation that injects `$animateCss` to trigger\n * the CSS animation.\n *\n * The example below shows how we can create a folding animation on an element using `ng-if`:\n *\n * ```html\n * <!-- notice the `fold-animation` CSS class -->\n * <div ng-if=\"onOff\" class=\"fold-animation\">\n *   This element will go BOOM\n * </div>\n * <button ng-click=\"onOff=true\">Fold In</button>\n * ```\n *\n * Now we create the **JavaScript animation** that will trigger the CSS transition:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * ## More Advanced Uses\n *\n * `$animateCss` is the underlying code that ngAnimate uses to power **CSS-based animations** behind the scenes. Therefore CSS hooks\n * like `.ng-EVENT`, `.ng-EVENT-active`, `.ng-EVENT-stagger` are all features that can be triggered using `$animateCss` via JavaScript code.\n *\n * This also means that just about any combination of adding classes, removing classes, setting styles, dynamically setting a keyframe animation,\n * applying a hardcoded duration or delay value, changing the animation easing or applying a stagger animation are all options that work with\n * `$animateCss`. The service itself is smart enough to figure out the combination of options and examine the element styling properties in order\n * to provide a working animation that will run in CSS.\n *\n * The example below showcases a more advanced version of the `.fold-animation` from the example above:\n *\n * ```js\n * ngModule.animation('.fold-animation', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var height = element[0].offsetHeight;\n *       return $animateCss(element, {\n *         addClass: 'red large-text pulse-twice',\n *         easing: 'ease-out',\n *         from: { height:'0px' },\n *         to: { height:height + 'px' },\n *         duration: 1 // one second\n *       });\n *     }\n *   }\n * }]);\n * ```\n *\n * Since we're adding/removing CSS classes then the CSS transition will also pick those up:\n *\n * ```css\n * /&#42; since a hardcoded duration value of 1 was provided in the JavaScript animation code,\n * the CSS classes below will be transitioned despite them being defined as regular CSS classes &#42;/\n * .red { background:red; }\n * .large-text { font-size:20px; }\n *\n * /&#42; we can also use a keyframe animation and $animateCss will make it work alongside the transition &#42;/\n * .pulse-twice {\n *   animation: 0.5s pulse linear 2;\n *   -webkit-animation: 0.5s pulse linear 2;\n * }\n *\n * @keyframes pulse {\n *   from { transform: scale(0.5); }\n *   to { transform: scale(1.5); }\n * }\n *\n * @-webkit-keyframes pulse {\n *   from { -webkit-transform: scale(0.5); }\n *   to { -webkit-transform: scale(1.5); }\n * }\n * ```\n *\n * Given this complex combination of CSS classes, styles and options, `$animateCss` will figure everything out and make the animation happen.\n *\n * ## How the Options are handled\n *\n * `$animateCss` is very versatile and intelligent when it comes to figuring out what configurations to apply to the element to ensure the animation\n * works with the options provided. Say for example we were adding a class that contained a keyframe value and we wanted to also animate some inline\n * styles using the `from` and `to` properties.\n *\n * ```js\n * var animator = $animateCss(element, {\n *   from: { background:'red' },\n *   to: { background:'blue' }\n * });\n * animator.start();\n * ```\n *\n * ```css\n * .rotating-animation {\n *   animation:0.5s rotate linear;\n *   -webkit-animation:0.5s rotate linear;\n * }\n *\n * @keyframes rotate {\n *   from { transform: rotate(0deg); }\n *   to { transform: rotate(360deg); }\n * }\n *\n * @-webkit-keyframes rotate {\n *   from { -webkit-transform: rotate(0deg); }\n *   to { -webkit-transform: rotate(360deg); }\n * }\n * ```\n *\n * The missing pieces here are that we do not have a transition set (within the CSS code nor within the `$animateCss` options) and the duration of the animation is\n * going to be detected from what the keyframe styles on the CSS class are. In this event, `$animateCss` will automatically create an inline transition\n * style matching the duration detected from the keyframe style (which is present in the CSS class that is being added) and then prepare both the transition\n * and keyframe animations to run in parallel on the element. Then when the animation is underway the provided `from` and `to` CSS styles will be applied\n * and spread across the transition and keyframe animation.\n *\n * ## What is returned\n *\n * `$animateCss` works in two stages: a preparation phase and an animation phase. Therefore when `$animateCss` is first called it will NOT actually\n * start the animation. All that is going on here is that the element is being prepared for the animation (which means that the generated CSS classes are\n * added and removed on the element). Once `$animateCss` is called it will return an object with the following properties:\n *\n * ```js\n * var animator = $animateCss(element, { ... });\n * ```\n *\n * Now what do the contents of our `animator` variable look like:\n *\n * ```js\n * {\n *   // starts the animation\n *   start: Function,\n *\n *   // ends (aborts) the animation\n *   end: Function\n * }\n * ```\n *\n * To actually start the animation we need to run `animation.start()` which will then return a promise that we can hook into to detect when the animation ends.\n * If we choose not to run the animation then we MUST run `animation.end()` to perform a cleanup on the element (since some CSS classes and stlyes may have been\n * applied to the element during the preparation phase). Note that all other properties such as duration, delay, transitions and keyframes are just properties\n * and that changing them will not reconfigure the parameters of the animation.\n *\n * ### runner.done() vs runner.then()\n * It is documented that `animation.start()` will return a promise object and this is true, however, there is also an additional method available on the\n * runner called `.done(callbackFn)`. The done method works the same as `.finally(callbackFn)`, however, it does **not trigger a digest to occur**.\n * Therefore, for performance reasons, it's always best to use `runner.done(callback)` instead of `runner.then()`, `runner.catch()` or `runner.finally()`\n * unless you really need a digest to kick off afterwards.\n *\n * Keep in mind that, to make this easier, ngAnimate has tweaked the JS animations API to recognize when a runner instance is returned from $animateCss\n * (so there is no need to call `runner.done(doneFn)` inside of your JavaScript animation code).\n * Check the {@link ngAnimate.$animateCss#usage animation code above} to see how this works.\n *\n * @param {DOMElement} element the element that will be animated\n * @param {object} options the animation-related options that will be applied during the animation\n *\n * * `event` - The DOM event (e.g. enter, leave, move). When used, a generated CSS class of `ng-EVENT` and `ng-EVENT-active` will be applied\n * to the element during the animation. Multiple events can be provided when spaces are used as a separator. (Note that this will not perform any DOM operation.)\n * * `easing` - The CSS easing value that will be applied to the transition or keyframe animation (or both).\n * * `transition` - The raw CSS transition style that will be used (e.g. `1s linear all`).\n * * `keyframeStyle` - The raw CSS keyframe animation style that will be used (e.g. `1s my_animation linear`).\n * * `from` - The starting CSS styles (a key/value object) that will be applied at the start of the animation.\n * * `to` - The ending CSS styles (a key/value object) that will be applied across the animation via a CSS transition.\n * * `addClass` - A space separated list of CSS classes that will be added to the element and spread across the animation.\n * * `removeClass` - A space separated list of CSS classes that will be removed from the element and spread across the animation.\n * * `duration` - A number value representing the total duration of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `0`\n * is provided then the animation will be skipped entirely.\n * * `delay` - A number value representing the total delay of the transition and/or keyframe (note that a value of 1 is 1000ms). If a value of `true` is\n * used then whatever delay value is detected from the CSS classes will be mirrored on the elements styles (e.g. by setting delay true then the style value\n * of the element will be `transition-delay: DETECTED_VALUE`). Using `true` is useful when you want the CSS classes and inline styles to all share the same\n * CSS delay value.\n * * `stagger` - A numeric time value representing the delay between successively animated elements\n * ({@link ngAnimate#css-staggering-animations Click here to learn how CSS-based staggering works in ngAnimate.})\n * * `staggerIndex` - The numeric index representing the stagger item (e.g. a value of 5 is equal to the sixth item in the stagger; therefore when a\n * * `stagger` option value of `0.1` is used then there will be a stagger delay of `600ms`)\n * * `applyClassesEarly` - Whether or not the classes being added or removed will be used when detecting the animation. This is set by `$animate` when enter/leave/move animations are fired to ensure that the CSS classes are resolved in time. (Note that this will prevent any transitions from occuring on the classes being added and removed.)\n *\n * @return {object} an object with start and end methods and details about the animation.\n *\n * * `start` - The method to start the animation. This will return a `Promise` when called.\n * * `end` - This method will cancel the animation and remove all applied CSS classes and styles.\n */\nvar ONE_SECOND = 1000;\nvar BASE_TEN = 10;\n\nvar ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\nvar CLOSING_TIME_BUFFER = 1.5;\n\nvar DETECT_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  transitionProperty:      TRANSITION_PROP + PROPERTY_KEY,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP,\n  animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY\n};\n\nvar DETECT_STAGGER_CSS_PROPERTIES = {\n  transitionDuration:      TRANSITION_DURATION_PROP,\n  transitionDelay:         TRANSITION_DELAY_PROP,\n  animationDuration:       ANIMATION_DURATION_PROP,\n  animationDelay:          ANIMATION_DELAY_PROP\n};\n\nfunction getCssKeyframeDurationStyle(duration) {\n  return [ANIMATION_DURATION_PROP, duration + 's'];\n}\n\nfunction getCssDelayStyle(delay, isKeyframeAnimation) {\n  var prop = isKeyframeAnimation ? ANIMATION_DELAY_PROP : TRANSITION_DELAY_PROP;\n  return [prop, delay + 's'];\n}\n\nfunction computeCssStyles($window, element, properties) {\n  var styles = Object.create(null);\n  var detectedStyles = $window.getComputedStyle(element) || {};\n  forEach(properties, function(formalStyleName, actualStyleName) {\n    var val = detectedStyles[formalStyleName];\n    if (val) {\n      var c = val.charAt(0);\n\n      // only numerical-based values have a negative sign or digit as the first value\n      if (c === '-' || c === '+' || c >= 0) {\n        val = parseMaxTime(val);\n      }\n\n      // by setting this to null in the event that the delay is not set or is set directly as 0\n      // then we can still allow for zegative values to be used later on and not mistake this\n      // value for being greater than any other negative value.\n      if (val === 0) {\n        val = null;\n      }\n      styles[actualStyleName] = val;\n    }\n  });\n\n  return styles;\n}\n\nfunction parseMaxTime(str) {\n  var maxValue = 0;\n  var values = str.split(/\\s*,\\s*/);\n  forEach(values, function(value) {\n    // it's always safe to consider only second values and omit `ms` values since\n    // getComputedStyle will always handle the conversion for us\n    if (value.charAt(value.length - 1) == 's') {\n      value = value.substring(0, value.length - 1);\n    }\n    value = parseFloat(value) || 0;\n    maxValue = maxValue ? Math.max(value, maxValue) : value;\n  });\n  return maxValue;\n}\n\nfunction truthyTimingValue(val) {\n  return val === 0 || val != null;\n}\n\nfunction getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n  var style = TRANSITION_PROP;\n  var value = duration + 's';\n  if (applyOnlyDuration) {\n    style += DURATION_KEY;\n  } else {\n    value += ' linear all';\n  }\n  return [style, value];\n}\n\nfunction createLocalCacheLookup() {\n  var cache = Object.create(null);\n  return {\n    flush: function() {\n      cache = Object.create(null);\n    },\n\n    count: function(key) {\n      var entry = cache[key];\n      return entry ? entry.total : 0;\n    },\n\n    get: function(key) {\n      var entry = cache[key];\n      return entry && entry.value;\n    },\n\n    put: function(key, value) {\n      if (!cache[key]) {\n        cache[key] = { total: 1, value: value };\n      } else {\n        cache[key].total++;\n      }\n    }\n  };\n}\n\nvar $AnimateCssProvider = ['$animateProvider', function($animateProvider) {\n  var gcsLookup = createLocalCacheLookup();\n  var gcsStaggerLookup = createLocalCacheLookup();\n\n  this.$get = ['$window', '$$jqLite', '$$AnimateRunner', '$timeout',\n               '$$forceReflow', '$sniffer', '$$rAFScheduler', '$animate',\n       function($window,   $$jqLite,   $$AnimateRunner,   $timeout,\n                $$forceReflow,   $sniffer,   $$rAFScheduler, $animate) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    var parentCounter = 0;\n    function gcsHashFn(node, extraClasses) {\n      var KEY = \"$$ngAnimateParentKey\";\n      var parentNode = node.parentNode;\n      var parentID = parentNode[KEY] || (parentNode[KEY] = ++parentCounter);\n      return parentID + '-' + node.getAttribute('class') + '-' + extraClasses;\n    }\n\n    function computeCachedCssStyles(node, className, cacheKey, properties) {\n      var timings = gcsLookup.get(cacheKey);\n\n      if (!timings) {\n        timings = computeCssStyles($window, node, properties);\n        if (timings.animationIterationCount === 'infinite') {\n          timings.animationIterationCount = 1;\n        }\n      }\n\n      // we keep putting this in multiple times even though the value and the cacheKey are the same\n      // because we're keeping an interal tally of how many duplicate animations are detected.\n      gcsLookup.put(cacheKey, timings);\n      return timings;\n    }\n\n    function computeCachedCssStaggerStyles(node, className, cacheKey, properties) {\n      var stagger;\n\n      // if we have one or more existing matches of matching elements\n      // containing the same parent + CSS styles (which is how cacheKey works)\n      // then staggering is possible\n      if (gcsLookup.count(cacheKey) > 0) {\n        stagger = gcsStaggerLookup.get(cacheKey);\n\n        if (!stagger) {\n          var staggerClassName = pendClasses(className, '-stagger');\n\n          $$jqLite.addClass(node, staggerClassName);\n\n          stagger = computeCssStyles($window, node, properties);\n\n          // force the conversion of a null value to zero incase not set\n          stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n          stagger.transitionDuration = Math.max(stagger.transitionDuration, 0);\n\n          $$jqLite.removeClass(node, staggerClassName);\n\n          gcsStaggerLookup.put(cacheKey, stagger);\n        }\n      }\n\n      return stagger || {};\n    }\n\n    var cancelLastRAFRequest;\n    var rafWaitQueue = [];\n    function waitUntilQuiet(callback) {\n      rafWaitQueue.push(callback);\n      $$rAFScheduler.waitUntilQuiet(function() {\n        gcsLookup.flush();\n        gcsStaggerLookup.flush();\n\n        // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n        // PLEASE EXAMINE THE `$$forceReflow` service to understand why.\n        var pageWidth = $$forceReflow();\n\n        // we use a for loop to ensure that if the queue is changed\n        // during this looping then it will consider new requests\n        for (var i = 0; i < rafWaitQueue.length; i++) {\n          rafWaitQueue[i](pageWidth);\n        }\n        rafWaitQueue.length = 0;\n      });\n    }\n\n    function computeTimings(node, className, cacheKey) {\n      var timings = computeCachedCssStyles(node, className, cacheKey, DETECT_CSS_PROPERTIES);\n      var aD = timings.animationDelay;\n      var tD = timings.transitionDelay;\n      timings.maxDelay = aD && tD\n          ? Math.max(aD, tD)\n          : (aD || tD);\n      timings.maxDuration = Math.max(\n          timings.animationDuration * timings.animationIterationCount,\n          timings.transitionDuration);\n\n      return timings;\n    }\n\n    return function init(element, options) {\n      var node = getDomNode(element);\n      if (!node\n          || !node.parentNode\n          || !$animate.enabled()) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      options = prepareAnimationOptions(options);\n\n      var temporaryStyles = [];\n      var classes = element.attr('class');\n      var styles = packageStyles(options);\n      var animationClosed;\n      var animationPaused;\n      var animationCompleted;\n      var runner;\n      var runnerHost;\n      var maxDelay;\n      var maxDelayTime;\n      var maxDuration;\n      var maxDurationTime;\n\n      if (options.duration === 0 || (!$sniffer.animations && !$sniffer.transitions)) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var method = options.event && isArray(options.event)\n            ? options.event.join(' ')\n            : options.event;\n\n      var isStructural = method && options.structural;\n      var structuralClassName = '';\n      var addRemoveClassName = '';\n\n      if (isStructural) {\n        structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n      } else if (method) {\n        structuralClassName = method;\n      }\n\n      if (options.addClass) {\n        addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n      }\n\n      if (options.removeClass) {\n        if (addRemoveClassName.length) {\n          addRemoveClassName += ' ';\n        }\n        addRemoveClassName += pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX);\n      }\n\n      // there may be a situation where a structural animation is combined together\n      // with CSS classes that need to resolve before the animation is computed.\n      // However this means that there is no explicit CSS code to block the animation\n      // from happening (by setting 0s none in the class name). If this is the case\n      // we need to apply the classes before the first rAF so we know to continue if\n      // there actually is a detected transition or keyframe animation\n      if (options.applyClassesEarly && addRemoveClassName.length) {\n        applyAnimationClasses(element, options);\n      }\n\n      var preparationClasses = [structuralClassName, addRemoveClassName].join(' ').trim();\n      var fullClassName = classes + ' ' + preparationClasses;\n      var activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n      var hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n      var containsKeyframeAnimation = (options.keyframeStyle || '').length > 0;\n\n      // there is no way we can trigger an animation if no styles and\n      // no classes are being applied which would then trigger a transition,\n      // unless there a is raw keyframe value that is applied to the element.\n      if (!containsKeyframeAnimation\n           && !hasToStyles\n           && !preparationClasses) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      var cacheKey, stagger;\n      if (options.stagger > 0) {\n        var staggerVal = parseFloat(options.stagger);\n        stagger = {\n          transitionDelay: staggerVal,\n          animationDelay: staggerVal,\n          transitionDuration: 0,\n          animationDuration: 0\n        };\n      } else {\n        cacheKey = gcsHashFn(node, fullClassName);\n        stagger = computeCachedCssStaggerStyles(node, preparationClasses, cacheKey, DETECT_STAGGER_CSS_PROPERTIES);\n      }\n\n      if (!options.$$skipPreparationClasses) {\n        $$jqLite.addClass(element, preparationClasses);\n      }\n\n      var applyOnlyDuration;\n\n      if (options.transitionStyle) {\n        var transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n        applyInlineStyle(node, transitionStyle);\n        temporaryStyles.push(transitionStyle);\n      }\n\n      if (options.duration >= 0) {\n        applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n        var durationStyle = getCssTransitionDurationStyle(options.duration, applyOnlyDuration);\n\n        // we set the duration so that it will be picked up by getComputedStyle later\n        applyInlineStyle(node, durationStyle);\n        temporaryStyles.push(durationStyle);\n      }\n\n      if (options.keyframeStyle) {\n        var keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n        applyInlineStyle(node, keyframeStyle);\n        temporaryStyles.push(keyframeStyle);\n      }\n\n      var itemIndex = stagger\n          ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : gcsLookup.count(cacheKey)\n          : 0;\n\n      var isFirst = itemIndex === 0;\n\n      // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n      // without causing any combination of transitions to kick in. By adding a negative delay value\n      // it forces the setup class' transition to end immediately. We later then remove the negative\n      // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n      // that if there is no transition defined then nothing will happen and this will also allow\n      // other transitions to be stacked on top of each other without any chopping them out.\n      if (isFirst && !options.skipBlocking) {\n        blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n      }\n\n      var timings = computeTimings(node, fullClassName, cacheKey);\n      var relativeDelay = timings.maxDelay;\n      maxDelay = Math.max(relativeDelay, 0);\n      maxDuration = timings.maxDuration;\n\n      var flags = {};\n      flags.hasTransitions          = timings.transitionDuration > 0;\n      flags.hasAnimations           = timings.animationDuration > 0;\n      flags.hasTransitionAll        = flags.hasTransitions && timings.transitionProperty == 'all';\n      flags.applyTransitionDuration = hasToStyles && (\n                                        (flags.hasTransitions && !flags.hasTransitionAll)\n                                         || (flags.hasAnimations && !flags.hasTransitions));\n      flags.applyAnimationDuration  = options.duration && flags.hasAnimations;\n      flags.applyTransitionDelay    = truthyTimingValue(options.delay) && (flags.applyTransitionDuration || flags.hasTransitions);\n      flags.applyAnimationDelay     = truthyTimingValue(options.delay) && flags.hasAnimations;\n      flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n      if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n        maxDuration = options.duration ? parseFloat(options.duration) : maxDuration;\n\n        if (flags.applyTransitionDuration) {\n          flags.hasTransitions = true;\n          timings.transitionDuration = maxDuration;\n          applyOnlyDuration = node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n          temporaryStyles.push(getCssTransitionDurationStyle(maxDuration, applyOnlyDuration));\n        }\n\n        if (flags.applyAnimationDuration) {\n          flags.hasAnimations = true;\n          timings.animationDuration = maxDuration;\n          temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n        }\n      }\n\n      if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n        return closeAndReturnNoopAnimator();\n      }\n\n      if (options.delay != null) {\n        var delayStyle = parseFloat(options.delay);\n\n        if (flags.applyTransitionDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle));\n        }\n\n        if (flags.applyAnimationDelay) {\n          temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n        }\n      }\n\n      // we need to recalculate the delay value since we used a pre-emptive negative\n      // delay value and the delay value is required for the final event checking. This\n      // property will ensure that this will happen after the RAF phase has passed.\n      if (options.duration == null && timings.transitionDuration > 0) {\n        flags.recalculateTimingStyles = flags.recalculateTimingStyles || isFirst;\n      }\n\n      maxDelayTime = maxDelay * ONE_SECOND;\n      maxDurationTime = maxDuration * ONE_SECOND;\n      if (!options.skipBlocking) {\n        flags.blockTransition = timings.transitionDuration > 0;\n        flags.blockKeyframeAnimation = timings.animationDuration > 0 &&\n                                       stagger.animationDelay > 0 &&\n                                       stagger.animationDuration === 0;\n      }\n\n      applyAnimationFromStyles(element, options);\n\n      if (flags.blockTransition || flags.blockKeyframeAnimation) {\n        applyBlocking(maxDuration);\n      } else if (!options.skipBlocking) {\n        blockTransitions(node, false);\n      }\n\n      // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n      return {\n        $$willAnimate: true,\n        end: endFn,\n        start: function() {\n          if (animationClosed) return;\n\n          runnerHost = {\n            end: endFn,\n            cancel: cancelFn,\n            resume: null, //this will be set during the start() phase\n            pause: null\n          };\n\n          runner = new $$AnimateRunner(runnerHost);\n\n          waitUntilQuiet(start);\n\n          // we don't have access to pause/resume the animation\n          // since it hasn't run yet. AnimateRunner will therefore\n          // set noop functions for resume and pause and they will\n          // later be overridden once the animation is triggered\n          return runner;\n        }\n      };\n\n      function endFn() {\n        close();\n      }\n\n      function cancelFn() {\n        close(true);\n      }\n\n      function close(rejected) { // jshint ignore:line\n        // if the promise has been called already then we shouldn't close\n        // the animation again\n        if (animationClosed || (animationCompleted && animationPaused)) return;\n        animationClosed = true;\n        animationPaused = false;\n\n        if (!options.$$skipPreparationClasses) {\n          $$jqLite.removeClass(element, preparationClasses);\n        }\n        $$jqLite.removeClass(element, activeClasses);\n\n        blockKeyframeAnimations(node, false);\n        blockTransitions(node, false);\n\n        forEach(temporaryStyles, function(entry) {\n          // There is only one way to remove inline style properties entirely from elements.\n          // By using `removeProperty` this works, but we need to convert camel-cased CSS\n          // styles down to hyphenated values.\n          node.style[entry[0]] = '';\n        });\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n\n        // the reason why we have this option is to allow a synchronous closing callback\n        // that is fired as SOON as the animation ends (when the CSS is removed) or if\n        // the animation never takes off at all. A good example is a leave animation since\n        // the element must be removed just after the animation is over or else the element\n        // will appear on screen for one animation frame causing an overbearing flicker.\n        if (options.onDone) {\n          options.onDone();\n        }\n\n        // if the preparation function fails then the promise is not setup\n        if (runner) {\n          runner.complete(!rejected);\n        }\n      }\n\n      function applyBlocking(duration) {\n        if (flags.blockTransition) {\n          blockTransitions(node, duration);\n        }\n\n        if (flags.blockKeyframeAnimation) {\n          blockKeyframeAnimations(node, !!duration);\n        }\n      }\n\n      function closeAndReturnNoopAnimator() {\n        runner = new $$AnimateRunner({\n          end: endFn,\n          cancel: cancelFn\n        });\n\n        // should flush the cache animation\n        waitUntilQuiet(noop);\n        close();\n\n        return {\n          $$willAnimate: false,\n          start: function() {\n            return runner;\n          },\n          end: endFn\n        };\n      }\n\n      function start() {\n        if (animationClosed) return;\n        if (!node.parentNode) {\n          close();\n          return;\n        }\n\n        var startTime, events = [];\n\n        // even though we only pause keyframe animations here the pause flag\n        // will still happen when transitions are used. Only the transition will\n        // not be paused since that is not possible. If the animation ends when\n        // paused then it will not complete until unpaused or cancelled.\n        var playPause = function(playAnimation) {\n          if (!animationCompleted) {\n            animationPaused = !playAnimation;\n            if (timings.animationDuration) {\n              var value = blockKeyframeAnimations(node, animationPaused);\n              animationPaused\n                  ? temporaryStyles.push(value)\n                  : removeFromArray(temporaryStyles, value);\n            }\n          } else if (animationPaused && playAnimation) {\n            animationPaused = false;\n            close();\n          }\n        };\n\n        // checking the stagger duration prevents an accidently cascade of the CSS delay style\n        // being inherited from the parent. If the transition duration is zero then we can safely\n        // rely that the delay value is an intential stagger delay style.\n        var maxStagger = itemIndex > 0\n                         && ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                            (timings.animationDuration && stagger.animationDuration === 0))\n                         && Math.max(stagger.animationDelay, stagger.transitionDelay);\n        if (maxStagger) {\n          $timeout(triggerAnimationStart,\n                   Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                   false);\n        } else {\n          triggerAnimationStart();\n        }\n\n        // this will decorate the existing promise runner with pause/resume methods\n        runnerHost.resume = function() {\n          playPause(true);\n        };\n\n        runnerHost.pause = function() {\n          playPause(false);\n        };\n\n        function triggerAnimationStart() {\n          // just incase a stagger animation kicks in when the animation\n          // itself was cancelled entirely\n          if (animationClosed) return;\n\n          applyBlocking(false);\n\n          forEach(temporaryStyles, function(entry) {\n            var key = entry[0];\n            var value = entry[1];\n            node.style[key] = value;\n          });\n\n          applyAnimationClasses(element, options);\n          $$jqLite.addClass(element, activeClasses);\n\n          if (flags.recalculateTimingStyles) {\n            fullClassName = node.className + ' ' + preparationClasses;\n            cacheKey = gcsHashFn(node, fullClassName);\n\n            timings = computeTimings(node, fullClassName, cacheKey);\n            relativeDelay = timings.maxDelay;\n            maxDelay = Math.max(relativeDelay, 0);\n            maxDuration = timings.maxDuration;\n\n            if (maxDuration === 0) {\n              close();\n              return;\n            }\n\n            flags.hasTransitions = timings.transitionDuration > 0;\n            flags.hasAnimations = timings.animationDuration > 0;\n          }\n\n          if (flags.applyAnimationDelay) {\n            relativeDelay = typeof options.delay !== \"boolean\" && truthyTimingValue(options.delay)\n                  ? parseFloat(options.delay)\n                  : relativeDelay;\n\n            maxDelay = Math.max(relativeDelay, 0);\n            timings.animationDelay = relativeDelay;\n            delayStyle = getCssDelayStyle(relativeDelay, true);\n            temporaryStyles.push(delayStyle);\n            node.style[delayStyle[0]] = delayStyle[1];\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n\n          if (options.easing) {\n            var easeProp, easeVal = options.easing;\n            if (flags.hasTransitions) {\n              easeProp = TRANSITION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n            if (flags.hasAnimations) {\n              easeProp = ANIMATION_PROP + TIMING_KEY;\n              temporaryStyles.push([easeProp, easeVal]);\n              node.style[easeProp] = easeVal;\n            }\n          }\n\n          if (timings.transitionDuration) {\n            events.push(TRANSITIONEND_EVENT);\n          }\n\n          if (timings.animationDuration) {\n            events.push(ANIMATIONEND_EVENT);\n          }\n\n          startTime = Date.now();\n          var timerTime = maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n          var endTime = startTime + timerTime;\n\n          var animationsData = element.data(ANIMATE_TIMER_KEY) || [];\n          var setupFallbackTimer = true;\n          if (animationsData.length) {\n            var currentTimerData = animationsData[0];\n            setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n            if (setupFallbackTimer) {\n              $timeout.cancel(currentTimerData.timer);\n            } else {\n              animationsData.push(close);\n            }\n          }\n\n          if (setupFallbackTimer) {\n            var timer = $timeout(onAnimationExpired, timerTime, false);\n            animationsData[0] = {\n              timer: timer,\n              expectedEndTime: endTime\n            };\n            animationsData.push(close);\n            element.data(ANIMATE_TIMER_KEY, animationsData);\n          }\n\n          element.on(events.join(' '), onAnimationProgress);\n          applyAnimationToStyles(element, options);\n        }\n\n        function onAnimationExpired() {\n          var animationsData = element.data(ANIMATE_TIMER_KEY);\n\n          // this will be false in the event that the element was\n          // removed from the DOM (via a leave animation or something\n          // similar)\n          if (animationsData) {\n            for (var i = 1; i < animationsData.length; i++) {\n              animationsData[i]();\n            }\n            element.removeData(ANIMATE_TIMER_KEY);\n          }\n        }\n\n        function onAnimationProgress(event) {\n          event.stopPropagation();\n          var ev = event.originalEvent || event;\n          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();\n\n          /* Firefox (or possibly just Gecko) likes to not round values up\n           * when a ms measurement is used for the animation */\n          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));\n\n          /* $manualTimeStamp is a mocked timeStamp value which is set\n           * within browserTrigger(). This is only here so that tests can\n           * mock animations properly. Real events fallback to event.timeStamp,\n           * or, if they don't, then a timeStamp is automatically created for them.\n           * We're checking to see if the timeStamp surpasses the expected delay,\n           * but we're using elapsedTime instead of the timeStamp on the 2nd\n           * pre-condition since animations sometimes close off early */\n          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {\n            // we set this flag to ensure that if the transition is paused then, when resumed,\n            // the animation will automatically close itself since transitions cannot be paused.\n            animationCompleted = true;\n            close();\n          }\n        }\n      }\n    };\n  }];\n}];\n\nvar $$AnimateCssDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateCssDriver');\n\n  var NG_ANIMATE_SHIM_CLASS_NAME = 'ng-animate-shim';\n  var NG_ANIMATE_ANCHOR_CLASS_NAME = 'ng-anchor';\n\n  var NG_OUT_ANCHOR_CLASS_NAME = 'ng-anchor-out';\n  var NG_IN_ANCHOR_CLASS_NAME = 'ng-anchor-in';\n\n  this.$get = ['$animateCss', '$rootScope', '$$AnimateRunner', '$rootElement', '$$body', '$sniffer', '$$jqLite',\n       function($animateCss,   $rootScope,   $$AnimateRunner,   $rootElement,   $$body,   $sniffer,   $$jqLite) {\n\n    // only browsers that support these properties can render animations\n    if (!$sniffer.animations && !$sniffer.transitions) return noop;\n\n    var bodyNode = getDomNode($$body);\n    var rootNode = getDomNode($rootElement);\n\n    var rootBodyElement = jqLite(bodyNode.parentNode === rootNode ? bodyNode : rootNode);\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    return function initDriverFn(animationDetails) {\n      return animationDetails.from && animationDetails.to\n          ? prepareFromToAnchorAnimation(animationDetails.from,\n                                         animationDetails.to,\n                                         animationDetails.classes,\n                                         animationDetails.anchors)\n          : prepareRegularAnimation(animationDetails);\n    };\n\n    function filterCssClasses(classes) {\n      //remove all the `ng-` stuff\n      return classes.replace(/\\bng-\\S+\\b/g, '');\n    }\n\n    function getUniqueValues(a, b) {\n      if (isString(a)) a = a.split(' ');\n      if (isString(b)) b = b.split(' ');\n      return a.filter(function(val) {\n        return b.indexOf(val) === -1;\n      }).join(' ');\n    }\n\n    function prepareAnchoredAnimation(classes, outAnchor, inAnchor) {\n      var clone = jqLite(getDomNode(outAnchor).cloneNode(true));\n      var startingClasses = filterCssClasses(getClassVal(clone));\n\n      outAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      inAnchor.addClass(NG_ANIMATE_SHIM_CLASS_NAME);\n\n      clone.addClass(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n      rootBodyElement.append(clone);\n\n      var animatorIn, animatorOut = prepareOutAnimation();\n\n      // the user may not end up using the `out` animation and\n      // only making use of the `in` animation or vice-versa.\n      // In either case we should allow this and not assume the\n      // animation is over unless both animations are not used.\n      if (!animatorOut) {\n        animatorIn = prepareInAnimation();\n        if (!animatorIn) {\n          return end();\n        }\n      }\n\n      var startingAnimator = animatorOut || animatorIn;\n\n      return {\n        start: function() {\n          var runner;\n\n          var currentAnimation = startingAnimator.start();\n          currentAnimation.done(function() {\n            currentAnimation = null;\n            if (!animatorIn) {\n              animatorIn = prepareInAnimation();\n              if (animatorIn) {\n                currentAnimation = animatorIn.start();\n                currentAnimation.done(function() {\n                  currentAnimation = null;\n                  end();\n                  runner.complete();\n                });\n                return currentAnimation;\n              }\n            }\n            // in the event that there is no `in` animation\n            end();\n            runner.complete();\n          });\n\n          runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn\n          });\n\n          return runner;\n\n          function endFn() {\n            if (currentAnimation) {\n              currentAnimation.end();\n            }\n          }\n        }\n      };\n\n      function calculateAnchorStyles(anchor) {\n        var styles = {};\n\n        var coords = getDomNode(anchor).getBoundingClientRect();\n\n        // we iterate directly since safari messes up and doesn't return\n        // all the keys for the coods object when iterated\n        forEach(['width','height','top','left'], function(key) {\n          var value = coords[key];\n          switch (key) {\n            case 'top':\n              value += bodyNode.scrollTop;\n              break;\n            case 'left':\n              value += bodyNode.scrollLeft;\n              break;\n          }\n          styles[key] = Math.floor(value) + 'px';\n        });\n        return styles;\n      }\n\n      function prepareOutAnimation() {\n        var animator = $animateCss(clone, {\n          addClass: NG_OUT_ANCHOR_CLASS_NAME,\n          delay: true,\n          from: calculateAnchorStyles(outAnchor)\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function getClassVal(element) {\n        return element.attr('class') || '';\n      }\n\n      function prepareInAnimation() {\n        var endingClasses = filterCssClasses(getClassVal(inAnchor));\n        var toAdd = getUniqueValues(endingClasses, startingClasses);\n        var toRemove = getUniqueValues(startingClasses, endingClasses);\n\n        var animator = $animateCss(clone, {\n          to: calculateAnchorStyles(inAnchor),\n          addClass: NG_IN_ANCHOR_CLASS_NAME + ' ' + toAdd,\n          removeClass: NG_OUT_ANCHOR_CLASS_NAME + ' ' + toRemove,\n          delay: true\n        });\n\n        // read the comment within `prepareRegularAnimation` to understand\n        // why this check is necessary\n        return animator.$$willAnimate ? animator : null;\n      }\n\n      function end() {\n        clone.remove();\n        outAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n        inAnchor.removeClass(NG_ANIMATE_SHIM_CLASS_NAME);\n      }\n    }\n\n    function prepareFromToAnchorAnimation(from, to, classes, anchors) {\n      var fromAnimation = prepareRegularAnimation(from, noop);\n      var toAnimation = prepareRegularAnimation(to, noop);\n\n      var anchorAnimations = [];\n      forEach(anchors, function(anchor) {\n        var outElement = anchor['out'];\n        var inElement = anchor['in'];\n        var animator = prepareAnchoredAnimation(classes, outElement, inElement);\n        if (animator) {\n          anchorAnimations.push(animator);\n        }\n      });\n\n      // no point in doing anything when there are no elements to animate\n      if (!fromAnimation && !toAnimation && anchorAnimations.length === 0) return;\n\n      return {\n        start: function() {\n          var animationRunners = [];\n\n          if (fromAnimation) {\n            animationRunners.push(fromAnimation.start());\n          }\n\n          if (toAnimation) {\n            animationRunners.push(toAnimation.start());\n          }\n\n          forEach(anchorAnimations, function(animation) {\n            animationRunners.push(animation.start());\n          });\n\n          var runner = new $$AnimateRunner({\n            end: endFn,\n            cancel: endFn // CSS-driven animations cannot be cancelled, only ended\n          });\n\n          $$AnimateRunner.all(animationRunners, function(status) {\n            runner.complete(status);\n          });\n\n          return runner;\n\n          function endFn() {\n            forEach(animationRunners, function(runner) {\n              runner.end();\n            });\n          }\n        }\n      };\n    }\n\n    function prepareRegularAnimation(animationDetails) {\n      var element = animationDetails.element;\n      var options = animationDetails.options || {};\n\n      if (animationDetails.structural) {\n        options.event = animationDetails.event;\n        options.structural = true;\n        options.applyClassesEarly = true;\n\n        // we special case the leave animation since we want to ensure that\n        // the element is removed as soon as the animation is over. Otherwise\n        // a flicker might appear or the element may not be removed at all\n        if (animationDetails.event === 'leave') {\n          options.onDone = options.domOperation;\n        }\n      }\n\n      // We assign the preparationClasses as the actual animation event since\n      // the internals of $animateCss will just suffix the event token values\n      // with `-active` to trigger the animation.\n      if (options.preparationClasses) {\n        options.event = concatWithSpace(options.event, options.preparationClasses);\n      }\n\n      var animator = $animateCss(element, options);\n\n      // the driver lookup code inside of $$animation attempts to spawn a\n      // driver one by one until a driver returns a.$$willAnimate animator object.\n      // $animateCss will always return an object, however, it will pass in\n      // a flag as a hint as to whether an animation was detected or not\n      return animator.$$willAnimate ? animator : null;\n    }\n  }];\n}];\n\n// TODO(matsko): use caching here to speed things up for detection\n// TODO(matsko): add documentation\n//  by the time...\n\nvar $$AnimateJsProvider = ['$animateProvider', function($animateProvider) {\n  this.$get = ['$injector', '$$AnimateRunner', '$$jqLite',\n       function($injector,   $$AnimateRunner,   $$jqLite) {\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n         // $animateJs(element, 'enter');\n    return function(element, event, classes, options) {\n      // the `classes` argument is optional and if it is not used\n      // then the classes will be resolved from the element's className\n      // property as well as options.addClass/options.removeClass.\n      if (arguments.length === 3 && isObject(classes)) {\n        options = classes;\n        classes = null;\n      }\n\n      options = prepareAnimationOptions(options);\n      if (!classes) {\n        classes = element.attr('class') || '';\n        if (options.addClass) {\n          classes += ' ' + options.addClass;\n        }\n        if (options.removeClass) {\n          classes += ' ' + options.removeClass;\n        }\n      }\n\n      var classesToAdd = options.addClass;\n      var classesToRemove = options.removeClass;\n\n      // the lookupAnimations function returns a series of animation objects that are\n      // matched up with one or more of the CSS classes. These animation objects are\n      // defined via the module.animation factory function. If nothing is detected then\n      // we don't return anything which then makes $animation query the next driver.\n      var animations = lookupAnimations(classes);\n      var before, after;\n      if (animations.length) {\n        var afterFn, beforeFn;\n        if (event == 'leave') {\n          beforeFn = 'leave';\n          afterFn = 'afterLeave'; // TODO(matsko): get rid of this\n        } else {\n          beforeFn = 'before' + event.charAt(0).toUpperCase() + event.substr(1);\n          afterFn = event;\n        }\n\n        if (event !== 'enter' && event !== 'move') {\n          before = packageAnimations(element, event, options, animations, beforeFn);\n        }\n        after  = packageAnimations(element, event, options, animations, afterFn);\n      }\n\n      // no matching animations\n      if (!before && !after) return;\n\n      function applyOptions() {\n        options.domOperation();\n        applyAnimationClasses(element, options);\n      }\n\n      return {\n        start: function() {\n          var closeActiveAnimations;\n          var chain = [];\n\n          if (before) {\n            chain.push(function(fn) {\n              closeActiveAnimations = before(fn);\n            });\n          }\n\n          if (chain.length) {\n            chain.push(function(fn) {\n              applyOptions();\n              fn(true);\n            });\n          } else {\n            applyOptions();\n          }\n\n          if (after) {\n            chain.push(function(fn) {\n              closeActiveAnimations = after(fn);\n            });\n          }\n\n          var animationClosed = false;\n          var runner = new $$AnimateRunner({\n            end: function() {\n              endAnimations();\n            },\n            cancel: function() {\n              endAnimations(true);\n            }\n          });\n\n          $$AnimateRunner.chain(chain, onComplete);\n          return runner;\n\n          function onComplete(success) {\n            animationClosed = true;\n            applyOptions();\n            applyAnimationStyles(element, options);\n            runner.complete(success);\n          }\n\n          function endAnimations(cancelled) {\n            if (!animationClosed) {\n              (closeActiveAnimations || noop)(cancelled);\n              onComplete(cancelled);\n            }\n          }\n        }\n      };\n\n      function executeAnimationFn(fn, element, event, options, onDone) {\n        var args;\n        switch (event) {\n          case 'animate':\n            args = [element, options.from, options.to, onDone];\n            break;\n\n          case 'setClass':\n            args = [element, classesToAdd, classesToRemove, onDone];\n            break;\n\n          case 'addClass':\n            args = [element, classesToAdd, onDone];\n            break;\n\n          case 'removeClass':\n            args = [element, classesToRemove, onDone];\n            break;\n\n          default:\n            args = [element, onDone];\n            break;\n        }\n\n        args.push(options);\n\n        var value = fn.apply(fn, args);\n        if (value) {\n          if (isFunction(value.start)) {\n            value = value.start();\n          }\n\n          if (value instanceof $$AnimateRunner) {\n            value.done(onDone);\n          } else if (isFunction(value)) {\n            // optional onEnd / onCancel callback\n            return value;\n          }\n        }\n\n        return noop;\n      }\n\n      function groupEventedAnimations(element, event, options, animations, fnName) {\n        var operations = [];\n        forEach(animations, function(ani) {\n          var animation = ani[fnName];\n          if (!animation) return;\n\n          // note that all of these animations will run in parallel\n          operations.push(function() {\n            var runner;\n            var endProgressCb;\n\n            var resolved = false;\n            var onAnimationComplete = function(rejected) {\n              if (!resolved) {\n                resolved = true;\n                (endProgressCb || noop)(rejected);\n                runner.complete(!rejected);\n              }\n            };\n\n            runner = new $$AnimateRunner({\n              end: function() {\n                onAnimationComplete();\n              },\n              cancel: function() {\n                onAnimationComplete(true);\n              }\n            });\n\n            endProgressCb = executeAnimationFn(animation, element, event, options, function(result) {\n              var cancelled = result === false;\n              onAnimationComplete(cancelled);\n            });\n\n            return runner;\n          });\n        });\n\n        return operations;\n      }\n\n      function packageAnimations(element, event, options, animations, fnName) {\n        var operations = groupEventedAnimations(element, event, options, animations, fnName);\n        if (operations.length === 0) {\n          var a,b;\n          if (fnName === 'beforeSetClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'beforeRemoveClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'beforeAddClass');\n          } else if (fnName === 'setClass') {\n            a = groupEventedAnimations(element, 'removeClass', options, animations, 'removeClass');\n            b = groupEventedAnimations(element, 'addClass', options, animations, 'addClass');\n          }\n\n          if (a) {\n            operations = operations.concat(a);\n          }\n          if (b) {\n            operations = operations.concat(b);\n          }\n        }\n\n        if (operations.length === 0) return;\n\n        // TODO(matsko): add documentation\n        return function startAnimation(callback) {\n          var runners = [];\n          if (operations.length) {\n            forEach(operations, function(animateFn) {\n              runners.push(animateFn());\n            });\n          }\n\n          runners.length ? $$AnimateRunner.all(runners, callback) : callback();\n\n          return function endFn(reject) {\n            forEach(runners, function(runner) {\n              reject ? runner.cancel() : runner.end();\n            });\n          };\n        };\n      }\n    };\n\n    function lookupAnimations(classes) {\n      classes = isArray(classes) ? classes : classes.split(' ');\n      var matches = [], flagMap = {};\n      for (var i=0; i < classes.length; i++) {\n        var klass = classes[i],\n            animationFactory = $animateProvider.$$registeredAnimations[klass];\n        if (animationFactory && !flagMap[klass]) {\n          matches.push($injector.get(animationFactory));\n          flagMap[klass] = true;\n        }\n      }\n      return matches;\n    }\n  }];\n}];\n\nvar $$AnimateJsDriverProvider = ['$$animationProvider', function($$animationProvider) {\n  $$animationProvider.drivers.push('$$animateJsDriver');\n  this.$get = ['$$animateJs', '$$AnimateRunner', function($$animateJs, $$AnimateRunner) {\n    return function initDriverFn(animationDetails) {\n      if (animationDetails.from && animationDetails.to) {\n        var fromAnimation = prepareAnimation(animationDetails.from);\n        var toAnimation = prepareAnimation(animationDetails.to);\n        if (!fromAnimation && !toAnimation) return;\n\n        return {\n          start: function() {\n            var animationRunners = [];\n\n            if (fromAnimation) {\n              animationRunners.push(fromAnimation.start());\n            }\n\n            if (toAnimation) {\n              animationRunners.push(toAnimation.start());\n            }\n\n            $$AnimateRunner.all(animationRunners, done);\n\n            var runner = new $$AnimateRunner({\n              end: endFnFactory(),\n              cancel: endFnFactory()\n            });\n\n            return runner;\n\n            function endFnFactory() {\n              return function() {\n                forEach(animationRunners, function(runner) {\n                  // at this point we cannot cancel animations for groups just yet. 1.5+\n                  runner.end();\n                });\n              };\n            }\n\n            function done(status) {\n              runner.complete(status);\n            }\n          }\n        };\n      } else {\n        return prepareAnimation(animationDetails);\n      }\n    };\n\n    function prepareAnimation(animationDetails) {\n      // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n      var element = animationDetails.element;\n      var event = animationDetails.event;\n      var options = animationDetails.options;\n      var classes = animationDetails.classes;\n      return $$animateJs(element, event, classes, options);\n    }\n  }];\n}];\n\nvar NG_ANIMATE_ATTR_NAME = 'data-ng-animate';\nvar NG_ANIMATE_PIN_DATA = '$ngAnimatePin';\nvar $$AnimateQueueProvider = ['$animateProvider', function($animateProvider) {\n  var PRE_DIGEST_STATE = 1;\n  var RUNNING_STATE = 2;\n\n  var rules = this.rules = {\n    skip: [],\n    cancel: [],\n    join: []\n  };\n\n  function isAllowed(ruleType, element, currentAnimation, previousAnimation) {\n    return rules[ruleType].some(function(fn) {\n      return fn(element, currentAnimation, previousAnimation);\n    });\n  }\n\n  function hasAnimationClasses(options, and) {\n    options = options || {};\n    var a = (options.addClass || '').length > 0;\n    var b = (options.removeClass || '').length > 0;\n    return and ? a && b : a || b;\n  }\n\n  rules.join.push(function(element, newAnimation, currentAnimation) {\n    // if the new animation is class-based then we can just tack that on\n    return !newAnimation.structural && hasAnimationClasses(newAnimation.options);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // there is no need to animate anything if no classes are being added and\n    // there is no structural animation that will be triggered\n    return !newAnimation.structural && !hasAnimationClasses(newAnimation.options);\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // why should we trigger a new structural animation if the element will\n    // be removed from the DOM anyway?\n    return currentAnimation.event == 'leave' && newAnimation.structural;\n  });\n\n  rules.skip.push(function(element, newAnimation, currentAnimation) {\n    // if there is an ongoing current animation then don't even bother running the class-based animation\n    return currentAnimation.structural && currentAnimation.state === RUNNING_STATE && !newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // there can never be two structural animations running at the same time\n    return currentAnimation.structural && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    // if the previous animation is already running, but the new animation will\n    // be triggered, but the new animation is structural\n    return currentAnimation.state === RUNNING_STATE && newAnimation.structural;\n  });\n\n  rules.cancel.push(function(element, newAnimation, currentAnimation) {\n    var nO = newAnimation.options;\n    var cO = currentAnimation.options;\n\n    // if the exact same CSS class is added/removed then it's safe to cancel it\n    return (nO.addClass && nO.addClass === cO.removeClass) || (nO.removeClass && nO.removeClass === cO.addClass);\n  });\n\n  this.$get = ['$$rAF', '$rootScope', '$rootElement', '$document', '$$body', '$$HashMap',\n               '$$animation', '$$AnimateRunner', '$templateRequest', '$$jqLite', '$$forceReflow',\n       function($$rAF,   $rootScope,   $rootElement,   $document,   $$body,   $$HashMap,\n                $$animation,   $$AnimateRunner,   $templateRequest,   $$jqLite,   $$forceReflow) {\n\n    var activeAnimationsLookup = new $$HashMap();\n    var disabledElementsLookup = new $$HashMap();\n    var animationsEnabled = null;\n\n    // Wait until all directive and route-related templates are downloaded and\n    // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n    // all of the remote templates being currently downloaded. If there are no\n    // templates currently downloading then the watcher will still fire anyway.\n    var deregisterWatch = $rootScope.$watch(\n      function() { return $templateRequest.totalPendingRequests === 0; },\n      function(isEmpty) {\n        if (!isEmpty) return;\n        deregisterWatch();\n\n        // Now that all templates have been downloaded, $animate will wait until\n        // the post digest queue is empty before enabling animations. By having two\n        // calls to $postDigest calls we can ensure that the flag is enabled at the\n        // very end of the post digest queue. Since all of the animations in $animate\n        // use $postDigest, it's important that the code below executes at the end.\n        // This basically means that the page is fully downloaded and compiled before\n        // any animations are triggered.\n        $rootScope.$$postDigest(function() {\n          $rootScope.$$postDigest(function() {\n            // we check for null directly in the event that the application already called\n            // .enabled() with whatever arguments that it provided it with\n            if (animationsEnabled === null) {\n              animationsEnabled = true;\n            }\n          });\n        });\n      }\n    );\n\n    var callbackRegistry = {};\n\n    // remember that the classNameFilter is set during the provider/config\n    // stage therefore we can optimize here and setup a helper function\n    var classNameFilter = $animateProvider.classNameFilter();\n    var isAnimatableClassName = !classNameFilter\n              ? function() { return true; }\n              : function(className) {\n                return classNameFilter.test(className);\n              };\n\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function normalizeAnimationOptions(element, options) {\n      return mergeAnimationOptions(element, options, {});\n    }\n\n    function findCallbacks(element, event) {\n      var targetNode = getDomNode(element);\n\n      var matches = [];\n      var entries = callbackRegistry[event];\n      if (entries) {\n        forEach(entries, function(entry) {\n          if (entry.node.contains(targetNode)) {\n            matches.push(entry.callback);\n          }\n        });\n      }\n\n      return matches;\n    }\n\n    function triggerCallback(event, element, phase, data) {\n      $$rAF(function() {\n        forEach(findCallbacks(element, event), function(callback) {\n          callback(element, phase, data);\n        });\n      });\n    }\n\n    return {\n      on: function(event, container, callback) {\n        var node = extractElementNode(container);\n        callbackRegistry[event] = callbackRegistry[event] || [];\n        callbackRegistry[event].push({\n          node: node,\n          callback: callback\n        });\n      },\n\n      off: function(event, container, callback) {\n        var entries = callbackRegistry[event];\n        if (!entries) return;\n\n        callbackRegistry[event] = arguments.length === 1\n            ? null\n            : filterFromRegistry(entries, container, callback);\n\n        function filterFromRegistry(list, matchContainer, matchCallback) {\n          var containerNode = extractElementNode(matchContainer);\n          return list.filter(function(entry) {\n            var isMatch = entry.node === containerNode &&\n                            (!matchCallback || entry.callback === matchCallback);\n            return !isMatch;\n          });\n        }\n      },\n\n      pin: function(element, parentElement) {\n        assertArg(isElement(element), 'element', 'not an element');\n        assertArg(isElement(parentElement), 'parentElement', 'not an element');\n        element.data(NG_ANIMATE_PIN_DATA, parentElement);\n      },\n\n      push: function(element, event, options, domOperation) {\n        options = options || {};\n        options.domOperation = domOperation;\n        return queueAnimation(element, event, options);\n      },\n\n      // this method has four signatures:\n      //  () - global getter\n      //  (bool) - global setter\n      //  (element) - element getter\n      //  (element, bool) - element setter<F37>\n      enabled: function(element, bool) {\n        var argCount = arguments.length;\n\n        if (argCount === 0) {\n          // () - Global getter\n          bool = !!animationsEnabled;\n        } else {\n          var hasElement = isElement(element);\n\n          if (!hasElement) {\n            // (bool) - Global setter\n            bool = animationsEnabled = !!element;\n          } else {\n            var node = getDomNode(element);\n            var recordExists = disabledElementsLookup.get(node);\n\n            if (argCount === 1) {\n              // (element) - Element getter\n              bool = !recordExists;\n            } else {\n              // (element, bool) - Element setter\n              bool = !!bool;\n              if (!bool) {\n                disabledElementsLookup.put(node, true);\n              } else if (recordExists) {\n                disabledElementsLookup.remove(node);\n              }\n            }\n          }\n        }\n\n        return bool;\n      }\n    };\n\n    function queueAnimation(element, event, options) {\n      var node, parent;\n      element = stripCommentsFromElement(element);\n      if (element) {\n        node = getDomNode(element);\n        parent = element.parent();\n      }\n\n      options = prepareAnimationOptions(options);\n\n      // we create a fake runner with a working promise.\n      // These methods will become available after the digest has passed\n      var runner = new $$AnimateRunner();\n\n      if (isArray(options.addClass)) {\n        options.addClass = options.addClass.join(' ');\n      }\n\n      if (options.addClass && !isString(options.addClass)) {\n        options.addClass = null;\n      }\n\n      if (isArray(options.removeClass)) {\n        options.removeClass = options.removeClass.join(' ');\n      }\n\n      if (options.removeClass && !isString(options.removeClass)) {\n        options.removeClass = null;\n      }\n\n      if (options.from && !isObject(options.from)) {\n        options.from = null;\n      }\n\n      if (options.to && !isObject(options.to)) {\n        options.to = null;\n      }\n\n      // there are situations where a directive issues an animation for\n      // a jqLite wrapper that contains only comment nodes... If this\n      // happens then there is no way we can perform an animation\n      if (!node) {\n        close();\n        return runner;\n      }\n\n      var className = [node.className, options.addClass, options.removeClass].join(' ');\n      if (!isAnimatableClassName(className)) {\n        close();\n        return runner;\n      }\n\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // this is a hard disable of all animations for the application or on\n      // the element itself, therefore  there is no need to continue further\n      // past this point if not enabled\n      var skipAnimations = !animationsEnabled || disabledElementsLookup.get(node);\n      var existingAnimation = (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n      var hasExistingAnimation = !!existingAnimation.state;\n\n      // there is no point in traversing the same collection of parent ancestors if a followup\n      // animation will be run on the same element that already did all that checking work\n      if (!skipAnimations && (!hasExistingAnimation || existingAnimation.state != PRE_DIGEST_STATE)) {\n        skipAnimations = !areAnimationsAllowed(element, parent, event);\n      }\n\n      if (skipAnimations) {\n        close();\n        return runner;\n      }\n\n      if (isStructural) {\n        closeChildAnimations(element);\n      }\n\n      var newAnimation = {\n        structural: isStructural,\n        element: element,\n        event: event,\n        close: close,\n        options: options,\n        runner: runner\n      };\n\n      if (hasExistingAnimation) {\n        var skipAnimationFlag = isAllowed('skip', element, newAnimation, existingAnimation);\n        if (skipAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            close();\n            return runner;\n          } else {\n            mergeAnimationOptions(element, existingAnimation.options, options);\n            return existingAnimation.runner;\n          }\n        }\n\n        var cancelAnimationFlag = isAllowed('cancel', element, newAnimation, existingAnimation);\n        if (cancelAnimationFlag) {\n          if (existingAnimation.state === RUNNING_STATE) {\n            // this will end the animation right away and it is safe\n            // to do so since the animation is already running and the\n            // runner callback code will run in async\n            existingAnimation.runner.end();\n          } else if (existingAnimation.structural) {\n            // this means that the animation is queued into a digest, but\n            // hasn't started yet. Therefore it is safe to run the close\n            // method which will call the runner methods in async.\n            existingAnimation.close();\n          } else {\n            // this will merge the new animation options into existing animation options\n            mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);\n            return existingAnimation.runner;\n          }\n        } else {\n          // a joined animation means that this animation will take over the existing one\n          // so an example would involve a leave animation taking over an enter. Then when\n          // the postDigest kicks in the enter will be ignored.\n          var joinAnimationFlag = isAllowed('join', element, newAnimation, existingAnimation);\n          if (joinAnimationFlag) {\n            if (existingAnimation.state === RUNNING_STATE) {\n              normalizeAnimationOptions(element, options);\n            } else {\n              applyGeneratedPreparationClasses(element, isStructural ? event : null, options);\n\n              event = newAnimation.event = existingAnimation.event;\n              options = mergeAnimationOptions(element, existingAnimation.options, newAnimation.options);\n\n              //we return the same runner since only the option values of this animation will\n              //be fed into the `existingAnimation`.\n              return existingAnimation.runner;\n            }\n          }\n        }\n      } else {\n        // normalization in this case means that it removes redundant CSS classes that\n        // already exist (addClass) or do not exist (removeClass) on the element\n        normalizeAnimationOptions(element, options);\n      }\n\n      // when the options are merged and cleaned up we may end up not having to do\n      // an animation at all, therefore we should check this before issuing a post\n      // digest callback. Structural animations will always run no matter what.\n      var isValidAnimation = newAnimation.structural;\n      if (!isValidAnimation) {\n        // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n        isValidAnimation = (newAnimation.event === 'animate' && Object.keys(newAnimation.options.to || {}).length > 0)\n                            || hasAnimationClasses(newAnimation.options);\n      }\n\n      if (!isValidAnimation) {\n        close();\n        clearElementAnimationState(element);\n        return runner;\n      }\n\n      // the counter keeps track of cancelled animations\n      var counter = (existingAnimation.counter || 0) + 1;\n      newAnimation.counter = counter;\n\n      markElementAnimationState(element, PRE_DIGEST_STATE, newAnimation);\n\n      $rootScope.$$postDigest(function() {\n        var animationDetails = activeAnimationsLookup.get(node);\n        var animationCancelled = !animationDetails;\n        animationDetails = animationDetails || {};\n\n        // if addClass/removeClass is called before something like enter then the\n        // registered parent element may not be present. The code below will ensure\n        // that a final value for parent element is obtained\n        var parentElement = element.parent() || [];\n\n        // animate/structural/class-based animations all have requirements. Otherwise there\n        // is no point in performing an animation. The parent node must also be set.\n        var isValidAnimation = parentElement.length > 0\n                                && (animationDetails.event === 'animate'\n                                    || animationDetails.structural\n                                    || hasAnimationClasses(animationDetails.options));\n\n        // this means that the previous animation was cancelled\n        // even if the follow-up animation is the same event\n        if (animationCancelled || animationDetails.counter !== counter || !isValidAnimation) {\n          // if another animation did not take over then we need\n          // to make sure that the domOperation and options are\n          // handled accordingly\n          if (animationCancelled) {\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n          }\n\n          // if the event changed from something like enter to leave then we do\n          // it, otherwise if it's the same then the end result will be the same too\n          if (animationCancelled || (isStructural && animationDetails.event !== event)) {\n            options.domOperation();\n            runner.end();\n          }\n\n          // in the event that the element animation was not cancelled or a follow-up animation\n          // isn't allowed to animate from here then we need to clear the state of the element\n          // so that any future animations won't read the expired animation data.\n          if (!isValidAnimation) {\n            clearElementAnimationState(element);\n          }\n\n          return;\n        }\n\n        // this combined multiple class to addClass / removeClass into a setClass event\n        // so long as a structural event did not take over the animation\n        event = !animationDetails.structural && hasAnimationClasses(animationDetails.options, true)\n            ? 'setClass'\n            : animationDetails.event;\n\n        markElementAnimationState(element, RUNNING_STATE);\n        var realRunner = $$animation(element, event, animationDetails.options);\n\n        realRunner.done(function(status) {\n          close(!status);\n          var animationDetails = activeAnimationsLookup.get(node);\n          if (animationDetails && animationDetails.counter === counter) {\n            clearElementAnimationState(getDomNode(element));\n          }\n          notifyProgress(runner, event, 'close', {});\n        });\n\n        // this will update the runner's flow-control events based on\n        // the `realRunner` object.\n        runner.setHost(realRunner);\n        notifyProgress(runner, event, 'start', {});\n      });\n\n      return runner;\n\n      function notifyProgress(runner, event, phase, data) {\n        triggerCallback(event, element, phase, data);\n        runner.progress(event, phase, data);\n      }\n\n      function close(reject) { // jshint ignore:line\n        clearGeneratedClasses(element, options);\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n        runner.complete(!reject);\n      }\n    }\n\n    function closeChildAnimations(element) {\n      var node = getDomNode(element);\n      var children = node.querySelectorAll('[' + NG_ANIMATE_ATTR_NAME + ']');\n      forEach(children, function(child) {\n        var state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME));\n        var animationDetails = activeAnimationsLookup.get(child);\n        switch (state) {\n          case RUNNING_STATE:\n            animationDetails.runner.end();\n            /* falls through */\n          case PRE_DIGEST_STATE:\n            if (animationDetails) {\n              activeAnimationsLookup.remove(child);\n            }\n            break;\n        }\n      });\n    }\n\n    function clearElementAnimationState(element) {\n      var node = getDomNode(element);\n      node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n      activeAnimationsLookup.remove(node);\n    }\n\n    function isMatchingElement(nodeOrElmA, nodeOrElmB) {\n      return getDomNode(nodeOrElmA) === getDomNode(nodeOrElmB);\n    }\n\n    function areAnimationsAllowed(element, parentElement, event) {\n      var bodyElementDetected = isMatchingElement(element, $$body) || element[0].nodeName === 'HTML';\n      var rootElementDetected = isMatchingElement(element, $rootElement);\n      var parentAnimationDetected = false;\n      var animateChildren;\n\n      var parentHost = element.data(NG_ANIMATE_PIN_DATA);\n      if (parentHost) {\n        parentElement = parentHost;\n      }\n\n      while (parentElement && parentElement.length) {\n        if (!rootElementDetected) {\n          // angular doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n        }\n\n        var parentNode = parentElement[0];\n        if (parentNode.nodeType !== ELEMENT_NODE) {\n          // no point in inspecting the #document element\n          break;\n        }\n\n        var details = activeAnimationsLookup.get(parentNode) || {};\n        // either an enter, leave or move animation will commence\n        // therefore we can't allow any animations to take place\n        // but if a parent animation is class-based then that's ok\n        if (!parentAnimationDetected) {\n          parentAnimationDetected = details.structural || disabledElementsLookup.get(parentNode);\n        }\n\n        if (isUndefined(animateChildren) || animateChildren === true) {\n          var value = parentElement.data(NG_ANIMATE_CHILDREN_DATA);\n          if (isDefined(value)) {\n            animateChildren = value;\n          }\n        }\n\n        // there is no need to continue traversing at this point\n        if (parentAnimationDetected && animateChildren === false) break;\n\n        if (!rootElementDetected) {\n          // angular doesn't want to attempt to animate elements outside of the application\n          // therefore we need to ensure that the rootElement is an ancestor of the current element\n          rootElementDetected = isMatchingElement(parentElement, $rootElement);\n          if (!rootElementDetected) {\n            parentHost = parentElement.data(NG_ANIMATE_PIN_DATA);\n            if (parentHost) {\n              parentElement = parentHost;\n            }\n          }\n        }\n\n        if (!bodyElementDetected) {\n          // we also need to ensure that the element is or will be apart of the body element\n          // otherwise it is pointless to even issue an animation to be rendered\n          bodyElementDetected = isMatchingElement(parentElement, $$body);\n        }\n\n        parentElement = parentElement.parent();\n      }\n\n      var allowAnimation = !parentAnimationDetected || animateChildren;\n      return allowAnimation && rootElementDetected && bodyElementDetected;\n    }\n\n    function markElementAnimationState(element, state, details) {\n      details = details || {};\n      details.state = state;\n\n      var node = getDomNode(element);\n      node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n      var oldValue = activeAnimationsLookup.get(node);\n      var newValue = oldValue\n          ? extend(oldValue, details)\n          : details;\n      activeAnimationsLookup.put(node, newValue);\n    }\n  }];\n}];\n\nvar $$AnimateAsyncRunFactory = ['$$rAF', function($$rAF) {\n  var waitQueue = [];\n\n  function waitForTick(fn) {\n    waitQueue.push(fn);\n    if (waitQueue.length > 1) return;\n    $$rAF(function() {\n      for (var i = 0; i < waitQueue.length; i++) {\n        waitQueue[i]();\n      }\n      waitQueue = [];\n    });\n  }\n\n  return function() {\n    var passed = false;\n    waitForTick(function() {\n      passed = true;\n    });\n    return function(callback) {\n      passed ? callback() : waitForTick(callback);\n    };\n  };\n}];\n\nvar $$AnimateRunnerFactory = ['$q', '$sniffer', '$$animateAsyncRun',\n                      function($q,   $sniffer,   $$animateAsyncRun) {\n\n  var INITIAL_STATE = 0;\n  var DONE_PENDING_STATE = 1;\n  var DONE_COMPLETE_STATE = 2;\n\n  AnimateRunner.chain = function(chain, callback) {\n    var index = 0;\n\n    next();\n    function next() {\n      if (index === chain.length) {\n        callback(true);\n        return;\n      }\n\n      chain[index](function(response) {\n        if (response === false) {\n          callback(false);\n          return;\n        }\n        index++;\n        next();\n      });\n    }\n  };\n\n  AnimateRunner.all = function(runners, callback) {\n    var count = 0;\n    var status = true;\n    forEach(runners, function(runner) {\n      runner.done(onProgress);\n    });\n\n    function onProgress(response) {\n      status = status && response;\n      if (++count === runners.length) {\n        callback(status);\n      }\n    }\n  };\n\n  function AnimateRunner(host) {\n    this.setHost(host);\n\n    this._doneCallbacks = [];\n    this._runInAnimationFrame = $$animateAsyncRun();\n    this._state = 0;\n  }\n\n  AnimateRunner.prototype = {\n    setHost: function(host) {\n      this.host = host || {};\n    },\n\n    done: function(fn) {\n      if (this._state === DONE_COMPLETE_STATE) {\n        fn();\n      } else {\n        this._doneCallbacks.push(fn);\n      }\n    },\n\n    progress: noop,\n\n    getPromise: function() {\n      if (!this.promise) {\n        var self = this;\n        this.promise = $q(function(resolve, reject) {\n          self.done(function(status) {\n            status === false ? reject() : resolve();\n          });\n        });\n      }\n      return this.promise;\n    },\n\n    then: function(resolveHandler, rejectHandler) {\n      return this.getPromise().then(resolveHandler, rejectHandler);\n    },\n\n    'catch': function(handler) {\n      return this.getPromise()['catch'](handler);\n    },\n\n    'finally': function(handler) {\n      return this.getPromise()['finally'](handler);\n    },\n\n    pause: function() {\n      if (this.host.pause) {\n        this.host.pause();\n      }\n    },\n\n    resume: function() {\n      if (this.host.resume) {\n        this.host.resume();\n      }\n    },\n\n    end: function() {\n      if (this.host.end) {\n        this.host.end();\n      }\n      this._resolve(true);\n    },\n\n    cancel: function() {\n      if (this.host.cancel) {\n        this.host.cancel();\n      }\n      this._resolve(false);\n    },\n\n    complete: function(response) {\n      var self = this;\n      if (self._state === INITIAL_STATE) {\n        self._state = DONE_PENDING_STATE;\n        self._runInAnimationFrame(function() {\n          self._resolve(response);\n        });\n      }\n    },\n\n    _resolve: function(response) {\n      if (this._state !== DONE_COMPLETE_STATE) {\n        forEach(this._doneCallbacks, function(fn) {\n          fn(response);\n        });\n        this._doneCallbacks.length = 0;\n        this._state = DONE_COMPLETE_STATE;\n      }\n    }\n  };\n\n  return AnimateRunner;\n}];\n\nvar $$AnimationProvider = ['$animateProvider', function($animateProvider) {\n  var NG_ANIMATE_REF_ATTR = 'ng-animate-ref';\n\n  var drivers = this.drivers = [];\n\n  var RUNNER_STORAGE_KEY = '$$animationRunner';\n\n  function setRunner(element, runner) {\n    element.data(RUNNER_STORAGE_KEY, runner);\n  }\n\n  function removeRunner(element) {\n    element.removeData(RUNNER_STORAGE_KEY);\n  }\n\n  function getRunner(element) {\n    return element.data(RUNNER_STORAGE_KEY);\n  }\n\n  this.$get = ['$$jqLite', '$rootScope', '$injector', '$$AnimateRunner', '$$HashMap', '$$rAFScheduler',\n       function($$jqLite,   $rootScope,   $injector,   $$AnimateRunner,   $$HashMap,   $$rAFScheduler) {\n\n    var animationQueue = [];\n    var applyAnimationClasses = applyAnimationClassesFactory($$jqLite);\n\n    function sortAnimations(animations) {\n      var tree = { children: [] };\n      var i, lookup = new $$HashMap();\n\n      // this is done first beforehand so that the hashmap\n      // is filled with a list of the elements that will be animated\n      for (i = 0; i < animations.length; i++) {\n        var animation = animations[i];\n        lookup.put(animation.domNode, animations[i] = {\n          domNode: animation.domNode,\n          fn: animation.fn,\n          children: []\n        });\n      }\n\n      for (i = 0; i < animations.length; i++) {\n        processNode(animations[i]);\n      }\n\n      return flatten(tree);\n\n      function processNode(entry) {\n        if (entry.processed) return entry;\n        entry.processed = true;\n\n        var elementNode = entry.domNode;\n        var parentNode = elementNode.parentNode;\n        lookup.put(elementNode, entry);\n\n        var parentEntry;\n        while (parentNode) {\n          parentEntry = lookup.get(parentNode);\n          if (parentEntry) {\n            if (!parentEntry.processed) {\n              parentEntry = processNode(parentEntry);\n            }\n            break;\n          }\n          parentNode = parentNode.parentNode;\n        }\n\n        (parentEntry || tree).children.push(entry);\n        return entry;\n      }\n\n      function flatten(tree) {\n        var result = [];\n        var queue = [];\n        var i;\n\n        for (i = 0; i < tree.children.length; i++) {\n          queue.push(tree.children[i]);\n        }\n\n        var remainingLevelEntries = queue.length;\n        var nextLevelEntries = 0;\n        var row = [];\n\n        for (i = 0; i < queue.length; i++) {\n          var entry = queue[i];\n          if (remainingLevelEntries <= 0) {\n            remainingLevelEntries = nextLevelEntries;\n            nextLevelEntries = 0;\n            result.push(row);\n            row = [];\n          }\n          row.push(entry.fn);\n          entry.children.forEach(function(childEntry) {\n            nextLevelEntries++;\n            queue.push(childEntry);\n          });\n          remainingLevelEntries--;\n        }\n\n        if (row.length) {\n          result.push(row);\n        }\n\n        return result;\n      }\n    }\n\n    // TODO(matsko): document the signature in a better way\n    return function(element, event, options) {\n      options = prepareAnimationOptions(options);\n      var isStructural = ['enter', 'move', 'leave'].indexOf(event) >= 0;\n\n      // there is no animation at the current moment, however\n      // these runner methods will get later updated with the\n      // methods leading into the driver's end/cancel methods\n      // for now they just stop the animation from starting\n      var runner = new $$AnimateRunner({\n        end: function() { close(); },\n        cancel: function() { close(true); }\n      });\n\n      if (!drivers.length) {\n        close();\n        return runner;\n      }\n\n      setRunner(element, runner);\n\n      var classes = mergeClasses(element.attr('class'), mergeClasses(options.addClass, options.removeClass));\n      var tempClasses = options.tempClasses;\n      if (tempClasses) {\n        classes += ' ' + tempClasses;\n        options.tempClasses = null;\n      }\n\n      animationQueue.push({\n        // this data is used by the postDigest code and passed into\n        // the driver step function\n        element: element,\n        classes: classes,\n        event: event,\n        structural: isStructural,\n        options: options,\n        beforeStart: beforeStart,\n        close: close\n      });\n\n      element.on('$destroy', handleDestroyedElement);\n\n      // we only want there to be one function called within the post digest\n      // block. This way we can group animations for all the animations that\n      // were apart of the same postDigest flush call.\n      if (animationQueue.length > 1) return runner;\n\n      $rootScope.$$postDigest(function() {\n        var animations = [];\n        forEach(animationQueue, function(entry) {\n          // the element was destroyed early on which removed the runner\n          // form its storage. This means we can't animate this element\n          // at all and it already has been closed due to destruction.\n          if (getRunner(entry.element)) {\n            animations.push(entry);\n          } else {\n            entry.close();\n          }\n        });\n\n        // now any future animations will be in another postDigest\n        animationQueue.length = 0;\n\n        var groupedAnimations = groupAnimations(animations);\n        var toBeSortedAnimations = [];\n\n        forEach(groupedAnimations, function(animationEntry) {\n          toBeSortedAnimations.push({\n            domNode: getDomNode(animationEntry.from ? animationEntry.from.element : animationEntry.element),\n            fn: function triggerAnimationStart() {\n              // it's important that we apply the `ng-animate` CSS class and the\n              // temporary classes before we do any driver invoking since these\n              // CSS classes may be required for proper CSS detection.\n              animationEntry.beforeStart();\n\n              var startAnimationFn, closeFn = animationEntry.close;\n\n              // in the event that the element was removed before the digest runs or\n              // during the RAF sequencing then we should not trigger the animation.\n              var targetElement = animationEntry.anchors\n                  ? (animationEntry.from.element || animationEntry.to.element)\n                  : animationEntry.element;\n\n              if (getRunner(targetElement)) {\n                var operation = invokeFirstDriver(animationEntry);\n                if (operation) {\n                  startAnimationFn = operation.start;\n                }\n              }\n\n              if (!startAnimationFn) {\n                closeFn();\n              } else {\n                var animationRunner = startAnimationFn();\n                animationRunner.done(function(status) {\n                  closeFn(!status);\n                });\n                updateAnimationRunners(animationEntry, animationRunner);\n              }\n            }\n          });\n        });\n\n        // we need to sort each of the animations in order of parent to child\n        // relationships. This ensures that the child classes are applied at the\n        // right time.\n        $$rAFScheduler(sortAnimations(toBeSortedAnimations));\n      });\n\n      return runner;\n\n      // TODO(matsko): change to reference nodes\n      function getAnchorNodes(node) {\n        var SELECTOR = '[' + NG_ANIMATE_REF_ATTR + ']';\n        var items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n        var anchors = [];\n        forEach(items, function(node) {\n          var attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n          if (attr && attr.length) {\n            anchors.push(node);\n          }\n        });\n        return anchors;\n      }\n\n      function groupAnimations(animations) {\n        var preparedAnimations = [];\n        var refLookup = {};\n        forEach(animations, function(animation, index) {\n          var element = animation.element;\n          var node = getDomNode(element);\n          var event = animation.event;\n          var enterOrMove = ['enter', 'move'].indexOf(event) >= 0;\n          var anchorNodes = animation.structural ? getAnchorNodes(node) : [];\n\n          if (anchorNodes.length) {\n            var direction = enterOrMove ? 'to' : 'from';\n\n            forEach(anchorNodes, function(anchor) {\n              var key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n              refLookup[key] = refLookup[key] || {};\n              refLookup[key][direction] = {\n                animationID: index,\n                element: jqLite(anchor)\n              };\n            });\n          } else {\n            preparedAnimations.push(animation);\n          }\n        });\n\n        var usedIndicesLookup = {};\n        var anchorGroups = {};\n        forEach(refLookup, function(operations, key) {\n          var from = operations.from;\n          var to = operations.to;\n\n          if (!from || !to) {\n            // only one of these is set therefore we can't have an\n            // anchor animation since all three pieces are required\n            var index = from ? from.animationID : to.animationID;\n            var indexKey = index.toString();\n            if (!usedIndicesLookup[indexKey]) {\n              usedIndicesLookup[indexKey] = true;\n              preparedAnimations.push(animations[index]);\n            }\n            return;\n          }\n\n          var fromAnimation = animations[from.animationID];\n          var toAnimation = animations[to.animationID];\n          var lookupKey = from.animationID.toString();\n          if (!anchorGroups[lookupKey]) {\n            var group = anchorGroups[lookupKey] = {\n              structural: true,\n              beforeStart: function() {\n                fromAnimation.beforeStart();\n                toAnimation.beforeStart();\n              },\n              close: function() {\n                fromAnimation.close();\n                toAnimation.close();\n              },\n              classes: cssClassesIntersection(fromAnimation.classes, toAnimation.classes),\n              from: fromAnimation,\n              to: toAnimation,\n              anchors: [] // TODO(matsko): change to reference nodes\n            };\n\n            // the anchor animations require that the from and to elements both have at least\n            // one shared CSS class which effictively marries the two elements together to use\n            // the same animation driver and to properly sequence the anchor animation.\n            if (group.classes.length) {\n              preparedAnimations.push(group);\n            } else {\n              preparedAnimations.push(fromAnimation);\n              preparedAnimations.push(toAnimation);\n            }\n          }\n\n          anchorGroups[lookupKey].anchors.push({\n            'out': from.element, 'in': to.element\n          });\n        });\n\n        return preparedAnimations;\n      }\n\n      function cssClassesIntersection(a,b) {\n        a = a.split(' ');\n        b = b.split(' ');\n        var matches = [];\n\n        for (var i = 0; i < a.length; i++) {\n          var aa = a[i];\n          if (aa.substring(0,3) === 'ng-') continue;\n\n          for (var j = 0; j < b.length; j++) {\n            if (aa === b[j]) {\n              matches.push(aa);\n              break;\n            }\n          }\n        }\n\n        return matches.join(' ');\n      }\n\n      function invokeFirstDriver(animationDetails) {\n        // we loop in reverse order since the more general drivers (like CSS and JS)\n        // may attempt more elements, but custom drivers are more particular\n        for (var i = drivers.length - 1; i >= 0; i--) {\n          var driverName = drivers[i];\n          if (!$injector.has(driverName)) continue; // TODO(matsko): remove this check\n\n          var factory = $injector.get(driverName);\n          var driver = factory(animationDetails);\n          if (driver) {\n            return driver;\n          }\n        }\n      }\n\n      function beforeStart() {\n        element.addClass(NG_ANIMATE_CLASSNAME);\n        if (tempClasses) {\n          $$jqLite.addClass(element, tempClasses);\n        }\n      }\n\n      function updateAnimationRunners(animation, newRunner) {\n        if (animation.from && animation.to) {\n          update(animation.from.element);\n          update(animation.to.element);\n        } else {\n          update(animation.element);\n        }\n\n        function update(element) {\n          getRunner(element).setHost(newRunner);\n        }\n      }\n\n      function handleDestroyedElement() {\n        var runner = getRunner(element);\n        if (runner && (event !== 'leave' || !options.$$domOperationFired)) {\n          runner.end();\n        }\n      }\n\n      function close(rejected) { // jshint ignore:line\n        element.off('$destroy', handleDestroyedElement);\n        removeRunner(element);\n\n        applyAnimationClasses(element, options);\n        applyAnimationStyles(element, options);\n        options.domOperation();\n\n        if (tempClasses) {\n          $$jqLite.removeClass(element, tempClasses);\n        }\n\n        element.removeClass(NG_ANIMATE_CLASSNAME);\n        runner.complete(!rejected);\n      }\n    };\n  }];\n}];\n\n/* global angularAnimateModule: true,\n\n   $$BodyProvider,\n   $$AnimateAsyncRunFactory,\n   $$rAFSchedulerFactory,\n   $$AnimateChildrenDirective,\n   $$AnimateRunnerFactory,\n   $$AnimateQueueProvider,\n   $$AnimationProvider,\n   $AnimateCssProvider,\n   $$AnimateCssDriverProvider,\n   $$AnimateJsProvider,\n   $$AnimateJsDriverProvider,\n*/\n\n/**\n * @ngdoc module\n * @name ngAnimate\n * @description\n *\n * The `ngAnimate` module provides support for CSS-based animations (keyframes and transitions) as well as JavaScript-based animations via\n * callback hooks. Animations are not enabled by default, however, by including `ngAnimate` the animation hooks are enabled for an Angular app.\n *\n * <div doc-module-components=\"ngAnimate\"></div>\n *\n * # Usage\n * Simply put, there are two ways to make use of animations when ngAnimate is used: by using **CSS** and **JavaScript**. The former works purely based\n * using CSS (by using matching CSS selectors/styles) and the latter triggers animations that are registered via `module.animation()`. For\n * both CSS and JS animations the sole requirement is to have a matching `CSS class` that exists both in the registered animation and within\n * the HTML element that the animation will be triggered on.\n *\n * ## Directive Support\n * The following directives are \"animation aware\":\n *\n * | Directive                                                                                                | Supported Animations                                                     |\n * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|\n * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |\n * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |\n * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |\n * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |\n * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |\n * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |\n * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |\n * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |\n * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |\n * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |\n *\n * (More information can be found by visiting each the documentation associated with each directive.)\n *\n * ## CSS-based Animations\n *\n * CSS-based animations with ngAnimate are unique since they require no JavaScript code at all. By using a CSS class that we reference between our HTML\n * and CSS code we can create an animation that will be picked up by Angular when an the underlying directive performs an operation.\n *\n * The example below shows how an `enter` animation can be made possible on an element using `ng-if`:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"fade\">\n *    Fade me in out\n * </div>\n * <button ng-click=\"bool=true\">Fade In!</button>\n * <button ng-click=\"bool=false\">Fade Out!</button>\n * ```\n *\n * Notice the CSS class **fade**? We can now create the CSS transition code that references this class:\n *\n * ```css\n * /&#42; The starting CSS styles for the enter animation &#42;/\n * .fade.ng-enter {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n *\n * /&#42; The finishing CSS styles for the enter animation &#42;/\n * .fade.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * ```\n *\n * The key thing to remember here is that, depending on the animation event (which each of the directives above trigger depending on what's going on) two\n * generated CSS classes will be applied to the element; in the example above we have `.ng-enter` and `.ng-enter-active`. For CSS transitions, the transition\n * code **must** be defined within the starting CSS class (in this case `.ng-enter`). The destination class is what the transition will animate towards.\n *\n * If for example we wanted to create animations for `leave` and `move` (ngRepeat triggers move) then we can do so using the same CSS naming conventions:\n *\n * ```css\n * /&#42; now the element will fade out before it is removed from the DOM &#42;/\n * .fade.ng-leave {\n *   transition:0.5s linear all;\n *   opacity:1;\n * }\n * .fade.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * We can also make use of **CSS Keyframes** by referencing the keyframe animation within the starting CSS class:\n *\n * ```css\n * /&#42; there is no need to define anything inside of the destination\n * CSS class since the keyframe will take charge of the animation &#42;/\n * .fade.ng-leave {\n *   animation: my_fade_animation 0.5s linear;\n *   -webkit-animation: my_fade_animation 0.5s linear;\n * }\n *\n * @keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n *\n * @-webkit-keyframes my_fade_animation {\n *   from { opacity:1; }\n *   to { opacity:0; }\n * }\n * ```\n *\n * Feel free also mix transitions and keyframes together as well as any other CSS classes on the same element.\n *\n * ### CSS Class-based Animations\n *\n * Class-based animations (animations that are triggered via `ngClass`, `ngShow`, `ngHide` and some other directives) have a slightly different\n * naming convention. Class-based animations are basic enough that a standard transition or keyframe can be referenced on the class being added\n * and removed.\n *\n * For example if we wanted to do a CSS animation for `ngHide` then we place an animation on the `.ng-hide` CSS class:\n *\n * ```html\n * <div ng-show=\"bool\" class=\"fade\">\n *   Show and hide me\n * </div>\n * <button ng-click=\"bool=true\">Toggle</button>\n *\n * <style>\n * .fade.ng-hide {\n *   transition:0.5s linear all;\n *   opacity:0;\n * }\n * </style>\n * ```\n *\n * All that is going on here with ngShow/ngHide behind the scenes is the `.ng-hide` class is added/removed (when the hidden state is valid). Since\n * ngShow and ngHide are animation aware then we can match up a transition and ngAnimate handles the rest.\n *\n * In addition the addition and removal of the CSS class, ngAnimate also provides two helper methods that we can use to further decorate the animation\n * with CSS styles.\n *\n * ```html\n * <div ng-class=\"{on:onOff}\" class=\"highlight\">\n *   Highlight this box\n * </div>\n * <button ng-click=\"onOff=!onOff\">Toggle</button>\n *\n * <style>\n * .highlight {\n *   transition:0.5s linear all;\n * }\n * .highlight.on-add {\n *   background:white;\n * }\n * .highlight.on {\n *   background:yellow;\n * }\n * .highlight.on-remove {\n *   background:black;\n * }\n * </style>\n * ```\n *\n * We can also make use of CSS keyframes by placing them within the CSS classes.\n *\n *\n * ### CSS Staggering Animations\n * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\n * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be\n * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\n * the animation. The style property expected within the stagger class can either be a **transition-delay** or an\n * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n *\n * ```css\n * .my-animation.ng-enter {\n *   /&#42; standard transition code &#42;/\n *   transition: 1s linear all;\n *   opacity:0;\n * }\n * .my-animation.ng-enter-stagger {\n *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n *   transition-delay: 0.1s;\n *\n *   /&#42; As of 1.4.4, this must always be set: it signals ngAnimate\n *     to not accidentally inherit a delay property from another CSS class &#42;/\n *   transition-duration: 0s;\n * }\n * .my-animation.ng-enter.ng-enter-active {\n *   /&#42; standard transition styles &#42;/\n *   opacity:1;\n * }\n * ```\n *\n * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations\n * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\n * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\n * will also be reset if one or more animation frames have passed since the multiple calls to `$animate` were fired.\n *\n * The following code will issue the **ng-leave-stagger** event on the element provided:\n *\n * ```js\n * var kids = parent.children();\n *\n * $animate.leave(kids[0]); //stagger index=0\n * $animate.leave(kids[1]); //stagger index=1\n * $animate.leave(kids[2]); //stagger index=2\n * $animate.leave(kids[3]); //stagger index=3\n * $animate.leave(kids[4]); //stagger index=4\n *\n * window.requestAnimationFrame(function() {\n *   //stagger has reset itself\n *   $animate.leave(kids[5]); //stagger index=0\n *   $animate.leave(kids[6]); //stagger index=1\n *\n *   $scope.$digest();\n * });\n * ```\n *\n * Stagger animations are currently only supported within CSS-defined animations.\n *\n * ### The `ng-animate` CSS class\n *\n * When ngAnimate is animating an element it will apply the `ng-animate` CSS class to the element for the duration of the animation.\n * This is a temporary CSS class and it will be removed once the animation is over (for both JavaScript and CSS-based animations).\n *\n * Therefore, animations can be applied to an element using this temporary class directly via CSS.\n *\n * ```css\n * .zipper.ng-animate {\n *   transition:0.5s linear all;\n * }\n * .zipper.ng-enter {\n *   opacity:0;\n * }\n * .zipper.ng-enter.ng-enter-active {\n *   opacity:1;\n * }\n * .zipper.ng-leave {\n *   opacity:1;\n * }\n * .zipper.ng-leave.ng-leave-active {\n *   opacity:0;\n * }\n * ```\n *\n * (Note that the `ng-animate` CSS class is reserved and it cannot be applied on an element directly since ngAnimate will always remove\n * the CSS class once an animation has completed.)\n *\n *\n * ## JavaScript-based Animations\n *\n * ngAnimate also allows for animations to be consumed by JavaScript code. The approach is similar to CSS-based animations (where there is a shared\n * CSS class that is referenced in our HTML code) but in addition we need to register the JavaScript animation on the module. By making use of the\n * `module.animation()` module function we can register the ainmation.\n *\n * Let's see an example of a enter/leave animation using `ngRepeat`:\n *\n * ```html\n * <div ng-repeat=\"item in items\" class=\"slide\">\n *   {{ item }}\n * </div>\n * ```\n *\n * See the **slide** CSS class? Let's use that class to define an animation that we'll structure in our module code by using `module.animation`:\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     // make note that other events (like addClass/removeClass)\n *     // have different function input parameters\n *     enter: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *\n *       // remember to call doneFn so that angular\n *       // knows that the animation has concluded\n *     },\n *\n *     move: function(element, doneFn) {\n *       jQuery(element).fadeIn(1000, doneFn);\n *     },\n *\n *     leave: function(element, doneFn) {\n *       jQuery(element).fadeOut(1000, doneFn);\n *     }\n *   }\n * }]\n * ```\n *\n * The nice thing about JS-based animations is that we can inject other services and make use of advanced animation libraries such as\n * greensock.js and velocity.js.\n *\n * If our animation code class-based (meaning that something like `ngClass`, `ngHide` and `ngShow` triggers it) then we can still define\n * our animations inside of the same registered animation, however, the function input arguments are a bit different:\n *\n * ```html\n * <div ng-class=\"color\" class=\"colorful\">\n *   this box is moody\n * </div>\n * <button ng-click=\"color='red'\">Change to red</button>\n * <button ng-click=\"color='blue'\">Change to blue</button>\n * <button ng-click=\"color='green'\">Change to green</button>\n * ```\n *\n * ```js\n * myModule.animation('.colorful', [function() {\n *   return {\n *     addClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     removeClass: function(element, className, doneFn) {\n *       // do some cool animation and call the doneFn\n *     },\n *     setClass: function(element, addedClass, removedClass, doneFn) {\n *       // do some cool animation and call the doneFn\n *     }\n *   }\n * }]\n * ```\n *\n * ## CSS + JS Animations Together\n *\n * AngularJS 1.4 and higher has taken steps to make the amalgamation of CSS and JS animations more flexible. However, unlike earlier versions of Angular,\n * defining CSS and JS animations to work off of the same CSS class will not work anymore. Therefore the example below will only result in **JS animations taking\n * charge of the animation**:\n *\n * ```html\n * <div ng-if=\"bool\" class=\"slide\">\n *   Slide in and out\n * </div>\n * ```\n *\n * ```js\n * myModule.animation('.slide', [function() {\n *   return {\n *     enter: function(element, doneFn) {\n *       jQuery(element).slideIn(1000, doneFn);\n *     }\n *   }\n * }]\n * ```\n *\n * ```css\n * .slide.ng-enter {\n *   transition:0.5s linear all;\n *   transform:translateY(-100px);\n * }\n * .slide.ng-enter.ng-enter-active {\n *   transform:translateY(0);\n * }\n * ```\n *\n * Does this mean that CSS and JS animations cannot be used together? Do JS-based animations always have higher priority? We can make up for the\n * lack of CSS animations by using the `$animateCss` service to trigger our own tweaked-out, CSS-based animations directly from\n * our own JS-based animation code:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n*        // this will trigger `.slide.ng-enter` and `.slide.ng-enter-active`.\n *       var runner = $animateCss(element, {\n *         event: 'enter',\n *         structural: true\n *       }).start();\n*        runner.done(doneFn);\n *     }\n *   }\n * }]\n * ```\n *\n * The nice thing here is that we can save bandwidth by sticking to our CSS-based animation code and we don't need to rely on a 3rd-party animation framework.\n *\n * The `$animateCss` service is very powerful since we can feed in all kinds of extra properties that will be evaluated and fed into a CSS transition or\n * keyframe animation. For example if we wanted to animate the height of an element while adding and removing classes then we can do so by providing that\n * data into `$animateCss` directly:\n *\n * ```js\n * myModule.animation('.slide', ['$animateCss', function($animateCss) {\n *   return {\n *     enter: function(element, doneFn) {\n *       var runner = $animateCss(element, {\n *         event: 'enter',\n *         structural: true,\n *         addClass: 'maroon-setting',\n *         from: { height:0 },\n *         to: { height: 200 }\n *       }).start();\n *\n *       runner.done(doneFn);\n *     }\n *   }\n * }]\n * ```\n *\n * Now we can fill in the rest via our transition CSS code:\n *\n * ```css\n * /&#42; the transition tells ngAnimate to make the animation happen &#42;/\n * .slide.ng-enter { transition:0.5s linear all; }\n *\n * /&#42; this extra CSS class will be absorbed into the transition\n * since the $animateCss code is adding the class &#42;/\n * .maroon-setting { background:red; }\n * ```\n *\n * And `$animateCss` will figure out the rest. Just make sure to have the `done()` callback fire the `doneFn` function to signal when the animation is over.\n *\n * To learn more about what's possible be sure to visit the {@link ngAnimate.$animateCss $animateCss service}.\n *\n * ## Animation Anchoring (via `ng-animate-ref`)\n *\n * ngAnimate in AngularJS 1.4 comes packed with the ability to cross-animate elements between\n * structural areas of an application (like views) by pairing up elements using an attribute\n * called `ng-animate-ref`.\n *\n * Let's say for example we have two views that are managed by `ng-view` and we want to show\n * that there is a relationship between two components situated in within these views. By using the\n * `ng-animate-ref` attribute we can identify that the two components are paired together and we\n * can then attach an animation, which is triggered when the view changes.\n *\n * Say for example we have the following template code:\n *\n * ```html\n * <!-- index.html -->\n * <div ng-view class=\"view-animation\">\n * </div>\n *\n * <!-- home.html -->\n * <a href=\"#/banner-page\">\n *   <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * </a>\n *\n * <!-- banner-page.html -->\n * <img src=\"./banner.jpg\" class=\"banner\" ng-animate-ref=\"banner\">\n * ```\n *\n * Now, when the view changes (once the link is clicked), ngAnimate will examine the\n * HTML contents to see if there is a match reference between any components in the view\n * that is leaving and the view that is entering. It will scan both the view which is being\n * removed (leave) and inserted (enter) to see if there are any paired DOM elements that\n * contain a matching ref value.\n *\n * The two images match since they share the same ref value. ngAnimate will now create a\n * transport element (which is a clone of the first image element) and it will then attempt\n * to animate to the position of the second image element in the next view. For the animation to\n * work a special CSS class called `ng-anchor` will be added to the transported element.\n *\n * We can now attach a transition onto the `.banner.ng-anchor` CSS class and then\n * ngAnimate will handle the entire transition for us as well as the addition and removal of\n * any changes of CSS classes between the elements:\n *\n * ```css\n * .banner.ng-anchor {\n *   /&#42; this animation will last for 1 second since there are\n *          two phases to the animation (an `in` and an `out` phase) &#42;/\n *   transition:0.5s linear all;\n * }\n * ```\n *\n * We also **must** include animations for the views that are being entered and removed\n * (otherwise anchoring wouldn't be possible since the new view would be inserted right away).\n *\n * ```css\n * .view-animation.ng-enter, .view-animation.ng-leave {\n *   transition:0.5s linear all;\n *   position:fixed;\n *   left:0;\n *   top:0;\n *   width:100%;\n * }\n * .view-animation.ng-enter {\n *   transform:translateX(100%);\n * }\n * .view-animation.ng-leave,\n * .view-animation.ng-enter.ng-enter-active {\n *   transform:translateX(0%);\n * }\n * .view-animation.ng-leave.ng-leave-active {\n *   transform:translateX(-100%);\n * }\n * ```\n *\n * Now we can jump back to the anchor animation. When the animation happens, there are two stages that occur:\n * an `out` and an `in` stage. The `out` stage happens first and that is when the element is animated away\n * from its origin. Once that animation is over then the `in` stage occurs which animates the\n * element to its destination. The reason why there are two animations is to give enough time\n * for the enter animation on the new element to be ready.\n *\n * The example above sets up a transition for both the in and out phases, but we can also target the out or\n * in phases directly via `ng-anchor-out` and `ng-anchor-in`.\n *\n * ```css\n * .banner.ng-anchor-out {\n *   transition: 0.5s linear all;\n *\n *   /&#42; the scale will be applied during the out animation,\n *          but will be animated away when the in animation runs &#42;/\n *   transform: scale(1.2);\n * }\n *\n * .banner.ng-anchor-in {\n *   transition: 1s linear all;\n * }\n * ```\n *\n *\n *\n *\n * ### Anchoring Demo\n *\n  <example module=\"anchoringExample\"\n           name=\"anchoringExample\"\n           id=\"anchoringExample\"\n           deps=\"angular-animate.js;angular-route.js\"\n           animations=\"true\">\n    <file name=\"index.html\">\n      <a href=\"#/\">Home</a>\n      <hr />\n      <div class=\"view-container\">\n        <div ng-view class=\"view\"></div>\n      </div>\n    </file>\n    <file name=\"script.js\">\n      angular.module('anchoringExample', ['ngAnimate', 'ngRoute'])\n        .config(['$routeProvider', function($routeProvider) {\n          $routeProvider.when('/', {\n            templateUrl: 'home.html',\n            controller: 'HomeController as home'\n          });\n          $routeProvider.when('/profile/:id', {\n            templateUrl: 'profile.html',\n            controller: 'ProfileController as profile'\n          });\n        }])\n        .run(['$rootScope', function($rootScope) {\n          $rootScope.records = [\n            { id:1, title: \"Miss Beulah Roob\" },\n            { id:2, title: \"Trent Morissette\" },\n            { id:3, title: \"Miss Ava Pouros\" },\n            { id:4, title: \"Rod Pouros\" },\n            { id:5, title: \"Abdul Rice\" },\n            { id:6, title: \"Laurie Rutherford Sr.\" },\n            { id:7, title: \"Nakia McLaughlin\" },\n            { id:8, title: \"Jordon Blanda DVM\" },\n            { id:9, title: \"Rhoda Hand\" },\n            { id:10, title: \"Alexandrea Sauer\" }\n          ];\n        }])\n        .controller('HomeController', [function() {\n          //empty\n        }])\n        .controller('ProfileController', ['$rootScope', '$routeParams', function($rootScope, $routeParams) {\n          var index = parseInt($routeParams.id, 10);\n          var record = $rootScope.records[index - 1];\n\n          this.title = record.title;\n          this.id = record.id;\n        }]);\n    </file>\n    <file name=\"home.html\">\n      <h2>Welcome to the home page</h1>\n      <p>Please click on an element</p>\n      <a class=\"record\"\n         ng-href=\"#/profile/{{ record.id }}\"\n         ng-animate-ref=\"{{ record.id }}\"\n         ng-repeat=\"record in records\">\n        {{ record.title }}\n      </a>\n    </file>\n    <file name=\"profile.html\">\n      <div class=\"profile record\" ng-animate-ref=\"{{ profile.id }}\">\n        {{ profile.title }}\n      </div>\n    </file>\n    <file name=\"animations.css\">\n      .record {\n        display:block;\n        font-size:20px;\n      }\n      .profile {\n        background:black;\n        color:white;\n        font-size:100px;\n      }\n      .view-container {\n        position:relative;\n      }\n      .view-container > .view.ng-animate {\n        position:absolute;\n        top:0;\n        left:0;\n        width:100%;\n        min-height:500px;\n      }\n      .view.ng-enter, .view.ng-leave,\n      .record.ng-anchor {\n        transition:0.5s linear all;\n      }\n      .view.ng-enter {\n        transform:translateX(100%);\n      }\n      .view.ng-enter.ng-enter-active, .view.ng-leave {\n        transform:translateX(0%);\n      }\n      .view.ng-leave.ng-leave-active {\n        transform:translateX(-100%);\n      }\n      .record.ng-anchor-out {\n        background:red;\n      }\n    </file>\n  </example>\n *\n * ### How is the element transported?\n *\n * When an anchor animation occurs, ngAnimate will clone the starting element and position it exactly where the starting\n * element is located on screen via absolute positioning. The cloned element will be placed inside of the root element\n * of the application (where ng-app was defined) and all of the CSS classes of the starting element will be applied. The\n * element will then animate into the `out` and `in` animations and will eventually reach the coordinates and match\n * the dimensions of the destination element. During the entire animation a CSS class of `.ng-animate-shim` will be applied\n * to both the starting and destination elements in order to hide them from being visible (the CSS styling for the class\n * is: `visibility:hidden`). Once the anchor reaches its destination then it will be removed and the destination element\n * will become visible since the shim class will be removed.\n *\n * ### How is the morphing handled?\n *\n * CSS Anchoring relies on transitions and keyframes and the internal code is intelligent enough to figure out\n * what CSS classes differ between the starting element and the destination element. These different CSS classes\n * will be added/removed on the anchor element and a transition will be applied (the transition that is provided\n * in the anchor class). Long story short, ngAnimate will figure out what classes to add and remove which will\n * make the transition of the element as smooth and automatic as possible. Be sure to use simple CSS classes that\n * do not rely on DOM nesting structure so that the anchor element appears the same as the starting element (since\n * the cloned element is placed inside of root element which is likely close to the body element).\n *\n * Note that if the root element is on the `<html>` element then the cloned node will be placed inside of body.\n *\n *\n * ## Using $animate in your directive code\n *\n * So far we've explored how to feed in animations into an Angular application, but how do we trigger animations within our own directives in our application?\n * By injecting the `$animate` service into our directive code, we can trigger structural and class-based hooks which can then be consumed by animations. Let's\n * imagine we have a greeting box that shows and hides itself when the data changes\n *\n * ```html\n * <greeting-box active=\"onOrOff\">Hi there</greeting-box>\n * ```\n *\n * ```js\n * ngModule.directive('greetingBox', ['$animate', function($animate) {\n *   return function(scope, element, attrs) {\n *     attrs.$observe('active', function(value) {\n *       value ? $animate.addClass(element, 'on') : $animate.removeClass(element, 'on');\n *     });\n *   });\n * }]);\n * ```\n *\n * Now the `on` CSS class is added and removed on the greeting box component. Now if we add a CSS class on top of the greeting box element\n * in our HTML code then we can trigger a CSS or JS animation to happen.\n *\n * ```css\n * /&#42; normally we would create a CSS class to reference on the element &#42;/\n * greeting-box.on { transition:0.5s linear all; background:green; color:white; }\n * ```\n *\n * The `$animate` service contains a variety of other methods like `enter`, `leave`, `animate` and `setClass`. To learn more about what's\n * possible be sure to visit the {@link ng.$animate $animate service API page}.\n *\n *\n * ### Preventing Collisions With Third Party Libraries\n *\n * Some third-party frameworks place animation duration defaults across many element or className\n * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which\n * is expecting actual animations on these elements and has to wait for their completion.\n *\n * You can prevent this unwanted behavior by using a prefix on all your animation classes:\n *\n * ```css\n * /&#42; prefixed with animate- &#42;/\n * .animate-fade-add.animate-fade-add-active {\n *   transition:1s linear all;\n *   opacity:0;\n * }\n * ```\n *\n * You then configure `$animate` to enforce this prefix:\n *\n * ```js\n * $animateProvider.classNameFilter(/animate-/);\n * ```\n *\n * This also may provide your application with a speed boost since only specific elements containing CSS class prefix\n * will be evaluated for animation when any DOM changes occur in the application.\n *\n * ## Callbacks and Promises\n *\n * When `$animate` is called it returns a promise that can be used to capture when the animation has ended. Therefore if we were to trigger\n * an animation (within our directive code) then we can continue performing directive and scope related activities after the animation has\n * ended by chaining onto the returned promise that animation method returns.\n *\n * ```js\n * // somewhere within the depths of the directive\n * $animate.enter(element, parent).then(function() {\n *   //the animation has completed\n * });\n * ```\n *\n * (Note that earlier versions of Angular prior to v1.4 required the promise code to be wrapped using `$scope.$apply(...)`. This is not the case\n * anymore.)\n *\n * In addition to the animation promise, we can also make use of animation-related callbacks within our directives and controller code by registering\n * an event listener using the `$animate` service. Let's say for example that an animation was triggered on our view\n * routing controller to hook into that:\n *\n * ```js\n * ngModule.controller('HomePageController', ['$animate', function($animate) {\n *   $animate.on('enter', ngViewElement, function(element) {\n *     // the animation for this route has completed\n *   }]);\n * }])\n * ```\n *\n * (Note that you will need to trigger a digest within the callback to get angular to notice any scope-related changes.)\n */\n\n/**\n * @ngdoc service\n * @name $animate\n * @kind object\n *\n * @description\n * The ngAnimate `$animate` service documentation is the same for the core `$animate` service.\n *\n * Click here {@link ng.$animate to learn more about animations with `$animate`}.\n */\nangular.module('ngAnimate', [])\n  .provider('$$body', $$BodyProvider)\n\n  .directive('ngAnimateChildren', $$AnimateChildrenDirective)\n  .factory('$$rAFScheduler', $$rAFSchedulerFactory)\n\n  .factory('$$AnimateRunner', $$AnimateRunnerFactory)\n  .factory('$$animateAsyncRun', $$AnimateAsyncRunFactory)\n\n  .provider('$$animateQueue', $$AnimateQueueProvider)\n  .provider('$$animation', $$AnimationProvider)\n\n  .provider('$animateCss', $AnimateCssProvider)\n  .provider('$$animateCssDriver', $$AnimateCssDriverProvider)\n\n  .provider('$$animateJs', $$AnimateJsProvider)\n  .provider('$$animateJsDriver', $$AnimateJsDriverProvider);\n\n\n})(window, window.angular);\n"]}