(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular_angular-material/bower_components/angular-material/angular-material.js                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/*!                                                                                                                    // 1
 * Angular Material Design                                                                                             // 2
 * https://github.com/angular/material                                                                                 // 3
 * @license MIT                                                                                                        // 4
 * v0.11.1                                                                                                             // 5
 */                                                                                                                    // 6
(function( window, angular, undefined ){                                                                               // 7
"use strict";                                                                                                          // 8
                                                                                                                       // 9
(function(){                                                                                                           // 10
"use strict";                                                                                                          // 11
                                                                                                                       // 12
angular.module('ngMaterial', ["ng","ngAnimate","ngAria","material.core","material.core.gestures","material.core.layout","material.core.theming.palette","material.core.theming","material.core.animate","material.components.autocomplete","material.components.backdrop","material.components.bottomSheet","material.components.button","material.components.card","material.components.checkbox","material.components.chips","material.components.content","material.components.datepicker","material.components.dialog","material.components.divider","material.components.fabActions","material.components.fabShared","material.components.fabSpeedDial","material.components.fabToolbar","material.components.fabTrigger","material.components.gridList","material.components.icon","material.components.input","material.components.menu","material.components.list","material.components.menuBar","material.components.progressCircular","material.components.radioButton","material.components.progressLinear","material.components.sidenav","material.components.select","material.components.slider","material.components.sticky","material.components.subheader","material.components.swipe","material.components.switch","material.components.tabs","material.components.toast","material.components.toolbar","material.components.tooltip","material.components.virtualRepeat","material.components.whiteframe"]);
})();                                                                                                                  // 14
(function(){                                                                                                           // 15
"use strict";                                                                                                          // 16
                                                                                                                       // 17
/**                                                                                                                    // 18
 * Initialization function that validates environment                                                                  // 19
 * requirements.                                                                                                       // 20
 */                                                                                                                    // 21
angular                                                                                                                // 22
  .module('material.core', [                                                                                           // 23
    'ngAnimate',                                                                                                       // 24
    'material.core.animate',                                                                                           // 25
    'material.core.layout',                                                                                            // 26
    'material.core.gestures',                                                                                          // 27
    'material.core.theming'                                                                                            // 28
  ])                                                                                                                   // 29
  .directive('mdTemplate', MdTemplateDirective)                                                                        // 30
  .config(MdCoreConfigure);                                                                                            // 31
                                                                                                                       // 32
function MdCoreConfigure($provide, $mdThemingProvider) {                                                               // 33
                                                                                                                       // 34
  $provide.decorator('$$rAF', ["$delegate", rAFDecorator]);                                                            // 35
                                                                                                                       // 36
  $mdThemingProvider.theme('default')                                                                                  // 37
    .primaryPalette('indigo')                                                                                          // 38
    .accentPalette('pink')                                                                                             // 39
    .warnPalette('red')                                                                                                // 40
    .backgroundPalette('grey');                                                                                        // 41
}                                                                                                                      // 42
MdCoreConfigure.$inject = ["$provide", "$mdThemingProvider"];                                                          // 43
                                                                                                                       // 44
function MdTemplateDirective($compile) {                                                                               // 45
  return {                                                                                                             // 46
    restrict: 'A',                                                                                                     // 47
    scope: {                                                                                                           // 48
      template: '=mdTemplate'                                                                                          // 49
    },                                                                                                                 // 50
    link: function postLink(scope, element) {                                                                          // 51
      scope.$watch('template', assignSafeHTML);                                                                        // 52
                                                                                                                       // 53
      /**                                                                                                              // 54
       * To add safe HTML: assign and compile in                                                                       // 55
       * isolated scope.                                                                                               // 56
       */                                                                                                              // 57
      function assignSafeHTML(value) {                                                                                 // 58
        // when the 'compile' expression changes                                                                       // 59
        // assign it into the current DOM                                                                              // 60
        element.html(value);                                                                                           // 61
                                                                                                                       // 62
        // Compile the new DOM and link it to the current scope.                                                       // 63
        // NOTE: we only compile .childNodes so that we don't get                                                      // 64
        //       into infinite loop compiling ourselves                                                                // 65
        $compile(element.contents())(scope);                                                                           // 66
      }                                                                                                                // 67
    }                                                                                                                  // 68
  };                                                                                                                   // 69
                                                                                                                       // 70
}                                                                                                                      // 71
MdTemplateDirective.$inject = ["$compile"];                                                                            // 72
                                                                                                                       // 73
function rAFDecorator($delegate) {                                                                                     // 74
  /**                                                                                                                  // 75
   * Use this to throttle events that come in often.                                                                   // 76
   * The throttled function will always use the *last* invocation before the                                           // 77
   * coming frame.                                                                                                     // 78
   *                                                                                                                   // 79
   * For example, window resize events that fire many times a second:                                                  // 80
   * If we set to use an raf-throttled callback on window resize, then                                                 // 81
   * our callback will only be fired once per frame, with the last resize                                              // 82
   * event that happened before that frame.                                                                            // 83
   *                                                                                                                   // 84
   * @param {function} callback function to debounce                                                                   // 85
   */                                                                                                                  // 86
  $delegate.throttle = function(cb) {                                                                                  // 87
    var queuedArgs, alreadyQueued, queueCb, context;                                                                   // 88
    return function debounced() {                                                                                      // 89
      queuedArgs = arguments;                                                                                          // 90
      context = this;                                                                                                  // 91
      queueCb = cb;                                                                                                    // 92
      if (!alreadyQueued) {                                                                                            // 93
        alreadyQueued = true;                                                                                          // 94
        $delegate(function() {                                                                                         // 95
          queueCb.apply(context, Array.prototype.slice.call(queuedArgs));                                              // 96
          alreadyQueued = false;                                                                                       // 97
        });                                                                                                            // 98
      }                                                                                                                // 99
    };                                                                                                                 // 100
  };                                                                                                                   // 101
  return $delegate;                                                                                                    // 102
}                                                                                                                      // 103
                                                                                                                       // 104
})();                                                                                                                  // 105
(function(){                                                                                                           // 106
"use strict";                                                                                                          // 107
                                                                                                                       // 108
angular.module('material.core')                                                                                        // 109
.factory('$mdConstant', MdConstantFactory);                                                                            // 110
                                                                                                                       // 111
/**                                                                                                                    // 112
 * Factory function that creates the grab-bag $mdConstant service.                                                     // 113
 * @ngInject                                                                                                           // 114
 */                                                                                                                    // 115
function MdConstantFactory($sniffer) {                                                                                 // 116
                                                                                                                       // 117
  var webkit = /webkit/i.test($sniffer.vendorPrefix);                                                                  // 118
  function vendorProperty(name) {                                                                                      // 119
    return webkit ?  ('webkit' + name.charAt(0).toUpperCase() + name.substring(1)) : name;                             // 120
  }                                                                                                                    // 121
                                                                                                                       // 122
  return {                                                                                                             // 123
    KEY_CODE: {                                                                                                        // 124
      ENTER: 13,                                                                                                       // 125
      ESCAPE: 27,                                                                                                      // 126
      SPACE: 32,                                                                                                       // 127
      PAGE_UP: 33,                                                                                                     // 128
      PAGE_DOWN: 34,                                                                                                   // 129
      END: 35,                                                                                                         // 130
      HOME: 36,                                                                                                        // 131
      LEFT_ARROW : 37,                                                                                                 // 132
      UP_ARROW : 38,                                                                                                   // 133
      RIGHT_ARROW : 39,                                                                                                // 134
      DOWN_ARROW : 40,                                                                                                 // 135
      TAB : 9,                                                                                                         // 136
      BACKSPACE: 8,                                                                                                    // 137
      DELETE: 46                                                                                                       // 138
    },                                                                                                                 // 139
    CSS: {                                                                                                             // 140
      /* Constants */                                                                                                  // 141
      TRANSITIONEND: 'transitionend' + (webkit ? ' webkitTransitionEnd' : ''),                                         // 142
      ANIMATIONEND: 'animationend' + (webkit ? ' webkitAnimationEnd' : ''),                                            // 143
                                                                                                                       // 144
      TRANSFORM: vendorProperty('transform'),                                                                          // 145
      TRANSFORM_ORIGIN: vendorProperty('transformOrigin'),                                                             // 146
      TRANSITION: vendorProperty('transition'),                                                                        // 147
      TRANSITION_DURATION: vendorProperty('transitionDuration'),                                                       // 148
      ANIMATION_PLAY_STATE: vendorProperty('animationPlayState'),                                                      // 149
      ANIMATION_DURATION: vendorProperty('animationDuration'),                                                         // 150
      ANIMATION_NAME: vendorProperty('animationName'),                                                                 // 151
      ANIMATION_TIMING: vendorProperty('animationTimingFunction'),                                                     // 152
      ANIMATION_DIRECTION: vendorProperty('animationDirection')                                                        // 153
    },                                                                                                                 // 154
    MEDIA: {                                                                                                           // 155
      'sm': '(max-width: 599px)',                                                                                      // 156
      'gt-sm': '(min-width: 600px)',                                                                                   // 157
      'md': '(min-width: 600px) and (max-width: 959px)',                                                               // 158
      'gt-md': '(min-width: 960px)',                                                                                   // 159
      'lg': '(min-width: 960px) and (max-width: 1199px)',                                                              // 160
      'gt-lg': '(min-width: 1200px)'                                                                                   // 161
    },                                                                                                                 // 162
    MEDIA_PRIORITY: [                                                                                                  // 163
      'gt-lg',                                                                                                         // 164
      'lg',                                                                                                            // 165
      'gt-md',                                                                                                         // 166
      'md',                                                                                                            // 167
      'gt-sm',                                                                                                         // 168
      'sm'                                                                                                             // 169
    ]                                                                                                                  // 170
  };                                                                                                                   // 171
}                                                                                                                      // 172
MdConstantFactory.$inject = ["$sniffer"];                                                                              // 173
                                                                                                                       // 174
})();                                                                                                                  // 175
(function(){                                                                                                           // 176
"use strict";                                                                                                          // 177
                                                                                                                       // 178
  angular                                                                                                              // 179
    .module('material.core')                                                                                           // 180
    .config( ["$provide", function($provide){                                                                          // 181
       $provide.decorator('$mdUtil', ['$delegate', function ($delegate){                                               // 182
           /**                                                                                                         // 183
            * Inject the iterator facade to easily support iteration and accessors                                     // 184
            * @see iterator below                                                                                      // 185
            */                                                                                                         // 186
           $delegate.iterator = MdIterator;                                                                            // 187
                                                                                                                       // 188
           return $delegate;                                                                                           // 189
         }                                                                                                             // 190
       ]);                                                                                                             // 191
     }]);                                                                                                              // 192
                                                                                                                       // 193
  /**                                                                                                                  // 194
   * iterator is a list facade to easily support iteration and accessors                                               // 195
   *                                                                                                                   // 196
   * @param items Array list which this iterator will enumerate                                                        // 197
   * @param reloop Boolean enables iterator to consider the list as an endless reloop                                  // 198
   */                                                                                                                  // 199
  function MdIterator(items, reloop) {                                                                                 // 200
    var trueFn = function() { return true; };                                                                          // 201
                                                                                                                       // 202
    if (items && !angular.isArray(items)) {                                                                            // 203
      items = Array.prototype.slice.call(items);                                                                       // 204
    }                                                                                                                  // 205
                                                                                                                       // 206
    reloop = !!reloop;                                                                                                 // 207
    var _items = items || [ ];                                                                                         // 208
                                                                                                                       // 209
    // Published API                                                                                                   // 210
    return {                                                                                                           // 211
      items: getItems,                                                                                                 // 212
      count: count,                                                                                                    // 213
                                                                                                                       // 214
      inRange: inRange,                                                                                                // 215
      contains: contains,                                                                                              // 216
      indexOf: indexOf,                                                                                                // 217
      itemAt: itemAt,                                                                                                  // 218
                                                                                                                       // 219
      findBy: findBy,                                                                                                  // 220
                                                                                                                       // 221
      add: add,                                                                                                        // 222
      remove: remove,                                                                                                  // 223
                                                                                                                       // 224
      first: first,                                                                                                    // 225
      last: last,                                                                                                      // 226
      next: angular.bind(null, findSubsequentItem, false),                                                             // 227
      previous: angular.bind(null, findSubsequentItem, true),                                                          // 228
                                                                                                                       // 229
      hasPrevious: hasPrevious,                                                                                        // 230
      hasNext: hasNext                                                                                                 // 231
                                                                                                                       // 232
    };                                                                                                                 // 233
                                                                                                                       // 234
    /**                                                                                                                // 235
     * Publish copy of the enumerable set                                                                              // 236
     * @returns {Array|*}                                                                                              // 237
     */                                                                                                                // 238
    function getItems() {                                                                                              // 239
      return [].concat(_items);                                                                                        // 240
    }                                                                                                                  // 241
                                                                                                                       // 242
    /**                                                                                                                // 243
     * Determine length of the list                                                                                    // 244
     * @returns {Array.length|*|number}                                                                                // 245
     */                                                                                                                // 246
    function count() {                                                                                                 // 247
      return _items.length;                                                                                            // 248
    }                                                                                                                  // 249
                                                                                                                       // 250
    /**                                                                                                                // 251
     * Is the index specified valid                                                                                    // 252
     * @param index                                                                                                    // 253
     * @returns {Array.length|*|number|boolean}                                                                        // 254
     */                                                                                                                // 255
    function inRange(index) {                                                                                          // 256
      return _items.length && ( index > -1 ) && (index < _items.length );                                              // 257
    }                                                                                                                  // 258
                                                                                                                       // 259
    /**                                                                                                                // 260
     * Can the iterator proceed to the next item in the list; relative to                                              // 261
     * the specified item.                                                                                             // 262
     *                                                                                                                 // 263
     * @param item                                                                                                     // 264
     * @returns {Array.length|*|number|boolean}                                                                        // 265
     */                                                                                                                // 266
    function hasNext(item) {                                                                                           // 267
      return item ? inRange(indexOf(item) + 1) : false;                                                                // 268
    }                                                                                                                  // 269
                                                                                                                       // 270
    /**                                                                                                                // 271
     * Can the iterator proceed to the previous item in the list; relative to                                          // 272
     * the specified item.                                                                                             // 273
     *                                                                                                                 // 274
     * @param item                                                                                                     // 275
     * @returns {Array.length|*|number|boolean}                                                                        // 276
     */                                                                                                                // 277
    function hasPrevious(item) {                                                                                       // 278
      return item ? inRange(indexOf(item) - 1) : false;                                                                // 279
    }                                                                                                                  // 280
                                                                                                                       // 281
    /**                                                                                                                // 282
     * Get item at specified index/position                                                                            // 283
     * @param index                                                                                                    // 284
     * @returns {*}                                                                                                    // 285
     */                                                                                                                // 286
    function itemAt(index) {                                                                                           // 287
      return inRange(index) ? _items[index] : null;                                                                    // 288
    }                                                                                                                  // 289
                                                                                                                       // 290
    /**                                                                                                                // 291
     * Find all elements matching the key/value pair                                                                   // 292
     * otherwise return null                                                                                           // 293
     *                                                                                                                 // 294
     * @param val                                                                                                      // 295
     * @param key                                                                                                      // 296
     *                                                                                                                 // 297
     * @return array                                                                                                   // 298
     */                                                                                                                // 299
    function findBy(key, val) {                                                                                        // 300
      return _items.filter(function(item) {                                                                            // 301
        return item[key] === val;                                                                                      // 302
      });                                                                                                              // 303
    }                                                                                                                  // 304
                                                                                                                       // 305
    /**                                                                                                                // 306
     * Add item to list                                                                                                // 307
     * @param item                                                                                                     // 308
     * @param index                                                                                                    // 309
     * @returns {*}                                                                                                    // 310
     */                                                                                                                // 311
    function add(item, index) {                                                                                        // 312
      if ( !item ) return -1;                                                                                          // 313
                                                                                                                       // 314
      if (!angular.isNumber(index)) {                                                                                  // 315
        index = _items.length;                                                                                         // 316
      }                                                                                                                // 317
                                                                                                                       // 318
      _items.splice(index, 0, item);                                                                                   // 319
                                                                                                                       // 320
      return indexOf(item);                                                                                            // 321
    }                                                                                                                  // 322
                                                                                                                       // 323
    /**                                                                                                                // 324
     * Remove item from list...                                                                                        // 325
     * @param item                                                                                                     // 326
     */                                                                                                                // 327
    function remove(item) {                                                                                            // 328
      if ( contains(item) ){                                                                                           // 329
        _items.splice(indexOf(item), 1);                                                                               // 330
      }                                                                                                                // 331
    }                                                                                                                  // 332
                                                                                                                       // 333
    /**                                                                                                                // 334
     * Get the zero-based index of the target item                                                                     // 335
     * @param item                                                                                                     // 336
     * @returns {*}                                                                                                    // 337
     */                                                                                                                // 338
    function indexOf(item) {                                                                                           // 339
      return _items.indexOf(item);                                                                                     // 340
    }                                                                                                                  // 341
                                                                                                                       // 342
    /**                                                                                                                // 343
     * Boolean existence check                                                                                         // 344
     * @param item                                                                                                     // 345
     * @returns {boolean}                                                                                              // 346
     */                                                                                                                // 347
    function contains(item) {                                                                                          // 348
      return item && (indexOf(item) > -1);                                                                             // 349
    }                                                                                                                  // 350
                                                                                                                       // 351
    /**                                                                                                                // 352
     * Return first item in the list                                                                                   // 353
     * @returns {*}                                                                                                    // 354
     */                                                                                                                // 355
    function first() {                                                                                                 // 356
      return _items.length ? _items[0] : null;                                                                         // 357
    }                                                                                                                  // 358
                                                                                                                       // 359
    /**                                                                                                                // 360
     * Return last item in the list...                                                                                 // 361
     * @returns {*}                                                                                                    // 362
     */                                                                                                                // 363
    function last() {                                                                                                  // 364
      return _items.length ? _items[_items.length - 1] : null;                                                         // 365
    }                                                                                                                  // 366
                                                                                                                       // 367
    /**                                                                                                                // 368
     * Find the next item. If reloop is true and at the end of the list, it will go back to the                        // 369
     * first item. If given, the `validate` callback will be used to determine whether the next item                   // 370
     * is valid. If not valid, it will try to find the next item again.                                                // 371
     *                                                                                                                 // 372
     * @param {boolean} backwards Specifies the direction of searching (forwards/backwards)                            // 373
     * @param {*} item The item whose subsequent item we are looking for                                               // 374
     * @param {Function=} validate The `validate` function                                                             // 375
     * @param {integer=} limit The recursion limit                                                                     // 376
     *                                                                                                                 // 377
     * @returns {*} The subsequent item or null                                                                        // 378
     */                                                                                                                // 379
    function findSubsequentItem(backwards, item, validate, limit) {                                                    // 380
      validate = validate || trueFn;                                                                                   // 381
                                                                                                                       // 382
      var curIndex = indexOf(item);                                                                                    // 383
      while (true) {                                                                                                   // 384
        if (!inRange(curIndex)) return null;                                                                           // 385
                                                                                                                       // 386
        var nextIndex = curIndex + (backwards ? -1 : 1);                                                               // 387
        var foundItem = null;                                                                                          // 388
        if (inRange(nextIndex)) {                                                                                      // 389
          foundItem = _items[nextIndex];                                                                               // 390
        } else if (reloop) {                                                                                           // 391
          foundItem = backwards ? last() : first();                                                                    // 392
          nextIndex = indexOf(foundItem);                                                                              // 393
        }                                                                                                              // 394
                                                                                                                       // 395
        if ((foundItem === null) || (nextIndex === limit)) return null;                                                // 396
        if (validate(foundItem)) return foundItem;                                                                     // 397
                                                                                                                       // 398
        if (angular.isUndefined(limit)) limit = nextIndex;                                                             // 399
                                                                                                                       // 400
        curIndex = nextIndex;                                                                                          // 401
      }                                                                                                                // 402
    }                                                                                                                  // 403
  }                                                                                                                    // 404
                                                                                                                       // 405
                                                                                                                       // 406
})();                                                                                                                  // 407
(function(){                                                                                                           // 408
"use strict";                                                                                                          // 409
                                                                                                                       // 410
angular.module('material.core')                                                                                        // 411
.factory('$mdMedia', mdMediaFactory);                                                                                  // 412
                                                                                                                       // 413
/**                                                                                                                    // 414
 * @ngdoc service                                                                                                      // 415
 * @name $mdMedia                                                                                                      // 416
 * @module material.core                                                                                               // 417
 *                                                                                                                     // 418
 * @description                                                                                                        // 419
 * `$mdMedia` is used to evaluate whether a given media query is true or false given the                               // 420
 * current device's screen / window size. The media query will be re-evaluated on resize, allowing                     // 421
 * you to register a watch.                                                                                            // 422
 *                                                                                                                     // 423
 * `$mdMedia` also has pre-programmed support for media queries that match the layout breakpoints.                     // 424
 *  (`sm`, `gt-sm`, `md`, `gt-md`, `lg`, `gt-lg`).                                                                     // 425
 *                                                                                                                     // 426
 * @returns {boolean} a boolean representing whether or not the given media query is true or false.                    // 427
 *                                                                                                                     // 428
 * @usage                                                                                                              // 429
 * <hljs lang="js">                                                                                                    // 430
 * app.controller('MyController', function($mdMedia, $scope) {                                                         // 431
 *   $scope.$watch(function() { return $mdMedia('lg'); }, function(big) {                                              // 432
 *     $scope.bigScreen = big;                                                                                         // 433
 *   });                                                                                                               // 434
 *                                                                                                                     // 435
 *   $scope.screenIsSmall = $mdMedia('sm');                                                                            // 436
 *   $scope.customQuery = $mdMedia('(min-width: 1234px)');                                                             // 437
 *   $scope.anotherCustom = $mdMedia('max-width: 300px');                                                              // 438
 * });                                                                                                                 // 439
 * </hljs>                                                                                                             // 440
 */                                                                                                                    // 441
                                                                                                                       // 442
function mdMediaFactory($mdConstant, $rootScope, $window) {                                                            // 443
  var queries = {};                                                                                                    // 444
  var mqls = {};                                                                                                       // 445
  var results = {};                                                                                                    // 446
  var normalizeCache = {};                                                                                             // 447
                                                                                                                       // 448
  $mdMedia.getResponsiveAttribute = getResponsiveAttribute;                                                            // 449
  $mdMedia.getQuery = getQuery;                                                                                        // 450
  $mdMedia.watchResponsiveAttributes = watchResponsiveAttributes;                                                      // 451
                                                                                                                       // 452
  return $mdMedia;                                                                                                     // 453
                                                                                                                       // 454
  function $mdMedia(query) {                                                                                           // 455
    var validated = queries[query];                                                                                    // 456
    if (angular.isUndefined(validated)) {                                                                              // 457
      validated = queries[query] = validate(query);                                                                    // 458
    }                                                                                                                  // 459
                                                                                                                       // 460
    var result = results[validated];                                                                                   // 461
    if (angular.isUndefined(result)) {                                                                                 // 462
      result = add(validated);                                                                                         // 463
    }                                                                                                                  // 464
                                                                                                                       // 465
    return result;                                                                                                     // 466
  }                                                                                                                    // 467
                                                                                                                       // 468
  function validate(query) {                                                                                           // 469
    return $mdConstant.MEDIA[query] ||                                                                                 // 470
           ((query.charAt(0) !== '(') ? ('(' + query + ')') : query);                                                  // 471
  }                                                                                                                    // 472
                                                                                                                       // 473
  function add(query) {                                                                                                // 474
    var result = mqls[query] = $window.matchMedia(query);                                                              // 475
    result.addListener(onQueryChange);                                                                                 // 476
    return (results[result.media] = !!result.matches);                                                                 // 477
  }                                                                                                                    // 478
                                                                                                                       // 479
  function onQueryChange(query) {                                                                                      // 480
    $rootScope.$evalAsync(function() {                                                                                 // 481
      results[query.media] = !!query.matches;                                                                          // 482
    });                                                                                                                // 483
  }                                                                                                                    // 484
                                                                                                                       // 485
  function getQuery(name) {                                                                                            // 486
    return mqls[name];                                                                                                 // 487
  }                                                                                                                    // 488
                                                                                                                       // 489
  function getResponsiveAttribute(attrs, attrName) {                                                                   // 490
    for (var i = 0; i < $mdConstant.MEDIA_PRIORITY.length; i++) {                                                      // 491
      var mediaName = $mdConstant.MEDIA_PRIORITY[i];                                                                   // 492
      if (!mqls[queries[mediaName]].matches) {                                                                         // 493
        continue;                                                                                                      // 494
      }                                                                                                                // 495
                                                                                                                       // 496
      var normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);                                       // 497
      if (attrs[normalizedName]) {                                                                                     // 498
        return attrs[normalizedName];                                                                                  // 499
      }                                                                                                                // 500
    }                                                                                                                  // 501
                                                                                                                       // 502
    // fallback on unprefixed                                                                                          // 503
    return attrs[getNormalizedName(attrs, attrName)];                                                                  // 504
  }                                                                                                                    // 505
                                                                                                                       // 506
  function watchResponsiveAttributes(attrNames, attrs, watchFn) {                                                      // 507
    var unwatchFns = [];                                                                                               // 508
    attrNames.forEach(function(attrName) {                                                                             // 509
      var normalizedName = getNormalizedName(attrs, attrName);                                                         // 510
      if (attrs[normalizedName]) {                                                                                     // 511
        unwatchFns.push(                                                                                               // 512
            attrs.$observe(normalizedName, angular.bind(void 0, watchFn, null)));                                      // 513
      }                                                                                                                // 514
                                                                                                                       // 515
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 516
        normalizedName = getNormalizedName(attrs, attrName + '-' + mediaName);                                         // 517
        if (!attrs[normalizedName]) {                                                                                  // 518
          return;                                                                                                      // 519
        }                                                                                                              // 520
                                                                                                                       // 521
        unwatchFns.push(attrs.$observe(normalizedName, angular.bind(void 0, watchFn, mediaName)));                     // 522
      }                                                                                                                // 523
    });                                                                                                                // 524
                                                                                                                       // 525
    return function unwatch() {                                                                                        // 526
      unwatchFns.forEach(function(fn) { fn(); })                                                                       // 527
    };                                                                                                                 // 528
  }                                                                                                                    // 529
                                                                                                                       // 530
  // Improves performance dramatically                                                                                 // 531
  function getNormalizedName(attrs, attrName) {                                                                        // 532
    return normalizeCache[attrName] ||                                                                                 // 533
        (normalizeCache[attrName] = attrs.$normalize(attrName));                                                       // 534
  }                                                                                                                    // 535
}                                                                                                                      // 536
mdMediaFactory.$inject = ["$mdConstant", "$rootScope", "$window"];                                                     // 537
                                                                                                                       // 538
})();                                                                                                                  // 539
(function(){                                                                                                           // 540
"use strict";                                                                                                          // 541
                                                                                                                       // 542
/*                                                                                                                     // 543
 * This var has to be outside the angular factory, otherwise when                                                      // 544
 * there are multiple material apps on the same page, each app                                                         // 545
 * will create its own instance of this array and the app's IDs                                                        // 546
 * will not be unique.                                                                                                 // 547
 */                                                                                                                    // 548
var nextUniqueId = 0;                                                                                                  // 549
                                                                                                                       // 550
angular                                                                                                                // 551
  .module('material.core')                                                                                             // 552
  .factory('$mdUtil', UtilFactory);                                                                                    // 553
                                                                                                                       // 554
function UtilFactory($document, $timeout, $compile, $rootScope, $$mdAnimate, $interpolate, $log) {                     // 555
  // Setup some core variables for the processTemplate method                                                          // 556
  var startSymbol = $interpolate.startSymbol(),                                                                        // 557
    endSymbol = $interpolate.endSymbol(),                                                                              // 558
    usesStandardSymbols = ((startSymbol === '{{') && (endSymbol === '}}'));                                            // 559
                                                                                                                       // 560
  var $mdUtil = {                                                                                                      // 561
    dom: {},                                                                                                           // 562
    now: window.performance ?                                                                                          // 563
      angular.bind(window.performance, window.performance.now) : Date.now || function() {                              // 564
      return new Date().getTime();                                                                                     // 565
    },                                                                                                                 // 566
                                                                                                                       // 567
    clientRect: function(element, offsetParent, isOffsetRect) {                                                        // 568
      var node = getNode(element);                                                                                     // 569
      offsetParent = getNode(offsetParent || node.offsetParent || document.body);                                      // 570
      var nodeRect = node.getBoundingClientRect();                                                                     // 571
                                                                                                                       // 572
      // The user can ask for an offsetRect: a rect relative to the offsetParent,                                      // 573
      // or a clientRect: a rect relative to the page                                                                  // 574
      var offsetRect = isOffsetRect ?                                                                                  // 575
        offsetParent.getBoundingClientRect() :                                                                         // 576
      {left: 0, top: 0, width: 0, height: 0};                                                                          // 577
      return {                                                                                                         // 578
        left: nodeRect.left - offsetRect.left,                                                                         // 579
        top: nodeRect.top - offsetRect.top,                                                                            // 580
        width: nodeRect.width,                                                                                         // 581
        height: nodeRect.height                                                                                        // 582
      };                                                                                                               // 583
    },                                                                                                                 // 584
    offsetRect: function(element, offsetParent) {                                                                      // 585
      return $mdUtil.clientRect(element, offsetParent, true);                                                          // 586
    },                                                                                                                 // 587
                                                                                                                       // 588
    // Annoying method to copy nodes to an array, thanks to IE                                                         // 589
    nodesToArray: function(nodes) {                                                                                    // 590
      nodes = nodes || [];                                                                                             // 591
                                                                                                                       // 592
      var results = [];                                                                                                // 593
      for (var i = 0; i < nodes.length; ++i) {                                                                         // 594
        results.push(nodes.item(i));                                                                                   // 595
      }                                                                                                                // 596
      return results;                                                                                                  // 597
    },                                                                                                                 // 598
                                                                                                                       // 599
    /**                                                                                                                // 600
     * Calculate the positive scroll offset                                                                            // 601
     * TODO: Check with pinch-zoom in IE/Chrome;                                                                       // 602
     *       https://code.google.com/p/chromium/issues/detail?id=496285                                                // 603
     */                                                                                                                // 604
    scrollTop: function(element) {                                                                                     // 605
      element = angular.element(element || $document[0].body);                                                         // 606
                                                                                                                       // 607
      var body = (element[0] == $document[0].body) ? $document[0].body : undefined;                                    // 608
      var scrollTop = body ? body.scrollTop + body.parentElement.scrollTop : 0;                                        // 609
                                                                                                                       // 610
      // Calculate the positive scroll offset                                                                          // 611
      return scrollTop || Math.abs(element[0].getBoundingClientRect().top);                                            // 612
    },                                                                                                                 // 613
                                                                                                                       // 614
    /**                                                                                                                // 615
     * `findFocusTarget()` provides an optional way to identify the focused element when a dialog, bottomsheet, sideNav
     * or other element opens. This is optional attribute finds a nested element with the mdAutoFocus attribute and optional
     * expression. An expression may be specified as the directive value; to enable conditional activation of the autoFocus.
     *                                                                                                                 // 619
     * NOTE: It is up to the component logic to use the '$mdUtil.findFocusTarget()'                                    // 620
     *                                                                                                                 // 621
     * @usage                                                                                                          // 622
     * <hljs lang="html">                                                                                              // 623
     * <md-dialog>                                                                                                     // 624
     *   <form>                                                                                                        // 625
     *     <md-input-container>                                                                                        // 626
     *       <label for="testInput">Label</label>                                                                      // 627
     *       <input id="testInput" type="text" md-autofocus>                                                           // 628
     *     </md-input-container>                                                                                       // 629
     *   </form>                                                                                                       // 630
     * </md-dialog>                                                                                                    // 631
     * </hljs>                                                                                                         // 632
     *                                                                                                                 // 633
     *<hljs lang="html">                                                                                               // 634
     * <md-bottom-sheet class="md-list md-has-header">                                                                 // 635
     *  <md-subheader>Comment Actions</md-subheader>                                                                   // 636
     *  <md-list>                                                                                                      // 637
     *    <md-list-item ng-repeat="item in items">                                                                     // 638
     *                                                                                                                 // 639
     *      <md-button md-autofocus="$index == 2">                                                                     // 640
     *        <md-icon md-svg-src="{{item.icon}}"></md-icon>                                                           // 641
     *        <span class="md-inline-list-icon-label">{{ item.name }}</span>                                           // 642
     *      </md-button>                                                                                               // 643
     *                                                                                                                 // 644
     *    </md-list-item>                                                                                              // 645
     *  </md-list>                                                                                                     // 646
     * </md-bottom-sheet>                                                                                              // 647
     *</hljs>                                                                                                          // 648
     **/                                                                                                               // 649
    findFocusTarget: function(containerEl, attributeVal) {                                                             // 650
      var AUTO_FOCUS = '[md-autofocus]';                                                                               // 651
      var elToFocus;                                                                                                   // 652
                                                                                                                       // 653
      elToFocus = scanForFocusable(containerEl, attributeVal || AUTO_FOCUS);                                           // 654
                                                                                                                       // 655
      if ( !elToFocus && attributeVal != AUTO_FOCUS) {                                                                 // 656
        // Scan for deprecated attribute                                                                               // 657
        elToFocus = scanForFocusable(containerEl, '[md-auto-focus]');                                                  // 658
                                                                                                                       // 659
        if ( !elToFocus ) {                                                                                            // 660
          // Scan for fallback to 'universal' API                                                                      // 661
          elToFocus = scanForFocusable(containerEl, AUTO_FOCUS);                                                       // 662
        }                                                                                                              // 663
      }                                                                                                                // 664
                                                                                                                       // 665
      return elToFocus;                                                                                                // 666
                                                                                                                       // 667
      /**                                                                                                              // 668
       * Can target and nested children for specified Selector (attribute)                                             // 669
       * whose value may be an expression that evaluates to True/False.                                                // 670
       */                                                                                                              // 671
      function scanForFocusable(target, selector) {                                                                    // 672
        var elFound, items = target[0].querySelectorAll(selector);                                                     // 673
                                                                                                                       // 674
        // Find the last child element with the focus attribute                                                        // 675
        if ( items && items.length ){                                                                                  // 676
          var EXP_ATTR = /\s*\[?([\-a-z]*)\]?\s*/i;                                                                    // 677
          var matches = EXP_ATTR.exec(selector);                                                                       // 678
          var attribute = matches ? matches[1] : null;                                                                 // 679
                                                                                                                       // 680
          items.length && angular.forEach(items, function(it) {                                                        // 681
            it = angular.element(it);                                                                                  // 682
                                                                                                                       // 683
            // If the expression evaluates to FALSE, then it is not focusable target                                   // 684
            var focusExpression = it[0].getAttribute(attribute);                                                       // 685
            var isFocusable = !focusExpression || !$mdUtil.validateScope(it) ? true :                                  // 686
                              (it.scope().$eval(focusExpression) !== false );                                          // 687
                                                                                                                       // 688
            if (isFocusable) elFound = it;                                                                             // 689
          });                                                                                                          // 690
        }                                                                                                              // 691
        return elFound;                                                                                                // 692
      }                                                                                                                // 693
    },                                                                                                                 // 694
                                                                                                                       // 695
    // Disables scroll around the passed element.                                                                      // 696
    disableScrollAround: function(element, parent) {                                                                   // 697
      $mdUtil.disableScrollAround._count = $mdUtil.disableScrollAround._count || 0;                                    // 698
      ++$mdUtil.disableScrollAround._count;                                                                            // 699
      if ($mdUtil.disableScrollAround._enableScrolling) return $mdUtil.disableScrollAround._enableScrolling;           // 700
      element = angular.element(element);                                                                              // 701
      var body = $document[0].body,                                                                                    // 702
        restoreBody = disableBodyScroll(),                                                                             // 703
        restoreElement = disableElementScroll(parent);                                                                 // 704
                                                                                                                       // 705
      return $mdUtil.disableScrollAround._enableScrolling = function() {                                               // 706
        if (!--$mdUtil.disableScrollAround._count) {                                                                   // 707
          restoreBody();                                                                                               // 708
          restoreElement();                                                                                            // 709
          delete $mdUtil.disableScrollAround._enableScrolling;                                                         // 710
        }                                                                                                              // 711
      };                                                                                                               // 712
                                                                                                                       // 713
      // Creates a virtual scrolling mask to absorb touchmove, keyboard, scrollbar clicking, and wheel events          // 714
      function disableElementScroll(element) {                                                                         // 715
        element = angular.element(element || body)[0];                                                                 // 716
        var zIndex = 50;                                                                                               // 717
        var scrollMask = angular.element(                                                                              // 718
          '<div class="md-scroll-mask" style="z-index: ' + zIndex + '">' +                                             // 719
          '  <div class="md-scroll-mask-bar"></div>' +                                                                 // 720
          '</div>');                                                                                                   // 721
        element.appendChild(scrollMask[0]);                                                                            // 722
                                                                                                                       // 723
        scrollMask.on('wheel', preventDefault);                                                                        // 724
        scrollMask.on('touchmove', preventDefault);                                                                    // 725
        $document.on('keydown', disableKeyNav);                                                                        // 726
                                                                                                                       // 727
        return function restoreScroll() {                                                                              // 728
          scrollMask.off('wheel');                                                                                     // 729
          scrollMask.off('touchmove');                                                                                 // 730
          scrollMask[0].parentNode.removeChild(scrollMask[0]);                                                         // 731
          $document.off('keydown', disableKeyNav);                                                                     // 732
          delete $mdUtil.disableScrollAround._enableScrolling;                                                         // 733
        };                                                                                                             // 734
                                                                                                                       // 735
        // Prevent keypresses from elements inside the body                                                            // 736
        // used to stop the keypresses that could cause the page to scroll                                             // 737
        // (arrow keys, spacebar, tab, etc).                                                                           // 738
        function disableKeyNav(e) {                                                                                    // 739
          //-- temporarily removed this logic, will possibly re-add at a later date                                    // 740
          //if (!element[0].contains(e.target)) {                                                                      // 741
          //  e.preventDefault();                                                                                      // 742
          //  e.stopImmediatePropagation();                                                                            // 743
          //}                                                                                                          // 744
        }                                                                                                              // 745
                                                                                                                       // 746
        function preventDefault(e) {                                                                                   // 747
          e.preventDefault();                                                                                          // 748
        }                                                                                                              // 749
      }                                                                                                                // 750
                                                                                                                       // 751
      // Converts the body to a position fixed block and translate it to the proper scroll                             // 752
      // position                                                                                                      // 753
      function disableBodyScroll() {                                                                                   // 754
        var htmlNode = body.parentNode;                                                                                // 755
        var restoreHtmlStyle = htmlNode.getAttribute('style') || '';                                                   // 756
        var restoreBodyStyle = body.getAttribute('style') || '';                                                       // 757
        var scrollOffset = $mdUtil.scrollTop(body);                                                                    // 758
        var clientWidth = body.clientWidth;                                                                            // 759
                                                                                                                       // 760
        if (body.scrollHeight > body.clientHeight) {                                                                   // 761
          applyStyles(body, {                                                                                          // 762
            position: 'fixed',                                                                                         // 763
            width: '100%',                                                                                             // 764
            top: -scrollOffset + 'px'                                                                                  // 765
          });                                                                                                          // 766
                                                                                                                       // 767
          applyStyles(htmlNode, {                                                                                      // 768
            overflowY: 'scroll'                                                                                        // 769
          });                                                                                                          // 770
        }                                                                                                              // 771
                                                                                                                       // 772
        if (body.clientWidth < clientWidth) applyStyles(body, {overflow: 'hidden'});                                   // 773
                                                                                                                       // 774
        return function restoreScroll() {                                                                              // 775
          body.setAttribute('style', restoreBodyStyle);                                                                // 776
          htmlNode.setAttribute('style', restoreHtmlStyle);                                                            // 777
          body.scrollTop = scrollOffset;                                                                               // 778
        };                                                                                                             // 779
      }                                                                                                                // 780
                                                                                                                       // 781
      function applyStyles(el, styles) {                                                                               // 782
        for (var key in styles) {                                                                                      // 783
          el.style[key] = styles[key];                                                                                 // 784
        }                                                                                                              // 785
      }                                                                                                                // 786
    },                                                                                                                 // 787
    enableScrolling: function() {                                                                                      // 788
      var method = this.disableScrollAround._enableScrolling;                                                          // 789
      method && method();                                                                                              // 790
    },                                                                                                                 // 791
    floatingScrollbars: function() {                                                                                   // 792
      if (this.floatingScrollbars.cached === undefined) {                                                              // 793
        var tempNode = angular.element('<div style="width: 100%; z-index: -1; position: absolute; height: 35px; overflow-y: scroll"><div style="height: 60;"></div></div>');
        $document[0].body.appendChild(tempNode[0]);                                                                    // 795
        this.floatingScrollbars.cached = (tempNode[0].offsetWidth == tempNode[0].childNodes[0].offsetWidth);           // 796
        tempNode.remove();                                                                                             // 797
      }                                                                                                                // 798
      return this.floatingScrollbars.cached;                                                                           // 799
    },                                                                                                                 // 800
                                                                                                                       // 801
    // Mobile safari only allows you to set focus in click event listeners...                                          // 802
    forceFocus: function(element) {                                                                                    // 803
      var node = element[0] || element;                                                                                // 804
                                                                                                                       // 805
      document.addEventListener('click', function focusOnClick(ev) {                                                   // 806
        if (ev.target === node && ev.$focus) {                                                                         // 807
          node.focus();                                                                                                // 808
          ev.stopImmediatePropagation();                                                                               // 809
          ev.preventDefault();                                                                                         // 810
          node.removeEventListener('click', focusOnClick);                                                             // 811
        }                                                                                                              // 812
      }, true);                                                                                                        // 813
                                                                                                                       // 814
      var newEvent = document.createEvent('MouseEvents');                                                              // 815
      newEvent.initMouseEvent('click', false, true, window, {}, 0, 0, 0, 0,                                            // 816
        false, false, false, false, 0, null);                                                                          // 817
      newEvent.$material = true;                                                                                       // 818
      newEvent.$focus = true;                                                                                          // 819
      node.dispatchEvent(newEvent);                                                                                    // 820
    },                                                                                                                 // 821
                                                                                                                       // 822
    /**                                                                                                                // 823
     * facade to build md-backdrop element with desired styles                                                         // 824
     * NOTE: Use $compile to trigger backdrop postLink function                                                        // 825
     */                                                                                                                // 826
    createBackdrop: function(scope, addClass) {                                                                        // 827
      return $compile($mdUtil.supplant('<md-backdrop class="{0}">', [addClass]))(scope);                               // 828
    },                                                                                                                 // 829
                                                                                                                       // 830
    /**                                                                                                                // 831
     * supplant() method from Crockford's `Remedial Javascript`                                                        // 832
     * Equivalent to use of $interpolate; without dependency on                                                        // 833
     * interpolation symbols and scope. Note: the '{<token>}' can                                                      // 834
     * be property names, property chains, or array indices.                                                           // 835
     */                                                                                                                // 836
    supplant: function(template, values, pattern) {                                                                    // 837
      pattern = pattern || /\{([^\{\}]*)\}/g;                                                                          // 838
      return template.replace(pattern, function(a, b) {                                                                // 839
        var p = b.split('.'),                                                                                          // 840
          r = values;                                                                                                  // 841
        try {                                                                                                          // 842
          for (var s in p) {                                                                                           // 843
            if (p.hasOwnProperty(s) ) {                                                                                // 844
              r = r[p[s]];                                                                                             // 845
            }                                                                                                          // 846
          }                                                                                                            // 847
        } catch (e) {                                                                                                  // 848
          r = a;                                                                                                       // 849
        }                                                                                                              // 850
        return (typeof r === 'string' || typeof r === 'number') ? r : a;                                               // 851
      });                                                                                                              // 852
    },                                                                                                                 // 853
                                                                                                                       // 854
    fakeNgModel: function() {                                                                                          // 855
      return {                                                                                                         // 856
        $fake: true,                                                                                                   // 857
        $setTouched: angular.noop,                                                                                     // 858
        $setViewValue: function(value) {                                                                               // 859
          this.$viewValue = value;                                                                                     // 860
          this.$render(value);                                                                                         // 861
          this.$viewChangeListeners.forEach(function(cb) {                                                             // 862
            cb();                                                                                                      // 863
          });                                                                                                          // 864
        },                                                                                                             // 865
        $isEmpty: function(value) {                                                                                    // 866
          return ('' + value).length === 0;                                                                            // 867
        },                                                                                                             // 868
        $parsers: [],                                                                                                  // 869
        $formatters: [],                                                                                               // 870
        $viewChangeListeners: [],                                                                                      // 871
        $render: angular.noop                                                                                          // 872
      };                                                                                                               // 873
    },                                                                                                                 // 874
                                                                                                                       // 875
    // Returns a function, that, as long as it continues to be invoked, will not                                       // 876
    // be triggered. The function will be called after it stops being called for                                       // 877
    // N milliseconds.                                                                                                 // 878
    // @param wait Integer value of msecs to delay (since last debounce reset); default value 10 msecs                 // 879
    // @param invokeApply should the $timeout trigger $digest() dirty checking                                         // 880
    debounce: function(func, wait, scope, invokeApply) {                                                               // 881
      var timer;                                                                                                       // 882
                                                                                                                       // 883
      return function debounced() {                                                                                    // 884
        var context = scope,                                                                                           // 885
          args = Array.prototype.slice.call(arguments);                                                                // 886
                                                                                                                       // 887
        $timeout.cancel(timer);                                                                                        // 888
        timer = $timeout(function() {                                                                                  // 889
                                                                                                                       // 890
          timer = undefined;                                                                                           // 891
          func.apply(context, args);                                                                                   // 892
                                                                                                                       // 893
        }, wait || 10, invokeApply);                                                                                   // 894
      };                                                                                                               // 895
    },                                                                                                                 // 896
                                                                                                                       // 897
    // Returns a function that can only be triggered every `delay` milliseconds.                                       // 898
    // In other words, the function will not be called unless it has been more                                         // 899
    // than `delay` milliseconds since the last call.                                                                  // 900
    throttle: function throttle(func, delay) {                                                                         // 901
      var recent;                                                                                                      // 902
      return function throttled() {                                                                                    // 903
        var context = this;                                                                                            // 904
        var args = arguments;                                                                                          // 905
        var now = $mdUtil.now();                                                                                       // 906
                                                                                                                       // 907
        if (!recent || (now - recent > delay)) {                                                                       // 908
          func.apply(context, args);                                                                                   // 909
          recent = now;                                                                                                // 910
        }                                                                                                              // 911
      };                                                                                                               // 912
    },                                                                                                                 // 913
                                                                                                                       // 914
    /**                                                                                                                // 915
     * Measures the number of milliseconds taken to run the provided callback                                          // 916
     * function. Uses a high-precision timer if available.                                                             // 917
     */                                                                                                                // 918
    time: function time(cb) {                                                                                          // 919
      var start = $mdUtil.now();                                                                                       // 920
      cb();                                                                                                            // 921
      return $mdUtil.now() - start;                                                                                    // 922
    },                                                                                                                 // 923
                                                                                                                       // 924
    /**                                                                                                                // 925
     * Create an implicit getter that caches its `getter()`                                                            // 926
     * lookup value                                                                                                    // 927
     */                                                                                                                // 928
    valueOnUse : function (scope, key, getter) {                                                                       // 929
      var value = null, args = Array.prototype.slice.call(arguments);                                                  // 930
      var params = (args.length > 3) ? args.slice(3) : [ ];                                                            // 931
                                                                                                                       // 932
      Object.defineProperty(scope, key, {                                                                              // 933
        get: function () {                                                                                             // 934
          if (value === null) value = getter.apply(scope, params);                                                     // 935
          return value;                                                                                                // 936
        }                                                                                                              // 937
      });                                                                                                              // 938
    },                                                                                                                 // 939
                                                                                                                       // 940
    /**                                                                                                                // 941
     * Get a unique ID.                                                                                                // 942
     *                                                                                                                 // 943
     * @returns {string} an unique numeric string                                                                      // 944
     */                                                                                                                // 945
    nextUid: function() {                                                                                              // 946
      return '' + nextUniqueId++;                                                                                      // 947
    },                                                                                                                 // 948
                                                                                                                       // 949
    /**                                                                                                                // 950
     * By default AngularJS attaches information about binding and scopes to DOM nodes,                                // 951
     * and adds CSS classes to data-bound elements. But this information is NOT available                              // 952
     * when `$compileProvider.debugInfoEnabled(false);`                                                                // 953
     *                                                                                                                 // 954
     * @see https://docs.angularjs.org/guide/production                                                                // 955
     */                                                                                                                // 956
    validateScope : function(element) {                                                                                // 957
      var hasScope = element && angular.isDefined(element.scope());                                                    // 958
      if ( !hasScope ) {                                                                                               // 959
        $log.warn("element.scope() is not available when 'debug mode' == false. @see https://docs.angularjs.org/guide/production!");
      }                                                                                                                // 961
                                                                                                                       // 962
      return hasScope;                                                                                                 // 963
    },                                                                                                                 // 964
                                                                                                                       // 965
    // Stop watchers and events from firing on a scope without destroying it,                                          // 966
    // by disconnecting it from its parent and its siblings' linked lists.                                             // 967
    disconnectScope: function disconnectScope(scope) {                                                                 // 968
      if (!scope) return;                                                                                              // 969
                                                                                                                       // 970
      // we can't destroy the root scope or a scope that has been already destroyed                                    // 971
      if (scope.$root === scope) return;                                                                               // 972
      if (scope.$$destroyed) return;                                                                                   // 973
                                                                                                                       // 974
      var parent = scope.$parent;                                                                                      // 975
      scope.$$disconnected = true;                                                                                     // 976
                                                                                                                       // 977
      // See Scope.$destroy                                                                                            // 978
      if (parent.$$childHead === scope) parent.$$childHead = scope.$$nextSibling;                                      // 979
      if (parent.$$childTail === scope) parent.$$childTail = scope.$$prevSibling;                                      // 980
      if (scope.$$prevSibling) scope.$$prevSibling.$$nextSibling = scope.$$nextSibling;                                // 981
      if (scope.$$nextSibling) scope.$$nextSibling.$$prevSibling = scope.$$prevSibling;                                // 982
                                                                                                                       // 983
      scope.$$nextSibling = scope.$$prevSibling = null;                                                                // 984
                                                                                                                       // 985
    },                                                                                                                 // 986
                                                                                                                       // 987
    // Undo the effects of disconnectScope above.                                                                      // 988
    reconnectScope: function reconnectScope(scope) {                                                                   // 989
      if (!scope) return;                                                                                              // 990
                                                                                                                       // 991
      // we can't disconnect the root node or scope already disconnected                                               // 992
      if (scope.$root === scope) return;                                                                               // 993
      if (!scope.$$disconnected) return;                                                                               // 994
                                                                                                                       // 995
      var child = scope;                                                                                               // 996
                                                                                                                       // 997
      var parent = child.$parent;                                                                                      // 998
      child.$$disconnected = false;                                                                                    // 999
      // See Scope.$new for this logic...                                                                              // 1000
      child.$$prevSibling = parent.$$childTail;                                                                        // 1001
      if (parent.$$childHead) {                                                                                        // 1002
        parent.$$childTail.$$nextSibling = child;                                                                      // 1003
        parent.$$childTail = child;                                                                                    // 1004
      } else {                                                                                                         // 1005
        parent.$$childHead = parent.$$childTail = child;                                                               // 1006
      }                                                                                                                // 1007
    },                                                                                                                 // 1008
                                                                                                                       // 1009
    /*                                                                                                                 // 1010
     * getClosest replicates jQuery.closest() to walk up the DOM tree until it finds a matching nodeName               // 1011
     *                                                                                                                 // 1012
     * @param el Element to start walking the DOM from                                                                 // 1013
     * @param tagName Tag name to find closest to el, such as 'form'                                                   // 1014
     */                                                                                                                // 1015
    getClosest: function getClosest(el, tagName, onlyParent) {                                                         // 1016
      if (el instanceof angular.element) el = el[0];                                                                   // 1017
      tagName = tagName.toUpperCase();                                                                                 // 1018
      if (onlyParent) el = el.parentNode;                                                                              // 1019
      if (!el) return null;                                                                                            // 1020
      do {                                                                                                             // 1021
        if (el.nodeName === tagName) {                                                                                 // 1022
          return el;                                                                                                   // 1023
        }                                                                                                              // 1024
      } while (el = el.parentNode);                                                                                    // 1025
      return null;                                                                                                     // 1026
    },                                                                                                                 // 1027
                                                                                                                       // 1028
    /**                                                                                                                // 1029
     * Build polyfill for the Node.contains feature (if needed)                                                        // 1030
     */                                                                                                                // 1031
    elementContains: function(node, child) {                                                                           // 1032
      var hasContains = (window.Node && window.Node.prototype && Node.prototype.contains);                             // 1033
      var findFn = hasContains ? angular.bind(node, node.contains) : angular.bind(node, function(arg) {                // 1034
        // compares the positions of two nodes and returns a bitmask                                                   // 1035
        return (node === child) || !!(this.compareDocumentPosition(arg) & 16)                                          // 1036
      });                                                                                                              // 1037
                                                                                                                       // 1038
      return findFn(child);                                                                                            // 1039
    },                                                                                                                 // 1040
                                                                                                                       // 1041
    /**                                                                                                                // 1042
     * Functional equivalent for $element.filter(‘md-bottom-sheet’)                                                    // 1043
     * useful with interimElements where the element and its container are important...                                // 1044
     *                                                                                                                 // 1045
     * @param {[]} elements to scan                                                                                    // 1046
     * @param {string} name of node to find (e.g. 'md-dialog')                                                         // 1047
     * @param {boolean=} optional flag to allow deep scans; defaults to 'false'.                                       // 1048
     * @param {boolean=} optional flag to enable log warnings; defaults to false                                       // 1049
     */                                                                                                                // 1050
    extractElementByName: function(element, nodeName, scanDeep, warnNotFound) {                                        // 1051
      var found = scanTree(element);                                                                                   // 1052
      if (!found && !!warnNotFound) {                                                                                  // 1053
        $log.warn( $mdUtil.supplant("Unable to find node '{0}' in element '{1}'.",[nodeName, element[0].outerHTML]) );
      }                                                                                                                // 1055
                                                                                                                       // 1056
      return angular.element(found || element);                                                                        // 1057
                                                                                                                       // 1058
      /**                                                                                                              // 1059
       * Breadth-First tree scan for element with matching `nodeName`                                                  // 1060
       */                                                                                                              // 1061
      function scanTree(element) {                                                                                     // 1062
        return scanLevel(element) || (!!scanDeep ? scanChildren(element) : null);                                      // 1063
      }                                                                                                                // 1064
                                                                                                                       // 1065
      /**                                                                                                              // 1066
       * Case-insensitive scan of current elements only (do not descend).                                              // 1067
       */                                                                                                              // 1068
      function scanLevel(element) {                                                                                    // 1069
        if ( element ) {                                                                                               // 1070
          for (var i = 0, len = element.length; i < len; i++) {                                                        // 1071
            if (element[i].nodeName.toLowerCase() === nodeName) {                                                      // 1072
              return element[i];                                                                                       // 1073
            }                                                                                                          // 1074
          }                                                                                                            // 1075
        }                                                                                                              // 1076
        return null;                                                                                                   // 1077
      }                                                                                                                // 1078
                                                                                                                       // 1079
      /**                                                                                                              // 1080
       * Scan children of specified node                                                                               // 1081
       */                                                                                                              // 1082
      function scanChildren(element) {                                                                                 // 1083
        var found;                                                                                                     // 1084
        if ( element ) {                                                                                               // 1085
          for (var i = 0, len = element.length; i < len; i++) {                                                        // 1086
            var target = element[i];                                                                                   // 1087
            if ( !found ) {                                                                                            // 1088
              for (var j = 0, numChild = target.childNodes.length; j < numChild; j++) {                                // 1089
                found = found || scanTree([target.childNodes[j]]);                                                     // 1090
              }                                                                                                        // 1091
            }                                                                                                          // 1092
          }                                                                                                            // 1093
        }                                                                                                              // 1094
        return found;                                                                                                  // 1095
      }                                                                                                                // 1096
                                                                                                                       // 1097
    },                                                                                                                 // 1098
                                                                                                                       // 1099
    /**                                                                                                                // 1100
     * Give optional properties with no value a boolean true if attr provided or false otherwise                       // 1101
     */                                                                                                                // 1102
    initOptionalProperties: function(scope, attr, defaults) {                                                          // 1103
      defaults = defaults || {};                                                                                       // 1104
      angular.forEach(scope.$$isolateBindings, function(binding, key) {                                                // 1105
        if (binding.optional && angular.isUndefined(scope[key])) {                                                     // 1106
          var attrIsDefined = angular.isDefined(attr[binding.attrName]);                                               // 1107
          scope[key] = angular.isDefined(defaults[key]) ? defaults[key] : attrIsDefined;                               // 1108
        }                                                                                                              // 1109
      });                                                                                                              // 1110
    },                                                                                                                 // 1111
                                                                                                                       // 1112
    /**                                                                                                                // 1113
     * Alternative to $timeout calls with 0 delay.                                                                     // 1114
     * nextTick() coalesces all calls within a single frame                                                            // 1115
     * to minimize $digest thrashing                                                                                   // 1116
     *                                                                                                                 // 1117
     * @param callback                                                                                                 // 1118
     * @param digest                                                                                                   // 1119
     * @returns {*}                                                                                                    // 1120
     */                                                                                                                // 1121
    nextTick: function(callback, digest, scope) {                                                                      // 1122
      //-- grab function reference for storing state details                                                           // 1123
      var nextTick = $mdUtil.nextTick;                                                                                 // 1124
      var timeout = nextTick.timeout;                                                                                  // 1125
      var queue = nextTick.queue || [];                                                                                // 1126
                                                                                                                       // 1127
      //-- add callback to the queue                                                                                   // 1128
      queue.push(callback);                                                                                            // 1129
                                                                                                                       // 1130
      //-- set default value for digest                                                                                // 1131
      if (digest == null) digest = true;                                                                               // 1132
                                                                                                                       // 1133
      //-- store updated digest/queue values                                                                           // 1134
      nextTick.digest = nextTick.digest || digest;                                                                     // 1135
      nextTick.queue = queue;                                                                                          // 1136
                                                                                                                       // 1137
      //-- either return existing timeout or create a new one                                                          // 1138
      return timeout || (nextTick.timeout = $timeout(processQueue, 0, false));                                         // 1139
                                                                                                                       // 1140
      /**                                                                                                              // 1141
       * Grab a copy of the current queue                                                                              // 1142
       * Clear the queue for future use                                                                                // 1143
       * Process the existing queue                                                                                    // 1144
       * Trigger digest if necessary                                                                                   // 1145
       */                                                                                                              // 1146
      function processQueue() {                                                                                        // 1147
        var skip = scope && scope.$$destroyed;                                                                         // 1148
        var queue = !skip ? nextTick.queue : [];                                                                       // 1149
        var digest = !skip ? nextTick.digest : null;                                                                   // 1150
                                                                                                                       // 1151
        nextTick.queue = [];                                                                                           // 1152
        nextTick.timeout = null;                                                                                       // 1153
        nextTick.digest = false;                                                                                       // 1154
                                                                                                                       // 1155
        queue.forEach(function(callback) {                                                                             // 1156
          callback();                                                                                                  // 1157
        });                                                                                                            // 1158
                                                                                                                       // 1159
        if (digest) $rootScope.$digest();                                                                              // 1160
      }                                                                                                                // 1161
    },                                                                                                                 // 1162
                                                                                                                       // 1163
    /**                                                                                                                // 1164
     * Processes a template and replaces the start/end symbols if the application has                                  // 1165
     * overriden them.                                                                                                 // 1166
     *                                                                                                                 // 1167
     * @param template The template to process whose start/end tags may be replaced.                                   // 1168
     * @returns {*}                                                                                                    // 1169
     */                                                                                                                // 1170
    processTemplate: function(template) {                                                                              // 1171
      if (usesStandardSymbols) {                                                                                       // 1172
        return template;                                                                                               // 1173
      } else {                                                                                                         // 1174
        if (!template || !angular.isString(template)) return template;                                                 // 1175
        return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                       // 1176
      }                                                                                                                // 1177
    }                                                                                                                  // 1178
  };                                                                                                                   // 1179
                                                                                                                       // 1180
// Instantiate other namespace utility methods                                                                         // 1181
                                                                                                                       // 1182
  $mdUtil.dom.animator = $$mdAnimate($mdUtil);                                                                         // 1183
                                                                                                                       // 1184
  return $mdUtil;                                                                                                      // 1185
                                                                                                                       // 1186
  function getNode(el) {                                                                                               // 1187
    return el[0] || el;                                                                                                // 1188
  }                                                                                                                    // 1189
                                                                                                                       // 1190
}                                                                                                                      // 1191
UtilFactory.$inject = ["$document", "$timeout", "$compile", "$rootScope", "$$mdAnimate", "$interpolate", "$log"];      // 1192
                                                                                                                       // 1193
/*                                                                                                                     // 1194
 * Since removing jQuery from the demos, some code that uses `element.focus()` is broken.                              // 1195
 * We need to add `element.focus()`, because it's testable unlike `element[0].focus`.                                  // 1196
 */                                                                                                                    // 1197
                                                                                                                       // 1198
angular.element.prototype.focus = angular.element.prototype.focus || function() {                                      // 1199
    if (this.length) {                                                                                                 // 1200
      this[0].focus();                                                                                                 // 1201
    }                                                                                                                  // 1202
    return this;                                                                                                       // 1203
  };                                                                                                                   // 1204
angular.element.prototype.blur = angular.element.prototype.blur || function() {                                        // 1205
    if (this.length) {                                                                                                 // 1206
      this[0].blur();                                                                                                  // 1207
    }                                                                                                                  // 1208
    return this;                                                                                                       // 1209
  };                                                                                                                   // 1210
                                                                                                                       // 1211
                                                                                                                       // 1212
})();                                                                                                                  // 1213
(function(){                                                                                                           // 1214
"use strict";                                                                                                          // 1215
                                                                                                                       // 1216
                                                                                                                       // 1217
angular.module('material.core')                                                                                        // 1218
  .service('$mdAria', AriaService);                                                                                    // 1219
                                                                                                                       // 1220
/*                                                                                                                     // 1221
 * @ngInject                                                                                                           // 1222
 */                                                                                                                    // 1223
function AriaService($$rAF, $log, $window) {                                                                           // 1224
                                                                                                                       // 1225
  return {                                                                                                             // 1226
    expect: expect,                                                                                                    // 1227
    expectAsync: expectAsync,                                                                                          // 1228
    expectWithText: expectWithText                                                                                     // 1229
  };                                                                                                                   // 1230
                                                                                                                       // 1231
  /**                                                                                                                  // 1232
   * Check if expected attribute has been specified on the target element or child                                     // 1233
   * @param element                                                                                                    // 1234
   * @param attrName                                                                                                   // 1235
   * @param {optional} defaultValue What to set the attr to if no value is found                                       // 1236
   */                                                                                                                  // 1237
  function expect(element, attrName, defaultValue) {                                                                   // 1238
                                                                                                                       // 1239
    var node = angular.element(element)[0] || element;                                                                 // 1240
                                                                                                                       // 1241
    // if node exists and neither it nor its children have the attribute                                               // 1242
    if (node &&                                                                                                        // 1243
       ((!node.hasAttribute(attrName) ||                                                                               // 1244
        node.getAttribute(attrName).length === 0) &&                                                                   // 1245
        !childHasAttribute(node, attrName))) {                                                                         // 1246
                                                                                                                       // 1247
      defaultValue = angular.isString(defaultValue) ? defaultValue.trim() : '';                                        // 1248
      if (defaultValue.length) {                                                                                       // 1249
        element.attr(attrName, defaultValue);                                                                          // 1250
      } else {                                                                                                         // 1251
        $log.warn('ARIA: Attribute "', attrName, '", required for accessibility, is missing on node:', node);          // 1252
      }                                                                                                                // 1253
                                                                                                                       // 1254
    }                                                                                                                  // 1255
  }                                                                                                                    // 1256
                                                                                                                       // 1257
  function expectAsync(element, attrName, defaultValueGetter) {                                                        // 1258
    // Problem: when retrieving the element's contents synchronously to find the label,                                // 1259
    // the text may not be defined yet in the case of a binding.                                                       // 1260
    // There is a higher chance that a binding will be defined if we wait one frame.                                   // 1261
    $$rAF(function() {                                                                                                 // 1262
      expect(element, attrName, defaultValueGetter());                                                                 // 1263
    });                                                                                                                // 1264
  }                                                                                                                    // 1265
                                                                                                                       // 1266
  function expectWithText(element, attrName) {                                                                         // 1267
    expectAsync(element, attrName, function() {                                                                        // 1268
      return getText(element);                                                                                         // 1269
    });                                                                                                                // 1270
  }                                                                                                                    // 1271
                                                                                                                       // 1272
  function getText(element) {                                                                                          // 1273
    return element.text().trim();                                                                                      // 1274
  }                                                                                                                    // 1275
                                                                                                                       // 1276
  function childHasAttribute(node, attrName) {                                                                         // 1277
    var hasChildren = node.hasChildNodes(),                                                                            // 1278
        hasAttr = false;                                                                                               // 1279
                                                                                                                       // 1280
    function isHidden(el) {                                                                                            // 1281
      var style = el.currentStyle ? el.currentStyle : $window.getComputedStyle(el);                                    // 1282
      return (style.display === 'none');                                                                               // 1283
    }                                                                                                                  // 1284
                                                                                                                       // 1285
    if(hasChildren) {                                                                                                  // 1286
      var children = node.childNodes;                                                                                  // 1287
      for(var i=0; i<children.length; i++){                                                                            // 1288
        var child = children[i];                                                                                       // 1289
        if(child.nodeType === 1 && child.hasAttribute(attrName)) {                                                     // 1290
          if(!isHidden(child)){                                                                                        // 1291
            hasAttr = true;                                                                                            // 1292
          }                                                                                                            // 1293
        }                                                                                                              // 1294
      }                                                                                                                // 1295
    }                                                                                                                  // 1296
    return hasAttr;                                                                                                    // 1297
  }                                                                                                                    // 1298
}                                                                                                                      // 1299
AriaService.$inject = ["$$rAF", "$log", "$window"];                                                                    // 1300
                                                                                                                       // 1301
})();                                                                                                                  // 1302
(function(){                                                                                                           // 1303
"use strict";                                                                                                          // 1304
                                                                                                                       // 1305
angular                                                                                                                // 1306
  .module('material.core')                                                                                             // 1307
  .service('$mdCompiler', mdCompilerService);                                                                          // 1308
                                                                                                                       // 1309
function mdCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {                              // 1310
  /* jshint validthis: true */                                                                                         // 1311
                                                                                                                       // 1312
  /*                                                                                                                   // 1313
   * @ngdoc service                                                                                                    // 1314
   * @name $mdCompiler                                                                                                 // 1315
   * @module material.core                                                                                             // 1316
   * @description                                                                                                      // 1317
   * The $mdCompiler service is an abstraction of angular's compiler, that allows the developer                        // 1318
   * to easily compile an element with a templateUrl, controller, and locals.                                          // 1319
   *                                                                                                                   // 1320
   * @usage                                                                                                            // 1321
   * <hljs lang="js">                                                                                                  // 1322
   * $mdCompiler.compile({                                                                                             // 1323
   *   templateUrl: 'modal.html',                                                                                      // 1324
   *   controller: 'ModalCtrl',                                                                                        // 1325
   *   locals: {                                                                                                       // 1326
   *     modal: myModalInstance;                                                                                       // 1327
   *   }                                                                                                               // 1328
   * }).then(function(compileData) {                                                                                   // 1329
   *   compileData.element; // modal.html's template in an element                                                     // 1330
   *   compileData.link(myScope); //attach controller & scope to element                                               // 1331
   * });                                                                                                               // 1332
   * </hljs>                                                                                                           // 1333
   */                                                                                                                  // 1334
                                                                                                                       // 1335
   /*                                                                                                                  // 1336
    * @ngdoc method                                                                                                    // 1337
    * @name $mdCompiler#compile                                                                                        // 1338
    * @description A helper to compile an HTML template/templateUrl with a given controller,                           // 1339
    * locals, and scope.                                                                                               // 1340
    * @param {object} options An options object, with the following properties:                                        // 1341
    *                                                                                                                  // 1342
    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with                        // 1343
    *      newly created scope or the name of a registered controller if passed as a string.                           // 1344
    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be                     // 1345
    *      published to scope under the `controllerAs` name.                                                           // 1346
    *    - `template` - `{string=}` An html template as a string.                                                      // 1347
    *    - `templateUrl` - `{string=}` A path to an html template.                                                     // 1348
    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after                // 1349
    *      it is loaded. It will be given the template string as a parameter, and should                               // 1350
    *      return a a new string representing the transformed template.                                                // 1351
    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should                   // 1352
    *      be injected into the controller. If any of these dependencies are promises, the compiler                    // 1353
    *      will wait for them all to be resolved, or if one is rejected before the controller is                       // 1354
    *      instantiated `compile()` will fail..                                                                        // 1355
    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.                            // 1356
    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.                           // 1357
    *        Otherwise if function, then it is injected and the return value is treated as the                         // 1358
    *        dependency. If the result is a promise, it is resolved before its value is                                // 1359
    *        injected into the controller.                                                                             // 1360
    *                                                                                                                  // 1361
    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.                        // 1362
    * `compileData` has the following properties:                                                                      // 1363
    *                                                                                                                  // 1364
    *   - `element` - `{element}`: an uncompiled element matching the provided template.                               // 1365
    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile                              // 1366
    *     the element and instantiate the provided controller (if given).                                              // 1367
    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is                    // 1368
    *     called. If `bindToController` is true, they will be coppied to the ctrl instead                              // 1369
    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                  // 1370
    */                                                                                                                 // 1371
  this.compile = function(options) {                                                                                   // 1372
    var templateUrl = options.templateUrl;                                                                             // 1373
    var template = options.template || '';                                                                             // 1374
    var controller = options.controller;                                                                               // 1375
    var controllerAs = options.controllerAs;                                                                           // 1376
    var resolve = angular.extend({}, options.resolve || {});                                                           // 1377
    var locals = angular.extend({}, options.locals || {});                                                             // 1378
    var transformTemplate = options.transformTemplate || angular.identity;                                             // 1379
    var bindToController = options.bindToController;                                                                   // 1380
                                                                                                                       // 1381
    // Take resolve values and invoke them.                                                                            // 1382
    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),                                            // 1383
    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})                               // 1384
    angular.forEach(resolve, function(value, key) {                                                                    // 1385
      if (angular.isString(value)) {                                                                                   // 1386
        resolve[key] = $injector.get(value);                                                                           // 1387
      } else {                                                                                                         // 1388
        resolve[key] = $injector.invoke(value);                                                                        // 1389
      }                                                                                                                // 1390
    });                                                                                                                // 1391
    //Add the locals, which are just straight values to inject                                                         // 1392
    //eg locals: { three: 3 }, will inject three into the controller                                                   // 1393
    angular.extend(resolve, locals);                                                                                   // 1394
                                                                                                                       // 1395
    if (templateUrl) {                                                                                                 // 1396
      resolve.$template = $http.get(templateUrl, {cache: $templateCache})                                              // 1397
        .then(function(response) {                                                                                     // 1398
          return response.data;                                                                                        // 1399
        });                                                                                                            // 1400
    } else {                                                                                                           // 1401
      resolve.$template = $q.when(template);                                                                           // 1402
    }                                                                                                                  // 1403
                                                                                                                       // 1404
    // Wait for all the resolves to finish if they are promises                                                        // 1405
    return $q.all(resolve).then(function(locals) {                                                                     // 1406
                                                                                                                       // 1407
      var compiledData;                                                                                                // 1408
      var template = transformTemplate(locals.$template);                                                              // 1409
      var element = options.element || angular.element('<div>').html(template.trim()).contents();                      // 1410
      var linkFn = $compile(element);                                                                                  // 1411
                                                                                                                       // 1412
      // Return a linking function that can be used later when the element is ready                                    // 1413
      return compiledData = {                                                                                          // 1414
        locals: locals,                                                                                                // 1415
        element: element,                                                                                              // 1416
        link: function link(scope) {                                                                                   // 1417
          locals.$scope = scope;                                                                                       // 1418
                                                                                                                       // 1419
          //Instantiate controller if it exists, because we have scope                                                 // 1420
          if (controller) {                                                                                            // 1421
            var invokeCtrl = $controller(controller, locals, true);                                                    // 1422
            if (bindToController) {                                                                                    // 1423
              angular.extend(invokeCtrl.instance, locals);                                                             // 1424
            }                                                                                                          // 1425
            var ctrl = invokeCtrl();                                                                                   // 1426
            //See angular-route source for this logic                                                                  // 1427
            element.data('$ngControllerController', ctrl);                                                             // 1428
            element.children().data('$ngControllerController', ctrl);                                                  // 1429
                                                                                                                       // 1430
            if (controllerAs) {                                                                                        // 1431
              scope[controllerAs] = ctrl;                                                                              // 1432
            }                                                                                                          // 1433
                                                                                                                       // 1434
            // Publish reference to this controller                                                                    // 1435
            compiledData.controller = ctrl;                                                                            // 1436
          }                                                                                                            // 1437
          return linkFn(scope);                                                                                        // 1438
        }                                                                                                              // 1439
      };                                                                                                               // 1440
    });                                                                                                                // 1441
                                                                                                                       // 1442
  };                                                                                                                   // 1443
}                                                                                                                      // 1444
mdCompilerService.$inject = ["$q", "$http", "$injector", "$compile", "$controller", "$templateCache"];                 // 1445
                                                                                                                       // 1446
})();                                                                                                                  // 1447
(function(){                                                                                                           // 1448
"use strict";                                                                                                          // 1449
                                                                                                                       // 1450
  var HANDLERS = {};                                                                                                   // 1451
  /* The state of the current 'pointer'                                                                                // 1452
   * The pointer represents the state of the current touch.                                                            // 1453
   * It contains normalized x and y coordinates from DOM events,                                                       // 1454
   * as well as other information abstracted from the DOM.                                                             // 1455
   */                                                                                                                  // 1456
  var pointer, lastPointer, forceSkipClickHijack = false;                                                              // 1457
                                                                                                                       // 1458
  /**                                                                                                                  // 1459
   * The position of the most recent click if that click was on a label element.                                       // 1460
   * @type {{x: number, y: number}?}                                                                                   // 1461
   */                                                                                                                  // 1462
  var lastLabelClickPos = null;                                                                                        // 1463
                                                                                                                       // 1464
  // Used to attach event listeners once when multiple ng-apps are running.                                            // 1465
  var isInitialized = false;                                                                                           // 1466
                                                                                                                       // 1467
  angular                                                                                                              // 1468
    .module('material.core.gestures', [ ])                                                                             // 1469
    .provider('$mdGesture', MdGestureProvider)                                                                         // 1470
    .factory('$$MdGestureHandler', MdGestureHandler)                                                                   // 1471
    .run( attachToDocument );                                                                                          // 1472
                                                                                                                       // 1473
  /**                                                                                                                  // 1474
     * @ngdoc service                                                                                                  // 1475
     * @name $mdGestureProvider                                                                                        // 1476
     * @module material.core.gestures                                                                                  // 1477
     *                                                                                                                 // 1478
     * @description                                                                                                    // 1479
     * In some scenarios on Mobile devices (without jQuery), the click events should NOT be hijacked.                  // 1480
     * `$mdGestureProvider` is used to configure the Gesture module to ignore or skip click hijacking on mobile        // 1481
     * devices.                                                                                                        // 1482
     *                                                                                                                 // 1483
     * <hljs lang="js">                                                                                                // 1484
     *   app.config(function($mdGestureProvider) {                                                                     // 1485
     *                                                                                                                 // 1486
     *     // For mobile devices without jQuery loaded, do not                                                         // 1487
     *     // intercept click events during the capture phase.                                                         // 1488
     *     $mdGestureProvider.skipClickHijack();                                                                       // 1489
     *                                                                                                                 // 1490
     *   });                                                                                                           // 1491
     * </hljs>                                                                                                         // 1492
     *                                                                                                                 // 1493
     */                                                                                                                // 1494
  function MdGestureProvider() { }                                                                                     // 1495
                                                                                                                       // 1496
  MdGestureProvider.prototype = {                                                                                      // 1497
                                                                                                                       // 1498
    // Publish access to setter to configure a variable  BEFORE the                                                    // 1499
    // $mdGesture service is instantiated...                                                                           // 1500
    skipClickHijack: function() {                                                                                      // 1501
      return forceSkipClickHijack = true;                                                                              // 1502
    },                                                                                                                 // 1503
                                                                                                                       // 1504
    /**                                                                                                                // 1505
     * $get is used to build an instance of $mdGesture                                                                 // 1506
     * @ngInject                                                                                                       // 1507
     */                                                                                                                // 1508
    $get : ["$$MdGestureHandler", "$$rAF", "$timeout", function($$MdGestureHandler, $$rAF, $timeout) {                 // 1509
         return new MdGesture($$MdGestureHandler, $$rAF, $timeout);                                                    // 1510
    }]                                                                                                                 // 1511
  };                                                                                                                   // 1512
                                                                                                                       // 1513
                                                                                                                       // 1514
                                                                                                                       // 1515
  /**                                                                                                                  // 1516
   * MdGesture factory construction function                                                                           // 1517
   * @ngInject                                                                                                         // 1518
   */                                                                                                                  // 1519
  function MdGesture($$MdGestureHandler, $$rAF, $timeout) {                                                            // 1520
    var userAgent = navigator.userAgent || navigator.vendor || window.opera;                                           // 1521
    var isIos = userAgent.match(/ipad|iphone|ipod/i);                                                                  // 1522
    var isAndroid = userAgent.match(/android/i);                                                                       // 1523
    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);                    // 1524
                                                                                                                       // 1525
    var self = {                                                                                                       // 1526
      handler: addHandler,                                                                                             // 1527
      register: register,                                                                                              // 1528
      // On mobile w/out jQuery, we normally intercept clicks. Should we skip that?                                    // 1529
      isHijackingClicks: (isIos || isAndroid) && !hasJQuery && !forceSkipClickHijack                                   // 1530
    };                                                                                                                 // 1531
                                                                                                                       // 1532
    if (self.isHijackingClicks) {                                                                                      // 1533
      self.handler('click', {                                                                                          // 1534
        options: {                                                                                                     // 1535
          maxDistance: 6                                                                                               // 1536
        },                                                                                                             // 1537
        onEnd: function (ev, pointer) {                                                                                // 1538
          if (pointer.distance < this.state.options.maxDistance) {                                                     // 1539
            this.dispatchEvent(ev, 'click');                                                                           // 1540
          }                                                                                                            // 1541
        }                                                                                                              // 1542
      });                                                                                                              // 1543
    }                                                                                                                  // 1544
                                                                                                                       // 1545
    /*                                                                                                                 // 1546
     * Register an element to listen for a handler.                                                                    // 1547
     * This allows an element to override the default options for a handler.                                           // 1548
     * Additionally, some handlers like drag and hold only dispatch events if                                          // 1549
     * the domEvent happens inside an element that's registered to listen for these events.                            // 1550
     *                                                                                                                 // 1551
     * @see GestureHandler for how overriding of default options works.                                                // 1552
     * @example $mdGesture.register(myElement, 'drag', { minDistance: 20, horziontal: false })                         // 1553
     */                                                                                                                // 1554
    function register(element, handlerName, options) {                                                                 // 1555
      var handler = HANDLERS[handlerName.replace(/^\$md./, '')];                                                       // 1556
      if (!handler) {                                                                                                  // 1557
        throw new Error('Failed to register element with handler ' + handlerName + '. ' +                              // 1558
        'Available handlers: ' + Object.keys(HANDLERS).join(', '));                                                    // 1559
      }                                                                                                                // 1560
      return handler.registerElement(element, options);                                                                // 1561
    }                                                                                                                  // 1562
                                                                                                                       // 1563
    /*                                                                                                                 // 1564
     * add a handler to $mdGesture. see below.                                                                         // 1565
     */                                                                                                                // 1566
    function addHandler(name, definition) {                                                                            // 1567
      var handler = new $$MdGestureHandler(name);                                                                      // 1568
      angular.extend(handler, definition);                                                                             // 1569
      HANDLERS[name] = handler;                                                                                        // 1570
                                                                                                                       // 1571
      return self;                                                                                                     // 1572
    }                                                                                                                  // 1573
                                                                                                                       // 1574
    /*                                                                                                                 // 1575
     * Register handlers. These listen to touch/start/move events, interpret them,                                     // 1576
     * and dispatch gesture events depending on options & conditions. These are all                                    // 1577
     * instances of GestureHandler.                                                                                    // 1578
     * @see GestureHandler                                                                                             // 1579
     */                                                                                                                // 1580
    return self                                                                                                        // 1581
      /*                                                                                                               // 1582
       * The press handler dispatches an event on touchdown/touchend.                                                  // 1583
       * It's a simple abstraction of touch/mouse/pointer start and end.                                               // 1584
       */                                                                                                              // 1585
      .handler('press', {                                                                                              // 1586
        onStart: function (ev, pointer) {                                                                              // 1587
          this.dispatchEvent(ev, '$md.pressdown');                                                                     // 1588
        },                                                                                                             // 1589
        onEnd: function (ev, pointer) {                                                                                // 1590
          this.dispatchEvent(ev, '$md.pressup');                                                                       // 1591
        }                                                                                                              // 1592
      })                                                                                                               // 1593
                                                                                                                       // 1594
      /*                                                                                                               // 1595
       * The hold handler dispatches an event if the user keeps their finger within                                    // 1596
       * the same <maxDistance> area for <delay> ms.                                                                   // 1597
       * The hold handler will only run if a parent of the touch target is registered                                  // 1598
       * to listen for hold events through $mdGesture.register()                                                       // 1599
       */                                                                                                              // 1600
      .handler('hold', {                                                                                               // 1601
        options: {                                                                                                     // 1602
          maxDistance: 6,                                                                                              // 1603
          delay: 500                                                                                                   // 1604
        },                                                                                                             // 1605
        onCancel: function () {                                                                                        // 1606
          $timeout.cancel(this.state.timeout);                                                                         // 1607
        },                                                                                                             // 1608
        onStart: function (ev, pointer) {                                                                              // 1609
          // For hold, require a parent to be registered with $mdGesture.register()                                    // 1610
          // Because we prevent scroll events, this is necessary.                                                      // 1611
          if (!this.state.registeredParent) return this.cancel();                                                      // 1612
                                                                                                                       // 1613
          this.state.pos = {x: pointer.x, y: pointer.y};                                                               // 1614
          this.state.timeout = $timeout(angular.bind(this, function holdDelayFn() {                                    // 1615
            this.dispatchEvent(ev, '$md.hold');                                                                        // 1616
            this.cancel(); //we're done!                                                                               // 1617
          }), this.state.options.delay, false);                                                                        // 1618
        },                                                                                                             // 1619
        onMove: function (ev, pointer) {                                                                               // 1620
          // Don't scroll while waiting for hold.                                                                      // 1621
          // If we don't preventDefault touchmove events here, Android will assume we don't                            // 1622
          // want to listen to anymore touch events. It will start scrolling and stop sending                          // 1623
          // touchmove events.                                                                                         // 1624
          ev.preventDefault();                                                                                         // 1625
                                                                                                                       // 1626
          // If the user moves greater than <maxDistance> pixels, stop the hold timer                                  // 1627
          // set in onStart                                                                                            // 1628
          var dx = this.state.pos.x - pointer.x;                                                                       // 1629
          var dy = this.state.pos.y - pointer.y;                                                                       // 1630
          if (Math.sqrt(dx * dx + dy * dy) > this.options.maxDistance) {                                               // 1631
            this.cancel();                                                                                             // 1632
          }                                                                                                            // 1633
        },                                                                                                             // 1634
        onEnd: function () {                                                                                           // 1635
          this.onCancel();                                                                                             // 1636
        }                                                                                                              // 1637
      })                                                                                                               // 1638
                                                                                                                       // 1639
      /*                                                                                                               // 1640
       * The drag handler dispatches a drag event if the user holds and moves his finger greater than                  // 1641
       * <minDistance> px in the x or y direction, depending on options.horizontal.                                    // 1642
       * The drag will be cancelled if the user moves his finger greater than <minDistance>*<cancelMultiplier> in      // 1643
       * the perpindicular direction. Eg if the drag is horizontal and the user moves his finger <minDistance>*<cancelMultiplier>
       * pixels vertically, this handler won't consider the move part of a drag.                                       // 1645
       */                                                                                                              // 1646
      .handler('drag', {                                                                                               // 1647
        options: {                                                                                                     // 1648
          minDistance: 6,                                                                                              // 1649
          horizontal: true,                                                                                            // 1650
          cancelMultiplier: 1.5                                                                                        // 1651
        },                                                                                                             // 1652
        onStart: function (ev) {                                                                                       // 1653
          // For drag, require a parent to be registered with $mdGesture.register()                                    // 1654
          if (!this.state.registeredParent) this.cancel();                                                             // 1655
        },                                                                                                             // 1656
        onMove: function (ev, pointer) {                                                                               // 1657
          var shouldStartDrag, shouldCancel;                                                                           // 1658
          // Don't scroll while deciding if this touchmove qualifies as a drag event.                                  // 1659
          // If we don't preventDefault touchmove events here, Android will assume we don't                            // 1660
          // want to listen to anymore touch events. It will start scrolling and stop sending                          // 1661
          // touchmove events.                                                                                         // 1662
          ev.preventDefault();                                                                                         // 1663
                                                                                                                       // 1664
          if (!this.state.dragPointer) {                                                                               // 1665
            if (this.state.options.horizontal) {                                                                       // 1666
              shouldStartDrag = Math.abs(pointer.distanceX) > this.state.options.minDistance;                          // 1667
              shouldCancel = Math.abs(pointer.distanceY) > this.state.options.minDistance * this.state.options.cancelMultiplier;
            } else {                                                                                                   // 1669
              shouldStartDrag = Math.abs(pointer.distanceY) > this.state.options.minDistance;                          // 1670
              shouldCancel = Math.abs(pointer.distanceX) > this.state.options.minDistance * this.state.options.cancelMultiplier;
            }                                                                                                          // 1672
                                                                                                                       // 1673
            if (shouldStartDrag) {                                                                                     // 1674
              // Create a new pointer representing this drag, starting at this point where the drag started.           // 1675
              this.state.dragPointer = makeStartPointer(ev);                                                           // 1676
              updatePointerState(ev, this.state.dragPointer);                                                          // 1677
              this.dispatchEvent(ev, '$md.dragstart', this.state.dragPointer);                                         // 1678
                                                                                                                       // 1679
            } else if (shouldCancel) {                                                                                 // 1680
              this.cancel();                                                                                           // 1681
            }                                                                                                          // 1682
          } else {                                                                                                     // 1683
            this.dispatchDragMove(ev);                                                                                 // 1684
          }                                                                                                            // 1685
        },                                                                                                             // 1686
        // Only dispatch dragmove events every frame; any more is unnecessray                                          // 1687
        dispatchDragMove: $$rAF.throttle(function (ev) {                                                               // 1688
          // Make sure the drag didn't stop while waiting for the next frame                                           // 1689
          if (this.state.isRunning) {                                                                                  // 1690
            updatePointerState(ev, this.state.dragPointer);                                                            // 1691
            this.dispatchEvent(ev, '$md.drag', this.state.dragPointer);                                                // 1692
          }                                                                                                            // 1693
        }),                                                                                                            // 1694
        onEnd: function (ev, pointer) {                                                                                // 1695
          if (this.state.dragPointer) {                                                                                // 1696
            updatePointerState(ev, this.state.dragPointer);                                                            // 1697
            this.dispatchEvent(ev, '$md.dragend', this.state.dragPointer);                                             // 1698
          }                                                                                                            // 1699
        }                                                                                                              // 1700
      })                                                                                                               // 1701
                                                                                                                       // 1702
      /*                                                                                                               // 1703
       * The swipe handler will dispatch a swipe event if, on the end of a touch,                                      // 1704
       * the velocity and distance were high enough.                                                                   // 1705
       * TODO: add vertical swiping with a `horizontal` option similar to the drag handler.                            // 1706
       */                                                                                                              // 1707
      .handler('swipe', {                                                                                              // 1708
        options: {                                                                                                     // 1709
          minVelocity: 0.65,                                                                                           // 1710
          minDistance: 10                                                                                              // 1711
        },                                                                                                             // 1712
        onEnd: function (ev, pointer) {                                                                                // 1713
          if (Math.abs(pointer.velocityX) > this.state.options.minVelocity &&                                          // 1714
            Math.abs(pointer.distanceX) > this.state.options.minDistance) {                                            // 1715
            var eventType = pointer.directionX == 'left' ? '$md.swipeleft' : '$md.swiperight';                         // 1716
            this.dispatchEvent(ev, eventType);                                                                         // 1717
          }                                                                                                            // 1718
        }                                                                                                              // 1719
      });                                                                                                              // 1720
                                                                                                                       // 1721
  }                                                                                                                    // 1722
  MdGesture.$inject = ["$$MdGestureHandler", "$$rAF", "$timeout"];                                                     // 1723
                                                                                                                       // 1724
  /**                                                                                                                  // 1725
   * MdGestureHandler                                                                                                  // 1726
   * A GestureHandler is an object which is able to dispatch custom dom events                                         // 1727
   * based on native dom {touch,pointer,mouse}{start,move,end} events.                                                 // 1728
   *                                                                                                                   // 1729
   * A gesture will manage its lifecycle through the start,move,end, and cancel                                        // 1730
   * functions, which are called by native dom events.                                                                 // 1731
   *                                                                                                                   // 1732
   * A gesture has the concept of 'options' (eg a swipe's required velocity), which can be                             // 1733
   * overridden by elements registering through $mdGesture.register()                                                  // 1734
   */                                                                                                                  // 1735
  function GestureHandler (name) {                                                                                     // 1736
    this.name = name;                                                                                                  // 1737
    this.state = {};                                                                                                   // 1738
  }                                                                                                                    // 1739
                                                                                                                       // 1740
  function MdGestureHandler() {                                                                                        // 1741
    var hasJQuery =  (typeof window.jQuery !== 'undefined') && (angular.element === window.jQuery);                    // 1742
                                                                                                                       // 1743
    GestureHandler.prototype = {                                                                                       // 1744
      options: {},                                                                                                     // 1745
      // jQuery listeners don't work with custom DOMEvents, so we have to dispatch events                              // 1746
      // differently when jQuery is loaded                                                                             // 1747
      dispatchEvent: hasJQuery ?  jQueryDispatchEvent : nativeDispatchEvent,                                           // 1748
                                                                                                                       // 1749
      // These are overridden by the registered handler                                                                // 1750
      onStart: angular.noop,                                                                                           // 1751
      onMove: angular.noop,                                                                                            // 1752
      onEnd: angular.noop,                                                                                             // 1753
      onCancel: angular.noop,                                                                                          // 1754
                                                                                                                       // 1755
      // onStart sets up a new state for the handler, which includes options from the                                  // 1756
      // nearest registered parent element of ev.target.                                                               // 1757
      start: function (ev, pointer) {                                                                                  // 1758
        if (this.state.isRunning) return;                                                                              // 1759
        var parentTarget = this.getNearestParent(ev.target);                                                           // 1760
        // Get the options from the nearest registered parent                                                          // 1761
        var parentTargetOptions = parentTarget && parentTarget.$mdGesture[this.name] || {};                            // 1762
                                                                                                                       // 1763
        this.state = {                                                                                                 // 1764
          isRunning: true,                                                                                             // 1765
          // Override the default options with the nearest registered parent's options                                 // 1766
          options: angular.extend({}, this.options, parentTargetOptions),                                              // 1767
          // Pass in the registered parent node to the state so the onStart listener can use                           // 1768
          registeredParent: parentTarget                                                                               // 1769
        };                                                                                                             // 1770
        this.onStart(ev, pointer);                                                                                     // 1771
      },                                                                                                               // 1772
      move: function (ev, pointer) {                                                                                   // 1773
        if (!this.state.isRunning) return;                                                                             // 1774
        this.onMove(ev, pointer);                                                                                      // 1775
      },                                                                                                               // 1776
      end: function (ev, pointer) {                                                                                    // 1777
        if (!this.state.isRunning) return;                                                                             // 1778
        this.onEnd(ev, pointer);                                                                                       // 1779
        this.state.isRunning = false;                                                                                  // 1780
      },                                                                                                               // 1781
      cancel: function (ev, pointer) {                                                                                 // 1782
        this.onCancel(ev, pointer);                                                                                    // 1783
        this.state = {};                                                                                               // 1784
      },                                                                                                               // 1785
                                                                                                                       // 1786
      // Find and return the nearest parent element that has been registered to                                        // 1787
      // listen for this handler via $mdGesture.register(element, 'handlerName').                                      // 1788
      getNearestParent: function (node) {                                                                              // 1789
        var current = node;                                                                                            // 1790
        while (current) {                                                                                              // 1791
          if ((current.$mdGesture || {})[this.name]) {                                                                 // 1792
            return current;                                                                                            // 1793
          }                                                                                                            // 1794
          current = current.parentNode;                                                                                // 1795
        }                                                                                                              // 1796
        return null;                                                                                                   // 1797
      },                                                                                                               // 1798
                                                                                                                       // 1799
      // Called from $mdGesture.register when an element reigsters itself with a handler.                              // 1800
      // Store the options the user gave on the DOMElement itself. These options will                                  // 1801
      // be retrieved with getNearestParent when the handler starts.                                                   // 1802
      registerElement: function (element, options) {                                                                   // 1803
        var self = this;                                                                                               // 1804
        element[0].$mdGesture = element[0].$mdGesture || {};                                                           // 1805
        element[0].$mdGesture[this.name] = options || {};                                                              // 1806
        element.on('$destroy', onDestroy);                                                                             // 1807
                                                                                                                       // 1808
        return onDestroy;                                                                                              // 1809
                                                                                                                       // 1810
        function onDestroy() {                                                                                         // 1811
          delete element[0].$mdGesture[self.name];                                                                     // 1812
          element.off('$destroy', onDestroy);                                                                          // 1813
        }                                                                                                              // 1814
      }                                                                                                                // 1815
    };                                                                                                                 // 1816
                                                                                                                       // 1817
    return GestureHandler;                                                                                             // 1818
                                                                                                                       // 1819
    /*                                                                                                                 // 1820
     * Dispatch an event with jQuery                                                                                   // 1821
     * TODO: Make sure this sends bubbling events                                                                      // 1822
     *                                                                                                                 // 1823
     * @param srcEvent the original DOM touch event that started this.                                                 // 1824
     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')                                // 1825
     * @param eventPointer the pointer object that matches this event.                                                 // 1826
     */                                                                                                                // 1827
    function jQueryDispatchEvent(srcEvent, eventType, eventPointer) {                                                  // 1828
      eventPointer = eventPointer || pointer;                                                                          // 1829
      var eventObj = new angular.element.Event(eventType);                                                             // 1830
                                                                                                                       // 1831
      eventObj.$material = true;                                                                                       // 1832
      eventObj.pointer = eventPointer;                                                                                 // 1833
      eventObj.srcEvent = srcEvent;                                                                                    // 1834
                                                                                                                       // 1835
      angular.extend(eventObj, {                                                                                       // 1836
        clientX: eventPointer.x,                                                                                       // 1837
        clientY: eventPointer.y,                                                                                       // 1838
        screenX: eventPointer.x,                                                                                       // 1839
        screenY: eventPointer.y,                                                                                       // 1840
        pageX: eventPointer.x,                                                                                         // 1841
        pageY: eventPointer.y,                                                                                         // 1842
        ctrlKey: srcEvent.ctrlKey,                                                                                     // 1843
        altKey: srcEvent.altKey,                                                                                       // 1844
        shiftKey: srcEvent.shiftKey,                                                                                   // 1845
        metaKey: srcEvent.metaKey                                                                                      // 1846
      });                                                                                                              // 1847
      angular.element(eventPointer.target).trigger(eventObj);                                                          // 1848
    }                                                                                                                  // 1849
                                                                                                                       // 1850
    /*                                                                                                                 // 1851
     * NOTE: nativeDispatchEvent is very performance sensitive.                                                        // 1852
     * @param srcEvent the original DOM touch event that started this.                                                 // 1853
     * @param eventType the name of the custom event to send (eg 'click' or '$md.drag')                                // 1854
     * @param eventPointer the pointer object that matches this event.                                                 // 1855
     */                                                                                                                // 1856
    function nativeDispatchEvent(srcEvent, eventType, eventPointer) {                                                  // 1857
      eventPointer = eventPointer || pointer;                                                                          // 1858
      var eventObj;                                                                                                    // 1859
                                                                                                                       // 1860
      if (eventType === 'click') {                                                                                     // 1861
        eventObj = document.createEvent('MouseEvents');                                                                // 1862
        eventObj.initMouseEvent(                                                                                       // 1863
          'click', true, true, window, srcEvent.detail,                                                                // 1864
          eventPointer.x, eventPointer.y, eventPointer.x, eventPointer.y,                                              // 1865
          srcEvent.ctrlKey, srcEvent.altKey, srcEvent.shiftKey, srcEvent.metaKey,                                      // 1866
          srcEvent.button, srcEvent.relatedTarget || null                                                              // 1867
        );                                                                                                             // 1868
                                                                                                                       // 1869
      } else {                                                                                                         // 1870
        eventObj = document.createEvent('CustomEvent');                                                                // 1871
        eventObj.initCustomEvent(eventType, true, true, {});                                                           // 1872
      }                                                                                                                // 1873
      eventObj.$material = true;                                                                                       // 1874
      eventObj.pointer = eventPointer;                                                                                 // 1875
      eventObj.srcEvent = srcEvent;                                                                                    // 1876
      eventPointer.target.dispatchEvent(eventObj);                                                                     // 1877
    }                                                                                                                  // 1878
                                                                                                                       // 1879
  }                                                                                                                    // 1880
                                                                                                                       // 1881
  /**                                                                                                                  // 1882
   * Attach Gestures: hook document and check shouldHijack clicks                                                      // 1883
   * @ngInject                                                                                                         // 1884
   */                                                                                                                  // 1885
  function attachToDocument( $mdGesture, $$MdGestureHandler ) {                                                        // 1886
                                                                                                                       // 1887
    // Polyfill document.contains for IE11.                                                                            // 1888
    // TODO: move to util                                                                                              // 1889
    document.contains || (document.contains = function (node) {                                                        // 1890
      return document.body.contains(node);                                                                             // 1891
    });                                                                                                                // 1892
                                                                                                                       // 1893
    if (!isInitialized && $mdGesture.isHijackingClicks ) {                                                             // 1894
      /*                                                                                                               // 1895
       * If hijack clicks is true, we preventDefault any click that wasn't                                             // 1896
       * sent by ngMaterial. This is because on older Android & iOS, a false, or 'ghost',                              // 1897
       * click event will be sent ~400ms after a touchend event happens.                                               // 1898
       * The only way to know if this click is real is to prevent any normal                                           // 1899
       * click events, and add a flag to events sent by material so we know not to prevent those.                      // 1900
       *                                                                                                               // 1901
       * Two exceptions to click events that should be prevented are:                                                  // 1902
       *  - click events sent by the keyboard (eg form submit)                                                         // 1903
       *  - events that originate from an Ionic app                                                                    // 1904
       */                                                                                                              // 1905
      document.addEventListener('click', function clickHijacker(ev) {                                                  // 1906
        var isKeyClick = ev.clientX === 0 && ev.clientY === 0;                                                         // 1907
        if (!isKeyClick && !ev.$material && !ev.isIonicTap                                                             // 1908
            && !isInputEventFromLabelClick(ev)) {                                                                      // 1909
          ev.preventDefault();                                                                                         // 1910
          ev.stopPropagation();                                                                                        // 1911
          lastLabelClickPos = null;                                                                                    // 1912
        } else {                                                                                                       // 1913
          lastLabelClickPos = null;                                                                                    // 1914
          if (ev.target.tagName.toLowerCase() == 'label') {                                                            // 1915
            lastLabelClickPos = {x: ev.x, y: ev.y};                                                                    // 1916
          }                                                                                                            // 1917
        }                                                                                                              // 1918
      }, true);                                                                                                        // 1919
                                                                                                                       // 1920
      isInitialized = true;                                                                                            // 1921
    }                                                                                                                  // 1922
                                                                                                                       // 1923
    // Listen to all events to cover all platforms.                                                                    // 1924
    var START_EVENTS = 'mousedown touchstart pointerdown';                                                             // 1925
    var MOVE_EVENTS = 'mousemove touchmove pointermove';                                                               // 1926
    var END_EVENTS = 'mouseup mouseleave touchend touchcancel pointerup pointercancel';                                // 1927
                                                                                                                       // 1928
    angular.element(document)                                                                                          // 1929
      .on(START_EVENTS, gestureStart)                                                                                  // 1930
      .on(MOVE_EVENTS, gestureMove)                                                                                    // 1931
      .on(END_EVENTS, gestureEnd)                                                                                      // 1932
      // For testing                                                                                                   // 1933
      .on('$$mdGestureReset', function gestureClearCache () {                                                          // 1934
        lastPointer = pointer = null;                                                                                  // 1935
      });                                                                                                              // 1936
                                                                                                                       // 1937
    /*                                                                                                                 // 1938
     * When a DOM event happens, run all registered gesture handlers' lifecycle                                        // 1939
     * methods which match the DOM event.                                                                              // 1940
     * Eg when a 'touchstart' event happens, runHandlers('start') will call and                                        // 1941
     * run `handler.cancel()` and `handler.start()` on all registered handlers.                                        // 1942
     */                                                                                                                // 1943
    function runHandlers(handlerEvent, event) {                                                                        // 1944
      var handler;                                                                                                     // 1945
      for (var name in HANDLERS) {                                                                                     // 1946
        handler = HANDLERS[name];                                                                                      // 1947
        if( handler instanceof $$MdGestureHandler ) {                                                                  // 1948
                                                                                                                       // 1949
          if (handlerEvent === 'start') {                                                                              // 1950
            // Run cancel to reset any handlers' state                                                                 // 1951
            handler.cancel();                                                                                          // 1952
          }                                                                                                            // 1953
          handler[handlerEvent](event, pointer);                                                                       // 1954
                                                                                                                       // 1955
        }                                                                                                              // 1956
      }                                                                                                                // 1957
    }                                                                                                                  // 1958
                                                                                                                       // 1959
    /*                                                                                                                 // 1960
     * gestureStart vets if a start event is legitimate (and not part of a 'ghost click' from iOS/Android)             // 1961
     * If it is legitimate, we initiate the pointer state and mark the current pointer's type                          // 1962
     * For example, for a touchstart event, mark the current pointer as a 'touch' pointer, so mouse events             // 1963
     * won't effect it.                                                                                                // 1964
     */                                                                                                                // 1965
    function gestureStart(ev) {                                                                                        // 1966
      // If we're already touched down, abort                                                                          // 1967
      if (pointer) return;                                                                                             // 1968
                                                                                                                       // 1969
      var now = +Date.now();                                                                                           // 1970
                                                                                                                       // 1971
      // iOS & old android bug: after a touch event, a click event is sent 350 ms later.                               // 1972
      // If <400ms have passed, don't allow an event of a different type than the previous event                       // 1973
      if (lastPointer && !typesMatch(ev, lastPointer) && (now - lastPointer.endTime < 1500)) {                         // 1974
        return;                                                                                                        // 1975
      }                                                                                                                // 1976
                                                                                                                       // 1977
      pointer = makeStartPointer(ev);                                                                                  // 1978
                                                                                                                       // 1979
      runHandlers('start', ev);                                                                                        // 1980
    }                                                                                                                  // 1981
    /*                                                                                                                 // 1982
     * If a move event happens of the right type, update the pointer and run all the move handlers.                    // 1983
     * "of the right type": if a mousemove happens but our pointer started with a touch event, do nothing.             // 1984
     */                                                                                                                // 1985
    function gestureMove(ev) {                                                                                         // 1986
      if (!pointer || !typesMatch(ev, pointer)) return;                                                                // 1987
                                                                                                                       // 1988
      updatePointerState(ev, pointer);                                                                                 // 1989
      runHandlers('move', ev);                                                                                         // 1990
    }                                                                                                                  // 1991
    /*                                                                                                                 // 1992
     * If an end event happens of the right type, update the pointer, run endHandlers, and save the pointer as 'lastPointer'
     */                                                                                                                // 1994
    function gestureEnd(ev) {                                                                                          // 1995
      if (!pointer || !typesMatch(ev, pointer)) return;                                                                // 1996
                                                                                                                       // 1997
      updatePointerState(ev, pointer);                                                                                 // 1998
      pointer.endTime = +Date.now();                                                                                   // 1999
                                                                                                                       // 2000
      runHandlers('end', ev);                                                                                          // 2001
                                                                                                                       // 2002
      lastPointer = pointer;                                                                                           // 2003
      pointer = null;                                                                                                  // 2004
    }                                                                                                                  // 2005
                                                                                                                       // 2006
  }                                                                                                                    // 2007
  attachToDocument.$inject = ["$mdGesture", "$$MdGestureHandler"];                                                     // 2008
                                                                                                                       // 2009
  // ********************                                                                                              // 2010
  // Module Functions                                                                                                  // 2011
  // ********************                                                                                              // 2012
                                                                                                                       // 2013
  /*                                                                                                                   // 2014
   * Initiate the pointer. x, y, and the pointer's type.                                                               // 2015
   */                                                                                                                  // 2016
  function makeStartPointer(ev) {                                                                                      // 2017
    var point = getEventPoint(ev);                                                                                     // 2018
    var startPointer = {                                                                                               // 2019
      startTime: +Date.now(),                                                                                          // 2020
      target: ev.target,                                                                                               // 2021
      // 'p' for pointer events, 'm' for mouse, 't' for touch                                                          // 2022
      type: ev.type.charAt(0)                                                                                          // 2023
    };                                                                                                                 // 2024
    startPointer.startX = startPointer.x = point.pageX;                                                                // 2025
    startPointer.startY = startPointer.y = point.pageY;                                                                // 2026
    return startPointer;                                                                                               // 2027
  }                                                                                                                    // 2028
                                                                                                                       // 2029
  /*                                                                                                                   // 2030
   * return whether the pointer's type matches the event's type.                                                       // 2031
   * Eg if a touch event happens but the pointer has a mouse type, return false.                                       // 2032
   */                                                                                                                  // 2033
  function typesMatch(ev, pointer) {                                                                                   // 2034
    return ev && pointer && ev.type.charAt(0) === pointer.type;                                                        // 2035
  }                                                                                                                    // 2036
                                                                                                                       // 2037
  /**                                                                                                                  // 2038
   * Gets whether the given event is an input event that was caused by clicking on an                                  // 2039
   * associated label element.                                                                                         // 2040
   *                                                                                                                   // 2041
   * This is necessary because the browser will, upon clicking on a label element, fire an                             // 2042
   * *extra* click event on its associated input (if any). mdGesture is able to flag the label                         // 2043
   * click as with `$material` correctly, but not the second input click.                                              // 2044
   *                                                                                                                   // 2045
   * In order to determine whether an input event is from a label click, we compare the (x, y) for                     // 2046
   * the event to the (x, y) for the most recent label click (which is cleared whenever a non-label                    // 2047
   * click occurs). Unfortunately, there are no event properties that tie the input and the label                      // 2048
   * together (such as relatedTarget).                                                                                 // 2049
   *                                                                                                                   // 2050
   * @param {MouseEvent} event                                                                                         // 2051
   * @returns {boolean}                                                                                                // 2052
   */                                                                                                                  // 2053
  function isInputEventFromLabelClick(event) {                                                                         // 2054
    return lastLabelClickPos                                                                                           // 2055
        && lastLabelClickPos.x == event.x                                                                              // 2056
        && lastLabelClickPos.y == event.y;                                                                             // 2057
  }                                                                                                                    // 2058
                                                                                                                       // 2059
  /*                                                                                                                   // 2060
   * Update the given pointer based upon the given DOMEvent.                                                           // 2061
   * Distance, velocity, direction, duration, etc                                                                      // 2062
   */                                                                                                                  // 2063
  function updatePointerState(ev, pointer) {                                                                           // 2064
    var point = getEventPoint(ev);                                                                                     // 2065
    var x = pointer.x = point.pageX;                                                                                   // 2066
    var y = pointer.y = point.pageY;                                                                                   // 2067
                                                                                                                       // 2068
    pointer.distanceX = x - pointer.startX;                                                                            // 2069
    pointer.distanceY = y - pointer.startY;                                                                            // 2070
    pointer.distance = Math.sqrt(                                                                                      // 2071
      pointer.distanceX * pointer.distanceX + pointer.distanceY * pointer.distanceY                                    // 2072
    );                                                                                                                 // 2073
                                                                                                                       // 2074
    pointer.directionX = pointer.distanceX > 0 ? 'right' : pointer.distanceX < 0 ? 'left' : '';                        // 2075
    pointer.directionY = pointer.distanceY > 0 ? 'up' : pointer.distanceY < 0 ? 'down' : '';                           // 2076
                                                                                                                       // 2077
    pointer.duration = +Date.now() - pointer.startTime;                                                                // 2078
    pointer.velocityX = pointer.distanceX / pointer.duration;                                                          // 2079
    pointer.velocityY = pointer.distanceY / pointer.duration;                                                          // 2080
  }                                                                                                                    // 2081
                                                                                                                       // 2082
  /*                                                                                                                   // 2083
   * Normalize the point where the DOM event happened whether it's touch or mouse.                                     // 2084
   * @returns point event obj with pageX and pageY on it.                                                              // 2085
   */                                                                                                                  // 2086
  function getEventPoint(ev) {                                                                                         // 2087
    ev = ev.originalEvent || ev; // support jQuery events                                                              // 2088
    return (ev.touches && ev.touches[0]) ||                                                                            // 2089
      (ev.changedTouches && ev.changedTouches[0]) ||                                                                   // 2090
      ev;                                                                                                              // 2091
  }                                                                                                                    // 2092
                                                                                                                       // 2093
})();                                                                                                                  // 2094
(function(){                                                                                                           // 2095
"use strict";                                                                                                          // 2096
                                                                                                                       // 2097
angular.module('material.core')                                                                                        // 2098
  .provider('$$interimElement', InterimElementProvider);                                                               // 2099
                                                                                                                       // 2100
/*                                                                                                                     // 2101
 * @ngdoc service                                                                                                      // 2102
 * @name $$interimElement                                                                                              // 2103
 * @module material.core                                                                                               // 2104
 *                                                                                                                     // 2105
 * @description                                                                                                        // 2106
 *                                                                                                                     // 2107
 * Factory that contructs `$$interimElement.$service` services.                                                        // 2108
 * Used internally in material design for elements that appear on screen temporarily.                                  // 2109
 * The service provides a promise-like API for interacting with the temporary                                          // 2110
 * elements.                                                                                                           // 2111
 *                                                                                                                     // 2112
 * ```js                                                                                                               // 2113
 * app.service('$mdToast', function($$interimElement) {                                                                // 2114
 *   var $mdToast = $$interimElement(toastDefaultOptions);                                                             // 2115
 *   return $mdToast;                                                                                                  // 2116
 * });                                                                                                                 // 2117
 * ```                                                                                                                 // 2118
 * @param {object=} defaultOptions Options used by default for the `show` method on the service.                       // 2119
 *                                                                                                                     // 2120
 * @returns {$$interimElement.$service}                                                                                // 2121
 *                                                                                                                     // 2122
 */                                                                                                                    // 2123
                                                                                                                       // 2124
function InterimElementProvider() {                                                                                    // 2125
  createInterimElementProvider.$get = InterimElementFactory;                                                           // 2126
  InterimElementFactory.$inject = ["$document", "$q", "$$q", "$rootScope", "$timeout", "$rootElement", "$animate", "$mdUtil", "$mdCompiler", "$mdTheming", "$log"];
  return createInterimElementProvider;                                                                                 // 2128
                                                                                                                       // 2129
  /**                                                                                                                  // 2130
   * Returns a new provider which allows configuration of a new interimElement                                         // 2131
   * service. Allows configuration of default options & methods for options,                                           // 2132
   * as well as configuration of 'preset' methods (eg dialog.basic(): basic is a preset method)                        // 2133
   */                                                                                                                  // 2134
  function createInterimElementProvider(interimFactoryName) {                                                          // 2135
    var EXPOSED_METHODS = ['onHide', 'onShow', 'onRemove'];                                                            // 2136
                                                                                                                       // 2137
    var customMethods = {};                                                                                            // 2138
    var providerConfig = {                                                                                             // 2139
      presets: {}                                                                                                      // 2140
    };                                                                                                                 // 2141
                                                                                                                       // 2142
    var provider = {                                                                                                   // 2143
      setDefaults: setDefaults,                                                                                        // 2144
      addPreset: addPreset,                                                                                            // 2145
      addMethod: addMethod,                                                                                            // 2146
      $get: factory                                                                                                    // 2147
    };                                                                                                                 // 2148
                                                                                                                       // 2149
    /**                                                                                                                // 2150
     * all interim elements will come with the 'build' preset                                                          // 2151
     */                                                                                                                // 2152
    provider.addPreset('build', {                                                                                      // 2153
      methods: ['controller', 'controllerAs', 'resolve',                                                               // 2154
        'template', 'templateUrl', 'themable', 'transformTemplate', 'parent']                                          // 2155
    });                                                                                                                // 2156
                                                                                                                       // 2157
    factory.$inject = ["$$interimElement", "$injector"];                                                               // 2158
    return provider;                                                                                                   // 2159
                                                                                                                       // 2160
    /**                                                                                                                // 2161
     * Save the configured defaults to be used when the factory is instantiated                                        // 2162
     */                                                                                                                // 2163
    function setDefaults(definition) {                                                                                 // 2164
      providerConfig.optionsFactory = definition.options;                                                              // 2165
      providerConfig.methods = (definition.methods || []).concat(EXPOSED_METHODS);                                     // 2166
      return provider;                                                                                                 // 2167
    }                                                                                                                  // 2168
                                                                                                                       // 2169
    /**                                                                                                                // 2170
     * Add a method to the factory that isn't specific to any interim element operations                               // 2171
     */                                                                                                                // 2172
                                                                                                                       // 2173
    function addMethod(name, fn) {                                                                                     // 2174
      customMethods[name] = fn;                                                                                        // 2175
      return provider;                                                                                                 // 2176
    }                                                                                                                  // 2177
                                                                                                                       // 2178
    /**                                                                                                                // 2179
     * Save the configured preset to be used when the factory is instantiated                                          // 2180
     */                                                                                                                // 2181
    function addPreset(name, definition) {                                                                             // 2182
      definition = definition || {};                                                                                   // 2183
      definition.methods = definition.methods || [];                                                                   // 2184
      definition.options = definition.options || function() { return {}; };                                            // 2185
                                                                                                                       // 2186
      if (/^cancel|hide|show$/.test(name)) {                                                                           // 2187
        throw new Error("Preset '" + name + "' in " + interimFactoryName + " is reserved!");                           // 2188
      }                                                                                                                // 2189
      if (definition.methods.indexOf('_options') > -1) {                                                               // 2190
        throw new Error("Method '_options' in " + interimFactoryName + " is reserved!");                               // 2191
      }                                                                                                                // 2192
      providerConfig.presets[name] = {                                                                                 // 2193
        methods: definition.methods.concat(EXPOSED_METHODS),                                                           // 2194
        optionsFactory: definition.options,                                                                            // 2195
        argOption: definition.argOption                                                                                // 2196
      };                                                                                                               // 2197
      return provider;                                                                                                 // 2198
    }                                                                                                                  // 2199
                                                                                                                       // 2200
    /**                                                                                                                // 2201
     * Create a factory that has the given methods & defaults implementing interimElement                              // 2202
     */                                                                                                                // 2203
    /* @ngInject */                                                                                                    // 2204
    function factory($$interimElement, $injector) {                                                                    // 2205
      var defaultMethods;                                                                                              // 2206
      var defaultOptions;                                                                                              // 2207
      var interimElementService = $$interimElement();                                                                  // 2208
                                                                                                                       // 2209
      /*                                                                                                               // 2210
       * publicService is what the developer will be using.                                                            // 2211
       * It has methods hide(), cancel(), show(), build(), and any other                                               // 2212
       * presets which were set during the config phase.                                                               // 2213
       */                                                                                                              // 2214
      var publicService = {                                                                                            // 2215
        hide: interimElementService.hide,                                                                              // 2216
        cancel: interimElementService.cancel,                                                                          // 2217
        show: showInterimElement,                                                                                      // 2218
                                                                                                                       // 2219
        // Special internal method to destroy an interim element without animations                                    // 2220
        // used when navigation changes causes a $scope.$destroy() action                                              // 2221
        destroy : destroyInterimElement                                                                                // 2222
      };                                                                                                               // 2223
                                                                                                                       // 2224
                                                                                                                       // 2225
      defaultMethods = providerConfig.methods || [];                                                                   // 2226
      // This must be invoked after the publicService is initialized                                                   // 2227
      defaultOptions = invokeFactory(providerConfig.optionsFactory, {});                                               // 2228
                                                                                                                       // 2229
      // Copy over the simple custom methods                                                                           // 2230
      angular.forEach(customMethods, function(fn, name) {                                                              // 2231
        publicService[name] = fn;                                                                                      // 2232
      });                                                                                                              // 2233
                                                                                                                       // 2234
      angular.forEach(providerConfig.presets, function(definition, name) {                                             // 2235
        var presetDefaults = invokeFactory(definition.optionsFactory, {});                                             // 2236
        var presetMethods = (definition.methods || []).concat(defaultMethods);                                         // 2237
                                                                                                                       // 2238
        // Every interimElement built with a preset has a field called `$type`,                                        // 2239
        // which matches the name of the preset.                                                                       // 2240
        // Eg in preset 'confirm', options.$type === 'confirm'                                                         // 2241
        angular.extend(presetDefaults, { $type: name });                                                               // 2242
                                                                                                                       // 2243
        // This creates a preset class which has setter methods for every                                              // 2244
        // method given in the `.addPreset()` function, as well as every                                               // 2245
        // method given in the `.setDefaults()` function.                                                              // 2246
        //                                                                                                             // 2247
        // @example                                                                                                    // 2248
        // .setDefaults({                                                                                              // 2249
        //   methods: ['hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent'],                          // 2250
        //   options: dialogDefaultOptions                                                                             // 2251
        // })                                                                                                          // 2252
        // .addPreset('alert', {                                                                                       // 2253
        //   methods: ['title', 'ok'],                                                                                 // 2254
        //   options: alertDialogOptions                                                                               // 2255
        // })                                                                                                          // 2256
        //                                                                                                             // 2257
        // Set values will be passed to the options when interimElement.show() is called.                              // 2258
        function Preset(opts) {                                                                                        // 2259
          this._options = angular.extend({}, presetDefaults, opts);                                                    // 2260
        }                                                                                                              // 2261
        angular.forEach(presetMethods, function(name) {                                                                // 2262
          Preset.prototype[name] = function(value) {                                                                   // 2263
            this._options[name] = value;                                                                               // 2264
            return this;                                                                                               // 2265
          };                                                                                                           // 2266
        });                                                                                                            // 2267
                                                                                                                       // 2268
        // Create shortcut method for one-linear methods                                                               // 2269
        if (definition.argOption) {                                                                                    // 2270
          var methodName = 'show' + name.charAt(0).toUpperCase() + name.slice(1);                                      // 2271
          publicService[methodName] = function(arg) {                                                                  // 2272
            var config = publicService[name](arg);                                                                     // 2273
            return publicService.show(config);                                                                         // 2274
          };                                                                                                           // 2275
        }                                                                                                              // 2276
                                                                                                                       // 2277
        // eg $mdDialog.alert() will return a new alert preset                                                         // 2278
        publicService[name] = function(arg) {                                                                          // 2279
          // If argOption is supplied, eg `argOption: 'content'`, then we assume                                       // 2280
          // if the argument is not an options object then it is the `argOption` option.                               // 2281
          //                                                                                                           // 2282
          // @example `$mdToast.simple('hello')` // sets options.content to hello                                      // 2283
          //                                     // because argOption === 'content'                                    // 2284
          if (arguments.length && definition.argOption &&                                                              // 2285
              !angular.isObject(arg) && !angular.isArray(arg))  {                                                      // 2286
                                                                                                                       // 2287
            return (new Preset())[definition.argOption](arg);                                                          // 2288
                                                                                                                       // 2289
          } else {                                                                                                     // 2290
            return new Preset(arg);                                                                                    // 2291
          }                                                                                                            // 2292
                                                                                                                       // 2293
        };                                                                                                             // 2294
      });                                                                                                              // 2295
                                                                                                                       // 2296
      return publicService;                                                                                            // 2297
                                                                                                                       // 2298
      /**                                                                                                              // 2299
       *                                                                                                               // 2300
       */                                                                                                              // 2301
      function showInterimElement(opts) {                                                                              // 2302
        // opts is either a preset which stores its options on an _options field,                                      // 2303
        // or just an object made up of options                                                                        // 2304
        opts = opts || { };                                                                                            // 2305
        if (opts._options) opts = opts._options;                                                                       // 2306
                                                                                                                       // 2307
        return interimElementService.show(                                                                             // 2308
          angular.extend({}, defaultOptions, opts)                                                                     // 2309
        );                                                                                                             // 2310
      }                                                                                                                // 2311
                                                                                                                       // 2312
      /**                                                                                                              // 2313
       *  Special method to hide and destroy an interimElement WITHOUT                                                 // 2314
       *  any 'leave` or hide animations ( an immediate force hide/remove )                                            // 2315
       *                                                                                                               // 2316
       *  NOTE: This calls the onRemove() subclass method for each component...                                        // 2317
       *  which must have code to respond to `options.$destroy == true`                                                // 2318
       */                                                                                                              // 2319
      function destroyInterimElement(opts) {                                                                           // 2320
          return interimElementService.destroy(opts);                                                                  // 2321
      }                                                                                                                // 2322
                                                                                                                       // 2323
      /**                                                                                                              // 2324
       * Helper to call $injector.invoke with a local of the factory name for                                          // 2325
       * this provider.                                                                                                // 2326
       * If an $mdDialog is providing options for a dialog and tries to inject                                         // 2327
       * $mdDialog, a circular dependency error will happen.                                                           // 2328
       * We get around that by manually injecting $mdDialog as a local.                                                // 2329
       */                                                                                                              // 2330
      function invokeFactory(factory, defaultVal) {                                                                    // 2331
        var locals = {};                                                                                               // 2332
        locals[interimFactoryName] = publicService;                                                                    // 2333
        return $injector.invoke(factory || function() { return defaultVal; }, {}, locals);                             // 2334
      }                                                                                                                // 2335
                                                                                                                       // 2336
    }                                                                                                                  // 2337
                                                                                                                       // 2338
  }                                                                                                                    // 2339
                                                                                                                       // 2340
  /* @ngInject */                                                                                                      // 2341
  function InterimElementFactory($document, $q, $$q, $rootScope, $timeout, $rootElement, $animate,                     // 2342
                                 $mdUtil, $mdCompiler, $mdTheming, $log ) {                                            // 2343
    return function createInterimElementService() {                                                                    // 2344
      var SHOW_CANCELLED = false;                                                                                      // 2345
      var SHOW_CLOSED = true;                                                                                          // 2346
                                                                                                                       // 2347
      /*                                                                                                               // 2348
       * @ngdoc service                                                                                                // 2349
       * @name $$interimElement.$service                                                                               // 2350
       *                                                                                                               // 2351
       * @description                                                                                                  // 2352
       * A service used to control inserting and removing an element into the DOM.                                     // 2353
       *                                                                                                               // 2354
       */                                                                                                              // 2355
      var service, stack = [];                                                                                         // 2356
                                                                                                                       // 2357
      // Publish instance $$interimElement service;                                                                    // 2358
      // ... used as $mdDialog, $mdToast, $mdMenu, and $mdSelect                                                       // 2359
                                                                                                                       // 2360
      return service = {                                                                                               // 2361
        show: show,                                                                                                    // 2362
        hide: hide,                                                                                                    // 2363
        cancel: cancel,                                                                                                // 2364
        destroy : destroy                                                                                              // 2365
      };                                                                                                               // 2366
                                                                                                                       // 2367
      /*                                                                                                               // 2368
       * @ngdoc method                                                                                                 // 2369
       * @name $$interimElement.$service#show                                                                          // 2370
       * @kind function                                                                                                // 2371
       *                                                                                                               // 2372
       * @description                                                                                                  // 2373
       * Adds the `$interimElement` to the DOM and returns a special promise that will be resolved or rejected         // 2374
       * with hide or cancel, respectively. To external cancel/hide, developers should use the                         // 2375
       *                                                                                                               // 2376
       * @param {*} options is hashMap of settings                                                                     // 2377
       * @returns a Promise                                                                                            // 2378
       *                                                                                                               // 2379
       */                                                                                                              // 2380
      function show(options) {                                                                                         // 2381
        options = options || {};                                                                                       // 2382
        var interimElement = new InterimElement(options || {});                                                        // 2383
        var hideExisting = !options.skipHide && stack.length ? service.hide() : $q.when(true);                         // 2384
                                                                                                                       // 2385
        // This hide()s only the current interim element before showing the next, new one                              // 2386
        // NOTE: this is not reversible (e.g. interim elements are not stackable)                                      // 2387
                                                                                                                       // 2388
        hideExisting.finally(function() {                                                                              // 2389
                                                                                                                       // 2390
          stack.push(interimElement);                                                                                  // 2391
          interimElement                                                                                               // 2392
            .show()                                                                                                    // 2393
            .catch(function( reason ) {                                                                                // 2394
              //$log.error("InterimElement.show() error: " + reason );                                                 // 2395
              return reason;                                                                                           // 2396
            });                                                                                                        // 2397
                                                                                                                       // 2398
        });                                                                                                            // 2399
                                                                                                                       // 2400
        // Return a promise that will be resolved when the interim                                                     // 2401
        // element is hidden or cancelled...                                                                           // 2402
                                                                                                                       // 2403
        return interimElement.deferred.promise;                                                                        // 2404
      }                                                                                                                // 2405
                                                                                                                       // 2406
      /*                                                                                                               // 2407
       * @ngdoc method                                                                                                 // 2408
       * @name $$interimElement.$service#hide                                                                          // 2409
       * @kind function                                                                                                // 2410
       *                                                                                                               // 2411
       * @description                                                                                                  // 2412
       * Removes the `$interimElement` from the DOM and resolves the promise returned from `show`                      // 2413
       *                                                                                                               // 2414
       * @param {*} resolveParam Data to resolve the promise with                                                      // 2415
       * @returns a Promise that will be resolved after the element has been removed.                                  // 2416
       *                                                                                                               // 2417
       */                                                                                                              // 2418
      function hide(reason, options) {                                                                                 // 2419
        if ( !stack.length ) return $q.when(reason || SHOW_CLOSED);                                                    // 2420
        options = options || {};                                                                                       // 2421
                                                                                                                       // 2422
        if (options.closeAll) {                                                                                        // 2423
          var promise = $q.all(stack.reverse().map(closeElement));                                                     // 2424
          stack = [];                                                                                                  // 2425
          return promise;                                                                                              // 2426
        } else if (options.closeTo !== undefined) {                                                                    // 2427
          return $q.all(stack.splice(options.closeTo).map(closeElement));                                              // 2428
        } else {                                                                                                       // 2429
          var interim = stack.pop();                                                                                   // 2430
          return closeElement(interim);                                                                                // 2431
        }                                                                                                              // 2432
                                                                                                                       // 2433
        function closeElement(interim) {                                                                               // 2434
          interim                                                                                                      // 2435
            .remove(reason || SHOW_CLOSED, false, options || { })                                                      // 2436
            .catch(function( reason ) {                                                                                // 2437
              //$log.error("InterimElement.hide() error: " + reason );                                                 // 2438
              return reason;                                                                                           // 2439
            });                                                                                                        // 2440
          return interim.deferred.promise;                                                                             // 2441
        }                                                                                                              // 2442
      }                                                                                                                // 2443
                                                                                                                       // 2444
      /*                                                                                                               // 2445
       * @ngdoc method                                                                                                 // 2446
       * @name $$interimElement.$service#cancel                                                                        // 2447
       * @kind function                                                                                                // 2448
       *                                                                                                               // 2449
       * @description                                                                                                  // 2450
       * Removes the `$interimElement` from the DOM and rejects the promise returned from `show`                       // 2451
       *                                                                                                               // 2452
       * @param {*} reason Data to reject the promise with                                                             // 2453
       * @returns Promise that will be resolved after the element has been removed.                                    // 2454
       *                                                                                                               // 2455
       */                                                                                                              // 2456
      function cancel(reason, options) {                                                                               // 2457
        var interim = stack.shift();                                                                                   // 2458
        if ( !interim ) return $q.when(reason || SHOW_CANCELLED);                                                      // 2459
                                                                                                                       // 2460
        interim                                                                                                        // 2461
          .remove(reason || SHOW_CANCELLED, true, options || { })                                                      // 2462
          .catch(function( reason ) {                                                                                  // 2463
            //$log.error("InterimElement.cancel() error: " + reason );                                                 // 2464
            return reason;                                                                                             // 2465
          });                                                                                                          // 2466
                                                                                                                       // 2467
        return interim.deferred.promise;                                                                               // 2468
      }                                                                                                                // 2469
                                                                                                                       // 2470
      /*                                                                                                               // 2471
       * Special method to quick-remove the interim element without animations                                         // 2472
       */                                                                                                              // 2473
      function destroy() {                                                                                             // 2474
        var interim = stack.shift();                                                                                   // 2475
                                                                                                                       // 2476
        return interim ? interim.remove(SHOW_CANCELLED, false, {'$destroy':true}) :                                    // 2477
               $q.when(SHOW_CANCELLED);                                                                                // 2478
      }                                                                                                                // 2479
                                                                                                                       // 2480
                                                                                                                       // 2481
      /*                                                                                                               // 2482
       * Internal Interim Element Object                                                                               // 2483
       * Used internally to manage the DOM element and related data                                                    // 2484
       */                                                                                                              // 2485
      function InterimElement(options) {                                                                               // 2486
        var self, element, showAction = $q.when(true);                                                                 // 2487
                                                                                                                       // 2488
        options = configureScopeAndTransitions(options);                                                               // 2489
                                                                                                                       // 2490
        return self = {                                                                                                // 2491
          options : options,                                                                                           // 2492
          deferred: $q.defer(),                                                                                        // 2493
          show    : createAndTransitionIn,                                                                             // 2494
          remove  : transitionOutAndRemove                                                                             // 2495
        };                                                                                                             // 2496
                                                                                                                       // 2497
        /**                                                                                                            // 2498
         * Compile, link, and show this interim element                                                                // 2499
         * Use optional autoHided and transition-in effects                                                            // 2500
         */                                                                                                            // 2501
        function createAndTransitionIn() {                                                                             // 2502
          return $q(function(resolve, reject){                                                                         // 2503
                                                                                                                       // 2504
            compileElement(options)                                                                                    // 2505
              .then(function( compiledData ) {                                                                         // 2506
                element = linkElement( compiledData, options );                                                        // 2507
                                                                                                                       // 2508
                showAction = showElement(element, options, compiledData.controller)                                    // 2509
                  .then(resolve, rejectAll );                                                                          // 2510
                                                                                                                       // 2511
              }, rejectAll);                                                                                           // 2512
                                                                                                                       // 2513
            function rejectAll(fault) {                                                                                // 2514
              // Force the '$md<xxx>.show()' promise to reject                                                         // 2515
              self.deferred.reject(fault);                                                                             // 2516
                                                                                                                       // 2517
              // Continue rejection propagation                                                                        // 2518
              reject(fault);                                                                                           // 2519
            }                                                                                                          // 2520
          });                                                                                                          // 2521
        }                                                                                                              // 2522
                                                                                                                       // 2523
        /**                                                                                                            // 2524
         * After the show process has finished/rejected:                                                               // 2525
         * - announce 'removing',                                                                                      // 2526
         * - perform the transition-out, and                                                                           // 2527
         * - perform optional clean up scope.                                                                          // 2528
         */                                                                                                            // 2529
        function transitionOutAndRemove(response, isCancelled, opts) {                                                 // 2530
                                                                                                                       // 2531
          // abort if the show() and compile failed                                                                    // 2532
          if ( !element ) return $q.when(false);                                                                       // 2533
                                                                                                                       // 2534
          options = angular.extend(options || {}, opts || {});                                                         // 2535
          options.cancelAutoHide && options.cancelAutoHide();                                                          // 2536
          options.element.triggerHandler('$mdInterimElementRemove');                                                   // 2537
                                                                                                                       // 2538
          if ( options.$destroy === true ) {                                                                           // 2539
                                                                                                                       // 2540
            return hideElement(options.element, options);                                                              // 2541
                                                                                                                       // 2542
          } else {                                                                                                     // 2543
                                                                                                                       // 2544
            $q.when(showAction)                                                                                        // 2545
                .finally(function() {                                                                                  // 2546
                  hideElement(options.element, options).then(function() {                                              // 2547
                                                                                                                       // 2548
                    (isCancelled && rejectAll(response)) || resolveAll(response);                                      // 2549
                                                                                                                       // 2550
                  }, rejectAll);                                                                                       // 2551
                });                                                                                                    // 2552
                                                                                                                       // 2553
            return self.deferred.promise;                                                                              // 2554
          }                                                                                                            // 2555
                                                                                                                       // 2556
                                                                                                                       // 2557
          /**                                                                                                          // 2558
           * The `show()` returns a promise that will be resolved when the interim                                     // 2559
           * element is hidden or cancelled...                                                                         // 2560
           */                                                                                                          // 2561
          function resolveAll(response) {                                                                              // 2562
            self.deferred.resolve(response);                                                                           // 2563
          }                                                                                                            // 2564
                                                                                                                       // 2565
          /**                                                                                                          // 2566
           * Force the '$md<xxx>.show()' promise to reject                                                             // 2567
           */                                                                                                          // 2568
          function rejectAll(fault) {                                                                                  // 2569
            self.deferred.reject(fault);                                                                               // 2570
          }                                                                                                            // 2571
        }                                                                                                              // 2572
                                                                                                                       // 2573
        /**                                                                                                            // 2574
         * Prepare optional isolated scope and prepare $animate with default enter and leave                           // 2575
         * transitions for the new element instance.                                                                   // 2576
         */                                                                                                            // 2577
        function configureScopeAndTransitions(options) {                                                               // 2578
          options = options || { };                                                                                    // 2579
          if ( options.template ) {                                                                                    // 2580
            options.template = $mdUtil.processTemplate(options.template);                                              // 2581
          }                                                                                                            // 2582
                                                                                                                       // 2583
          return angular.extend({                                                                                      // 2584
            preserveScope: false,                                                                                      // 2585
            cancelAutoHide : angular.noop,                                                                             // 2586
            scope: options.scope || $rootScope.$new(options.isolateScope),                                             // 2587
                                                                                                                       // 2588
            /**                                                                                                        // 2589
             * Default usage to enable $animate to transition-in; can be easily overridden via 'options'               // 2590
             */                                                                                                        // 2591
            onShow: function transitionIn(scope, element, options) {                                                   // 2592
              return $animate.enter(element, options.parent);                                                          // 2593
            },                                                                                                         // 2594
                                                                                                                       // 2595
            /**                                                                                                        // 2596
             * Default usage to enable $animate to transition-out; can be easily overridden via 'options'              // 2597
             */                                                                                                        // 2598
            onRemove: function transitionOut(scope, element) {                                                         // 2599
              // Element could be undefined if a new element is shown before                                           // 2600
              // the old one finishes compiling.                                                                       // 2601
              return element && $animate.leave(element) || $q.when();                                                  // 2602
            }                                                                                                          // 2603
          }, options );                                                                                                // 2604
                                                                                                                       // 2605
        }                                                                                                              // 2606
                                                                                                                       // 2607
        /**                                                                                                            // 2608
         * Compile an element with a templateUrl, controller, and locals                                               // 2609
         */                                                                                                            // 2610
        function compileElement(options) {                                                                             // 2611
                                                                                                                       // 2612
          var compiled = !options.skipCompile ? $mdCompiler.compile(options) : null;                                   // 2613
                                                                                                                       // 2614
          return compiled || $q(function (resolve) {                                                                   // 2615
              resolve({                                                                                                // 2616
                locals: {},                                                                                            // 2617
                link: function () {                                                                                    // 2618
                  return options.element;                                                                              // 2619
                }                                                                                                      // 2620
              });                                                                                                      // 2621
            });                                                                                                        // 2622
        }                                                                                                              // 2623
                                                                                                                       // 2624
        /**                                                                                                            // 2625
         *  Link an element with compiled configuration                                                                // 2626
         */                                                                                                            // 2627
        function linkElement(compileData, options){                                                                    // 2628
          angular.extend(compileData.locals, options);                                                                 // 2629
                                                                                                                       // 2630
          var element = compileData.link(options.scope);                                                               // 2631
                                                                                                                       // 2632
          // Search for parent at insertion time, if not specified                                                     // 2633
          options.element = element;                                                                                   // 2634
          options.parent = findParent(element, options);                                                               // 2635
          if (options.themable) $mdTheming(element);                                                                   // 2636
                                                                                                                       // 2637
          return element;                                                                                              // 2638
        }                                                                                                              // 2639
                                                                                                                       // 2640
        /**                                                                                                            // 2641
         * Search for parent at insertion time, if not specified                                                       // 2642
         */                                                                                                            // 2643
        function findParent(element, options) {                                                                        // 2644
          var parent = options.parent;                                                                                 // 2645
                                                                                                                       // 2646
          // Search for parent at insertion time, if not specified                                                     // 2647
          if (angular.isFunction(parent)) {                                                                            // 2648
            parent = parent(options.scope, element, options);                                                          // 2649
          } else if (angular.isString(parent)) {                                                                       // 2650
            parent = angular.element($document[0].querySelector(parent));                                              // 2651
          } else {                                                                                                     // 2652
            parent = angular.element(parent);                                                                          // 2653
          }                                                                                                            // 2654
                                                                                                                       // 2655
          // If parent querySelector/getter function fails, or it's just null,                                         // 2656
          // find a default.                                                                                           // 2657
          if (!(parent || {}).length) {                                                                                // 2658
            var el;                                                                                                    // 2659
            if ($rootElement[0] && $rootElement[0].querySelector) {                                                    // 2660
              el = $rootElement[0].querySelector(':not(svg) > body');                                                  // 2661
            }                                                                                                          // 2662
            if (!el) el = $rootElement[0];                                                                             // 2663
            if (el.nodeName == '#comment') {                                                                           // 2664
              el = $document[0].body;                                                                                  // 2665
            }                                                                                                          // 2666
            return angular.element(el);                                                                                // 2667
          }                                                                                                            // 2668
                                                                                                                       // 2669
          return parent;                                                                                               // 2670
        }                                                                                                              // 2671
                                                                                                                       // 2672
        /**                                                                                                            // 2673
         * If auto-hide is enabled, start timer and prepare cancel function                                            // 2674
         */                                                                                                            // 2675
        function startAutoHide() {                                                                                     // 2676
          var autoHideTimer, cancelAutoHide = angular.noop;                                                            // 2677
                                                                                                                       // 2678
          if (options.hideDelay) {                                                                                     // 2679
            autoHideTimer = $timeout(service.hide, options.hideDelay) ;                                                // 2680
            cancelAutoHide = function() {                                                                              // 2681
              $timeout.cancel(autoHideTimer);                                                                          // 2682
            }                                                                                                          // 2683
          }                                                                                                            // 2684
                                                                                                                       // 2685
          // Cache for subsequent use                                                                                  // 2686
          options.cancelAutoHide = function() {                                                                        // 2687
            cancelAutoHide();                                                                                          // 2688
            options.cancelAutoHide = undefined;                                                                        // 2689
          }                                                                                                            // 2690
        }                                                                                                              // 2691
                                                                                                                       // 2692
        /**                                                                                                            // 2693
         * Show the element ( with transitions), notify complete and start                                             // 2694
         * optional auto-Hide                                                                                          // 2695
         */                                                                                                            // 2696
        function showElement(element, options, controller) {                                                           // 2697
          // Trigger onComplete callback when the `show()` finishes                                                    // 2698
          var notifyComplete = options.onComplete || angular.noop;                                                     // 2699
                                                                                                                       // 2700
          return $q(function (resolve, reject) {                                                                       // 2701
            try {                                                                                                      // 2702
                                                                                                                       // 2703
              // Start transitionIn                                                                                    // 2704
              $q.when(options.onShow(options.scope, element, options, controller))                                     // 2705
                .then(function () {                                                                                    // 2706
                  notifyComplete(options.scope, element, options);                                                     // 2707
                  startAutoHide();                                                                                     // 2708
                                                                                                                       // 2709
                  resolve(element);                                                                                    // 2710
                                                                                                                       // 2711
                }, reject );                                                                                           // 2712
                                                                                                                       // 2713
            } catch(e) {                                                                                               // 2714
              reject(e.message);                                                                                       // 2715
            }                                                                                                          // 2716
          });                                                                                                          // 2717
        }                                                                                                              // 2718
                                                                                                                       // 2719
        function hideElement(element, options) {                                                                       // 2720
          var announceRemoving = options.onRemoving || angular.noop;                                                   // 2721
                                                                                                                       // 2722
          return $$q(function (resolve, reject) {                                                                      // 2723
            try {                                                                                                      // 2724
              // Start transitionIn                                                                                    // 2725
              var action = $$q.when( options.onRemove(options.scope, element, options) || true );                      // 2726
                                                                                                                       // 2727
              // Trigger callback *before* the remove operation starts                                                 // 2728
              announceRemoving(element, action);                                                                       // 2729
                                                                                                                       // 2730
              if ( options.$destroy == true ) {                                                                        // 2731
                                                                                                                       // 2732
                // For $destroy, onRemove should be synchronous                                                        // 2733
                resolve(element);                                                                                      // 2734
                                                                                                                       // 2735
              } else {                                                                                                 // 2736
                                                                                                                       // 2737
                // Wait until transition-out is done                                                                   // 2738
                action.then(function () {                                                                              // 2739
                                                                                                                       // 2740
                  if (!options.preserveScope && options.scope ) {                                                      // 2741
                    options.scope.$destroy();                                                                          // 2742
                  }                                                                                                    // 2743
                                                                                                                       // 2744
                  resolve(element);                                                                                    // 2745
                                                                                                                       // 2746
                }, reject );                                                                                           // 2747
              }                                                                                                        // 2748
                                                                                                                       // 2749
            } catch(e) {                                                                                               // 2750
              reject(e.message);                                                                                       // 2751
            }                                                                                                          // 2752
          });                                                                                                          // 2753
        }                                                                                                              // 2754
                                                                                                                       // 2755
      }                                                                                                                // 2756
    };                                                                                                                 // 2757
                                                                                                                       // 2758
  }                                                                                                                    // 2759
                                                                                                                       // 2760
}                                                                                                                      // 2761
                                                                                                                       // 2762
})();                                                                                                                  // 2763
(function(){                                                                                                           // 2764
"use strict";                                                                                                          // 2765
                                                                                                                       // 2766
(function () {                                                                                                         // 2767
  'use strict';                                                                                                        // 2768
                                                                                                                       // 2769
  var $$mdLayout, $parse, $interpolate;                                                                                // 2770
                                                                                                                       // 2771
    /**                                                                                                                // 2772
     *                                                                                                                 // 2773
     *   The original ngMaterial Layout solution used attribute selectors and CSS.                                     // 2774
     *                                                                                                                 // 2775
     *  ```html                                                                                                        // 2776
     *  <div layout="column"> My Content </div>                                                                        // 2777
     *  ```                                                                                                            // 2778
     *                                                                                                                 // 2779
     *  ```css                                                                                                         // 2780
     *  [layout] {                                                                                                     // 2781
     *    box-sizing: border-box;                                                                                      // 2782
     *    display:flex;                                                                                                // 2783
     *  }                                                                                                              // 2784
     *  [layout=column] {                                                                                              // 2785
     *    flex-direction : column                                                                                      // 2786
     *  }                                                                                                              // 2787
     *  ```                                                                                                            // 2788
     *                                                                                                                 // 2789
     *  Use of attribute selectors creates significant performance impacts in some                                     // 2790
     *  browsers... mainly IE.                                                                                         // 2791
     *                                                                                                                 // 2792
     *  This module registers directives that allow the same layout attributes to be                                   // 2793
     *  interpreted and converted to class selectors. The directive will add equivalent classes to each element that   // 2794
     *  contains a Layout directive.                                                                                   // 2795
     *                                                                                                                 // 2796
     * ```html                                                                                                         // 2797
     *   <div layout="column" class="layout layout-column"> My Content </div>                                          // 2798
     *```                                                                                                              // 2799
     *                                                                                                                 // 2800
     *  ```css                                                                                                         // 2801
     *  .layout {                                                                                                      // 2802
     *    box-sizing: border-box;                                                                                      // 2803
     *    display:flex;                                                                                                // 2804
     *  }                                                                                                              // 2805
     *  .layout-column {                                                                                               // 2806
     *    flex-direction : column                                                                                      // 2807
     *  }                                                                                                              // 2808
     *  ```                                                                                                            // 2809
     */                                                                                                                // 2810
    angular.module('material.core.layout', [ 'ng' ])                                                                   // 2811
                                                                                                                       // 2812
      /**                                                                                                              // 2813
       * Model of flags used by the Layout directives                                                                  // 2814
       * Allows changes while running tests or runtime app changes                                                     // 2815
       */                                                                                                              // 2816
      .factory("$$mdLayout", function() {                                                                              // 2817
        return {                                                                                                       // 2818
          /**                                                                                                          // 2819
           * Should we remove the original layout Attribute selectors                                                  // 2820
           * after translation injection                                                                               // 2821
           */                                                                                                          // 2822
          removeAttributes : true,                                                                                     // 2823
                                                                                                                       // 2824
          /**                                                                                                          // 2825
           * Special internal flag used to optimize                                                                    // 2826
           * noop(s) for the directive postLinks below                                                                 // 2827
           */                                                                                                          // 2828
          disablePostLinks : undefined                                                                                 // 2829
        };                                                                                                             // 2830
      })                                                                                                               // 2831
                                                                                                                       // 2832
      // Attribute directives with optional value(s)                                                                   // 2833
                                                                                                                       // 2834
      .directive('layout'              , attributeWithObserve('layout' , true)       )                                 // 2835
      .directive('layoutSm'            , attributeWithObserve('layout-sm'   , true)  )                                 // 2836
      .directive('layoutGtSm'          , attributeWithObserve('layout-gt-sm', true)  )                                 // 2837
      .directive('layoutMd'            , attributeWithObserve('layout-md'   , true)  )                                 // 2838
      .directive('layoutGtMd'          , attributeWithObserve('layout-gt-md', true)  )                                 // 2839
      .directive('layoutLg'            , attributeWithObserve('layout-lg'   , true)  )                                 // 2840
      .directive('layoutGtLg'          , attributeWithObserve('layout-gt-lg', true)  )                                 // 2841
                                                                                                                       // 2842
      .directive('flex'                , attributeWithObserve('flex'        , true)  )                                 // 2843
      .directive('flexSm'              , attributeWithObserve('flex-sm'     , true)  )                                 // 2844
      .directive('flexGtSm'            , attributeWithObserve('flex-gt-sm'  , true)  )                                 // 2845
      .directive('flexMd'              , attributeWithObserve('flex-md'     , true)  )                                 // 2846
      .directive('flexGtMd'            , attributeWithObserve('flex-gt-md'  , true)  )                                 // 2847
      .directive('flexLg'              , attributeWithObserve('flex-lg'     , true)  )                                 // 2848
      .directive('flexGtLg'            , attributeWithObserve('flex-gt-lg'  , true)  )                                 // 2849
                                                                                                                       // 2850
      // Attribute directives with optional value(s) but directiveName is NOT added as a class                         // 2851
                                                                                                                       // 2852
      .directive('layoutAlign'         , attributeWithObserve('layout-align')        )                                 // 2853
      .directive('layoutAlignSm'       , attributeWithObserve('layout-align-sm')     )                                 // 2854
      .directive('layoutAlignGtSm'     , attributeWithObserve('layout-align-gt-sm')  )                                 // 2855
      .directive('layoutAlignMd'       , attributeWithObserve('layout-align-md')     )                                 // 2856
      .directive('layoutAlignGtMd'     , attributeWithObserve('layout-align-gt-md')  )                                 // 2857
      .directive('layoutAlignLg'       , attributeWithObserve('layout-align-lg')     )                                 // 2858
      .directive('layoutAlignGtLg'     , attributeWithObserve('layout-align-gt-lg')  )                                 // 2859
                                                                                                                       // 2860
      .directive('flexOrder'           , attributeWithObserve('flex-order')          )                                 // 2861
      .directive('flexOrderSm'         , attributeWithObserve('flex-order-sm')       )                                 // 2862
      .directive('flexOrderGtSm'       , attributeWithObserve('flex-order-gt-sm')    )                                 // 2863
      .directive('flexOrderMd'         , attributeWithObserve('flex-order-md')       )                                 // 2864
      .directive('flexOrderGtMd'       , attributeWithObserve('flex-order-gt-md')    )                                 // 2865
      .directive('flexOrderLg'         , attributeWithObserve('flex-order-lg')       )                                 // 2866
      .directive('flexOrderGtLg'       , attributeWithObserve('flex-order-gt-lg')    )                                 // 2867
                                                                                                                       // 2868
      .directive('offset'              , attributeWithObserve('offset')              )                                 // 2869
      .directive('offsetSm'            , attributeWithObserve('offset-sm')           )                                 // 2870
      .directive('offsetGtSm'          , attributeWithObserve('offset-gt-sm')        )                                 // 2871
      .directive('offsetMd'            , attributeWithObserve('offset-md')           )                                 // 2872
      .directive('offsetGtMd'          , attributeWithObserve('offset-gt-md')        )                                 // 2873
      .directive('offsetLg'            , attributeWithObserve('offset-lg')           )                                 // 2874
      .directive('offsetGtLg'          , attributeWithObserve('offset-gt-lg')        )                                 // 2875
                                                                                                                       // 2876
      // Attribute directives with no value(s)                                                                         // 2877
                                                                                                                       // 2878
      .directive('layoutMargin'        , attributeWithoutValue('layout-margin')      )                                 // 2879
      .directive('layoutPadding'       , attributeWithoutValue('layout-padding')     )                                 // 2880
      .directive('layoutWrap'          , attributeWithoutValue('layout-wrap')        )                                 // 2881
      .directive('layoutFill'          , attributeWithoutValue('layout-fill')        )                                 // 2882
                                                                                                                       // 2883
      .directive('hide'                , attributeWithoutValue('hide')               )                                 // 2884
      .directive('hideSm'              , attributeWithoutValue('hide-sm')            )                                 // 2885
      .directive('hideGtSm'            , attributeWithoutValue('hide-gt-sm')         )                                 // 2886
      .directive('hideMd'              , attributeWithoutValue('hide-md')            )                                 // 2887
      .directive('hideGtMd'            , attributeWithoutValue('hide-gt-md')         )                                 // 2888
      .directive('hideLg'              , attributeWithoutValue('hide-lg')            )                                 // 2889
      .directive('hideGtLg'            , attributeWithoutValue('hide-gt-lg')         )                                 // 2890
      .directive('show'                , attributeWithoutValue('show')               )                                 // 2891
      .directive('showSm'              , attributeWithoutValue('show-sm')            )                                 // 2892
      .directive('showGtSm'            , attributeWithoutValue('show-gt-sm')         )                                 // 2893
      .directive('showMd'              , attributeWithoutValue('show-md')            )                                 // 2894
      .directive('showGtMd'            , attributeWithoutValue('show-gt-md')         )                                 // 2895
      .directive('showLg'              , attributeWithoutValue('show-lg')            )                                 // 2896
      .directive('showGtLg'            , attributeWithoutValue('show-gt-lg')         )                                 // 2897
                                                                                                                       // 2898
      // !! Deprecated attributes: use the `-lt` (aka less-than) notations                                             // 2899
                                                                                                                       // 2900
      .directive('layoutLtMd'          , warnAttrNotSupported('layout-lt-md',true)   )                                 // 2901
      .directive('layoutLtLg'          , warnAttrNotSupported('layout-lt-lg',true)   )                                 // 2902
      .directive('flexLtMd'            , warnAttrNotSupported('flex-lt-md'  ,true)   )                                 // 2903
      .directive('flexLtLg'            , warnAttrNotSupported('flex-lt-lg'  ,true)   )                                 // 2904
                                                                                                                       // 2905
      .directive('layoutAlignLtMd'     , warnAttrNotSupported('layout-align-lt-md')  )                                 // 2906
      .directive('layoutAlignLtLg'     , warnAttrNotSupported('layout-align-lt-lg')  )                                 // 2907
      .directive('flexOrderLtMd'       , warnAttrNotSupported('flex-order-lt-md')    )                                 // 2908
      .directive('flexOrderLtLg'       , warnAttrNotSupported('flex-order-lt-lg')    )                                 // 2909
      .directive('offsetLtMd'          , warnAttrNotSupported('offset-lt-md')        )                                 // 2910
      .directive('offsetLtLg'          , warnAttrNotSupported('offset-lt-lg')        )                                 // 2911
                                                                                                                       // 2912
      .directive('hideLtMd'            , warnAttrNotSupported ('hide-lt-md')         )                                 // 2913
      .directive('hideLtLg'            , warnAttrNotSupported ('hide-lt-lg')         )                                 // 2914
      .directive('showLtMd'            , warnAttrNotSupported ('show-lt-md')         )                                 // 2915
      .directive('showLtLg'            , warnAttrNotSupported ('show-lt-lg')         );                                // 2916
                                                                                                                       // 2917
    /**                                                                                                                // 2918
     * These functions create registration functions for ngMaterial Layout attribute directives                        // 2919
     * This provides easy translation to switch ngMaterial attribute selectors to                                      // 2920
     * CLASS selectors and directives; which has huge performance implications                                         // 2921
     * for IE Browsers                                                                                                 // 2922
     */                                                                                                                // 2923
                                                                                                                       // 2924
    /**                                                                                                                // 2925
     * Creates a directive registration function where a possbile dynamic attribute value will                         // 2926
     * be observed/watched.                                                                                            // 2927
     * @param {string} className attribute name; eg `md-layout-gt-md` with value ="row"                                // 2928
     * @param {boolean=} addDirectiveAsClass                                                                           // 2929
     */                                                                                                                // 2930
    function attributeWithObserve(className, addDirectiveAsClass) {                                                    // 2931
                                                                                                                       // 2932
      return ['$$mdLayout', '$document', '$parse', '$interpolate', function(_$$mdLayout_, $document, _$parse_, _$interpolate_) {
        $$mdLayout = _$$mdLayout_;                                                                                     // 2934
        $parse = _$parse_;                                                                                             // 2935
        $interpolate = _$interpolate_;                                                                                 // 2936
                                                                                                                       // 2937
        return {                                                                                                       // 2938
            restrict : 'A',                                                                                            // 2939
            compile: function(element, attr) {                                                                         // 2940
              if ( postLinkIsDisabled($document[0]) ) return angular.noop;                                             // 2941
                                                                                                                       // 2942
              attributeValueToClass(null, element, attr);                                                              // 2943
                                                                                                                       // 2944
              // Use for postLink to account for transforms after ng-transclude.                                       // 2945
              return attributeValueToClass;                                                                            // 2946
            }                                                                                                          // 2947
        };                                                                                                             // 2948
      }];                                                                                                              // 2949
                                                                                                                       // 2950
                                                                                                                       // 2951
      /**                                                                                                              // 2952
       * Add as transformed class selector(s), then                                                                    // 2953
       * remove the deprecated attribute selector                                                                      // 2954
       */                                                                                                              // 2955
      function attributeValueToClass(scope, element, attrs) {                                                          // 2956
        var updateClassFn = updateClassWithValue(element,className, attrs);                                            // 2957
        var normalizedAttr = attrs.$normalize(className);                                                              // 2958
        var attrValue = attrs[normalizedAttr] ? attrs[normalizedAttr].replace(/\s+/g, "-") : null;                     // 2959
        var addImmediate = attrValue ? !needsInterpolation(attrValue) : false;                                         // 2960
        var watchValue   = needsInterpolation(attrValue);                                                              // 2961
                                                                                                                       // 2962
        // Add transformed class selector(s)                                                                           // 2963
        if (addDirectiveAsClass) element.addClass(className);                                                          // 2964
                                                                                                                       // 2965
        if ( addImmediate ) element.addClass(className + "-" + attrValue);                                             // 2966
        if ( watchValue ) attrs.$observe( normalizedAttr, updateClassFn );                                             // 2967
        if ( $$mdLayout.removeAttributes ) element.removeAttr(className);                                              // 2968
      }                                                                                                                // 2969
                                                                                                                       // 2970
    }                                                                                                                  // 2971
                                                                                                                       // 2972
    /**                                                                                                                // 2973
     * See if the original value has interpolation symbols:                                                            // 2974
     * e.g.  flex-gt-md="{{triggerPoint}}"                                                                             // 2975
     */                                                                                                                // 2976
    function needsInterpolation(value) {                                                                               // 2977
      return (value ||"").indexOf($interpolate.startSymbol()) > -1;                                                    // 2978
    }                                                                                                                  // 2979
                                                                                                                       // 2980
    /**                                                                                                                // 2981
     * After link-phase, do NOT remove deprecated layout attribute selector.                                           // 2982
     * Instead watch the attribute so interpolated data-bindings to layout                                             // 2983
     * selectors will continue to be supported.                                                                        // 2984
     *                                                                                                                 // 2985
     * $observe() the className and update with new class (after removing the last one)                                // 2986
     *                                                                                                                 // 2987
     * e.g. `layout="{{layoutDemo.direction}}"` will update...                                                         // 2988
     *                                                                                                                 // 2989
     * NOTE: The value must match one of the specified styles in the CSS.                                              // 2990
     * For example `flex-gt-md="{{size}}`  where `scope.size == 47` will NOT work since                                // 2991
     * only breakpoints for 0, 5, 10, 15... 100, 33, 34, 66, 67 are defined.                                           // 2992
     *                                                                                                                 // 2993
     */                                                                                                                // 2994
    function updateClassWithValue(element, className, attr) {                                                          // 2995
      var lastClass;                                                                                                   // 2996
                                                                                                                       // 2997
      return function updateClassWithValue(newValue) {                                                                 // 2998
        var value = String(newValue || "").replace(/\s+/g, "-");                                                       // 2999
                                                                                                                       // 3000
        element.removeClass(lastClass);                                                                                // 3001
        lastClass = !value ? className : className + "-" + value;                                                      // 3002
        element.addClass(lastClass);                                                                                   // 3003
                                                                                                                       // 3004
        // Conditionally remove the attribute selector in case the browser attempts to                                 // 3005
        // read it and suffers a performance downgrade (IE).                                                           // 3006
                                                                                                                       // 3007
        if ( $$mdLayout.removeAttributes ) element.removeAttr(className);                                              // 3008
      };                                                                                                               // 3009
    }                                                                                                                  // 3010
                                                                                                                       // 3011
    /**                                                                                                                // 3012
     * Creates a registration function with for ngMaterial Layout attribute directive.                                 // 3013
     * This is a `simple` transpose of attribute usage to class usage                                                  // 3014
     */                                                                                                                // 3015
    function attributeWithoutValue(className) {                                                                        // 3016
      return ['$$mdLayout', '$document', function(_$$mdLayout_, $document) {                                           // 3017
        $$mdLayout = _$$mdLayout_;                                                                                     // 3018
        return {                                                                                                       // 3019
          restrict : 'A',                                                                                              // 3020
          compile: function(element, attrs) {                                                                          // 3021
            if ( postLinkIsDisabled($document[0]) ) return angular.noop;                                               // 3022
                                                                                                                       // 3023
            attributeToClass(null, element);                                                                           // 3024
                                                                                                                       // 3025
            // Use for postLink to account for transforms after ng-transclude.                                         // 3026
            return attributeToClass;                                                                                   // 3027
          }                                                                                                            // 3028
        };                                                                                                             // 3029
      }];                                                                                                              // 3030
                                                                                                                       // 3031
      /**                                                                                                              // 3032
       * Add as transformed class selector, then                                                                       // 3033
       * remove the deprecated attribute selector                                                                      // 3034
       */                                                                                                              // 3035
      function attributeToClass(scope, element) {                                                                      // 3036
        element.addClass(className);                                                                                   // 3037
                                                                                                                       // 3038
        if ( $$mdLayout.removeAttributes ) {                                                                           // 3039
          // After link-phase, remove deprecated layout attribute selector                                             // 3040
          element.removeAttr(className);                                                                               // 3041
        }                                                                                                              // 3042
      }                                                                                                                // 3043
    }                                                                                                                  // 3044
                                                                                                                       // 3045
    /**                                                                                                                // 3046
     * Provide console warning that this layout attribute has been deprecated                                          // 3047
     */                                                                                                                // 3048
    function warnAttrNotSupported(className) {                                                                         // 3049
      var parts = className.split("-");                                                                                // 3050
                                                                                                                       // 3051
      return ["$log", function($log) {                                                                                 // 3052
        $log.warn( className + "has been deprecated. Please use a `" + parts[0] + "-gt-<xxx>` variant.");              // 3053
        return angular.noop;                                                                                           // 3054
      }];                                                                                                              // 3055
                                                                                                                       // 3056
    }                                                                                                                  // 3057
                                                                                                                       // 3058
    /**                                                                                                                // 3059
     * Scan the body element. If it has a class 'md-css-only', then do NOT                                             // 3060
     * postLink process the directives for Attribute selectors.                                                        // 3061
     * (recall that postlink injects Class selectors based on attribute selector settings)                             // 3062
     *                                                                                                                 // 3063
     * Instead the Layout CSS for Attributes is used:                                                                  // 3064
     * e.g                                                                                                             // 3065
     *       .md-css-only [layout=row] {                                                                               // 3066
     *          flex-direction: row;                                                                                   // 3067
     *          -webkit-flex-direction: row;                                                                           // 3068
     *       }                                                                                                         // 3069
     *                                                                                                                 // 3070
     * Note: this means that 'md-css-only' will not work for IE (due to performance issues)                            // 3071
     * In these cases, the Layout translators (directives) should be enabled and the                                   // 3072
     * `angular-material.[min.]js` must be loaded.                                                                     // 3073
     */                                                                                                                // 3074
    function postLinkIsDisabled(document) {                                                                            // 3075
      var disablePostLinks = $$mdLayout.disablePostLinks;                                                              // 3076
                                                                                                                       // 3077
      // Perform a read-once (1x) check for the `md-css-only` class on the BODY                                        // 3078
                                                                                                                       // 3079
      if ( angular.isUndefined(disablePostLinks) ) {                                                                   // 3080
        var body = document && document.body;                                                                          // 3081
        if (body) disablePostLinks = body.classList.contains('md-css-only');                                           // 3082
      }                                                                                                                // 3083
                                                                                                                       // 3084
      return $$mdLayout.disablePostLinks = disablePostLinks;                                                           // 3085
    }                                                                                                                  // 3086
                                                                                                                       // 3087
})();                                                                                                                  // 3088
                                                                                                                       // 3089
})();                                                                                                                  // 3090
(function(){                                                                                                           // 3091
"use strict";                                                                                                          // 3092
                                                                                                                       // 3093
  /**                                                                                                                  // 3094
   * @ngdoc module                                                                                                     // 3095
   * @name material.core.componentRegistry                                                                             // 3096
   *                                                                                                                   // 3097
   * @description                                                                                                      // 3098
   * A component instance registration service.                                                                        // 3099
   * Note: currently this as a private service in the SideNav component.                                               // 3100
   */                                                                                                                  // 3101
  angular.module('material.core')                                                                                      // 3102
    .factory('$mdComponentRegistry', ComponentRegistry);                                                               // 3103
                                                                                                                       // 3104
  /*                                                                                                                   // 3105
   * @private                                                                                                          // 3106
   * @ngdoc factory                                                                                                    // 3107
   * @name ComponentRegistry                                                                                           // 3108
   * @module material.core.componentRegistry                                                                           // 3109
   *                                                                                                                   // 3110
   */                                                                                                                  // 3111
  function ComponentRegistry($log, $q) {                                                                               // 3112
                                                                                                                       // 3113
    var self;                                                                                                          // 3114
    var instances = [ ];                                                                                               // 3115
    var pendings = { };                                                                                                // 3116
                                                                                                                       // 3117
    return self = {                                                                                                    // 3118
      /**                                                                                                              // 3119
       * Used to print an error when an instance for a handle isn't found.                                             // 3120
       */                                                                                                              // 3121
      notFoundError: function(handle) {                                                                                // 3122
        $log.error('No instance found for handle', handle);                                                            // 3123
      },                                                                                                               // 3124
      /**                                                                                                              // 3125
       * Return all registered instances as an array.                                                                  // 3126
       */                                                                                                              // 3127
      getInstances: function() {                                                                                       // 3128
        return instances;                                                                                              // 3129
      },                                                                                                               // 3130
                                                                                                                       // 3131
      /**                                                                                                              // 3132
       * Get a registered instance.                                                                                    // 3133
       * @param handle the String handle to look up for a registered instance.                                         // 3134
       */                                                                                                              // 3135
      get: function(handle) {                                                                                          // 3136
        if ( !isValidID(handle) ) return null;                                                                         // 3137
                                                                                                                       // 3138
        var i, j, instance;                                                                                            // 3139
        for(i = 0, j = instances.length; i < j; i++) {                                                                 // 3140
          instance = instances[i];                                                                                     // 3141
          if(instance.$$mdHandle === handle) {                                                                         // 3142
            return instance;                                                                                           // 3143
          }                                                                                                            // 3144
        }                                                                                                              // 3145
        return null;                                                                                                   // 3146
      },                                                                                                               // 3147
                                                                                                                       // 3148
      /**                                                                                                              // 3149
       * Register an instance.                                                                                         // 3150
       * @param instance the instance to register                                                                      // 3151
       * @param handle the handle to identify the instance under.                                                      // 3152
       */                                                                                                              // 3153
      register: function(instance, handle) {                                                                           // 3154
        if ( !handle ) return angular.noop;                                                                            // 3155
                                                                                                                       // 3156
        instance.$$mdHandle = handle;                                                                                  // 3157
        instances.push(instance);                                                                                      // 3158
        resolveWhen();                                                                                                 // 3159
                                                                                                                       // 3160
        return deregister;                                                                                             // 3161
                                                                                                                       // 3162
        /**                                                                                                            // 3163
         * Remove registration for an instance                                                                         // 3164
         */                                                                                                            // 3165
        function deregister() {                                                                                        // 3166
          var index = instances.indexOf(instance);                                                                     // 3167
          if (index !== -1) {                                                                                          // 3168
            instances.splice(index, 1);                                                                                // 3169
          }                                                                                                            // 3170
        }                                                                                                              // 3171
                                                                                                                       // 3172
        /**                                                                                                            // 3173
         * Resolve any pending promises for this instance                                                              // 3174
         */                                                                                                            // 3175
        function resolveWhen() {                                                                                       // 3176
          var dfd = pendings[handle];                                                                                  // 3177
          if ( dfd ) {                                                                                                 // 3178
            dfd.resolve( instance );                                                                                   // 3179
            delete pendings[handle];                                                                                   // 3180
          }                                                                                                            // 3181
        }                                                                                                              // 3182
      },                                                                                                               // 3183
                                                                                                                       // 3184
      /**                                                                                                              // 3185
       * Async accessor to registered component instance                                                               // 3186
       * If not available then a promise is created to notify                                                          // 3187
       * all listeners when the instance is registered.                                                                // 3188
       */                                                                                                              // 3189
      when : function(handle) {                                                                                        // 3190
        if ( isValidID(handle) ) {                                                                                     // 3191
          var deferred = $q.defer();                                                                                   // 3192
          var instance = self.get(handle);                                                                             // 3193
                                                                                                                       // 3194
          if ( instance )  {                                                                                           // 3195
            deferred.resolve( instance );                                                                              // 3196
          } else {                                                                                                     // 3197
            pendings[handle] = deferred;                                                                               // 3198
          }                                                                                                            // 3199
                                                                                                                       // 3200
          return deferred.promise;                                                                                     // 3201
        }                                                                                                              // 3202
        return $q.reject("Invalid `md-component-id` value.");                                                          // 3203
      }                                                                                                                // 3204
                                                                                                                       // 3205
    };                                                                                                                 // 3206
                                                                                                                       // 3207
    function isValidID(handle){                                                                                        // 3208
      return handle && (handle !== "");                                                                                // 3209
    }                                                                                                                  // 3210
                                                                                                                       // 3211
  }                                                                                                                    // 3212
  ComponentRegistry.$inject = ["$log", "$q"];                                                                          // 3213
                                                                                                                       // 3214
})();                                                                                                                  // 3215
(function(){                                                                                                           // 3216
"use strict";                                                                                                          // 3217
                                                                                                                       // 3218
(function() {                                                                                                          // 3219
  'use strict';                                                                                                        // 3220
                                                                                                                       // 3221
  /**                                                                                                                  // 3222
   * @ngdoc service                                                                                                    // 3223
   * @name $mdButtonInkRipple                                                                                          // 3224
   * @module material.core                                                                                             // 3225
   *                                                                                                                   // 3226
   * @description                                                                                                      // 3227
   * Provides ripple effects for md-button.  See $mdInkRipple service for all possible configuration options.          // 3228
   *                                                                                                                   // 3229
   * @param {object=} scope Scope within the current context                                                           // 3230
   * @param {object=} element The element the ripple effect should be applied to                                       // 3231
   * @param {object=} options (Optional) Configuration options to override the default ripple configuration            // 3232
   */                                                                                                                  // 3233
                                                                                                                       // 3234
  angular.module('material.core')                                                                                      // 3235
    .factory('$mdButtonInkRipple', MdButtonInkRipple);                                                                 // 3236
                                                                                                                       // 3237
  function MdButtonInkRipple($mdInkRipple) {                                                                           // 3238
    return {                                                                                                           // 3239
      attach: function attachRipple(scope, element, options) {                                                         // 3240
        options = angular.extend(optionsForElement(element), options);                                                 // 3241
                                                                                                                       // 3242
        return $mdInkRipple.attach(scope, element, options);                                                           // 3243
      }                                                                                                                // 3244
    };                                                                                                                 // 3245
                                                                                                                       // 3246
    function optionsForElement(element) {                                                                              // 3247
      if (element.hasClass('md-icon-button')) {                                                                        // 3248
        return {                                                                                                       // 3249
          isMenuItem: element.hasClass('md-menu-item'),                                                                // 3250
          fitRipple: true,                                                                                             // 3251
          center: true                                                                                                 // 3252
        };                                                                                                             // 3253
      } else {                                                                                                         // 3254
        return {                                                                                                       // 3255
          isMenuItem: element.hasClass('md-menu-item'),                                                                // 3256
          dimBackground: true                                                                                          // 3257
        }                                                                                                              // 3258
      }                                                                                                                // 3259
    };                                                                                                                 // 3260
  }                                                                                                                    // 3261
  MdButtonInkRipple.$inject = ["$mdInkRipple"];;                                                                       // 3262
})();                                                                                                                  // 3263
                                                                                                                       // 3264
})();                                                                                                                  // 3265
(function(){                                                                                                           // 3266
"use strict";                                                                                                          // 3267
                                                                                                                       // 3268
(function() {                                                                                                          // 3269
  'use strict';                                                                                                        // 3270
                                                                                                                       // 3271
    /**                                                                                                                // 3272
   * @ngdoc service                                                                                                    // 3273
   * @name $mdCheckboxInkRipple                                                                                        // 3274
   * @module material.core                                                                                             // 3275
   *                                                                                                                   // 3276
   * @description                                                                                                      // 3277
   * Provides ripple effects for md-checkbox.  See $mdInkRipple service for all possible configuration options.        // 3278
   *                                                                                                                   // 3279
   * @param {object=} scope Scope within the current context                                                           // 3280
   * @param {object=} element The element the ripple effect should be applied to                                       // 3281
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 3282
   */                                                                                                                  // 3283
                                                                                                                       // 3284
  angular.module('material.core')                                                                                      // 3285
    .factory('$mdCheckboxInkRipple', MdCheckboxInkRipple);                                                             // 3286
                                                                                                                       // 3287
  function MdCheckboxInkRipple($mdInkRipple) {                                                                         // 3288
    return {                                                                                                           // 3289
      attach: attach                                                                                                   // 3290
    };                                                                                                                 // 3291
                                                                                                                       // 3292
    function attach(scope, element, options) {                                                                         // 3293
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 3294
        center: true,                                                                                                  // 3295
        dimBackground: false,                                                                                          // 3296
        fitRipple: true                                                                                                // 3297
      }, options));                                                                                                    // 3298
    };                                                                                                                 // 3299
  }                                                                                                                    // 3300
  MdCheckboxInkRipple.$inject = ["$mdInkRipple"];;                                                                     // 3301
})();                                                                                                                  // 3302
                                                                                                                       // 3303
})();                                                                                                                  // 3304
(function(){                                                                                                           // 3305
"use strict";                                                                                                          // 3306
                                                                                                                       // 3307
(function() {                                                                                                          // 3308
  'use strict';                                                                                                        // 3309
                                                                                                                       // 3310
  /**                                                                                                                  // 3311
   * @ngdoc service                                                                                                    // 3312
   * @name $mdListInkRipple                                                                                            // 3313
   * @module material.core                                                                                             // 3314
   *                                                                                                                   // 3315
   * @description                                                                                                      // 3316
   * Provides ripple effects for md-list.  See $mdInkRipple service for all possible configuration options.            // 3317
   *                                                                                                                   // 3318
   * @param {object=} scope Scope within the current context                                                           // 3319
   * @param {object=} element The element the ripple effect should be applied to                                       // 3320
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 3321
   */                                                                                                                  // 3322
                                                                                                                       // 3323
  angular.module('material.core')                                                                                      // 3324
    .factory('$mdListInkRipple', MdListInkRipple);                                                                     // 3325
                                                                                                                       // 3326
  function MdListInkRipple($mdInkRipple) {                                                                             // 3327
    return {                                                                                                           // 3328
      attach: attach                                                                                                   // 3329
    };                                                                                                                 // 3330
                                                                                                                       // 3331
    function attach(scope, element, options) {                                                                         // 3332
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 3333
        center: false,                                                                                                 // 3334
        dimBackground: true,                                                                                           // 3335
        outline: false,                                                                                                // 3336
        rippleSize: 'full'                                                                                             // 3337
      }, options));                                                                                                    // 3338
    };                                                                                                                 // 3339
  }                                                                                                                    // 3340
  MdListInkRipple.$inject = ["$mdInkRipple"];;                                                                         // 3341
})();                                                                                                                  // 3342
                                                                                                                       // 3343
})();                                                                                                                  // 3344
(function(){                                                                                                           // 3345
"use strict";                                                                                                          // 3346
                                                                                                                       // 3347
angular.module('material.core')                                                                                        // 3348
    .factory('$mdInkRipple', InkRippleService)                                                                         // 3349
    .directive('mdInkRipple', InkRippleDirective)                                                                      // 3350
    .directive('mdNoInk', attrNoDirective)                                                                             // 3351
    .directive('mdNoBar', attrNoDirective)                                                                             // 3352
    .directive('mdNoStretch', attrNoDirective);                                                                        // 3353
                                                                                                                       // 3354
var DURATION = 450;                                                                                                    // 3355
                                                                                                                       // 3356
/**                                                                                                                    // 3357
 * Directive used to add ripples to any element                                                                        // 3358
 * @ngInject                                                                                                           // 3359
 */                                                                                                                    // 3360
function InkRippleDirective ($mdButtonInkRipple, $mdCheckboxInkRipple) {                                               // 3361
  return {                                                                                                             // 3362
    controller: angular.noop,                                                                                          // 3363
    link:       function (scope, element, attr) {                                                                      // 3364
      attr.hasOwnProperty('mdInkRippleCheckbox')                                                                       // 3365
          ? $mdCheckboxInkRipple.attach(scope, element)                                                                // 3366
          : $mdButtonInkRipple.attach(scope, element);                                                                 // 3367
    }                                                                                                                  // 3368
  };                                                                                                                   // 3369
}                                                                                                                      // 3370
InkRippleDirective.$inject = ["$mdButtonInkRipple", "$mdCheckboxInkRipple"];                                           // 3371
                                                                                                                       // 3372
/**                                                                                                                    // 3373
 * Service for adding ripples to any element                                                                           // 3374
 * @ngInject                                                                                                           // 3375
 */                                                                                                                    // 3376
function InkRippleService ($injector) {                                                                                // 3377
  return { attach: attach };                                                                                           // 3378
  function attach (scope, element, options) {                                                                          // 3379
    if (element.controller('mdNoInk')) return angular.noop;                                                            // 3380
    return $injector.instantiate(InkRippleCtrl, {                                                                      // 3381
      $scope:        scope,                                                                                            // 3382
      $element:      element,                                                                                          // 3383
      rippleOptions: options                                                                                           // 3384
    });                                                                                                                // 3385
  }                                                                                                                    // 3386
}                                                                                                                      // 3387
InkRippleService.$inject = ["$injector"];                                                                              // 3388
                                                                                                                       // 3389
/**                                                                                                                    // 3390
 * Controller used by the ripple service in order to apply ripples                                                     // 3391
 * @ngInject                                                                                                           // 3392
 */                                                                                                                    // 3393
function InkRippleCtrl ($scope, $element, rippleOptions, $window, $timeout, $mdUtil) {                                 // 3394
  this.$window    = $window;                                                                                           // 3395
  this.$timeout   = $timeout;                                                                                          // 3396
  this.$mdUtil    = $mdUtil;                                                                                           // 3397
  this.$scope     = $scope;                                                                                            // 3398
  this.$element   = $element;                                                                                          // 3399
  this.options    = rippleOptions;                                                                                     // 3400
  this.mousedown  = false;                                                                                             // 3401
  this.ripples    = [];                                                                                                // 3402
  this.timeout    = null; // Stores a reference to the most-recent ripple timeout                                      // 3403
  this.lastRipple = null;                                                                                              // 3404
                                                                                                                       // 3405
  $mdUtil.valueOnUse(this, 'container', this.createContainer);                                                         // 3406
  $mdUtil.valueOnUse(this, 'color', this.getColor, 1);                                                                 // 3407
  $mdUtil.valueOnUse(this, 'background', this.getColor, 0.5);                                                          // 3408
                                                                                                                       // 3409
  // attach method for unit tests                                                                                      // 3410
  ($element.controller('mdInkRipple') || {}).createRipple = angular.bind(this, this.createRipple);                     // 3411
                                                                                                                       // 3412
  this.bindEvents();                                                                                                   // 3413
}                                                                                                                      // 3414
InkRippleCtrl.$inject = ["$scope", "$element", "rippleOptions", "$window", "$timeout", "$mdUtil"];                     // 3415
                                                                                                                       // 3416
/**                                                                                                                    // 3417
 * Returns the color that the ripple should be (either based on CSS or hard-coded)                                     // 3418
 * @returns {string}                                                                                                   // 3419
 */                                                                                                                    // 3420
InkRippleCtrl.prototype.getColor = function (multiplier) {                                                             // 3421
  multiplier = multiplier || 1;                                                                                        // 3422
  return parseColor(this.$element.attr('md-ink-ripple'))                                                               // 3423
      || parseColor(getElementColor.call(this));                                                                       // 3424
                                                                                                                       // 3425
  /**                                                                                                                  // 3426
   * Finds the color element and returns its text color for use as default ripple color                                // 3427
   * @returns {string}                                                                                                 // 3428
   */                                                                                                                  // 3429
  function getElementColor () {                                                                                        // 3430
    var colorElement = this.options.colorElement && this.options.colorElement[ 0 ];                                    // 3431
    colorElement     = colorElement || this.$element[ 0 ];                                                             // 3432
    return colorElement ? this.$window.getComputedStyle(colorElement).color : 'rgb(0,0,0)';                            // 3433
  }                                                                                                                    // 3434
                                                                                                                       // 3435
  /**                                                                                                                  // 3436
   * Takes a string color and converts it to RGBA format                                                               // 3437
   * @param color {string}                                                                                             // 3438
   * @returns {string}                                                                                                 // 3439
   */                                                                                                                  // 3440
  function parseColor (color) {                                                                                        // 3441
    if (!color) return;                                                                                                // 3442
    if (color.indexOf('rgba') === 0) return color.replace(/\d?\.?\d*\s*\)\s*$/, (0.1 * multiplier).toString() + ')');  // 3443
    if (color.indexOf('rgb') === 0) return rgbToRGBA(color);                                                           // 3444
    if (color.indexOf('#') === 0) return hexToRGBA(color);                                                             // 3445
                                                                                                                       // 3446
    /**                                                                                                                // 3447
     * Converts hex value to RGBA string                                                                               // 3448
     * @param color {string}                                                                                           // 3449
     * @returns {string}                                                                                               // 3450
     */                                                                                                                // 3451
    function hexToRGBA (color) {                                                                                       // 3452
      var hex   = color[ 0 ] === '#' ? color.substr(1) : color,                                                        // 3453
          dig   = hex.length / 3,                                                                                      // 3454
          red   = hex.substr(0, dig),                                                                                  // 3455
          green = hex.substr(dig, dig),                                                                                // 3456
          blue  = hex.substr(dig * 2);                                                                                 // 3457
      if (dig === 1) {                                                                                                 // 3458
        red += red;                                                                                                    // 3459
        green += green;                                                                                                // 3460
        blue += blue;                                                                                                  // 3461
      }                                                                                                                // 3462
      return 'rgba(' + parseInt(red, 16) + ',' + parseInt(green, 16) + ',' + parseInt(blue, 16) + ',0.1)';             // 3463
    }                                                                                                                  // 3464
                                                                                                                       // 3465
    /**                                                                                                                // 3466
     * Converts an RGB color to RGBA                                                                                   // 3467
     * @param color {string}                                                                                           // 3468
     * @returns {string}                                                                                               // 3469
     */                                                                                                                // 3470
    function rgbToRGBA (color) {                                                                                       // 3471
      return color.replace(')', ', 0.1)').replace('(', 'a(');                                                          // 3472
    }                                                                                                                  // 3473
                                                                                                                       // 3474
  }                                                                                                                    // 3475
                                                                                                                       // 3476
};                                                                                                                     // 3477
                                                                                                                       // 3478
/**                                                                                                                    // 3479
 * Binds events to the root element for                                                                                // 3480
 */                                                                                                                    // 3481
InkRippleCtrl.prototype.bindEvents = function () {                                                                     // 3482
  this.$element.on('mousedown', angular.bind(this, this.handleMousedown));                                             // 3483
  this.$element.on('mouseup', angular.bind(this, this.handleMouseup));                                                 // 3484
  this.$element.on('mouseleave', angular.bind(this, this.handleMouseup));                                              // 3485
};                                                                                                                     // 3486
                                                                                                                       // 3487
/**                                                                                                                    // 3488
 * Create a new ripple on every mousedown event from the root element                                                  // 3489
 * @param event {MouseEvent}                                                                                           // 3490
 */                                                                                                                    // 3491
InkRippleCtrl.prototype.handleMousedown = function (event) {                                                           // 3492
  if ( this.mousedown ) return;                                                                                        // 3493
                                                                                                                       // 3494
  // When jQuery is loaded, we have to get the original event                                                          // 3495
  if (event.hasOwnProperty('originalEvent')) event = event.originalEvent;                                              // 3496
  this.mousedown = true;                                                                                               // 3497
  if (this.options.center) {                                                                                           // 3498
    this.createRipple(this.container.prop('clientWidth') / 2, this.container.prop('clientWidth') / 2);                 // 3499
  } else {                                                                                                             // 3500
    this.createRipple(event.layerX, event.layerY);                                                                     // 3501
  }                                                                                                                    // 3502
                                                                                                                       // 3503
};                                                                                                                     // 3504
                                                                                                                       // 3505
/**                                                                                                                    // 3506
 * Either remove or unlock any remaining ripples when the user mouses off of the element (either by                    // 3507
 * mouseup or mouseleave event)                                                                                        // 3508
 */                                                                                                                    // 3509
InkRippleCtrl.prototype.handleMouseup = function () {                                                                  // 3510
  if ( this.mousedown || this.lastRipple ) {                                                                           // 3511
    var ctrl       = this;                                                                                             // 3512
    this.mousedown = false;                                                                                            // 3513
    this.$mdUtil.nextTick(function () {                                                                                // 3514
      ctrl.clearRipples();                                                                                             // 3515
    }, false);                                                                                                         // 3516
  }                                                                                                                    // 3517
};                                                                                                                     // 3518
                                                                                                                       // 3519
/**                                                                                                                    // 3520
 * Cycles through all ripples and attempts to remove them.                                                             // 3521
 * Depending on logic within `fadeInComplete`, some removals will be postponed.                                        // 3522
 */                                                                                                                    // 3523
InkRippleCtrl.prototype.clearRipples = function () {                                                                   // 3524
  for (var i = 0; i < this.ripples.length; i++) {                                                                      // 3525
    this.fadeInComplete(this.ripples[ i ]);                                                                            // 3526
  }                                                                                                                    // 3527
};                                                                                                                     // 3528
                                                                                                                       // 3529
/**                                                                                                                    // 3530
 * Creates the ripple container element                                                                                // 3531
 * @returns {*}                                                                                                        // 3532
 */                                                                                                                    // 3533
InkRippleCtrl.prototype.createContainer = function () {                                                                // 3534
  var container = angular.element('<div class="md-ripple-container"></div>');                                          // 3535
  this.$element.append(container);                                                                                     // 3536
  return container;                                                                                                    // 3537
};                                                                                                                     // 3538
                                                                                                                       // 3539
InkRippleCtrl.prototype.clearTimeout = function () {                                                                   // 3540
  if (this.timeout) {                                                                                                  // 3541
    this.$timeout.cancel(this.timeout);                                                                                // 3542
    this.timeout = null;                                                                                               // 3543
  }                                                                                                                    // 3544
};                                                                                                                     // 3545
                                                                                                                       // 3546
InkRippleCtrl.prototype.isRippleAllowed = function () {                                                                // 3547
  var element = this.$element[0];                                                                                      // 3548
  do {                                                                                                                 // 3549
    if (!element.tagName || element.tagName === 'BODY') break;                                                         // 3550
    if (element && element.hasAttribute && element.hasAttribute('disabled')) return false;                             // 3551
  } while (element = element.parentNode);                                                                              // 3552
  return true;                                                                                                         // 3553
};                                                                                                                     // 3554
                                                                                                                       // 3555
/**                                                                                                                    // 3556
 * Creates a new ripple and adds it to the container.  Also tracks ripple in `this.ripples`.                           // 3557
 * @param left                                                                                                         // 3558
 * @param top                                                                                                          // 3559
 */                                                                                                                    // 3560
InkRippleCtrl.prototype.createRipple = function (left, top) {                                                          // 3561
  if (!this.isRippleAllowed()) return;                                                                                 // 3562
                                                                                                                       // 3563
  var ctrl        = this;                                                                                              // 3564
  var ripple      = angular.element('<div class="md-ripple"></div>');                                                  // 3565
  var width       = this.$element.prop('clientWidth');                                                                 // 3566
  var height      = this.$element.prop('clientHeight');                                                                // 3567
  var x           = Math.max(Math.abs(width - left), left) * 2;                                                        // 3568
  var y           = Math.max(Math.abs(height - top), top) * 2;                                                         // 3569
  var size        = getSize(this.options.fitRipple, x, y);                                                             // 3570
                                                                                                                       // 3571
  ripple.css({                                                                                                         // 3572
    left:            left + 'px',                                                                                      // 3573
    top:             top + 'px',                                                                                       // 3574
    background:      'black',                                                                                          // 3575
    width:           size + 'px',                                                                                      // 3576
    height:          size + 'px',                                                                                      // 3577
    backgroundColor: rgbaToRGB(this.color),                                                                            // 3578
    borderColor:     rgbaToRGB(this.color)                                                                             // 3579
  });                                                                                                                  // 3580
  this.lastRipple = ripple;                                                                                            // 3581
                                                                                                                       // 3582
  // we only want one timeout to be running at a time                                                                  // 3583
  this.clearTimeout();                                                                                                 // 3584
  this.timeout    = this.$timeout(function () {                                                                        // 3585
    ctrl.clearTimeout();                                                                                               // 3586
    if (!ctrl.mousedown) ctrl.fadeInComplete(ripple);                                                                  // 3587
  }, DURATION * 0.35, false);                                                                                          // 3588
                                                                                                                       // 3589
  if (this.options.dimBackground) this.container.css({ backgroundColor: this.background });                            // 3590
  this.container.append(ripple);                                                                                       // 3591
  this.ripples.push(ripple);                                                                                           // 3592
  ripple.addClass('md-ripple-placed');                                                                                 // 3593
                                                                                                                       // 3594
  this.$mdUtil.nextTick(function () {                                                                                  // 3595
                                                                                                                       // 3596
    ripple.addClass('md-ripple-scaled md-ripple-active');                                                              // 3597
    ctrl.$timeout(function () {                                                                                        // 3598
      ctrl.clearRipples();                                                                                             // 3599
    }, DURATION, false);                                                                                               // 3600
                                                                                                                       // 3601
  }, false);                                                                                                           // 3602
                                                                                                                       // 3603
  function rgbaToRGB (color) {                                                                                         // 3604
    return color                                                                                                       // 3605
        ? color.replace('rgba', 'rgb').replace(/,[^\),]+\)/, ')')                                                      // 3606
        : 'rgb(0,0,0)';                                                                                                // 3607
  }                                                                                                                    // 3608
                                                                                                                       // 3609
  function getSize (fit, x, y) {                                                                                       // 3610
    return fit                                                                                                         // 3611
        ? Math.max(x, y)                                                                                               // 3612
        : Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));                                                                  // 3613
  }                                                                                                                    // 3614
};                                                                                                                     // 3615
                                                                                                                       // 3616
/**                                                                                                                    // 3617
 * Either kicks off the fade-out animation or queues the element for removal on mouseup                                // 3618
 * @param ripple                                                                                                       // 3619
 */                                                                                                                    // 3620
InkRippleCtrl.prototype.fadeInComplete = function (ripple) {                                                           // 3621
  if (this.lastRipple === ripple) {                                                                                    // 3622
    if (!this.timeout && !this.mousedown) {                                                                            // 3623
      this.removeRipple(ripple);                                                                                       // 3624
    }                                                                                                                  // 3625
  } else {                                                                                                             // 3626
    this.removeRipple(ripple);                                                                                         // 3627
  }                                                                                                                    // 3628
};                                                                                                                     // 3629
                                                                                                                       // 3630
/**                                                                                                                    // 3631
 * Kicks off the animation for removing a ripple                                                                       // 3632
 * @param ripple {Element}                                                                                             // 3633
 */                                                                                                                    // 3634
InkRippleCtrl.prototype.removeRipple = function (ripple) {                                                             // 3635
  var ctrl  = this;                                                                                                    // 3636
  var index = this.ripples.indexOf(ripple);                                                                            // 3637
  if (index < 0) return;                                                                                               // 3638
  this.ripples.splice(this.ripples.indexOf(ripple), 1);                                                                // 3639
  ripple.removeClass('md-ripple-active');                                                                              // 3640
  if (this.ripples.length === 0) this.container.css({ backgroundColor: '' });                                          // 3641
  // use a 2-second timeout in order to allow for the animation to finish                                              // 3642
  // we don't actually care how long the animation takes                                                               // 3643
  this.$timeout(function () {                                                                                          // 3644
    ctrl.fadeOutComplete(ripple);                                                                                      // 3645
  }, DURATION, false);                                                                                                 // 3646
};                                                                                                                     // 3647
                                                                                                                       // 3648
/**                                                                                                                    // 3649
 * Removes the provided ripple from the DOM                                                                            // 3650
 * @param ripple                                                                                                       // 3651
 */                                                                                                                    // 3652
InkRippleCtrl.prototype.fadeOutComplete = function (ripple) {                                                          // 3653
  ripple.remove();                                                                                                     // 3654
  this.lastRipple = null;                                                                                              // 3655
};                                                                                                                     // 3656
                                                                                                                       // 3657
/**                                                                                                                    // 3658
 * Used to create an empty directive.  This is used to track flag-directives whose children may have                   // 3659
 * functionality based on them.                                                                                        // 3660
 *                                                                                                                     // 3661
 * Example: `md-no-ink` will potentially be used by all child directives.                                              // 3662
 */                                                                                                                    // 3663
function attrNoDirective () {                                                                                          // 3664
  return { controller: angular.noop };                                                                                 // 3665
}                                                                                                                      // 3666
                                                                                                                       // 3667
})();                                                                                                                  // 3668
(function(){                                                                                                           // 3669
"use strict";                                                                                                          // 3670
                                                                                                                       // 3671
(function() {                                                                                                          // 3672
  'use strict';                                                                                                        // 3673
                                                                                                                       // 3674
    /**                                                                                                                // 3675
   * @ngdoc service                                                                                                    // 3676
   * @name $mdTabInkRipple                                                                                             // 3677
   * @module material.core                                                                                             // 3678
   *                                                                                                                   // 3679
   * @description                                                                                                      // 3680
   * Provides ripple effects for md-tabs.  See $mdInkRipple service for all possible configuration options.            // 3681
   *                                                                                                                   // 3682
   * @param {object=} scope Scope within the current context                                                           // 3683
   * @param {object=} element The element the ripple effect should be applied to                                       // 3684
   * @param {object=} options (Optional) Configuration options to override the defaultripple configuration             // 3685
   */                                                                                                                  // 3686
                                                                                                                       // 3687
  angular.module('material.core')                                                                                      // 3688
    .factory('$mdTabInkRipple', MdTabInkRipple);                                                                       // 3689
                                                                                                                       // 3690
  function MdTabInkRipple($mdInkRipple) {                                                                              // 3691
    return {                                                                                                           // 3692
      attach: attach                                                                                                   // 3693
    };                                                                                                                 // 3694
                                                                                                                       // 3695
    function attach(scope, element, options) {                                                                         // 3696
      return $mdInkRipple.attach(scope, element, angular.extend({                                                      // 3697
        center: false,                                                                                                 // 3698
        dimBackground: true,                                                                                           // 3699
        outline: false,                                                                                                // 3700
        rippleSize: 'full'                                                                                             // 3701
      }, options));                                                                                                    // 3702
    };                                                                                                                 // 3703
  }                                                                                                                    // 3704
  MdTabInkRipple.$inject = ["$mdInkRipple"];;                                                                          // 3705
})();                                                                                                                  // 3706
                                                                                                                       // 3707
})();                                                                                                                  // 3708
(function(){                                                                                                           // 3709
"use strict";                                                                                                          // 3710
                                                                                                                       // 3711
angular.module('material.core.theming.palette', [])                                                                    // 3712
.constant('$mdColorPalette', {                                                                                         // 3713
  'red': {                                                                                                             // 3714
    '50': '#ffebee',                                                                                                   // 3715
    '100': '#ffcdd2',                                                                                                  // 3716
    '200': '#ef9a9a',                                                                                                  // 3717
    '300': '#e57373',                                                                                                  // 3718
    '400': '#ef5350',                                                                                                  // 3719
    '500': '#f44336',                                                                                                  // 3720
    '600': '#e53935',                                                                                                  // 3721
    '700': '#d32f2f',                                                                                                  // 3722
    '800': '#c62828',                                                                                                  // 3723
    '900': '#b71c1c',                                                                                                  // 3724
    'A100': '#ff8a80',                                                                                                 // 3725
    'A200': '#ff5252',                                                                                                 // 3726
    'A400': '#ff1744',                                                                                                 // 3727
    'A700': '#d50000',                                                                                                 // 3728
    'contrastDefaultColor': 'light',                                                                                   // 3729
    'contrastDarkColors': '50 100 200 300 A100',                                                                       // 3730
    'contrastStrongLightColors': '400 500 600 700 A200 A400 A700'                                                      // 3731
  },                                                                                                                   // 3732
  'pink': {                                                                                                            // 3733
    '50': '#fce4ec',                                                                                                   // 3734
    '100': '#f8bbd0',                                                                                                  // 3735
    '200': '#f48fb1',                                                                                                  // 3736
    '300': '#f06292',                                                                                                  // 3737
    '400': '#ec407a',                                                                                                  // 3738
    '500': '#e91e63',                                                                                                  // 3739
    '600': '#d81b60',                                                                                                  // 3740
    '700': '#c2185b',                                                                                                  // 3741
    '800': '#ad1457',                                                                                                  // 3742
    '900': '#880e4f',                                                                                                  // 3743
    'A100': '#ff80ab',                                                                                                 // 3744
    'A200': '#ff4081',                                                                                                 // 3745
    'A400': '#f50057',                                                                                                 // 3746
    'A700': '#c51162',                                                                                                 // 3747
    'contrastDefaultColor': 'light',                                                                                   // 3748
    'contrastDarkColors': '50 100 200 A100',                                                                           // 3749
    'contrastStrongLightColors': '500 600 A200 A400 A700'                                                              // 3750
  },                                                                                                                   // 3751
  'purple': {                                                                                                          // 3752
    '50': '#f3e5f5',                                                                                                   // 3753
    '100': '#e1bee7',                                                                                                  // 3754
    '200': '#ce93d8',                                                                                                  // 3755
    '300': '#ba68c8',                                                                                                  // 3756
    '400': '#ab47bc',                                                                                                  // 3757
    '500': '#9c27b0',                                                                                                  // 3758
    '600': '#8e24aa',                                                                                                  // 3759
    '700': '#7b1fa2',                                                                                                  // 3760
    '800': '#6a1b9a',                                                                                                  // 3761
    '900': '#4a148c',                                                                                                  // 3762
    'A100': '#ea80fc',                                                                                                 // 3763
    'A200': '#e040fb',                                                                                                 // 3764
    'A400': '#d500f9',                                                                                                 // 3765
    'A700': '#aa00ff',                                                                                                 // 3766
    'contrastDefaultColor': 'light',                                                                                   // 3767
    'contrastDarkColors': '50 100 200 A100',                                                                           // 3768
    'contrastStrongLightColors': '300 400 A200 A400 A700'                                                              // 3769
  },                                                                                                                   // 3770
  'deep-purple': {                                                                                                     // 3771
    '50': '#ede7f6',                                                                                                   // 3772
    '100': '#d1c4e9',                                                                                                  // 3773
    '200': '#b39ddb',                                                                                                  // 3774
    '300': '#9575cd',                                                                                                  // 3775
    '400': '#7e57c2',                                                                                                  // 3776
    '500': '#673ab7',                                                                                                  // 3777
    '600': '#5e35b1',                                                                                                  // 3778
    '700': '#512da8',                                                                                                  // 3779
    '800': '#4527a0',                                                                                                  // 3780
    '900': '#311b92',                                                                                                  // 3781
    'A100': '#b388ff',                                                                                                 // 3782
    'A200': '#7c4dff',                                                                                                 // 3783
    'A400': '#651fff',                                                                                                 // 3784
    'A700': '#6200ea',                                                                                                 // 3785
    'contrastDefaultColor': 'light',                                                                                   // 3786
    'contrastDarkColors': '50 100 200 A100',                                                                           // 3787
    'contrastStrongLightColors': '300 400 A200'                                                                        // 3788
  },                                                                                                                   // 3789
  'indigo': {                                                                                                          // 3790
    '50': '#e8eaf6',                                                                                                   // 3791
    '100': '#c5cae9',                                                                                                  // 3792
    '200': '#9fa8da',                                                                                                  // 3793
    '300': '#7986cb',                                                                                                  // 3794
    '400': '#5c6bc0',                                                                                                  // 3795
    '500': '#3f51b5',                                                                                                  // 3796
    '600': '#3949ab',                                                                                                  // 3797
    '700': '#303f9f',                                                                                                  // 3798
    '800': '#283593',                                                                                                  // 3799
    '900': '#1a237e',                                                                                                  // 3800
    'A100': '#8c9eff',                                                                                                 // 3801
    'A200': '#536dfe',                                                                                                 // 3802
    'A400': '#3d5afe',                                                                                                 // 3803
    'A700': '#304ffe',                                                                                                 // 3804
    'contrastDefaultColor': 'light',                                                                                   // 3805
    'contrastDarkColors': '50 100 200 A100',                                                                           // 3806
    'contrastStrongLightColors': '300 400 A200 A400'                                                                   // 3807
  },                                                                                                                   // 3808
  'blue': {                                                                                                            // 3809
    '50': '#e3f2fd',                                                                                                   // 3810
    '100': '#bbdefb',                                                                                                  // 3811
    '200': '#90caf9',                                                                                                  // 3812
    '300': '#64b5f6',                                                                                                  // 3813
    '400': '#42a5f5',                                                                                                  // 3814
    '500': '#2196f3',                                                                                                  // 3815
    '600': '#1e88e5',                                                                                                  // 3816
    '700': '#1976d2',                                                                                                  // 3817
    '800': '#1565c0',                                                                                                  // 3818
    '900': '#0d47a1',                                                                                                  // 3819
    'A100': '#82b1ff',                                                                                                 // 3820
    'A200': '#448aff',                                                                                                 // 3821
    'A400': '#2979ff',                                                                                                 // 3822
    'A700': '#2962ff',                                                                                                 // 3823
    'contrastDefaultColor': 'light',                                                                                   // 3824
    'contrastDarkColors': '50 100 200 300 400 A100',                                                                   // 3825
    'contrastStrongLightColors': '500 600 700 A200 A400 A700'                                                          // 3826
  },                                                                                                                   // 3827
  'light-blue': {                                                                                                      // 3828
    '50': '#e1f5fe',                                                                                                   // 3829
    '100': '#b3e5fc',                                                                                                  // 3830
    '200': '#81d4fa',                                                                                                  // 3831
    '300': '#4fc3f7',                                                                                                  // 3832
    '400': '#29b6f6',                                                                                                  // 3833
    '500': '#03a9f4',                                                                                                  // 3834
    '600': '#039be5',                                                                                                  // 3835
    '700': '#0288d1',                                                                                                  // 3836
    '800': '#0277bd',                                                                                                  // 3837
    '900': '#01579b',                                                                                                  // 3838
    'A100': '#80d8ff',                                                                                                 // 3839
    'A200': '#40c4ff',                                                                                                 // 3840
    'A400': '#00b0ff',                                                                                                 // 3841
    'A700': '#0091ea',                                                                                                 // 3842
    'contrastDefaultColor': 'dark',                                                                                    // 3843
    'contrastLightColors': '600 700 800 900 A700',                                                                     // 3844
    'contrastStrongLightColors': '600 700 800 A700'                                                                    // 3845
  },                                                                                                                   // 3846
  'cyan': {                                                                                                            // 3847
    '50': '#e0f7fa',                                                                                                   // 3848
    '100': '#b2ebf2',                                                                                                  // 3849
    '200': '#80deea',                                                                                                  // 3850
    '300': '#4dd0e1',                                                                                                  // 3851
    '400': '#26c6da',                                                                                                  // 3852
    '500': '#00bcd4',                                                                                                  // 3853
    '600': '#00acc1',                                                                                                  // 3854
    '700': '#0097a7',                                                                                                  // 3855
    '800': '#00838f',                                                                                                  // 3856
    '900': '#006064',                                                                                                  // 3857
    'A100': '#84ffff',                                                                                                 // 3858
    'A200': '#18ffff',                                                                                                 // 3859
    'A400': '#00e5ff',                                                                                                 // 3860
    'A700': '#00b8d4',                                                                                                 // 3861
    'contrastDefaultColor': 'dark',                                                                                    // 3862
    'contrastLightColors': '700 800 900',                                                                              // 3863
    'contrastStrongLightColors': '700 800 900'                                                                         // 3864
  },                                                                                                                   // 3865
  'teal': {                                                                                                            // 3866
    '50': '#e0f2f1',                                                                                                   // 3867
    '100': '#b2dfdb',                                                                                                  // 3868
    '200': '#80cbc4',                                                                                                  // 3869
    '300': '#4db6ac',                                                                                                  // 3870
    '400': '#26a69a',                                                                                                  // 3871
    '500': '#009688',                                                                                                  // 3872
    '600': '#00897b',                                                                                                  // 3873
    '700': '#00796b',                                                                                                  // 3874
    '800': '#00695c',                                                                                                  // 3875
    '900': '#004d40',                                                                                                  // 3876
    'A100': '#a7ffeb',                                                                                                 // 3877
    'A200': '#64ffda',                                                                                                 // 3878
    'A400': '#1de9b6',                                                                                                 // 3879
    'A700': '#00bfa5',                                                                                                 // 3880
    'contrastDefaultColor': 'dark',                                                                                    // 3881
    'contrastLightColors': '500 600 700 800 900',                                                                      // 3882
    'contrastStrongLightColors': '500 600 700'                                                                         // 3883
  },                                                                                                                   // 3884
  'green': {                                                                                                           // 3885
    '50': '#e8f5e9',                                                                                                   // 3886
    '100': '#c8e6c9',                                                                                                  // 3887
    '200': '#a5d6a7',                                                                                                  // 3888
    '300': '#81c784',                                                                                                  // 3889
    '400': '#66bb6a',                                                                                                  // 3890
    '500': '#4caf50',                                                                                                  // 3891
    '600': '#43a047',                                                                                                  // 3892
    '700': '#388e3c',                                                                                                  // 3893
    '800': '#2e7d32',                                                                                                  // 3894
    '900': '#1b5e20',                                                                                                  // 3895
    'A100': '#b9f6ca',                                                                                                 // 3896
    'A200': '#69f0ae',                                                                                                 // 3897
    'A400': '#00e676',                                                                                                 // 3898
    'A700': '#00c853',                                                                                                 // 3899
    'contrastDefaultColor': 'dark',                                                                                    // 3900
    'contrastLightColors': '600 700 800 900',                                                                          // 3901
    'contrastStrongLightColors': '600 700'                                                                             // 3902
  },                                                                                                                   // 3903
  'light-green': {                                                                                                     // 3904
    '50': '#f1f8e9',                                                                                                   // 3905
    '100': '#dcedc8',                                                                                                  // 3906
    '200': '#c5e1a5',                                                                                                  // 3907
    '300': '#aed581',                                                                                                  // 3908
    '400': '#9ccc65',                                                                                                  // 3909
    '500': '#8bc34a',                                                                                                  // 3910
    '600': '#7cb342',                                                                                                  // 3911
    '700': '#689f38',                                                                                                  // 3912
    '800': '#558b2f',                                                                                                  // 3913
    '900': '#33691e',                                                                                                  // 3914
    'A100': '#ccff90',                                                                                                 // 3915
    'A200': '#b2ff59',                                                                                                 // 3916
    'A400': '#76ff03',                                                                                                 // 3917
    'A700': '#64dd17',                                                                                                 // 3918
    'contrastDefaultColor': 'dark',                                                                                    // 3919
    'contrastLightColors': '700 800 900',                                                                              // 3920
    'contrastStrongLightColors': '700 800 900'                                                                         // 3921
  },                                                                                                                   // 3922
  'lime': {                                                                                                            // 3923
    '50': '#f9fbe7',                                                                                                   // 3924
    '100': '#f0f4c3',                                                                                                  // 3925
    '200': '#e6ee9c',                                                                                                  // 3926
    '300': '#dce775',                                                                                                  // 3927
    '400': '#d4e157',                                                                                                  // 3928
    '500': '#cddc39',                                                                                                  // 3929
    '600': '#c0ca33',                                                                                                  // 3930
    '700': '#afb42b',                                                                                                  // 3931
    '800': '#9e9d24',                                                                                                  // 3932
    '900': '#827717',                                                                                                  // 3933
    'A100': '#f4ff81',                                                                                                 // 3934
    'A200': '#eeff41',                                                                                                 // 3935
    'A400': '#c6ff00',                                                                                                 // 3936
    'A700': '#aeea00',                                                                                                 // 3937
    'contrastDefaultColor': 'dark',                                                                                    // 3938
    'contrastLightColors': '900',                                                                                      // 3939
    'contrastStrongLightColors': '900'                                                                                 // 3940
  },                                                                                                                   // 3941
  'yellow': {                                                                                                          // 3942
    '50': '#fffde7',                                                                                                   // 3943
    '100': '#fff9c4',                                                                                                  // 3944
    '200': '#fff59d',                                                                                                  // 3945
    '300': '#fff176',                                                                                                  // 3946
    '400': '#ffee58',                                                                                                  // 3947
    '500': '#ffeb3b',                                                                                                  // 3948
    '600': '#fdd835',                                                                                                  // 3949
    '700': '#fbc02d',                                                                                                  // 3950
    '800': '#f9a825',                                                                                                  // 3951
    '900': '#f57f17',                                                                                                  // 3952
    'A100': '#ffff8d',                                                                                                 // 3953
    'A200': '#ffff00',                                                                                                 // 3954
    'A400': '#ffea00',                                                                                                 // 3955
    'A700': '#ffd600',                                                                                                 // 3956
    'contrastDefaultColor': 'dark'                                                                                     // 3957
  },                                                                                                                   // 3958
  'amber': {                                                                                                           // 3959
    '50': '#fff8e1',                                                                                                   // 3960
    '100': '#ffecb3',                                                                                                  // 3961
    '200': '#ffe082',                                                                                                  // 3962
    '300': '#ffd54f',                                                                                                  // 3963
    '400': '#ffca28',                                                                                                  // 3964
    '500': '#ffc107',                                                                                                  // 3965
    '600': '#ffb300',                                                                                                  // 3966
    '700': '#ffa000',                                                                                                  // 3967
    '800': '#ff8f00',                                                                                                  // 3968
    '900': '#ff6f00',                                                                                                  // 3969
    'A100': '#ffe57f',                                                                                                 // 3970
    'A200': '#ffd740',                                                                                                 // 3971
    'A400': '#ffc400',                                                                                                 // 3972
    'A700': '#ffab00',                                                                                                 // 3973
    'contrastDefaultColor': 'dark'                                                                                     // 3974
  },                                                                                                                   // 3975
  'orange': {                                                                                                          // 3976
    '50': '#fff3e0',                                                                                                   // 3977
    '100': '#ffe0b2',                                                                                                  // 3978
    '200': '#ffcc80',                                                                                                  // 3979
    '300': '#ffb74d',                                                                                                  // 3980
    '400': '#ffa726',                                                                                                  // 3981
    '500': '#ff9800',                                                                                                  // 3982
    '600': '#fb8c00',                                                                                                  // 3983
    '700': '#f57c00',                                                                                                  // 3984
    '800': '#ef6c00',                                                                                                  // 3985
    '900': '#e65100',                                                                                                  // 3986
    'A100': '#ffd180',                                                                                                 // 3987
    'A200': '#ffab40',                                                                                                 // 3988
    'A400': '#ff9100',                                                                                                 // 3989
    'A700': '#ff6d00',                                                                                                 // 3990
    'contrastDefaultColor': 'dark',                                                                                    // 3991
    'contrastLightColors': '800 900',                                                                                  // 3992
    'contrastStrongLightColors': '800 900'                                                                             // 3993
  },                                                                                                                   // 3994
  'deep-orange': {                                                                                                     // 3995
    '50': '#fbe9e7',                                                                                                   // 3996
    '100': '#ffccbc',                                                                                                  // 3997
    '200': '#ffab91',                                                                                                  // 3998
    '300': '#ff8a65',                                                                                                  // 3999
    '400': '#ff7043',                                                                                                  // 4000
    '500': '#ff5722',                                                                                                  // 4001
    '600': '#f4511e',                                                                                                  // 4002
    '700': '#e64a19',                                                                                                  // 4003
    '800': '#d84315',                                                                                                  // 4004
    '900': '#bf360c',                                                                                                  // 4005
    'A100': '#ff9e80',                                                                                                 // 4006
    'A200': '#ff6e40',                                                                                                 // 4007
    'A400': '#ff3d00',                                                                                                 // 4008
    'A700': '#dd2c00',                                                                                                 // 4009
    'contrastDefaultColor': 'light',                                                                                   // 4010
    'contrastDarkColors': '50 100 200 300 400 A100 A200',                                                              // 4011
    'contrastStrongLightColors': '500 600 700 800 900 A400 A700'                                                       // 4012
  },                                                                                                                   // 4013
  'brown': {                                                                                                           // 4014
    '50': '#efebe9',                                                                                                   // 4015
    '100': '#d7ccc8',                                                                                                  // 4016
    '200': '#bcaaa4',                                                                                                  // 4017
    '300': '#a1887f',                                                                                                  // 4018
    '400': '#8d6e63',                                                                                                  // 4019
    '500': '#795548',                                                                                                  // 4020
    '600': '#6d4c41',                                                                                                  // 4021
    '700': '#5d4037',                                                                                                  // 4022
    '800': '#4e342e',                                                                                                  // 4023
    '900': '#3e2723',                                                                                                  // 4024
    'A100': '#d7ccc8',                                                                                                 // 4025
    'A200': '#bcaaa4',                                                                                                 // 4026
    'A400': '#8d6e63',                                                                                                 // 4027
    'A700': '#5d4037',                                                                                                 // 4028
    'contrastDefaultColor': 'light',                                                                                   // 4029
    'contrastDarkColors': '50 100 200',                                                                                // 4030
    'contrastStrongLightColors': '300 400'                                                                             // 4031
  },                                                                                                                   // 4032
  'grey': {                                                                                                            // 4033
    '50': '#fafafa',                                                                                                   // 4034
    '100': '#f5f5f5',                                                                                                  // 4035
    '200': '#eeeeee',                                                                                                  // 4036
    '300': '#e0e0e0',                                                                                                  // 4037
    '400': '#bdbdbd',                                                                                                  // 4038
    '500': '#9e9e9e',                                                                                                  // 4039
    '600': '#757575',                                                                                                  // 4040
    '700': '#616161',                                                                                                  // 4041
    '800': '#424242',                                                                                                  // 4042
    '900': '#212121',                                                                                                  // 4043
    '1000': '#000000',                                                                                                 // 4044
    'A100': '#ffffff',                                                                                                 // 4045
    'A200': '#eeeeee',                                                                                                 // 4046
    'A400': '#bdbdbd',                                                                                                 // 4047
    'A700': '#616161',                                                                                                 // 4048
    'contrastDefaultColor': 'dark',                                                                                    // 4049
    'contrastLightColors': '600 700 800 900'                                                                           // 4050
  },                                                                                                                   // 4051
  'blue-grey': {                                                                                                       // 4052
    '50': '#eceff1',                                                                                                   // 4053
    '100': '#cfd8dc',                                                                                                  // 4054
    '200': '#b0bec5',                                                                                                  // 4055
    '300': '#90a4ae',                                                                                                  // 4056
    '400': '#78909c',                                                                                                  // 4057
    '500': '#607d8b',                                                                                                  // 4058
    '600': '#546e7a',                                                                                                  // 4059
    '700': '#455a64',                                                                                                  // 4060
    '800': '#37474f',                                                                                                  // 4061
    '900': '#263238',                                                                                                  // 4062
    'A100': '#cfd8dc',                                                                                                 // 4063
    'A200': '#b0bec5',                                                                                                 // 4064
    'A400': '#78909c',                                                                                                 // 4065
    'A700': '#455a64',                                                                                                 // 4066
    'contrastDefaultColor': 'light',                                                                                   // 4067
    'contrastDarkColors': '50 100 200 300',                                                                            // 4068
    'contrastStrongLightColors': '400 500'                                                                             // 4069
  }                                                                                                                    // 4070
});                                                                                                                    // 4071
                                                                                                                       // 4072
})();                                                                                                                  // 4073
(function(){                                                                                                           // 4074
"use strict";                                                                                                          // 4075
                                                                                                                       // 4076
angular.module('material.core.theming', ['material.core.theming.palette'])                                             // 4077
  .directive('mdTheme', ThemingDirective)                                                                              // 4078
  .directive('mdThemable', ThemableDirective)                                                                          // 4079
  .provider('$mdTheming', ThemingProvider)                                                                             // 4080
  .run(generateThemes);                                                                                                // 4081
                                                                                                                       // 4082
/**                                                                                                                    // 4083
 * @ngdoc service                                                                                                      // 4084
 * @name $mdThemingProvider                                                                                            // 4085
 * @module material.core.theming                                                                                       // 4086
 *                                                                                                                     // 4087
 * @description Provider to configure the `$mdTheming` service.                                                        // 4088
 */                                                                                                                    // 4089
                                                                                                                       // 4090
/**                                                                                                                    // 4091
 * @ngdoc method                                                                                                       // 4092
 * @name $mdThemingProvider#setDefaultTheme                                                                            // 4093
 * @param {string} themeName Default theme name to be applied to elements. Default value is `default`.                 // 4094
 */                                                                                                                    // 4095
                                                                                                                       // 4096
/**                                                                                                                    // 4097
 * @ngdoc method                                                                                                       // 4098
 * @name $mdThemingProvider#alwaysWatchTheme                                                                           // 4099
 * @param {boolean} watch Whether or not to always watch themes for changes and re-apply                               // 4100
 * classes when they change. Default is `false`. Enabling can reduce performance.                                      // 4101
 */                                                                                                                    // 4102
                                                                                                                       // 4103
/* Some Example Valid Theming Expressions                                                                              // 4104
 * =======================================                                                                             // 4105
 *                                                                                                                     // 4106
 * Intention group expansion: (valid for primary, accent, warn, background)                                            // 4107
 *                                                                                                                     // 4108
 * {{primary-100}} - grab shade 100 from the primary palette                                                           // 4109
 * {{primary-100-0.7}} - grab shade 100, apply opacity of 0.7                                                          // 4110
 * {{primary-100-contrast}} - grab shade 100's contrast color                                                          // 4111
 * {{primary-hue-1}} - grab the shade assigned to hue-1 from the primary palette                                       // 4112
 * {{primary-hue-1-0.7}} - apply 0.7 opacity to primary-hue-1                                                          // 4113
 * {{primary-color}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured shades set for each hue               // 4114
 * {{primary-color-0.7}} - Apply 0.7 opacity to each of the above rules                                                // 4115
 * {{primary-contrast}} - Generates .md-hue-1, .md-hue-2, .md-hue-3 with configured contrast (ie. text) color shades set for each hue
 * {{primary-contrast-0.7}} - Apply 0.7 opacity to each of the above rules                                             // 4117
 *                                                                                                                     // 4118
 * Foreground expansion: Applies rgba to black/white foreground text                                                   // 4119
 *                                                                                                                     // 4120
 * {{foreground-1}} - used for primary text                                                                            // 4121
 * {{foreground-2}} - used for secondary text/divider                                                                  // 4122
 * {{foreground-3}} - used for disabled text                                                                           // 4123
 * {{foreground-4}} - used for dividers                                                                                // 4124
 *                                                                                                                     // 4125
 */                                                                                                                    // 4126
                                                                                                                       // 4127
// In memory generated CSS rules; registered by theme.name                                                             // 4128
var GENERATED = { };                                                                                                   // 4129
                                                                                                                       // 4130
// In memory storage of defined themes and color palettes (both loaded by CSS, and user specified)                     // 4131
var PALETTES;                                                                                                          // 4132
var THEMES;                                                                                                            // 4133
                                                                                                                       // 4134
var DARK_FOREGROUND = {                                                                                                // 4135
  name: 'dark',                                                                                                        // 4136
  '1': 'rgba(0,0,0,0.87)',                                                                                             // 4137
  '2': 'rgba(0,0,0,0.54)',                                                                                             // 4138
  '3': 'rgba(0,0,0,0.26)',                                                                                             // 4139
  '4': 'rgba(0,0,0,0.12)'                                                                                              // 4140
};                                                                                                                     // 4141
var LIGHT_FOREGROUND = {                                                                                               // 4142
  name: 'light',                                                                                                       // 4143
  '1': 'rgba(255,255,255,1.0)',                                                                                        // 4144
  '2': 'rgba(255,255,255,0.7)',                                                                                        // 4145
  '3': 'rgba(255,255,255,0.3)',                                                                                        // 4146
  '4': 'rgba(255,255,255,0.12)'                                                                                        // 4147
};                                                                                                                     // 4148
                                                                                                                       // 4149
var DARK_SHADOW = '1px 1px 0px rgba(0,0,0,0.4), -1px -1px 0px rgba(0,0,0,0.4)';                                        // 4150
var LIGHT_SHADOW = '';                                                                                                 // 4151
                                                                                                                       // 4152
var DARK_CONTRAST_COLOR = colorToRgbaArray('rgba(0,0,0,0.87)');                                                        // 4153
var LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgba(255,255,255,0.87');                                                  // 4154
var STRONG_LIGHT_CONTRAST_COLOR = colorToRgbaArray('rgb(255,255,255)');                                                // 4155
                                                                                                                       // 4156
var THEME_COLOR_TYPES = ['primary', 'accent', 'warn', 'background'];                                                   // 4157
var DEFAULT_COLOR_TYPE = 'primary';                                                                                    // 4158
                                                                                                                       // 4159
// A color in a theme will use these hues by default, if not specified by user.                                        // 4160
var LIGHT_DEFAULT_HUES = {                                                                                             // 4161
  'accent': {                                                                                                          // 4162
    'default': 'A200',                                                                                                 // 4163
    'hue-1': 'A100',                                                                                                   // 4164
    'hue-2': 'A400',                                                                                                   // 4165
    'hue-3': 'A700'                                                                                                    // 4166
  },                                                                                                                   // 4167
  'background': {                                                                                                      // 4168
    'default': 'A100',                                                                                                 // 4169
    'hue-1': '300',                                                                                                    // 4170
    'hue-2': '800',                                                                                                    // 4171
    'hue-3': '900'                                                                                                     // 4172
  }                                                                                                                    // 4173
};                                                                                                                     // 4174
                                                                                                                       // 4175
var DARK_DEFAULT_HUES = {                                                                                              // 4176
  'background': {                                                                                                      // 4177
    'default': '800',                                                                                                  // 4178
    'hue-1': '600',                                                                                                    // 4179
    'hue-2': '300',                                                                                                    // 4180
    'hue-3': '900'                                                                                                     // 4181
  }                                                                                                                    // 4182
};                                                                                                                     // 4183
THEME_COLOR_TYPES.forEach(function(colorType) {                                                                        // 4184
  // Color types with unspecified default hues will use these default hue values                                       // 4185
  var defaultDefaultHues = {                                                                                           // 4186
    'default': '500',                                                                                                  // 4187
    'hue-1': '300',                                                                                                    // 4188
    'hue-2': '800',                                                                                                    // 4189
    'hue-3': 'A100'                                                                                                    // 4190
  };                                                                                                                   // 4191
  if (!LIGHT_DEFAULT_HUES[colorType]) LIGHT_DEFAULT_HUES[colorType] = defaultDefaultHues;                              // 4192
  if (!DARK_DEFAULT_HUES[colorType]) DARK_DEFAULT_HUES[colorType] = defaultDefaultHues;                                // 4193
});                                                                                                                    // 4194
                                                                                                                       // 4195
var VALID_HUE_VALUES = [                                                                                               // 4196
  '50', '100', '200', '300', '400', '500', '600',                                                                      // 4197
  '700', '800', '900', 'A100', 'A200', 'A400', 'A700'                                                                  // 4198
];                                                                                                                     // 4199
                                                                                                                       // 4200
function ThemingProvider($mdColorPalette) {                                                                            // 4201
  PALETTES = { };                                                                                                      // 4202
  THEMES = { };                                                                                                        // 4203
                                                                                                                       // 4204
  var themingProvider;                                                                                                 // 4205
  var defaultTheme = 'default';                                                                                        // 4206
  var alwaysWatchTheme = false;                                                                                        // 4207
                                                                                                                       // 4208
  // Load JS Defined Palettes                                                                                          // 4209
  angular.extend(PALETTES, $mdColorPalette);                                                                           // 4210
                                                                                                                       // 4211
  // Default theme defined in core.js                                                                                  // 4212
                                                                                                                       // 4213
  ThemingService.$inject = ["$rootScope", "$log"];                                                                     // 4214
  return themingProvider = {                                                                                           // 4215
    definePalette: definePalette,                                                                                      // 4216
    extendPalette: extendPalette,                                                                                      // 4217
    theme: registerTheme,                                                                                              // 4218
                                                                                                                       // 4219
    setDefaultTheme: function(theme) {                                                                                 // 4220
      defaultTheme = theme;                                                                                            // 4221
    },                                                                                                                 // 4222
    alwaysWatchTheme: function(alwaysWatch) {                                                                          // 4223
      alwaysWatchTheme = alwaysWatch;                                                                                  // 4224
    },                                                                                                                 // 4225
    $get: ThemingService,                                                                                              // 4226
    _LIGHT_DEFAULT_HUES: LIGHT_DEFAULT_HUES,                                                                           // 4227
    _DARK_DEFAULT_HUES: DARK_DEFAULT_HUES,                                                                             // 4228
    _PALETTES: PALETTES,                                                                                               // 4229
    _THEMES: THEMES,                                                                                                   // 4230
    _parseRules: parseRules,                                                                                           // 4231
    _rgba: rgba                                                                                                        // 4232
  };                                                                                                                   // 4233
                                                                                                                       // 4234
  // Example: $mdThemingProvider.definePalette('neonRed', { 50: '#f5fafa', ... });                                     // 4235
  function definePalette(name, map) {                                                                                  // 4236
    map = map || {};                                                                                                   // 4237
    PALETTES[name] = checkPaletteValid(name, map);                                                                     // 4238
    return themingProvider;                                                                                            // 4239
  }                                                                                                                    // 4240
                                                                                                                       // 4241
  // Returns an new object which is a copy of a given palette `name` with variables from                               // 4242
  // `map` overwritten                                                                                                 // 4243
  // Example: var neonRedMap = $mdThemingProvider.extendPalette('red', { 50: '#f5fafafa' });                           // 4244
  function extendPalette(name, map) {                                                                                  // 4245
    return checkPaletteValid(name,  angular.extend({}, PALETTES[name] || {}, map) );                                   // 4246
  }                                                                                                                    // 4247
                                                                                                                       // 4248
  // Make sure that palette has all required hues                                                                      // 4249
  function checkPaletteValid(name, map) {                                                                              // 4250
    var missingColors = VALID_HUE_VALUES.filter(function(field) {                                                      // 4251
      return !map[field];                                                                                              // 4252
    });                                                                                                                // 4253
    if (missingColors.length) {                                                                                        // 4254
      throw new Error("Missing colors %1 in palette %2!"                                                               // 4255
                      .replace('%1', missingColors.join(', '))                                                         // 4256
                      .replace('%2', name));                                                                           // 4257
    }                                                                                                                  // 4258
                                                                                                                       // 4259
    return map;                                                                                                        // 4260
  }                                                                                                                    // 4261
                                                                                                                       // 4262
  // Register a theme (which is a collection of color palettes to use with various states                              // 4263
  // ie. warn, accent, primary )                                                                                       // 4264
  // Optionally inherit from an existing theme                                                                         // 4265
  // $mdThemingProvider.theme('custom-theme').primaryPalette('red');                                                   // 4266
  function registerTheme(name, inheritFrom) {                                                                          // 4267
    if (THEMES[name]) return THEMES[name];                                                                             // 4268
                                                                                                                       // 4269
    inheritFrom = inheritFrom || 'default';                                                                            // 4270
                                                                                                                       // 4271
    var parentTheme = typeof inheritFrom === 'string' ? THEMES[inheritFrom] : inheritFrom;                             // 4272
    var theme = new Theme(name);                                                                                       // 4273
                                                                                                                       // 4274
    if (parentTheme) {                                                                                                 // 4275
      angular.forEach(parentTheme.colors, function(color, colorType) {                                                 // 4276
        theme.colors[colorType] = {                                                                                    // 4277
          name: color.name,                                                                                            // 4278
          // Make sure a COPY of the hues is given to the child color,                                                 // 4279
          // not the same reference.                                                                                   // 4280
          hues: angular.extend({}, color.hues)                                                                         // 4281
        };                                                                                                             // 4282
      });                                                                                                              // 4283
    }                                                                                                                  // 4284
    THEMES[name] = theme;                                                                                              // 4285
                                                                                                                       // 4286
    return theme;                                                                                                      // 4287
  }                                                                                                                    // 4288
                                                                                                                       // 4289
  function Theme(name) {                                                                                               // 4290
    var self = this;                                                                                                   // 4291
    self.name = name;                                                                                                  // 4292
    self.colors = {};                                                                                                  // 4293
                                                                                                                       // 4294
    self.dark = setDark;                                                                                               // 4295
    setDark(false);                                                                                                    // 4296
                                                                                                                       // 4297
    function setDark(isDark) {                                                                                         // 4298
      isDark = arguments.length === 0 ? true : !!isDark;                                                               // 4299
                                                                                                                       // 4300
      // If no change, abort                                                                                           // 4301
      if (isDark === self.isDark) return;                                                                              // 4302
                                                                                                                       // 4303
      self.isDark = isDark;                                                                                            // 4304
                                                                                                                       // 4305
      self.foregroundPalette = self.isDark ? LIGHT_FOREGROUND : DARK_FOREGROUND;                                       // 4306
      self.foregroundShadow = self.isDark ? DARK_SHADOW : LIGHT_SHADOW;                                                // 4307
                                                                                                                       // 4308
      // Light and dark themes have different default hues.                                                            // 4309
      // Go through each existing color type for this theme, and for every                                             // 4310
      // hue value that is still the default hue value from the previous light/dark setting,                           // 4311
      // set it to the default hue value from the new light/dark setting.                                              // 4312
      var newDefaultHues = self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES;                                       // 4313
      var oldDefaultHues = self.isDark ? LIGHT_DEFAULT_HUES : DARK_DEFAULT_HUES;                                       // 4314
      angular.forEach(newDefaultHues, function(newDefaults, colorType) {                                               // 4315
        var color = self.colors[colorType];                                                                            // 4316
        var oldDefaults = oldDefaultHues[colorType];                                                                   // 4317
        if (color) {                                                                                                   // 4318
          for (var hueName in color.hues) {                                                                            // 4319
            if (color.hues[hueName] === oldDefaults[hueName]) {                                                        // 4320
              color.hues[hueName] = newDefaults[hueName];                                                              // 4321
            }                                                                                                          // 4322
          }                                                                                                            // 4323
        }                                                                                                              // 4324
      });                                                                                                              // 4325
                                                                                                                       // 4326
      return self;                                                                                                     // 4327
    }                                                                                                                  // 4328
                                                                                                                       // 4329
    THEME_COLOR_TYPES.forEach(function(colorType) {                                                                    // 4330
      var defaultHues = (self.isDark ? DARK_DEFAULT_HUES : LIGHT_DEFAULT_HUES)[colorType];                             // 4331
      self[colorType + 'Palette'] = function setPaletteType(paletteName, hues) {                                       // 4332
        var color = self.colors[colorType] = {                                                                         // 4333
          name: paletteName,                                                                                           // 4334
          hues: angular.extend({}, defaultHues, hues)                                                                  // 4335
        };                                                                                                             // 4336
                                                                                                                       // 4337
        Object.keys(color.hues).forEach(function(name) {                                                               // 4338
          if (!defaultHues[name]) {                                                                                    // 4339
            throw new Error("Invalid hue name '%1' in theme %2's %3 color %4. Available hue names: %4"                 // 4340
              .replace('%1', name)                                                                                     // 4341
              .replace('%2', self.name)                                                                                // 4342
              .replace('%3', paletteName)                                                                              // 4343
              .replace('%4', Object.keys(defaultHues).join(', '))                                                      // 4344
            );                                                                                                         // 4345
          }                                                                                                            // 4346
        });                                                                                                            // 4347
        Object.keys(color.hues).map(function(key) {                                                                    // 4348
          return color.hues[key];                                                                                      // 4349
        }).forEach(function(hueValue) {                                                                                // 4350
          if (VALID_HUE_VALUES.indexOf(hueValue) == -1) {                                                              // 4351
            throw new Error("Invalid hue value '%1' in theme %2's %3 color %4. Available hue values: %5"               // 4352
              .replace('%1', hueValue)                                                                                 // 4353
              .replace('%2', self.name)                                                                                // 4354
              .replace('%3', colorType)                                                                                // 4355
              .replace('%4', paletteName)                                                                              // 4356
              .replace('%5', VALID_HUE_VALUES.join(', '))                                                              // 4357
            );                                                                                                         // 4358
          }                                                                                                            // 4359
        });                                                                                                            // 4360
        return self;                                                                                                   // 4361
      };                                                                                                               // 4362
                                                                                                                       // 4363
      self[colorType + 'Color'] = function() {                                                                         // 4364
        var args = Array.prototype.slice.call(arguments);                                                              // 4365
        console.warn('$mdThemingProviderTheme.' + colorType + 'Color() has been deprecated. ' +                        // 4366
                     'Use $mdThemingProviderTheme.' + colorType + 'Palette() instead.');                               // 4367
        return self[colorType + 'Palette'].apply(self, args);                                                          // 4368
      };                                                                                                               // 4369
    });                                                                                                                // 4370
  }                                                                                                                    // 4371
                                                                                                                       // 4372
  /**                                                                                                                  // 4373
   * @ngdoc service                                                                                                    // 4374
   * @name $mdTheming                                                                                                  // 4375
   *                                                                                                                   // 4376
   * @description                                                                                                      // 4377
   *                                                                                                                   // 4378
   * Service that makes an element apply theming related classes to itself.                                            // 4379
   *                                                                                                                   // 4380
   * ```js                                                                                                             // 4381
   * app.directive('myFancyDirective', function($mdTheming) {                                                          // 4382
   *   return {                                                                                                        // 4383
   *     restrict: 'e',                                                                                                // 4384
   *     link: function(scope, el, attrs) {                                                                            // 4385
   *       $mdTheming(el);                                                                                             // 4386
   *     }                                                                                                             // 4387
   *   };                                                                                                              // 4388
   * });                                                                                                               // 4389
   * ```                                                                                                               // 4390
   * @param {el=} element to apply theming to                                                                          // 4391
   */                                                                                                                  // 4392
  /* @ngInject */                                                                                                      // 4393
  function ThemingService($rootScope, $log) {                                                                          // 4394
                                                                                                                       // 4395
    applyTheme.inherit = function(el, parent) {                                                                        // 4396
      var ctrl = parent.controller('mdTheme');                                                                         // 4397
                                                                                                                       // 4398
      var attrThemeValue = el.attr('md-theme-watch');                                                                  // 4399
      if ( (alwaysWatchTheme || angular.isDefined(attrThemeValue)) && attrThemeValue != 'false') {                     // 4400
        var deregisterWatch = $rootScope.$watch(function() {                                                           // 4401
          return ctrl && ctrl.$mdTheme || defaultTheme;                                                                // 4402
        }, changeTheme);                                                                                               // 4403
        el.on('$destroy', deregisterWatch);                                                                            // 4404
      } else {                                                                                                         // 4405
        var theme = ctrl && ctrl.$mdTheme || defaultTheme;                                                             // 4406
        changeTheme(theme);                                                                                            // 4407
      }                                                                                                                // 4408
                                                                                                                       // 4409
      function changeTheme(theme) {                                                                                    // 4410
        if (!registered(theme)) {                                                                                      // 4411
          $log.warn('Attempted to use unregistered theme \'' + theme + '\'. ' +                                        // 4412
                    'Register it with $mdThemingProvider.theme().');                                                   // 4413
        }                                                                                                              // 4414
        var oldTheme = el.data('$mdThemeName');                                                                        // 4415
        if (oldTheme) el.removeClass('md-' + oldTheme +'-theme');                                                      // 4416
        el.addClass('md-' + theme + '-theme');                                                                         // 4417
        el.data('$mdThemeName', theme);                                                                                // 4418
        if (ctrl) {                                                                                                    // 4419
          el.data('$mdThemeController', ctrl);                                                                         // 4420
        }                                                                                                              // 4421
      }                                                                                                                // 4422
    };                                                                                                                 // 4423
                                                                                                                       // 4424
    applyTheme.THEMES = angular.extend({}, THEMES);                                                                    // 4425
    applyTheme.defaultTheme = function() { return defaultTheme; };                                                     // 4426
    applyTheme.registered = registered;                                                                                // 4427
                                                                                                                       // 4428
    return applyTheme;                                                                                                 // 4429
                                                                                                                       // 4430
    function registered(themeName) {                                                                                   // 4431
      if (themeName === undefined || themeName === '') return true;                                                    // 4432
      return applyTheme.THEMES[themeName] !== undefined;                                                               // 4433
    }                                                                                                                  // 4434
                                                                                                                       // 4435
    function applyTheme(scope, el) {                                                                                   // 4436
      // Allow us to be invoked via a linking function signature.                                                      // 4437
      if (el === undefined) {                                                                                          // 4438
        el = scope;                                                                                                    // 4439
        scope = undefined;                                                                                             // 4440
      }                                                                                                                // 4441
      if (scope === undefined) {                                                                                       // 4442
        scope = $rootScope;                                                                                            // 4443
      }                                                                                                                // 4444
      applyTheme.inherit(el, el);                                                                                      // 4445
    }                                                                                                                  // 4446
  }                                                                                                                    // 4447
}                                                                                                                      // 4448
ThemingProvider.$inject = ["$mdColorPalette"];                                                                         // 4449
                                                                                                                       // 4450
function ThemingDirective($mdTheming, $interpolate, $log) {                                                            // 4451
  return {                                                                                                             // 4452
    priority: 100,                                                                                                     // 4453
    link: {                                                                                                            // 4454
      pre: function(scope, el, attrs) {                                                                                // 4455
        var ctrl = {                                                                                                   // 4456
          $setTheme: function(theme) {                                                                                 // 4457
            if (!$mdTheming.registered(theme)) {                                                                       // 4458
              $log.warn('attempted to use unregistered theme \'' + theme + '\'');                                      // 4459
            }                                                                                                          // 4460
            ctrl.$mdTheme = theme;                                                                                     // 4461
          }                                                                                                            // 4462
        };                                                                                                             // 4463
        el.data('$mdThemeController', ctrl);                                                                           // 4464
        ctrl.$setTheme($interpolate(attrs.mdTheme)(scope));                                                            // 4465
        attrs.$observe('mdTheme', ctrl.$setTheme);                                                                     // 4466
      }                                                                                                                // 4467
    }                                                                                                                  // 4468
  };                                                                                                                   // 4469
}                                                                                                                      // 4470
ThemingDirective.$inject = ["$mdTheming", "$interpolate", "$log"];                                                     // 4471
                                                                                                                       // 4472
function ThemableDirective($mdTheming) {                                                                               // 4473
  return $mdTheming;                                                                                                   // 4474
}                                                                                                                      // 4475
ThemableDirective.$inject = ["$mdTheming"];                                                                            // 4476
                                                                                                                       // 4477
function parseRules(theme, colorType, rules) {                                                                         // 4478
  checkValidPalette(theme, colorType);                                                                                 // 4479
                                                                                                                       // 4480
  rules = rules.replace(/THEME_NAME/g, theme.name);                                                                    // 4481
  var generatedRules = [];                                                                                             // 4482
  var color = theme.colors[colorType];                                                                                 // 4483
                                                                                                                       // 4484
  var themeNameRegex = new RegExp('.md-' + theme.name + '-theme', 'g');                                                // 4485
  // Matches '{{ primary-color }}', etc                                                                                // 4486
  var hueRegex = new RegExp('(\'|")?{{\\s*(' + colorType + ')-(color|contrast)-?(\\d\\.?\\d*)?\\s*}}(\"|\')?','g');    // 4487
  var simpleVariableRegex = /'?"?\{\{\s*([a-zA-Z]+)-(A?\d+|hue\-[0-3]|shadow)-?(\d\.?\d*)?(contrast)?\s*\}\}'?"?/g;    // 4488
  var palette = PALETTES[color.name];                                                                                  // 4489
                                                                                                                       // 4490
  // find and replace simple variables where we use a specific hue, not an entire palette                              // 4491
  // eg. "{{primary-100}}"                                                                                             // 4492
  //\(' + THEME_COLOR_TYPES.join('\|') + '\)'                                                                          // 4493
  rules = rules.replace(simpleVariableRegex, function(match, colorType, hue, opacity, contrast) {                      // 4494
    if (colorType === 'foreground') {                                                                                  // 4495
      if (hue == 'shadow') {                                                                                           // 4496
        return theme.foregroundShadow;                                                                                 // 4497
      } else {                                                                                                         // 4498
        return theme.foregroundPalette[hue] || theme.foregroundPalette['1'];                                           // 4499
      }                                                                                                                // 4500
    }                                                                                                                  // 4501
    if (hue.indexOf('hue') === 0) {                                                                                    // 4502
      hue = theme.colors[colorType].hues[hue];                                                                         // 4503
    }                                                                                                                  // 4504
    return rgba( (PALETTES[ theme.colors[colorType].name ][hue] || '')[contrast ? 'contrast' : 'value'], opacity );    // 4505
  });                                                                                                                  // 4506
                                                                                                                       // 4507
  // For each type, generate rules for each hue (ie. default, md-hue-1, md-hue-2, md-hue-3)                            // 4508
  angular.forEach(color.hues, function(hueValue, hueName) {                                                            // 4509
    var newRule = rules                                                                                                // 4510
      .replace(hueRegex, function(match, _, colorType, hueType, opacity) {                                             // 4511
        return rgba(palette[hueValue][hueType === 'color' ? 'value' : 'contrast'], opacity);                           // 4512
      });                                                                                                              // 4513
    if (hueName !== 'default') {                                                                                       // 4514
      newRule = newRule.replace(themeNameRegex, '.md-' + theme.name + '-theme.md-' + hueName);                         // 4515
    }                                                                                                                  // 4516
                                                                                                                       // 4517
    // Don't apply a selector rule to the default theme, making it easier to override                                  // 4518
    // styles of the base-component                                                                                    // 4519
    if (theme.name == 'default') {                                                                                     // 4520
      newRule = newRule.replace(/\.md-default-theme/g, '');                                                            // 4521
    }                                                                                                                  // 4522
    generatedRules.push(newRule);                                                                                      // 4523
  });                                                                                                                  // 4524
                                                                                                                       // 4525
  return generatedRules;                                                                                               // 4526
}                                                                                                                      // 4527
                                                                                                                       // 4528
// Generate our themes at run time given the state of THEMES and PALETTES                                              // 4529
function generateThemes($injector) {                                                                                   // 4530
                                                                                                                       // 4531
  var head = document.getElementsByTagName('head')[0];                                                                 // 4532
  var firstChild = head ? head.firstElementChild : null;                                                               // 4533
  var themeCss = $injector.has('$MD_THEME_CSS') ? $injector.get('$MD_THEME_CSS') : '';                                 // 4534
                                                                                                                       // 4535
  if ( !firstChild ) return;                                                                                           // 4536
  if (themeCss.length === 0) return; // no rules, so no point in running this expensive task                           // 4537
                                                                                                                       // 4538
  // Expose contrast colors for palettes to ensure that text is always readable                                        // 4539
  angular.forEach(PALETTES, sanitizePalette);                                                                          // 4540
                                                                                                                       // 4541
  // MD_THEME_CSS is a string generated by the build process that includes all the themable                            // 4542
  // components as templates                                                                                           // 4543
                                                                                                                       // 4544
  // Break the CSS into individual rules                                                                               // 4545
  var rulesByType = {};                                                                                                // 4546
  var rules = themeCss                                                                                                 // 4547
                  .split(/\}(?!(\}|'|"|;))/)                                                                           // 4548
                  .filter(function(rule) { return rule && rule.length; })                                              // 4549
                  .map(function(rule) { return rule.trim() + '}'; });                                                  // 4550
                                                                                                                       // 4551
                                                                                                                       // 4552
  var ruleMatchRegex = new RegExp('md-(' + THEME_COLOR_TYPES.join('|') + ')', 'g');                                    // 4553
                                                                                                                       // 4554
  THEME_COLOR_TYPES.forEach(function(type) {                                                                           // 4555
    rulesByType[type] = '';                                                                                            // 4556
  });                                                                                                                  // 4557
                                                                                                                       // 4558
                                                                                                                       // 4559
  // Sort the rules based on type, allowing us to do color substitution on a per-type basis                            // 4560
  rules.forEach(function(rule) {                                                                                       // 4561
    var match = rule.match(ruleMatchRegex);                                                                            // 4562
    // First: test that if the rule has '.md-accent', it goes into the accent set of rules                             // 4563
    for (var i = 0, type; type = THEME_COLOR_TYPES[i]; i++) {                                                          // 4564
      if (rule.indexOf('.md-' + type) > -1) {                                                                          // 4565
        return rulesByType[type] += rule;                                                                              // 4566
      }                                                                                                                // 4567
    }                                                                                                                  // 4568
                                                                                                                       // 4569
    // If no eg 'md-accent' class is found, try to just find 'accent' in the rule and guess from                       // 4570
    // there                                                                                                           // 4571
    for (i = 0; type = THEME_COLOR_TYPES[i]; i++) {                                                                    // 4572
      if (rule.indexOf(type) > -1) {                                                                                   // 4573
        return rulesByType[type] += rule;                                                                              // 4574
      }                                                                                                                // 4575
    }                                                                                                                  // 4576
                                                                                                                       // 4577
    // Default to the primary array                                                                                    // 4578
    return rulesByType[DEFAULT_COLOR_TYPE] += rule;                                                                    // 4579
  });                                                                                                                  // 4580
                                                                                                                       // 4581
    // For each theme, use the color palettes specified for                                                            // 4582
    // `primary`, `warn` and `accent` to generate CSS rules.                                                           // 4583
                                                                                                                       // 4584
    angular.forEach(THEMES, function(theme) {                                                                          // 4585
      if ( !GENERATED[theme.name] ) {                                                                                  // 4586
                                                                                                                       // 4587
                                                                                                                       // 4588
        THEME_COLOR_TYPES.forEach(function(colorType) {                                                                // 4589
          var styleStrings = parseRules(theme, colorType, rulesByType[colorType]);                                     // 4590
          while (styleStrings.length) {                                                                                // 4591
            var style = document.createElement('style');                                                               // 4592
                style.setAttribute('type', 'text/css');                                                                // 4593
            style.appendChild(document.createTextNode(styleStrings.shift()));                                          // 4594
            head.insertBefore(style, firstChild);                                                                      // 4595
          }                                                                                                            // 4596
        });                                                                                                            // 4597
                                                                                                                       // 4598
                                                                                                                       // 4599
        if (theme.colors.primary.name == theme.colors.accent.name) {                                                   // 4600
          console.warn("$mdThemingProvider: Using the same palette for primary and" +                                  // 4601
                       " accent. This violates the material design spec.");                                            // 4602
        }                                                                                                              // 4603
                                                                                                                       // 4604
        GENERATED[theme.name] = true;                                                                                  // 4605
      }                                                                                                                // 4606
    });                                                                                                                // 4607
                                                                                                                       // 4608
                                                                                                                       // 4609
  // *************************                                                                                         // 4610
  // Internal functions                                                                                                // 4611
  // *************************                                                                                         // 4612
                                                                                                                       // 4613
  // The user specifies a 'default' contrast color as either light or dark,                                            // 4614
  // then explicitly lists which hues are the opposite contrast (eg. A100 has dark, A200 has light)                    // 4615
  function sanitizePalette(palette) {                                                                                  // 4616
    var defaultContrast = palette.contrastDefaultColor;                                                                // 4617
    var lightColors = palette.contrastLightColors || [];                                                               // 4618
    var strongLightColors = palette.contrastStrongLightColors || [];                                                   // 4619
    var darkColors = palette.contrastDarkColors || [];                                                                 // 4620
                                                                                                                       // 4621
    // These colors are provided as space-separated lists                                                              // 4622
    if (typeof lightColors === 'string') lightColors = lightColors.split(' ');                                         // 4623
    if (typeof strongLightColors === 'string') strongLightColors = strongLightColors.split(' ');                       // 4624
    if (typeof darkColors === 'string') darkColors = darkColors.split(' ');                                            // 4625
                                                                                                                       // 4626
    // Cleanup after ourselves                                                                                         // 4627
    delete palette.contrastDefaultColor;                                                                               // 4628
    delete palette.contrastLightColors;                                                                                // 4629
    delete palette.contrastStrongLightColors;                                                                          // 4630
    delete palette.contrastDarkColors;                                                                                 // 4631
                                                                                                                       // 4632
    // Change { 'A100': '#fffeee' } to { 'A100': { value: '#fffeee', contrast:DARK_CONTRAST_COLOR }                    // 4633
    angular.forEach(palette, function(hueValue, hueName) {                                                             // 4634
      if (angular.isObject(hueValue)) return; // Already converted                                                     // 4635
      // Map everything to rgb colors                                                                                  // 4636
      var rgbValue = colorToRgbaArray(hueValue);                                                                       // 4637
      if (!rgbValue) {                                                                                                 // 4638
        throw new Error("Color %1, in palette %2's hue %3, is invalid. Hex or rgb(a) color expected."                  // 4639
                        .replace('%1', hueValue)                                                                       // 4640
                        .replace('%2', palette.name)                                                                   // 4641
                        .replace('%3', hueName));                                                                      // 4642
      }                                                                                                                // 4643
                                                                                                                       // 4644
      palette[hueName] = {                                                                                             // 4645
        value: rgbValue,                                                                                               // 4646
        contrast: getContrastColor()                                                                                   // 4647
      };                                                                                                               // 4648
      function getContrastColor() {                                                                                    // 4649
        if (defaultContrast === 'light') {                                                                             // 4650
          if (darkColors.indexOf(hueName) > -1) {                                                                      // 4651
            return DARK_CONTRAST_COLOR;                                                                                // 4652
          } else {                                                                                                     // 4653
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR                               // 4654
              : LIGHT_CONTRAST_COLOR;                                                                                  // 4655
          }                                                                                                            // 4656
        } else {                                                                                                       // 4657
          if (lightColors.indexOf(hueName) > -1) {                                                                     // 4658
            return strongLightColors.indexOf(hueName) > -1 ? STRONG_LIGHT_CONTRAST_COLOR                               // 4659
              : LIGHT_CONTRAST_COLOR;                                                                                  // 4660
          } else {                                                                                                     // 4661
            return DARK_CONTRAST_COLOR;                                                                                // 4662
          }                                                                                                            // 4663
        }                                                                                                              // 4664
      }                                                                                                                // 4665
    });                                                                                                                // 4666
  }                                                                                                                    // 4667
                                                                                                                       // 4668
                                                                                                                       // 4669
}                                                                                                                      // 4670
generateThemes.$inject = ["$injector"];                                                                                // 4671
                                                                                                                       // 4672
function checkValidPalette(theme, colorType) {                                                                         // 4673
  // If theme attempts to use a palette that doesnt exist, throw error                                                 // 4674
  if (!PALETTES[ (theme.colors[colorType] || {}).name ]) {                                                             // 4675
    throw new Error(                                                                                                   // 4676
      "You supplied an invalid color palette for theme %1's %2 palette. Available palettes: %3"                        // 4677
                    .replace('%1', theme.name)                                                                         // 4678
                    .replace('%2', colorType)                                                                          // 4679
                    .replace('%3', Object.keys(PALETTES).join(', '))                                                   // 4680
    );                                                                                                                 // 4681
  }                                                                                                                    // 4682
}                                                                                                                      // 4683
                                                                                                                       // 4684
function colorToRgbaArray(clr) {                                                                                       // 4685
  if (angular.isArray(clr) && clr.length == 3) return clr;                                                             // 4686
  if (/^rgb/.test(clr)) {                                                                                              // 4687
    return clr.replace(/(^\s*rgba?\(|\)\s*$)/g, '').split(',').map(function(value, i) {                                // 4688
      return i == 3 ? parseFloat(value, 10) : parseInt(value, 10);                                                     // 4689
    });                                                                                                                // 4690
  }                                                                                                                    // 4691
  if (clr.charAt(0) == '#') clr = clr.substring(1);                                                                    // 4692
  if (!/^([a-fA-F0-9]{3}){1,2}$/g.test(clr)) return;                                                                   // 4693
                                                                                                                       // 4694
  var dig = clr.length / 3;                                                                                            // 4695
  var red = clr.substr(0, dig);                                                                                        // 4696
  var grn = clr.substr(dig, dig);                                                                                      // 4697
  var blu = clr.substr(dig * 2);                                                                                       // 4698
  if (dig === 1) {                                                                                                     // 4699
    red += red;                                                                                                        // 4700
    grn += grn;                                                                                                        // 4701
    blu += blu;                                                                                                        // 4702
  }                                                                                                                    // 4703
  return [parseInt(red, 16), parseInt(grn, 16), parseInt(blu, 16)];                                                    // 4704
}                                                                                                                      // 4705
                                                                                                                       // 4706
function rgba(rgbArray, opacity) {                                                                                     // 4707
  if ( !rgbArray ) return "rgb('0,0,0')";                                                                              // 4708
                                                                                                                       // 4709
  if (rgbArray.length == 4) {                                                                                          // 4710
    rgbArray = angular.copy(rgbArray);                                                                                 // 4711
    opacity ? rgbArray.pop() : opacity = rgbArray.pop();                                                               // 4712
  }                                                                                                                    // 4713
  return opacity && (typeof opacity == 'number' || (typeof opacity == 'string' && opacity.length)) ?                   // 4714
    'rgba(' + rgbArray.join(',') + ',' + opacity + ')' :                                                               // 4715
    'rgb(' + rgbArray.join(',') + ')';                                                                                 // 4716
}                                                                                                                      // 4717
                                                                                                                       // 4718
                                                                                                                       // 4719
})();                                                                                                                  // 4720
(function(){                                                                                                           // 4721
"use strict";                                                                                                          // 4722
                                                                                                                       // 4723
// Polyfill angular < 1.4 (provide $animateCss)                                                                        // 4724
angular                                                                                                                // 4725
  .module('material.core')                                                                                             // 4726
  .factory('$$mdAnimate', ["$q", "$timeout", "$mdConstant", "$animateCss", function($q, $timeout, $mdConstant, $animateCss){
                                                                                                                       // 4728
     // Since $$mdAnimate is injected into $mdUtil... use a wrapper function                                           // 4729
     // to subsequently inject $mdUtil as an argument to the AnimateDomUtils                                           // 4730
                                                                                                                       // 4731
     return function($mdUtil) {                                                                                        // 4732
       return AnimateDomUtils( $mdUtil, $q, $timeout, $mdConstant, $animateCss);                                       // 4733
     };                                                                                                                // 4734
   }]);                                                                                                                // 4735
                                                                                                                       // 4736
/**                                                                                                                    // 4737
 * Factory function that requires special injections                                                                   // 4738
 */                                                                                                                    // 4739
function AnimateDomUtils($mdUtil, $q, $timeout, $mdConstant, $animateCss) {                                            // 4740
  var self;                                                                                                            // 4741
  return self = {                                                                                                      // 4742
    /**                                                                                                                // 4743
     *                                                                                                                 // 4744
     */                                                                                                                // 4745
    translate3d : function( target, from, to, options ) {                                                              // 4746
      return $animateCss(target,{                                                                                      // 4747
        from:from,                                                                                                     // 4748
        to:to,                                                                                                         // 4749
        addClass:options.transitionInClass                                                                             // 4750
      })                                                                                                               // 4751
      .start()                                                                                                         // 4752
      .then(function(){                                                                                                // 4753
          // Resolve with reverser function...                                                                         // 4754
          return reverseTranslate;                                                                                     // 4755
      });                                                                                                              // 4756
                                                                                                                       // 4757
      /**                                                                                                              // 4758
       * Specific reversal of the request translate animation above...                                                 // 4759
       */                                                                                                              // 4760
      function reverseTranslate (newFrom) {                                                                            // 4761
        return $animateCss(target, {                                                                                   // 4762
           to: newFrom || from,                                                                                        // 4763
           addClass: options.transitionOutClass,                                                                       // 4764
           removeClass: options.transitionInClass                                                                      // 4765
        }).start();                                                                                                    // 4766
                                                                                                                       // 4767
      }                                                                                                                // 4768
  },                                                                                                                   // 4769
                                                                                                                       // 4770
    /**                                                                                                                // 4771
     * Listen for transitionEnd event (with optional timeout)                                                          // 4772
     * Announce completion or failure via promise handlers                                                             // 4773
     */                                                                                                                // 4774
    waitTransitionEnd: function (element, opts) {                                                                      // 4775
        var TIMEOUT = 3000; // fallback is 3 secs                                                                      // 4776
                                                                                                                       // 4777
        return $q(function(resolve, reject){                                                                           // 4778
          opts = opts || { };                                                                                          // 4779
                                                                                                                       // 4780
          var timer = $timeout(finished, opts.timeout || TIMEOUT);                                                     // 4781
          element.on($mdConstant.CSS.TRANSITIONEND, finished);                                                         // 4782
                                                                                                                       // 4783
          /**                                                                                                          // 4784
           * Upon timeout or transitionEnd, reject or resolve (respectively) this promise.                             // 4785
           * NOTE: Make sure this transitionEnd didn't bubble up from a child                                          // 4786
           */                                                                                                          // 4787
          function finished(ev) {                                                                                      // 4788
            if ( ev && ev.target !== element[0]) return;                                                               // 4789
                                                                                                                       // 4790
            if ( ev  ) $timeout.cancel(timer);                                                                         // 4791
            element.off($mdConstant.CSS.TRANSITIONEND, finished);                                                      // 4792
                                                                                                                       // 4793
            // Never reject since ngAnimate may cause timeouts due missed transitionEnd events                         // 4794
            resolve();                                                                                                 // 4795
                                                                                                                       // 4796
          }                                                                                                            // 4797
                                                                                                                       // 4798
        });                                                                                                            // 4799
      },                                                                                                               // 4800
                                                                                                                       // 4801
    /**                                                                                                                // 4802
     * Calculate the zoom transform from dialog to origin.                                                             // 4803
     *                                                                                                                 // 4804
     * We use this to set the dialog position immediately;                                                             // 4805
     * then the md-transition-in actually translates back to                                                           // 4806
     * `translate3d(0,0,0) scale(1.0)`...                                                                              // 4807
     *                                                                                                                 // 4808
     * NOTE: all values are rounded to the nearest integer                                                             // 4809
     */                                                                                                                // 4810
    calculateZoomToOrigin: function (element, originator) {                                                            // 4811
      var origin = originator.element;                                                                                 // 4812
      var zoomTemplate = "translate3d( {centerX}px, {centerY}px, 0 ) scale( {scaleX}, {scaleY} )";                     // 4813
      var buildZoom = angular.bind(null, $mdUtil.supplant, zoomTemplate);                                              // 4814
      var zoomStyle = buildZoom({centerX: 0, centerY: 0, scaleX: 0.5, scaleY: 0.5});                                   // 4815
                                                                                                                       // 4816
      if (origin) {                                                                                                    // 4817
        var originBnds = self.clientRect(origin) || self.copyRect(originator.bounds);                                  // 4818
        var dialogRect = self.copyRect(element[0].getBoundingClientRect());                                            // 4819
        var dialogCenterPt = self.centerPointFor(dialogRect);                                                          // 4820
        var originCenterPt = self.centerPointFor(originBnds);                                                          // 4821
                                                                                                                       // 4822
        // Build the transform to zoom from the dialog center to the origin center                                     // 4823
                                                                                                                       // 4824
        zoomStyle = buildZoom({                                                                                        // 4825
          centerX: originCenterPt.x - dialogCenterPt.x,                                                                // 4826
          centerY: originCenterPt.y - dialogCenterPt.y,                                                                // 4827
          scaleX: Math.round(100 * Math.min(0.5, originBnds.width / dialogRect.width))/100,                            // 4828
          scaleY: Math.round(100 * Math.min(0.5, originBnds.height / dialogRect.height))/100                           // 4829
        });                                                                                                            // 4830
      }                                                                                                                // 4831
                                                                                                                       // 4832
      return zoomStyle;                                                                                                // 4833
    },                                                                                                                 // 4834
                                                                                                                       // 4835
    /**                                                                                                                // 4836
     * Enhance raw values to represent valid css stylings...                                                           // 4837
     */                                                                                                                // 4838
    toCss : function( raw ) {                                                                                          // 4839
      var css = { };                                                                                                   // 4840
      var lookups = 'left top right bottom width height x y min-width min-height max-width max-height';                // 4841
                                                                                                                       // 4842
      angular.forEach(raw, function(value,key) {                                                                       // 4843
        if ( angular.isUndefined(value) ) return;                                                                      // 4844
                                                                                                                       // 4845
        if ( lookups.indexOf(key) >= 0 ) {                                                                             // 4846
          css[key] = value + 'px';                                                                                     // 4847
        } else {                                                                                                       // 4848
          switch (key) {                                                                                               // 4849
            case 'transition':                                                                                         // 4850
              convertToVendor(key, $mdConstant.CSS.TRANSITION, value);                                                 // 4851
              break;                                                                                                   // 4852
            case 'transform':                                                                                          // 4853
              convertToVendor(key, $mdConstant.CSS.TRANSFORM, value);                                                  // 4854
              break;                                                                                                   // 4855
            case 'transformOrigin':                                                                                    // 4856
              convertToVendor(key, $mdConstant.CSS.TRANSFORM_ORIGIN, value);                                           // 4857
              break;                                                                                                   // 4858
          }                                                                                                            // 4859
        }                                                                                                              // 4860
      });                                                                                                              // 4861
                                                                                                                       // 4862
      return css;                                                                                                      // 4863
                                                                                                                       // 4864
      function convertToVendor(key, vendor, value) {                                                                   // 4865
        angular.forEach(vendor.split(' '), function (key) {                                                            // 4866
          css[key] = value;                                                                                            // 4867
        });                                                                                                            // 4868
      }                                                                                                                // 4869
    },                                                                                                                 // 4870
                                                                                                                       // 4871
    /**                                                                                                                // 4872
     * Convert the translate CSS value to key/value pair(s).                                                           // 4873
     */                                                                                                                // 4874
    toTransformCss: function (transform, addTransition, transition) {                                                  // 4875
      var css = {};                                                                                                    // 4876
      angular.forEach($mdConstant.CSS.TRANSFORM.split(' '), function (key) {                                           // 4877
        css[key] = transform;                                                                                          // 4878
      });                                                                                                              // 4879
                                                                                                                       // 4880
      if (addTransition) {                                                                                             // 4881
        transition = transition || "all 0.4s cubic-bezier(0.25, 0.8, 0.25, 1) !important";                             // 4882
        css['transition'] = transition;                                                                                // 4883
      }                                                                                                                // 4884
                                                                                                                       // 4885
      return css;                                                                                                      // 4886
    },                                                                                                                 // 4887
                                                                                                                       // 4888
    /**                                                                                                                // 4889
     *  Clone the Rect and calculate the height/width if needed                                                        // 4890
     */                                                                                                                // 4891
    copyRect: function (source, destination) {                                                                         // 4892
      if (!source) return null;                                                                                        // 4893
                                                                                                                       // 4894
      destination = destination || {};                                                                                 // 4895
                                                                                                                       // 4896
      angular.forEach('left top right bottom width height'.split(' '), function (key) {                                // 4897
        destination[key] = Math.round(source[key])                                                                     // 4898
      });                                                                                                              // 4899
                                                                                                                       // 4900
      destination.width = destination.width || (destination.right - destination.left);                                 // 4901
      destination.height = destination.height || (destination.bottom - destination.top);                               // 4902
                                                                                                                       // 4903
      return destination;                                                                                              // 4904
    },                                                                                                                 // 4905
                                                                                                                       // 4906
    /**                                                                                                                // 4907
     * Calculate ClientRect of element; return null if hidden or zero size                                             // 4908
     */                                                                                                                // 4909
    clientRect: function (element) {                                                                                   // 4910
      var bounds = angular.element(element)[0].getBoundingClientRect();                                                // 4911
      var isPositiveSizeClientRect = function (rect) {                                                                 // 4912
        return rect && (rect.width > 0) && (rect.height > 0);                                                          // 4913
      };                                                                                                               // 4914
                                                                                                                       // 4915
      // If the event origin element has zero size, it has probably been hidden.                                       // 4916
      return isPositiveSizeClientRect(bounds) ? self.copyRect(bounds) : null;                                          // 4917
    },                                                                                                                 // 4918
                                                                                                                       // 4919
    /**                                                                                                                // 4920
     *  Calculate 'rounded' center point of Rect                                                                       // 4921
     */                                                                                                                // 4922
    centerPointFor: function (targetRect) {                                                                            // 4923
      return {                                                                                                         // 4924
        x: Math.round(targetRect.left + (targetRect.width / 2)),                                                       // 4925
        y: Math.round(targetRect.top + (targetRect.height / 2))                                                        // 4926
      }                                                                                                                // 4927
    }                                                                                                                  // 4928
                                                                                                                       // 4929
  };                                                                                                                   // 4930
};                                                                                                                     // 4931
                                                                                                                       // 4932
                                                                                                                       // 4933
})();                                                                                                                  // 4934
(function(){                                                                                                           // 4935
"use strict";                                                                                                          // 4936
                                                                                                                       // 4937
"use strict";                                                                                                          // 4938
                                                                                                                       // 4939
if (angular.version.minor >= 4) {                                                                                      // 4940
  angular.module('material.core.animate', []);                                                                         // 4941
} else {                                                                                                               // 4942
(function() {                                                                                                          // 4943
                                                                                                                       // 4944
  var forEach = angular.forEach;                                                                                       // 4945
                                                                                                                       // 4946
  var WEBKIT = angular.isDefined(document.documentElement.style.WebkitAppearance);                                     // 4947
  var TRANSITION_PROP = WEBKIT ? 'WebkitTransition' : 'transition';                                                    // 4948
  var ANIMATION_PROP = WEBKIT ? 'WebkitAnimation' : 'animation';                                                       // 4949
  var PREFIX = WEBKIT ? '-webkit-' : '';                                                                               // 4950
                                                                                                                       // 4951
  var TRANSITION_EVENTS = (WEBKIT ? 'webkitTransitionEnd ' : '') + 'transitionend';                                    // 4952
  var ANIMATION_EVENTS = (WEBKIT ? 'webkitAnimationEnd ' : '') + 'animationend';                                       // 4953
                                                                                                                       // 4954
  var $$ForceReflowFactory = ['$document', function($document) {                                                       // 4955
    return function() {                                                                                                // 4956
      return $document[0].body.clientWidth + 1;                                                                        // 4957
    }                                                                                                                  // 4958
  }];                                                                                                                  // 4959
                                                                                                                       // 4960
  var $$rAFMutexFactory = ['$$rAF', function($$rAF) {                                                                  // 4961
    return function() {                                                                                                // 4962
      var passed = false;                                                                                              // 4963
      $$rAF(function() {                                                                                               // 4964
        passed = true;                                                                                                 // 4965
      });                                                                                                              // 4966
      return function(fn) {                                                                                            // 4967
        passed ? fn() : $$rAF(fn);                                                                                     // 4968
      };                                                                                                               // 4969
    };                                                                                                                 // 4970
  }];                                                                                                                  // 4971
                                                                                                                       // 4972
  var $$AnimateRunnerFactory = ['$q', '$$rAFMutex', function($q, $$rAFMutex) {                                         // 4973
    var INITIAL_STATE = 0;                                                                                             // 4974
    var DONE_PENDING_STATE = 1;                                                                                        // 4975
    var DONE_COMPLETE_STATE = 2;                                                                                       // 4976
                                                                                                                       // 4977
    function AnimateRunner(host) {                                                                                     // 4978
      this.setHost(host);                                                                                              // 4979
                                                                                                                       // 4980
      this._doneCallbacks = [];                                                                                        // 4981
      this._runInAnimationFrame = $$rAFMutex();                                                                        // 4982
      this._state = 0;                                                                                                 // 4983
    }                                                                                                                  // 4984
                                                                                                                       // 4985
    AnimateRunner.prototype = {                                                                                        // 4986
      setHost: function(host) {                                                                                        // 4987
        this.host = host || {};                                                                                        // 4988
      },                                                                                                               // 4989
                                                                                                                       // 4990
      done: function(fn) {                                                                                             // 4991
        if (this._state === DONE_COMPLETE_STATE) {                                                                     // 4992
          fn();                                                                                                        // 4993
        } else {                                                                                                       // 4994
          this._doneCallbacks.push(fn);                                                                                // 4995
        }                                                                                                              // 4996
      },                                                                                                               // 4997
                                                                                                                       // 4998
      progress: angular.noop,                                                                                          // 4999
                                                                                                                       // 5000
      getPromise: function() {                                                                                         // 5001
        if (!this.promise) {                                                                                           // 5002
          var self = this;                                                                                             // 5003
          this.promise = $q(function(resolve, reject) {                                                                // 5004
            self.done(function(status) {                                                                               // 5005
              status === false ? reject() : resolve();                                                                 // 5006
            });                                                                                                        // 5007
          });                                                                                                          // 5008
        }                                                                                                              // 5009
        return this.promise;                                                                                           // 5010
      },                                                                                                               // 5011
                                                                                                                       // 5012
      then: function(resolveHandler, rejectHandler) {                                                                  // 5013
        return this.getPromise().then(resolveHandler, rejectHandler);                                                  // 5014
      },                                                                                                               // 5015
                                                                                                                       // 5016
      'catch': function(handler) {                                                                                     // 5017
        return this.getPromise()['catch'](handler);                                                                    // 5018
      },                                                                                                               // 5019
                                                                                                                       // 5020
      'finally': function(handler) {                                                                                   // 5021
        return this.getPromise()['finally'](handler);                                                                  // 5022
      },                                                                                                               // 5023
                                                                                                                       // 5024
      pause: function() {                                                                                              // 5025
        if (this.host.pause) {                                                                                         // 5026
          this.host.pause();                                                                                           // 5027
        }                                                                                                              // 5028
      },                                                                                                               // 5029
                                                                                                                       // 5030
      resume: function() {                                                                                             // 5031
        if (this.host.resume) {                                                                                        // 5032
          this.host.resume();                                                                                          // 5033
        }                                                                                                              // 5034
      },                                                                                                               // 5035
                                                                                                                       // 5036
      end: function() {                                                                                                // 5037
        if (this.host.end) {                                                                                           // 5038
          this.host.end();                                                                                             // 5039
        }                                                                                                              // 5040
        this._resolve(true);                                                                                           // 5041
      },                                                                                                               // 5042
                                                                                                                       // 5043
      cancel: function() {                                                                                             // 5044
        if (this.host.cancel) {                                                                                        // 5045
          this.host.cancel();                                                                                          // 5046
        }                                                                                                              // 5047
        this._resolve(false);                                                                                          // 5048
      },                                                                                                               // 5049
                                                                                                                       // 5050
      complete: function(response) {                                                                                   // 5051
        var self = this;                                                                                               // 5052
        if (self._state === INITIAL_STATE) {                                                                           // 5053
          self._state = DONE_PENDING_STATE;                                                                            // 5054
          self._runInAnimationFrame(function() {                                                                       // 5055
            self._resolve(response);                                                                                   // 5056
          });                                                                                                          // 5057
        }                                                                                                              // 5058
      },                                                                                                               // 5059
                                                                                                                       // 5060
      _resolve: function(response) {                                                                                   // 5061
        if (this._state !== DONE_COMPLETE_STATE) {                                                                     // 5062
          forEach(this._doneCallbacks, function(fn) {                                                                  // 5063
            fn(response);                                                                                              // 5064
          });                                                                                                          // 5065
          this._doneCallbacks.length = 0;                                                                              // 5066
          this._state = DONE_COMPLETE_STATE;                                                                           // 5067
        }                                                                                                              // 5068
      }                                                                                                                // 5069
    };                                                                                                                 // 5070
                                                                                                                       // 5071
    return AnimateRunner;                                                                                              // 5072
  }];                                                                                                                  // 5073
                                                                                                                       // 5074
  angular                                                                                                              // 5075
    .module('material.core.animate', [])                                                                               // 5076
    .factory('$$forceReflow', $$ForceReflowFactory)                                                                    // 5077
    .factory('$$AnimateRunner', $$AnimateRunnerFactory)                                                                // 5078
    .factory('$$rAFMutex', $$rAFMutexFactory)                                                                          // 5079
    .factory('$animateCss', ['$window', '$$rAF', '$$AnimateRunner', '$$forceReflow', '$$jqLite', '$timeout',           // 5080
                     function($window,   $$rAF,   $$AnimateRunner,   $$forceReflow,   $$jqLite,   $timeout) {          // 5081
                                                                                                                       // 5082
      function init(element, options) {                                                                                // 5083
                                                                                                                       // 5084
        var temporaryStyles = [];                                                                                      // 5085
        var node = getDomNode(element);                                                                                // 5086
                                                                                                                       // 5087
        if (options.transitionStyle) {                                                                                 // 5088
          temporaryStyles.push([PREFIX + 'transition', options.transitionStyle]);                                      // 5089
        }                                                                                                              // 5090
                                                                                                                       // 5091
        if (options.keyframeStyle) {                                                                                   // 5092
          temporaryStyles.push([PREFIX + 'animation', options.keyframeStyle]);                                         // 5093
        }                                                                                                              // 5094
                                                                                                                       // 5095
        if (options.delay) {                                                                                           // 5096
          temporaryStyles.push([PREFIX + 'transition-delay', options.delay + 's']);                                    // 5097
        }                                                                                                              // 5098
                                                                                                                       // 5099
        if (options.duration) {                                                                                        // 5100
          temporaryStyles.push([PREFIX + 'transition-duration', options.duration + 's']);                              // 5101
        }                                                                                                              // 5102
                                                                                                                       // 5103
        var hasCompleteStyles = options.keyframeStyle ||                                                               // 5104
                                (options.to && (options.duration > 0 || options.transitionStyle));                     // 5105
        var hasCompleteClasses = !!options.addClass || !!options.removeClass;                                          // 5106
        var hasCompleteAnimation = hasCompleteStyles || hasCompleteClasses;                                            // 5107
                                                                                                                       // 5108
        blockTransition(element, true);                                                                                // 5109
        applyAnimationFromStyles(element, options);                                                                    // 5110
                                                                                                                       // 5111
        var animationClosed = false;                                                                                   // 5112
        var events, eventFn;                                                                                           // 5113
                                                                                                                       // 5114
        return {                                                                                                       // 5115
          close: $window.close,                                                                                        // 5116
          start: function() {                                                                                          // 5117
            var runner = new $$AnimateRunner();                                                                        // 5118
            waitUntilQuiet(function() {                                                                                // 5119
              blockTransition(element, false);                                                                         // 5120
              if (!hasCompleteAnimation) {                                                                             // 5121
                return close();                                                                                        // 5122
              }                                                                                                        // 5123
                                                                                                                       // 5124
              forEach(temporaryStyles, function(entry) {                                                               // 5125
                var key = entry[0];                                                                                    // 5126
                var value = entry[1];                                                                                  // 5127
                node.style[camelCase(key)] = value;                                                                    // 5128
              });                                                                                                      // 5129
                                                                                                                       // 5130
              applyClasses(element, options);                                                                          // 5131
                                                                                                                       // 5132
              var timings = computeTimings(element);                                                                   // 5133
              if (timings.duration === 0) {                                                                            // 5134
                return close();                                                                                        // 5135
              }                                                                                                        // 5136
                                                                                                                       // 5137
              var moreStyles = [];                                                                                     // 5138
                                                                                                                       // 5139
              if (options.easing) {                                                                                    // 5140
                if (timings.transitionDuration) {                                                                      // 5141
                  moreStyles.push([PREFIX + 'transition-timing-function', options.easing]);                            // 5142
                }                                                                                                      // 5143
                if (timings.animationDuration) {                                                                       // 5144
                  moreStyles.push([PREFIX + 'animation-timing-function', options.easing]);                             // 5145
                }                                                                                                      // 5146
              }                                                                                                        // 5147
                                                                                                                       // 5148
              if (options.delay && timings.animationDelay) {                                                           // 5149
                moreStyles.push([PREFIX + 'animation-delay', options.delay + 's']);                                    // 5150
              }                                                                                                        // 5151
                                                                                                                       // 5152
              if (options.duration && timings.animationDuration) {                                                     // 5153
                moreStyles.push([PREFIX + 'animation-duration', options.duration + 's']);                              // 5154
              }                                                                                                        // 5155
                                                                                                                       // 5156
              forEach(moreStyles, function(entry) {                                                                    // 5157
                var key = entry[0];                                                                                    // 5158
                var value = entry[1];                                                                                  // 5159
                node.style[camelCase(key)] = value;                                                                    // 5160
                temporaryStyles.push(entry);                                                                           // 5161
              });                                                                                                      // 5162
                                                                                                                       // 5163
              var maxDelay = timings.delay;                                                                            // 5164
              var maxDelayTime = maxDelay * 1000;                                                                      // 5165
              var maxDuration = timings.duration;                                                                      // 5166
              var maxDurationTime = maxDuration * 1000;                                                                // 5167
              var startTime = Date.now();                                                                              // 5168
                                                                                                                       // 5169
              events = [];                                                                                             // 5170
              if (timings.transitionDuration) {                                                                        // 5171
                events.push(TRANSITION_EVENTS);                                                                        // 5172
              }                                                                                                        // 5173
              if (timings.animationDuration) {                                                                         // 5174
                events.push(ANIMATION_EVENTS);                                                                         // 5175
              }                                                                                                        // 5176
              events = events.join(' ');                                                                               // 5177
              eventFn = function(event) {                                                                              // 5178
                event.stopPropagation();                                                                               // 5179
                var ev = event.originalEvent || event;                                                                 // 5180
                var timeStamp = ev.timeStamp || Date.now();                                                            // 5181
                var elapsedTime = parseFloat(ev.elapsedTime.toFixed(3));                                               // 5182
                if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {                // 5183
                  close();                                                                                             // 5184
                }                                                                                                      // 5185
              };                                                                                                       // 5186
              element.on(events, eventFn);                                                                             // 5187
                                                                                                                       // 5188
              applyAnimationToStyles(element, options);                                                                // 5189
                                                                                                                       // 5190
              $timeout(close, maxDelayTime + maxDurationTime * 1.5, false);                                            // 5191
            });                                                                                                        // 5192
                                                                                                                       // 5193
            return runner;                                                                                             // 5194
                                                                                                                       // 5195
            function close() {                                                                                         // 5196
              if (animationClosed) return;                                                                             // 5197
              animationClosed = true;                                                                                  // 5198
                                                                                                                       // 5199
              if (events && eventFn) {                                                                                 // 5200
                element.off(events, eventFn);                                                                          // 5201
              }                                                                                                        // 5202
              applyClasses(element, options);                                                                          // 5203
              applyAnimationStyles(element, options);                                                                  // 5204
              forEach(temporaryStyles, function(entry) {                                                               // 5205
                node.style[camelCase(entry[0])] = '';                                                                  // 5206
              });                                                                                                      // 5207
              runner.complete(true);                                                                                   // 5208
              return runner;                                                                                           // 5209
            }                                                                                                          // 5210
          }                                                                                                            // 5211
        }                                                                                                              // 5212
      }                                                                                                                // 5213
                                                                                                                       // 5214
      function applyClasses(element, options) {                                                                        // 5215
        if (options.addClass) {                                                                                        // 5216
          $$jqLite.addClass(element, options.addClass);                                                                // 5217
          options.addClass = null;                                                                                     // 5218
        }                                                                                                              // 5219
        if (options.removeClass) {                                                                                     // 5220
          $$jqLite.removeClass(element, options.removeClass);                                                          // 5221
          options.removeClass = null;                                                                                  // 5222
        }                                                                                                              // 5223
      }                                                                                                                // 5224
                                                                                                                       // 5225
      function computeTimings(element) {                                                                               // 5226
        var node = getDomNode(element);                                                                                // 5227
        var cs = $window.getComputedStyle(node)                                                                        // 5228
        var tdr = parseMaxTime(cs[prop('transitionDuration')]);                                                        // 5229
        var adr = parseMaxTime(cs[prop('animationDuration')]);                                                         // 5230
        var tdy = parseMaxTime(cs[prop('transitionDelay')]);                                                           // 5231
        var ady = parseMaxTime(cs[prop('animationDelay')]);                                                            // 5232
                                                                                                                       // 5233
        adr *= (parseInt(cs[prop('animationIterationCount')], 10) || 1);                                               // 5234
        var duration = Math.max(adr, tdr);                                                                             // 5235
        var delay = Math.max(ady, tdy);                                                                                // 5236
                                                                                                                       // 5237
        return {                                                                                                       // 5238
          duration: duration,                                                                                          // 5239
          delay: delay,                                                                                                // 5240
          animationDuration: adr,                                                                                      // 5241
          transitionDuration: tdr,                                                                                     // 5242
          animationDelay: ady,                                                                                         // 5243
          transitionDelay: tdy                                                                                         // 5244
        };                                                                                                             // 5245
                                                                                                                       // 5246
        function prop(key) {                                                                                           // 5247
          return WEBKIT ? 'Webkit' + key.charAt(0).toUpperCase() + key.substr(1)                                       // 5248
                        : key;                                                                                         // 5249
        }                                                                                                              // 5250
      }                                                                                                                // 5251
                                                                                                                       // 5252
      function parseMaxTime(str) {                                                                                     // 5253
        var maxValue = 0;                                                                                              // 5254
        var values = (str || "").split(/\s*,\s*/);                                                                     // 5255
        forEach(values, function(value) {                                                                              // 5256
          // it's always safe to consider only second values and omit `ms` values since                                // 5257
          // getComputedStyle will always handle the conversion for us                                                 // 5258
          if (value.charAt(value.length - 1) == 's') {                                                                 // 5259
            value = value.substring(0, value.length - 1);                                                              // 5260
          }                                                                                                            // 5261
          value = parseFloat(value) || 0;                                                                              // 5262
          maxValue = maxValue ? Math.max(value, maxValue) : value;                                                     // 5263
        });                                                                                                            // 5264
        return maxValue;                                                                                               // 5265
      }                                                                                                                // 5266
                                                                                                                       // 5267
      var cancelLastRAFRequest;                                                                                        // 5268
      var rafWaitQueue = [];                                                                                           // 5269
      function waitUntilQuiet(callback) {                                                                              // 5270
        if (cancelLastRAFRequest) {                                                                                    // 5271
          cancelLastRAFRequest(); //cancels the request                                                                // 5272
        }                                                                                                              // 5273
        rafWaitQueue.push(callback);                                                                                   // 5274
        cancelLastRAFRequest = $$rAF(function() {                                                                      // 5275
          cancelLastRAFRequest = null;                                                                                 // 5276
                                                                                                                       // 5277
          // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.                                         // 5278
          // PLEASE EXAMINE THE `$$forceReflow` service to understand why.                                             // 5279
          var pageWidth = $$forceReflow();                                                                             // 5280
                                                                                                                       // 5281
          // we use a for loop to ensure that if the queue is changed                                                  // 5282
          // during this looping then it will consider new requests                                                    // 5283
          for (var i = 0; i < rafWaitQueue.length; i++) {                                                              // 5284
            rafWaitQueue[i](pageWidth);                                                                                // 5285
          }                                                                                                            // 5286
          rafWaitQueue.length = 0;                                                                                     // 5287
        });                                                                                                            // 5288
      }                                                                                                                // 5289
                                                                                                                       // 5290
      function applyAnimationStyles(element, options) {                                                                // 5291
        applyAnimationFromStyles(element, options);                                                                    // 5292
        applyAnimationToStyles(element, options);                                                                      // 5293
      }                                                                                                                // 5294
                                                                                                                       // 5295
      function applyAnimationFromStyles(element, options) {                                                            // 5296
        if (options.from) {                                                                                            // 5297
          element.css(options.from);                                                                                   // 5298
          options.from = null;                                                                                         // 5299
        }                                                                                                              // 5300
      }                                                                                                                // 5301
                                                                                                                       // 5302
      function applyAnimationToStyles(element, options) {                                                              // 5303
        if (options.to) {                                                                                              // 5304
          element.css(options.to);                                                                                     // 5305
          options.to = null;                                                                                           // 5306
        }                                                                                                              // 5307
      }                                                                                                                // 5308
                                                                                                                       // 5309
      function getDomNode(element) {                                                                                   // 5310
        for (var i = 0; i < element.length; i++) {                                                                     // 5311
          if (element[i].nodeType === 1) return element[i];                                                            // 5312
        }                                                                                                              // 5313
      }                                                                                                                // 5314
                                                                                                                       // 5315
      function blockTransition(element, bool) {                                                                        // 5316
        var node = getDomNode(element);                                                                                // 5317
        var key = camelCase(PREFIX + 'transition-delay');                                                              // 5318
        node.style[key] = bool ? '-9999s' : '';                                                                        // 5319
      }                                                                                                                // 5320
                                                                                                                       // 5321
      return init;                                                                                                     // 5322
    }]);                                                                                                               // 5323
                                                                                                                       // 5324
  /**                                                                                                                  // 5325
   * Older browsers [FF31] expect camelCase                                                                            // 5326
   * property keys.                                                                                                    // 5327
   * e.g.                                                                                                              // 5328
   *  animation-duration --> animationDuration                                                                         // 5329
   */                                                                                                                  // 5330
  function camelCase(str) {                                                                                            // 5331
    return str.replace(/-[a-z]/g, function(str) {                                                                      // 5332
      return str.charAt(1).toUpperCase();                                                                              // 5333
    });                                                                                                                // 5334
  }                                                                                                                    // 5335
                                                                                                                       // 5336
})();                                                                                                                  // 5337
                                                                                                                       // 5338
}                                                                                                                      // 5339
                                                                                                                       // 5340
})();                                                                                                                  // 5341
(function(){                                                                                                           // 5342
"use strict";                                                                                                          // 5343
                                                                                                                       // 5344
/**                                                                                                                    // 5345
 * @ngdoc module                                                                                                       // 5346
 * @name material.components.autocomplete                                                                              // 5347
 */                                                                                                                    // 5348
/*                                                                                                                     // 5349
 * @see js folder for autocomplete implementation                                                                      // 5350
 */                                                                                                                    // 5351
angular.module('material.components.autocomplete', [                                                                   // 5352
  'material.core',                                                                                                     // 5353
  'material.components.icon',                                                                                          // 5354
  'material.components.virtualRepeat'                                                                                  // 5355
]);                                                                                                                    // 5356
                                                                                                                       // 5357
})();                                                                                                                  // 5358
(function(){                                                                                                           // 5359
"use strict";                                                                                                          // 5360
                                                                                                                       // 5361
/*                                                                                                                     // 5362
 * @ngdoc module                                                                                                       // 5363
 * @name material.components.backdrop                                                                                  // 5364
 * @description Backdrop                                                                                               // 5365
 */                                                                                                                    // 5366
                                                                                                                       // 5367
/**                                                                                                                    // 5368
 * @ngdoc directive                                                                                                    // 5369
 * @name mdBackdrop                                                                                                    // 5370
 * @module material.components.backdrop                                                                                // 5371
 *                                                                                                                     // 5372
 * @restrict E                                                                                                         // 5373
 *                                                                                                                     // 5374
 * @description                                                                                                        // 5375
 * `<md-backdrop>` is a backdrop element used by other components, such as dialog and bottom sheet.                    // 5376
 * Apply class `opaque` to make the backdrop use the theme backdrop color.                                             // 5377
 *                                                                                                                     // 5378
 */                                                                                                                    // 5379
                                                                                                                       // 5380
angular                                                                                                                // 5381
  .module('material.components.backdrop', ['material.core'])                                                           // 5382
  .directive('mdBackdrop', ["$mdTheming", "$animate", "$rootElement", "$window", "$log", "$$rAF", "$document", function BackdropDirective($mdTheming, $animate, $rootElement, $window, $log, $$rAF, $document) {
    var ERROR_CSS_POSITION = "<md-backdrop> may not work properly in a scrolled, static-positioned parent container.";
                                                                                                                       // 5385
    return {                                                                                                           // 5386
      restrict: 'E',                                                                                                   // 5387
      link: postLink                                                                                                   // 5388
    };                                                                                                                 // 5389
                                                                                                                       // 5390
    function postLink(scope, element, attrs) {                                                                         // 5391
                                                                                                                       // 5392
      // If body scrolling has been disabled using mdUtil.disableBodyScroll(),                                         // 5393
      // adjust the 'backdrop' height to account for the fixed 'body' top offset                                       // 5394
      var body = $window.getComputedStyle($document[0].body);                                                          // 5395
      if (body.position == 'fixed') {                                                                                  // 5396
        var hViewport = parseInt(body.height, 10) + Math.abs(parseInt(body.top, 10));                                  // 5397
        element.css({                                                                                                  // 5398
          height: hViewport + 'px'                                                                                     // 5399
        });                                                                                                            // 5400
      }                                                                                                                // 5401
                                                                                                                       // 5402
      // backdrop may be outside the $rootElement, tell ngAnimate to animate regardless                                // 5403
      if ($animate.pin) $animate.pin(element, $rootElement);                                                           // 5404
                                                                                                                       // 5405
      $$rAF(function () {                                                                                              // 5406
                                                                                                                       // 5407
        // Often $animate.enter() is used to append the backDrop element                                               // 5408
        // so let's wait until $animate is done...                                                                     // 5409
        var parent = element.parent()[0];                                                                              // 5410
        if (parent) {                                                                                                  // 5411
          var styles = $window.getComputedStyle(parent);                                                               // 5412
          if (styles.position == 'static') {                                                                           // 5413
            // backdrop uses position:absolute and will not work properly with parent position:static (default)        // 5414
            $log.warn(ERROR_CSS_POSITION);                                                                             // 5415
          }                                                                                                            // 5416
        }                                                                                                              // 5417
                                                                                                                       // 5418
        $mdTheming.inherit(element, element.parent());                                                                 // 5419
      });                                                                                                              // 5420
                                                                                                                       // 5421
    }                                                                                                                  // 5422
                                                                                                                       // 5423
  }]);                                                                                                                 // 5424
                                                                                                                       // 5425
})();                                                                                                                  // 5426
(function(){                                                                                                           // 5427
"use strict";                                                                                                          // 5428
                                                                                                                       // 5429
/**                                                                                                                    // 5430
 * @ngdoc module                                                                                                       // 5431
 * @name material.components.bottomSheet                                                                               // 5432
 * @description                                                                                                        // 5433
 * BottomSheet                                                                                                         // 5434
 */                                                                                                                    // 5435
angular                                                                                                                // 5436
  .module('material.components.bottomSheet', [                                                                         // 5437
    'material.core',                                                                                                   // 5438
    'material.components.backdrop'                                                                                     // 5439
  ])                                                                                                                   // 5440
  .directive('mdBottomSheet', MdBottomSheetDirective)                                                                  // 5441
  .provider('$mdBottomSheet', MdBottomSheetProvider);                                                                  // 5442
                                                                                                                       // 5443
/* @ngInject */                                                                                                        // 5444
function MdBottomSheetDirective($mdBottomSheet) {                                                                      // 5445
  return {                                                                                                             // 5446
    restrict: 'E',                                                                                                     // 5447
    link : function postLink(scope, element, attr) {                                                                   // 5448
      // When navigation force destroys an interimElement, then                                                        // 5449
      // listen and $destroy() that interim instance...                                                                // 5450
      scope.$on('$destroy', function() {                                                                               // 5451
        $mdBottomSheet.destroy();                                                                                      // 5452
      });                                                                                                              // 5453
    }                                                                                                                  // 5454
  };                                                                                                                   // 5455
}                                                                                                                      // 5456
MdBottomSheetDirective.$inject = ["$mdBottomSheet"];                                                                   // 5457
                                                                                                                       // 5458
                                                                                                                       // 5459
/**                                                                                                                    // 5460
 * @ngdoc service                                                                                                      // 5461
 * @name $mdBottomSheet                                                                                                // 5462
 * @module material.components.bottomSheet                                                                             // 5463
 *                                                                                                                     // 5464
 * @description                                                                                                        // 5465
 * `$mdBottomSheet` opens a bottom sheet over the app and provides a simple promise API.                               // 5466
 *                                                                                                                     // 5467
 * ## Restrictions                                                                                                     // 5468
 *                                                                                                                     // 5469
 * - The bottom sheet's template must have an outer `<md-bottom-sheet>` element.                                       // 5470
 * - Add the `md-grid` class to the bottom sheet for a grid layout.                                                    // 5471
 * - Add the `md-list` class to the bottom sheet for a list layout.                                                    // 5472
 *                                                                                                                     // 5473
 * @usage                                                                                                              // 5474
 * <hljs lang="html">                                                                                                  // 5475
 * <div ng-controller="MyController">                                                                                  // 5476
 *   <md-button ng-click="openBottomSheet()">                                                                          // 5477
 *     Open a Bottom Sheet!                                                                                            // 5478
 *   </md-button>                                                                                                      // 5479
 * </div>                                                                                                              // 5480
 * </hljs>                                                                                                             // 5481
 * <hljs lang="js">                                                                                                    // 5482
 * var app = angular.module('app', ['ngMaterial']);                                                                    // 5483
 * app.controller('MyController', function($scope, $mdBottomSheet) {                                                   // 5484
 *   $scope.openBottomSheet = function() {                                                                             // 5485
 *     $mdBottomSheet.show({                                                                                           // 5486
 *       template: '<md-bottom-sheet>Hello!</md-bottom-sheet>'                                                         // 5487
 *     });                                                                                                             // 5488
 *   };                                                                                                                // 5489
 * });                                                                                                                 // 5490
 * </hljs>                                                                                                             // 5491
 */                                                                                                                    // 5492
                                                                                                                       // 5493
 /**                                                                                                                   // 5494
 * @ngdoc method                                                                                                       // 5495
 * @name $mdBottomSheet#show                                                                                           // 5496
 *                                                                                                                     // 5497
 * @description                                                                                                        // 5498
 * Show a bottom sheet with the specified options.                                                                     // 5499
 *                                                                                                                     // 5500
 * @param {object} options An options object, with the following properties:                                           // 5501
 *                                                                                                                     // 5502
 *   - `templateUrl` - `{string=}`: The url of an html template file that will                                         // 5503
 *   be used as the content of the bottom sheet. Restrictions: the template must                                       // 5504
 *   have an outer `md-bottom-sheet` element.                                                                          // 5505
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual                                         // 5506
 *   template string.                                                                                                  // 5507
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the bottom sheet is removed unless `preserveScope` is set to true.            // 5509
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 5510
 *   - `controller` - `{string=}`: The controller to associate with this bottom sheet.                                 // 5511
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will                                     // 5512
 *   be used as names of values to inject into the controller. For example,                                            // 5513
 *   `locals: {three: 3}` would inject `three` into the controller with the value                                      // 5514
 *   of 3.                                                                                                             // 5515
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,                        // 5516
 *   the location of the click will be used as the starting point for the opening animation                            // 5517
 *   of the the dialog.                                                                                                // 5518
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values                                  // 5519
 *   and the bottom sheet will not open until the promises resolve.                                                    // 5520
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 5521
 *   - `parent` - `{element=}`: The element to append the bottom sheet to. The `parent` may be a `function`, `string`,
 *   `object`, or null. Defaults to appending to the body of the root element (or the root element) of the application.
 *   e.g. angular.element(document.getElementById('content')) or "#content"                                            // 5524
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the bottom sheet is open.              // 5525
 *     Default true.                                                                                                   // 5526
 *                                                                                                                     // 5527
 * @returns {promise} A promise that can be resolved with `$mdBottomSheet.hide()` or                                   // 5528
 * rejected with `$mdBottomSheet.cancel()`.                                                                            // 5529
 */                                                                                                                    // 5530
                                                                                                                       // 5531
/**                                                                                                                    // 5532
 * @ngdoc method                                                                                                       // 5533
 * @name $mdBottomSheet#hide                                                                                           // 5534
 *                                                                                                                     // 5535
 * @description                                                                                                        // 5536
 * Hide the existing bottom sheet and resolve the promise returned from                                                // 5537
 * `$mdBottomSheet.show()`. This call will close the most recently opened/current bottomsheet (if any).                // 5538
 *                                                                                                                     // 5539
 * @param {*=} response An argument for the resolved promise.                                                          // 5540
 *                                                                                                                     // 5541
 */                                                                                                                    // 5542
                                                                                                                       // 5543
/**                                                                                                                    // 5544
 * @ngdoc method                                                                                                       // 5545
 * @name $mdBottomSheet#cancel                                                                                         // 5546
 *                                                                                                                     // 5547
 * @description                                                                                                        // 5548
 * Hide the existing bottom sheet and reject the promise returned from                                                 // 5549
 * `$mdBottomSheet.show()`.                                                                                            // 5550
 *                                                                                                                     // 5551
 * @param {*=} response An argument for the rejected promise.                                                          // 5552
 *                                                                                                                     // 5553
 */                                                                                                                    // 5554
                                                                                                                       // 5555
function MdBottomSheetProvider($$interimElementProvider) {                                                             // 5556
  // how fast we need to flick down to close the sheet, pixels/ms                                                      // 5557
  var CLOSING_VELOCITY = 0.5;                                                                                          // 5558
  var PADDING = 80; // same as css                                                                                     // 5559
                                                                                                                       // 5560
  bottomSheetDefaults.$inject = ["$animate", "$mdConstant", "$mdUtil", "$mdTheming", "$mdBottomSheet", "$rootElement", "$mdGesture"];
  return $$interimElementProvider('$mdBottomSheet')                                                                    // 5562
    .setDefaults({                                                                                                     // 5563
      methods: ['disableParentScroll', 'escapeToClose', 'targetEvent'],                                                // 5564
      options: bottomSheetDefaults                                                                                     // 5565
    });                                                                                                                // 5566
                                                                                                                       // 5567
  /* @ngInject */                                                                                                      // 5568
  function bottomSheetDefaults($animate, $mdConstant, $mdUtil, $mdTheming, $mdBottomSheet, $rootElement, $mdGesture) {
    var backdrop;                                                                                                      // 5570
                                                                                                                       // 5571
    return {                                                                                                           // 5572
      themable: true,                                                                                                  // 5573
      targetEvent: null,                                                                                               // 5574
      onShow: onShow,                                                                                                  // 5575
      onRemove: onRemove,                                                                                              // 5576
      escapeToClose: true,                                                                                             // 5577
      disableParentScroll: true                                                                                        // 5578
    };                                                                                                                 // 5579
                                                                                                                       // 5580
                                                                                                                       // 5581
    function onShow(scope, element, options, controller) {                                                             // 5582
                                                                                                                       // 5583
      element = $mdUtil.extractElementByName(element, 'md-bottom-sheet');                                              // 5584
                                                                                                                       // 5585
      // Add a backdrop that will close on click                                                                       // 5586
      backdrop = $mdUtil.createBackdrop(scope, "md-bottom-sheet-backdrop md-opaque");                                  // 5587
      backdrop.on('click', function() {                                                                                // 5588
        $mdUtil.nextTick($mdBottomSheet.cancel,true);                                                                  // 5589
      });                                                                                                              // 5590
      $mdTheming.inherit(backdrop, options.parent);                                                                    // 5591
                                                                                                                       // 5592
      $animate.enter(backdrop, options.parent, null);                                                                  // 5593
                                                                                                                       // 5594
      var bottomSheet = new BottomSheet(element, options.parent);                                                      // 5595
      options.bottomSheet = bottomSheet;                                                                               // 5596
                                                                                                                       // 5597
      // Give up focus on calling item                                                                                 // 5598
      options.targetEvent && angular.element(options.targetEvent.target).blur();                                       // 5599
      $mdTheming.inherit(bottomSheet.element, options.parent);                                                         // 5600
                                                                                                                       // 5601
      if (options.disableParentScroll) {                                                                               // 5602
        options.restoreScroll = $mdUtil.disableScrollAround(bottomSheet.element, options.parent);                      // 5603
      }                                                                                                                // 5604
                                                                                                                       // 5605
      return $animate.enter(bottomSheet.element, options.parent)                                                       // 5606
        .then(function() {                                                                                             // 5607
          var focusable = $mdUtil.findFocusTarget(element) || angular.element(                                         // 5608
            element[0].querySelector('button') ||                                                                      // 5609
            element[0].querySelector('a') ||                                                                           // 5610
            element[0].querySelector('[ng-click]')                                                                     // 5611
          );                                                                                                           // 5612
          focusable.focus();                                                                                           // 5613
                                                                                                                       // 5614
          if (options.escapeToClose) {                                                                                 // 5615
            options.rootElementKeyupCallback = function(e) {                                                           // 5616
              if (e.keyCode === $mdConstant.KEY_CODE.ESCAPE) {                                                         // 5617
                $mdUtil.nextTick($mdBottomSheet.cancel,true);                                                          // 5618
              }                                                                                                        // 5619
            };                                                                                                         // 5620
            $rootElement.on('keyup', options.rootElementKeyupCallback);                                                // 5621
          }                                                                                                            // 5622
        });                                                                                                            // 5623
                                                                                                                       // 5624
    }                                                                                                                  // 5625
                                                                                                                       // 5626
    function onRemove(scope, element, options) {                                                                       // 5627
                                                                                                                       // 5628
      var bottomSheet = options.bottomSheet;                                                                           // 5629
                                                                                                                       // 5630
      $animate.leave(backdrop);                                                                                        // 5631
      return $animate.leave(bottomSheet.element).then(function() {                                                     // 5632
        if (options.disableParentScroll) {                                                                             // 5633
          options.restoreScroll();                                                                                     // 5634
          delete options.restoreScroll;                                                                                // 5635
        }                                                                                                              // 5636
                                                                                                                       // 5637
        bottomSheet.cleanup();                                                                                         // 5638
                                                                                                                       // 5639
        // Restore focus                                                                                               // 5640
        options.targetEvent && angular.element(options.targetEvent.target).focus();                                    // 5641
      });                                                                                                              // 5642
    }                                                                                                                  // 5643
                                                                                                                       // 5644
    /**                                                                                                                // 5645
     * BottomSheet class to apply bottom-sheet behavior to an element                                                  // 5646
     */                                                                                                                // 5647
    function BottomSheet(element, parent) {                                                                            // 5648
      var deregister = $mdGesture.register(parent, 'drag', { horizontal: false });                                     // 5649
      parent.on('$md.dragstart', onDragStart)                                                                          // 5650
        .on('$md.drag', onDrag)                                                                                        // 5651
        .on('$md.dragend', onDragEnd);                                                                                 // 5652
                                                                                                                       // 5653
      return {                                                                                                         // 5654
        element: element,                                                                                              // 5655
        cleanup: function cleanup() {                                                                                  // 5656
          deregister();                                                                                                // 5657
          parent.off('$md.dragstart', onDragStart);                                                                    // 5658
          parent.off('$md.drag', onDrag);                                                                              // 5659
          parent.off('$md.dragend', onDragEnd);                                                                        // 5660
        }                                                                                                              // 5661
      };                                                                                                               // 5662
                                                                                                                       // 5663
      function onDragStart(ev) {                                                                                       // 5664
        // Disable transitions on transform so that it feels fast                                                      // 5665
        element.css($mdConstant.CSS.TRANSITION_DURATION, '0ms');                                                       // 5666
      }                                                                                                                // 5667
                                                                                                                       // 5668
      function onDrag(ev) {                                                                                            // 5669
        var transform = ev.pointer.distanceY;                                                                          // 5670
        if (transform < 5) {                                                                                           // 5671
          // Slow down drag when trying to drag up, and stop after PADDING                                             // 5672
          transform = Math.max(-PADDING, transform / 2);                                                               // 5673
        }                                                                                                              // 5674
        element.css($mdConstant.CSS.TRANSFORM, 'translate3d(0,' + (PADDING + transform) + 'px,0)');                    // 5675
      }                                                                                                                // 5676
                                                                                                                       // 5677
      function onDragEnd(ev) {                                                                                         // 5678
        if (ev.pointer.distanceY > 0 &&                                                                                // 5679
            (ev.pointer.distanceY > 20 || Math.abs(ev.pointer.velocityY) > CLOSING_VELOCITY)) {                        // 5680
          var distanceRemaining = element.prop('offsetHeight') - ev.pointer.distanceY;                                 // 5681
          var transitionDuration = Math.min(distanceRemaining / ev.pointer.velocityY * 0.75, 500);                     // 5682
          element.css($mdConstant.CSS.TRANSITION_DURATION, transitionDuration + 'ms');                                 // 5683
          $mdUtil.nextTick($mdBottomSheet.cancel,true);                                                                // 5684
        } else {                                                                                                       // 5685
          element.css($mdConstant.CSS.TRANSITION_DURATION, '');                                                        // 5686
          element.css($mdConstant.CSS.TRANSFORM, '');                                                                  // 5687
        }                                                                                                              // 5688
      }                                                                                                                // 5689
    }                                                                                                                  // 5690
                                                                                                                       // 5691
  }                                                                                                                    // 5692
                                                                                                                       // 5693
}                                                                                                                      // 5694
MdBottomSheetProvider.$inject = ["$$interimElementProvider"];                                                          // 5695
                                                                                                                       // 5696
})();                                                                                                                  // 5697
(function(){                                                                                                           // 5698
"use strict";                                                                                                          // 5699
                                                                                                                       // 5700
/**                                                                                                                    // 5701
 * @ngdoc module                                                                                                       // 5702
 * @name material.components.button                                                                                    // 5703
 * @description                                                                                                        // 5704
 *                                                                                                                     // 5705
 * Button                                                                                                              // 5706
 */                                                                                                                    // 5707
angular                                                                                                                // 5708
    .module('material.components.button', [ 'material.core' ])                                                         // 5709
    .directive('mdButton', MdButtonDirective);                                                                         // 5710
                                                                                                                       // 5711
/**                                                                                                                    // 5712
 * @ngdoc directive                                                                                                    // 5713
 * @name mdButton                                                                                                      // 5714
 * @module material.components.button                                                                                  // 5715
 *                                                                                                                     // 5716
 * @restrict E                                                                                                         // 5717
 *                                                                                                                     // 5718
 * @description                                                                                                        // 5719
 * `<md-button>` is a button directive with optional ink ripples (default enabled).                                    // 5720
 *                                                                                                                     // 5721
 * If you supply a `href` or `ng-href` attribute, it will become an `<a>` element. Otherwise, it will                  // 5722
 * become a `<button>` element. As per the [Material Design specifications](http://www.google.com/design/spec/style/color.html#color-ui-color-application)
 * the FAB button background is filled with the accent color [by default]. The primary color palette may be used with  // 5724
 * the `md-primary` class.                                                                                             // 5725
 *                                                                                                                     // 5726
 * @param {boolean=} md-no-ink If present, disable ripple ink effects.                                                 // 5727
 * @param {expression=} ng-disabled En/Disable based on the expression                                                 // 5728
 * @param {string=} md-ripple-size Overrides the default ripple size logic. Options: `full`, `partial`, `auto`         // 5729
 * @param {string=} aria-label Adds alternative text to button for accessibility, useful for icon buttons.             // 5730
 * If no default text is found, a warning will be logged.                                                              // 5731
 *                                                                                                                     // 5732
 * @usage                                                                                                              // 5733
 *                                                                                                                     // 5734
 * Regular buttons:                                                                                                    // 5735
 *                                                                                                                     // 5736
 * <hljs lang="html">                                                                                                  // 5737
 *  <md-button> Flat Button </md-button>                                                                               // 5738
 *  <md-button href="http://google.com"> Flat link </md-button>                                                        // 5739
 *  <md-button class="md-raised"> Raised Button </md-button>                                                           // 5740
 *  <md-button ng-disabled="true"> Disabled Button </md-button>                                                        // 5741
 *  <md-button>                                                                                                        // 5742
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 5743
 *    Register Now                                                                                                     // 5744
 *  </md-button>                                                                                                       // 5745
 * </hljs>                                                                                                             // 5746
 *                                                                                                                     // 5747
 * FAB buttons:                                                                                                        // 5748
 *                                                                                                                     // 5749
 * <hljs lang="html">                                                                                                  // 5750
 *  <md-button class="md-fab" aria-label="FAB">                                                                        // 5751
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 5752
 *  </md-button>                                                                                                       // 5753
 *  <!-- mini-FAB -->                                                                                                  // 5754
 *  <md-button class="md-fab md-mini" aria-label="Mini FAB">                                                           // 5755
 *    <md-icon md-svg-src="your/icon.svg"></md-icon>                                                                   // 5756
 *  </md-button>                                                                                                       // 5757
 *  <!-- Button with SVG Icon -->                                                                                      // 5758
 *  <md-button class="md-icon-button" aria-label="Custom Icon Button">                                                 // 5759
 *    <md-icon md-svg-icon="path/to/your.svg"></md-icon>                                                               // 5760
 *  </md-button>                                                                                                       // 5761
 * </hljs>                                                                                                             // 5762
 */                                                                                                                    // 5763
function MdButtonDirective($mdButtonInkRipple, $mdTheming, $mdAria, $timeout) {                                        // 5764
                                                                                                                       // 5765
  return {                                                                                                             // 5766
    restrict: 'EA',                                                                                                    // 5767
    replace: true,                                                                                                     // 5768
    transclude: true,                                                                                                  // 5769
    template: getTemplate,                                                                                             // 5770
    link: postLink                                                                                                     // 5771
  };                                                                                                                   // 5772
                                                                                                                       // 5773
  function isAnchor(attr) {                                                                                            // 5774
    return angular.isDefined(attr.href) || angular.isDefined(attr.ngHref) || angular.isDefined(attr.ngLink) || angular.isDefined(attr.uiSref);
  }                                                                                                                    // 5776
                                                                                                                       // 5777
  function getTemplate(element, attr) {                                                                                // 5778
    return isAnchor(attr) ?                                                                                            // 5779
           '<a class="md-button" ng-transclude></a>' :                                                                 // 5780
           '<button class="md-button" ng-transclude></button>';                                                        // 5781
  }                                                                                                                    // 5782
                                                                                                                       // 5783
  function postLink(scope, element, attr) {                                                                            // 5784
    var node = element[0];                                                                                             // 5785
    $mdTheming(element);                                                                                               // 5786
    $mdButtonInkRipple.attach(scope, element);                                                                         // 5787
                                                                                                                       // 5788
    var elementHasText = node.textContent.trim();                                                                      // 5789
    if (!elementHasText) {                                                                                             // 5790
      $mdAria.expect(element, 'aria-label');                                                                           // 5791
    }                                                                                                                  // 5792
                                                                                                                       // 5793
    // For anchor elements, we have to set tabindex manually when the                                                  // 5794
    // element is disabled                                                                                             // 5795
    if (isAnchor(attr) && angular.isDefined(attr.ngDisabled) ) {                                                       // 5796
      scope.$watch(attr.ngDisabled, function(isDisabled) {                                                             // 5797
        element.attr('tabindex', isDisabled ? -1 : 0);                                                                 // 5798
      });                                                                                                              // 5799
    }                                                                                                                  // 5800
                                                                                                                       // 5801
    // disabling click event when disabled is true                                                                     // 5802
    element.on('click', function(e){                                                                                   // 5803
      if (attr.disabled === true) {                                                                                    // 5804
        e.preventDefault();                                                                                            // 5805
        e.stopImmediatePropagation();                                                                                  // 5806
      }                                                                                                                // 5807
    });                                                                                                                // 5808
                                                                                                                       // 5809
    // restrict focus styles to the keyboard                                                                           // 5810
    scope.mouseActive = false;                                                                                         // 5811
    element.on('mousedown', function() {                                                                               // 5812
        scope.mouseActive = true;                                                                                      // 5813
        $timeout(function(){                                                                                           // 5814
          scope.mouseActive = false;                                                                                   // 5815
        }, 100);                                                                                                       // 5816
      })                                                                                                               // 5817
      .on('focus', function() {                                                                                        // 5818
        if (scope.mouseActive === false) {                                                                             // 5819
          element.addClass('md-focused');                                                                              // 5820
        }                                                                                                              // 5821
      })                                                                                                               // 5822
      .on('blur', function(ev) {                                                                                       // 5823
        element.removeClass('md-focused');                                                                             // 5824
      });                                                                                                              // 5825
  }                                                                                                                    // 5826
                                                                                                                       // 5827
}                                                                                                                      // 5828
MdButtonDirective.$inject = ["$mdButtonInkRipple", "$mdTheming", "$mdAria", "$timeout"];                               // 5829
                                                                                                                       // 5830
})();                                                                                                                  // 5831
(function(){                                                                                                           // 5832
"use strict";                                                                                                          // 5833
                                                                                                                       // 5834
/**                                                                                                                    // 5835
 * @ngdoc module                                                                                                       // 5836
 * @name material.components.card                                                                                      // 5837
 *                                                                                                                     // 5838
 * @description                                                                                                        // 5839
 * Card components.                                                                                                    // 5840
 */                                                                                                                    // 5841
angular.module('material.components.card', [                                                                           // 5842
  'material.core'                                                                                                      // 5843
])                                                                                                                     // 5844
  .directive('mdCard', mdCardDirective);                                                                               // 5845
                                                                                                                       // 5846
                                                                                                                       // 5847
                                                                                                                       // 5848
/**                                                                                                                    // 5849
 * @ngdoc directive                                                                                                    // 5850
 * @name mdCard                                                                                                        // 5851
 * @module material.components.card                                                                                    // 5852
 *                                                                                                                     // 5853
 * @restrict E                                                                                                         // 5854
 *                                                                                                                     // 5855
 * @description                                                                                                        // 5856
 * The `<md-card>` directive is a container element used within `<md-content>` containers.                             // 5857
 *                                                                                                                     // 5858
 * An image included as a direct descendant will fill the card's width, while the `<md-card-content>`                  // 5859
 * container will wrap text content and provide padding. An `<md-card-footer>` element can be                          // 5860
 * optionally included to put content flush against the bottom edge of the card.                                       // 5861
 *                                                                                                                     // 5862
 * Action buttons can be included in an element with the `.md-actions` class, also used in `md-dialog`.                // 5863
 * You can then position buttons using layout attributes.                                                              // 5864
 *                                                                                                                     // 5865
 * Cards have constant width and variable heights; where the maximum height is limited to what can                     // 5866
 * fit within a single view on a platform, but it can temporarily expand as needed.                                    // 5867
 *                                                                                                                     // 5868
 * @usage                                                                                                              // 5869
 * ###Card with optional footer                                                                                        // 5870
 * <hljs lang="html">                                                                                                  // 5871
 * <md-card>                                                                                                           // 5872
 *  <img src="card-image.png" class="md-card-image" alt="image caption">                                               // 5873
 *  <md-card-content>                                                                                                  // 5874
 *    <h2>Card headline</h2>                                                                                           // 5875
 *    <p>Card content</p>                                                                                              // 5876
 *  </md-card-content>                                                                                                 // 5877
 *  <md-card-footer>                                                                                                   // 5878
 *    Card footer                                                                                                      // 5879
 *  </md-card-footer>                                                                                                  // 5880
 * </md-card>                                                                                                          // 5881
 * </hljs>                                                                                                             // 5882
 *                                                                                                                     // 5883
 * ###Card with actions                                                                                                // 5884
 * <hljs lang="html">                                                                                                  // 5885
 * <md-card>                                                                                                           // 5886
 *  <img src="card-image.png" class="md-card-image" alt="image caption">                                               // 5887
 *  <md-card-content>                                                                                                  // 5888
 *    <h2>Card headline</h2>                                                                                           // 5889
 *    <p>Card content</p>                                                                                              // 5890
 *  </md-card-content>                                                                                                 // 5891
 *  <div class="md-actions" layout="row" layout-align="end center">                                                    // 5892
 *    <md-button>Action 1</md-button>                                                                                  // 5893
 *    <md-button>Action 2</md-button>                                                                                  // 5894
 *  </div>                                                                                                             // 5895
 * </md-card>                                                                                                          // 5896
 * </hljs>                                                                                                             // 5897
 *                                                                                                                     // 5898
 */                                                                                                                    // 5899
function mdCardDirective($mdTheming) {                                                                                 // 5900
  return {                                                                                                             // 5901
    restrict: 'E',                                                                                                     // 5902
    link: function($scope, $element, $attr) {                                                                          // 5903
      $mdTheming($element);                                                                                            // 5904
    }                                                                                                                  // 5905
  };                                                                                                                   // 5906
}                                                                                                                      // 5907
mdCardDirective.$inject = ["$mdTheming"];                                                                              // 5908
                                                                                                                       // 5909
})();                                                                                                                  // 5910
(function(){                                                                                                           // 5911
"use strict";                                                                                                          // 5912
                                                                                                                       // 5913
/**                                                                                                                    // 5914
 * @ngdoc module                                                                                                       // 5915
 * @name material.components.checkbox                                                                                  // 5916
 * @description Checkbox module!                                                                                       // 5917
 */                                                                                                                    // 5918
angular                                                                                                                // 5919
  .module('material.components.checkbox', ['material.core'])                                                           // 5920
  .directive('mdCheckbox', MdCheckboxDirective);                                                                       // 5921
                                                                                                                       // 5922
/**                                                                                                                    // 5923
 * @ngdoc directive                                                                                                    // 5924
 * @name mdCheckbox                                                                                                    // 5925
 * @module material.components.checkbox                                                                                // 5926
 * @restrict E                                                                                                         // 5927
 *                                                                                                                     // 5928
 * @description                                                                                                        // 5929
 * The checkbox directive is used like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *                                                                                                                     // 5931
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 5932
 * the checkbox is in the accent color by default. The primary color palette may be used with                          // 5933
 * the `md-primary` class.                                                                                             // 5934
 *                                                                                                                     // 5935
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 5936
 * @param {string=} name Property name of the form under which the control is published.                               // 5937
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.                   // 5938
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.              // 5939
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects                                    // 5941
 * @param {string=} aria-label Adds label to checkbox for accessibility.                                               // 5942
 * Defaults to checkbox's text. If no default text is found, a warning will be logged.                                 // 5943
 *                                                                                                                     // 5944
 * @usage                                                                                                              // 5945
 * <hljs lang="html">                                                                                                  // 5946
 * <md-checkbox ng-model="isChecked" aria-label="Finished?">                                                           // 5947
 *   Finished ?                                                                                                        // 5948
 * </md-checkbox>                                                                                                      // 5949
 *                                                                                                                     // 5950
 * <md-checkbox md-no-ink ng-model="hasInk" aria-label="No Ink Effects">                                               // 5951
 *   No Ink Effects                                                                                                    // 5952
 * </md-checkbox>                                                                                                      // 5953
 *                                                                                                                     // 5954
 * <md-checkbox ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">                                        // 5955
 *   Disabled                                                                                                          // 5956
 * </md-checkbox>                                                                                                      // 5957
 *                                                                                                                     // 5958
 * </hljs>                                                                                                             // 5959
 *                                                                                                                     // 5960
 */                                                                                                                    // 5961
function MdCheckboxDirective(inputDirective, $mdAria, $mdConstant, $mdTheming, $mdUtil, $timeout) {                    // 5962
  inputDirective = inputDirective[0];                                                                                  // 5963
  var CHECKED_CSS = 'md-checked';                                                                                      // 5964
                                                                                                                       // 5965
  return {                                                                                                             // 5966
    restrict: 'E',                                                                                                     // 5967
    transclude: true,                                                                                                  // 5968
    require: '?ngModel',                                                                                               // 5969
    priority:210, // Run before ngAria                                                                                 // 5970
    template:                                                                                                          // 5971
      '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +                                              // 5972
        '<div class="md-icon"></div>' +                                                                                // 5973
      '</div>' +                                                                                                       // 5974
      '<div ng-transclude class="md-label"></div>',                                                                    // 5975
    compile: compile                                                                                                   // 5976
  };                                                                                                                   // 5977
                                                                                                                       // 5978
  // **********************************************************                                                        // 5979
  // Private Methods                                                                                                   // 5980
  // **********************************************************                                                        // 5981
                                                                                                                       // 5982
  function compile (tElement, tAttrs) {                                                                                // 5983
                                                                                                                       // 5984
    tAttrs.type = 'checkbox';                                                                                          // 5985
    tAttrs.tabindex = tAttrs.tabindex || '0';                                                                          // 5986
    tElement.attr('role', tAttrs.type);                                                                                // 5987
                                                                                                                       // 5988
    return function postLink(scope, element, attr, ngModelCtrl) {                                                      // 5989
      ngModelCtrl = ngModelCtrl || $mdUtil.fakeNgModel();                                                              // 5990
      $mdTheming(element);                                                                                             // 5991
                                                                                                                       // 5992
      if (attr.ngChecked) {                                                                                            // 5993
        scope.$watch(                                                                                                  // 5994
            scope.$eval.bind(scope, attr.ngChecked),                                                                   // 5995
            ngModelCtrl.$setViewValue.bind(ngModelCtrl)                                                                // 5996
        );                                                                                                             // 5997
      }                                                                                                                // 5998
      $$watchExpr('ngDisabled', 'tabindex', {                                                                          // 5999
        true: '-1',                                                                                                    // 6000
        false: attr.tabindex                                                                                           // 6001
      });                                                                                                              // 6002
      $mdAria.expectWithText(element, 'aria-label');                                                                   // 6003
                                                                                                                       // 6004
      // Reuse the original input[type=checkbox] directive from Angular core.                                          // 6005
      // This is a bit hacky as we need our own event listener and own render                                          // 6006
      // function.                                                                                                     // 6007
      inputDirective.link.pre(scope, {                                                                                 // 6008
        on: angular.noop,                                                                                              // 6009
        0: {}                                                                                                          // 6010
      }, attr, [ngModelCtrl]);                                                                                         // 6011
                                                                                                                       // 6012
      scope.mouseActive = false;                                                                                       // 6013
      element.on('click', listener)                                                                                    // 6014
        .on('keypress', keypressHandler)                                                                               // 6015
        .on('mousedown', function() {                                                                                  // 6016
          scope.mouseActive = true;                                                                                    // 6017
          $timeout(function(){                                                                                         // 6018
            scope.mouseActive = false;                                                                                 // 6019
          }, 100);                                                                                                     // 6020
        })                                                                                                             // 6021
        .on('focus', function() {                                                                                      // 6022
          if(scope.mouseActive === false) { element.addClass('md-focused'); }                                          // 6023
        })                                                                                                             // 6024
        .on('blur', function() { element.removeClass('md-focused'); });                                                // 6025
                                                                                                                       // 6026
      ngModelCtrl.$render = render;                                                                                    // 6027
                                                                                                                       // 6028
      function $$watchExpr(expr, htmlAttr, valueOpts) {                                                                // 6029
        if (attr[expr]) {                                                                                              // 6030
          scope.$watch(attr[expr], function(val) {                                                                     // 6031
            if (valueOpts[val]) {                                                                                      // 6032
              element.attr(htmlAttr, valueOpts[val]);                                                                  // 6033
            }                                                                                                          // 6034
          });                                                                                                          // 6035
        }                                                                                                              // 6036
      }                                                                                                                // 6037
                                                                                                                       // 6038
      function keypressHandler(ev) {                                                                                   // 6039
        var keyCode = ev.which || ev.keyCode;                                                                          // 6040
        if (keyCode === $mdConstant.KEY_CODE.SPACE || keyCode === $mdConstant.KEY_CODE.ENTER) {                        // 6041
          ev.preventDefault();                                                                                         // 6042
          if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }                                     // 6043
          listener(ev);                                                                                                // 6044
        }                                                                                                              // 6045
      }                                                                                                                // 6046
      function listener(ev) {                                                                                          // 6047
        if (element[0].hasAttribute('disabled')) return;                                                               // 6048
                                                                                                                       // 6049
        scope.$apply(function() {                                                                                      // 6050
          // Toggle the checkbox value...                                                                              // 6051
          var viewValue = attr.ngChecked ? attr.checked : !ngModelCtrl.$viewValue;                                     // 6052
                                                                                                                       // 6053
          ngModelCtrl.$setViewValue( viewValue, ev && ev.type);                                                        // 6054
          ngModelCtrl.$render();                                                                                       // 6055
        });                                                                                                            // 6056
      }                                                                                                                // 6057
                                                                                                                       // 6058
      function render() {                                                                                              // 6059
        if(ngModelCtrl.$viewValue) {                                                                                   // 6060
          element.addClass(CHECKED_CSS);                                                                               // 6061
        } else {                                                                                                       // 6062
          element.removeClass(CHECKED_CSS);                                                                            // 6063
        }                                                                                                              // 6064
      }                                                                                                                // 6065
    };                                                                                                                 // 6066
  }                                                                                                                    // 6067
}                                                                                                                      // 6068
MdCheckboxDirective.$inject = ["inputDirective", "$mdAria", "$mdConstant", "$mdTheming", "$mdUtil", "$timeout"];       // 6069
                                                                                                                       // 6070
})();                                                                                                                  // 6071
(function(){                                                                                                           // 6072
"use strict";                                                                                                          // 6073
                                                                                                                       // 6074
/**                                                                                                                    // 6075
 * @ngdoc module                                                                                                       // 6076
 * @name material.components.chips                                                                                     // 6077
 */                                                                                                                    // 6078
/*                                                                                                                     // 6079
 * @see js folder for chips implementation                                                                             // 6080
 */                                                                                                                    // 6081
angular.module('material.components.chips', [                                                                          // 6082
  'material.core',                                                                                                     // 6083
  'material.components.autocomplete'                                                                                   // 6084
]);                                                                                                                    // 6085
                                                                                                                       // 6086
})();                                                                                                                  // 6087
(function(){                                                                                                           // 6088
"use strict";                                                                                                          // 6089
                                                                                                                       // 6090
/**                                                                                                                    // 6091
 * @ngdoc module                                                                                                       // 6092
 * @name material.components.content                                                                                   // 6093
 *                                                                                                                     // 6094
 * @description                                                                                                        // 6095
 * Scrollable content                                                                                                  // 6096
 */                                                                                                                    // 6097
angular.module('material.components.content', [                                                                        // 6098
  'material.core'                                                                                                      // 6099
])                                                                                                                     // 6100
  .directive('mdContent', mdContentDirective);                                                                         // 6101
                                                                                                                       // 6102
/**                                                                                                                    // 6103
 * @ngdoc directive                                                                                                    // 6104
 * @name mdContent                                                                                                     // 6105
 * @module material.components.content                                                                                 // 6106
 *                                                                                                                     // 6107
 * @restrict E                                                                                                         // 6108
 *                                                                                                                     // 6109
 * @description                                                                                                        // 6110
 * The `<md-content>` directive is a container element useful for scrollable content                                   // 6111
 *                                                                                                                     // 6112
 * @usage                                                                                                              // 6113
 *                                                                                                                     // 6114
 * - Add the `[layout-padding]` attribute to make the content padded.                                                  // 6115
 *                                                                                                                     // 6116
 * <hljs lang="html">                                                                                                  // 6117
 *  <md-content layout-padding>                                                                                        // 6118
 *      Lorem ipsum dolor sit amet, ne quod novum mei.                                                                 // 6119
 *  </md-content>                                                                                                      // 6120
 * </hljs>                                                                                                             // 6121
 *                                                                                                                     // 6122
 */                                                                                                                    // 6123
                                                                                                                       // 6124
function mdContentDirective($mdTheming) {                                                                              // 6125
  return {                                                                                                             // 6126
    restrict: 'E',                                                                                                     // 6127
    controller: ['$scope', '$element', ContentController],                                                             // 6128
    link: function(scope, element, attr) {                                                                             // 6129
      var node = element[0];                                                                                           // 6130
                                                                                                                       // 6131
      $mdTheming(element);                                                                                             // 6132
      scope.$broadcast('$mdContentLoaded', element);                                                                   // 6133
                                                                                                                       // 6134
      iosScrollFix(element[0]);                                                                                        // 6135
    }                                                                                                                  // 6136
  };                                                                                                                   // 6137
                                                                                                                       // 6138
  function ContentController($scope, $element) {                                                                       // 6139
    this.$scope = $scope;                                                                                              // 6140
    this.$element = $element;                                                                                          // 6141
  }                                                                                                                    // 6142
}                                                                                                                      // 6143
mdContentDirective.$inject = ["$mdTheming"];                                                                           // 6144
                                                                                                                       // 6145
function iosScrollFix(node) {                                                                                          // 6146
  // IOS FIX:                                                                                                          // 6147
  // If we scroll where there is no more room for the webview to scroll,                                               // 6148
  // by default the webview itself will scroll up and down, this looks really                                          // 6149
  // bad.  So if we are scrolling to the very top or bottom, add/subtract one                                          // 6150
  angular.element(node).on('$md.pressdown', function(ev) {                                                             // 6151
    // Only touch events                                                                                               // 6152
    if (ev.pointer.type !== 't') return;                                                                               // 6153
    // Don't let a child content's touchstart ruin it for us.                                                          // 6154
    if (ev.$materialScrollFixed) return;                                                                               // 6155
    ev.$materialScrollFixed = true;                                                                                    // 6156
                                                                                                                       // 6157
    if (node.scrollTop === 0) {                                                                                        // 6158
      node.scrollTop = 1;                                                                                              // 6159
    } else if (node.scrollHeight === node.scrollTop + node.offsetHeight) {                                             // 6160
      node.scrollTop -= 1;                                                                                             // 6161
    }                                                                                                                  // 6162
  });                                                                                                                  // 6163
}                                                                                                                      // 6164
                                                                                                                       // 6165
})();                                                                                                                  // 6166
(function(){                                                                                                           // 6167
"use strict";                                                                                                          // 6168
                                                                                                                       // 6169
(function() {                                                                                                          // 6170
  'use strict';                                                                                                        // 6171
                                                                                                                       // 6172
  /**                                                                                                                  // 6173
   * @ngdoc module                                                                                                     // 6174
   * @name material.components.datepicker                                                                              // 6175
   * @description Datepicker                                                                                           // 6176
   */                                                                                                                  // 6177
  angular.module('material.components.datepicker', [                                                                   // 6178
    'material.core',                                                                                                   // 6179
    'material.components.icon',                                                                                        // 6180
    'material.components.virtualRepeat'                                                                                // 6181
  ]).directive('mdCalendar', calendarDirective);                                                                       // 6182
                                                                                                                       // 6183
                                                                                                                       // 6184
  // POST RELEASE                                                                                                      // 6185
  // TODO(jelbourn): Mac Cmd + left / right == Home / End                                                              // 6186
  // TODO(jelbourn): Clicking on the month label opens the month-picker.                                               // 6187
  // TODO(jelbourn): Minimum and maximum date                                                                          // 6188
  // TODO(jelbourn): Refactor month element creation to use cloneNode (performance).                                   // 6189
  // TODO(jelbourn): Define virtual scrolling constants (compactness) users can override.                              // 6190
  // TODO(jelbourn): Animated month transition on ng-model change (virtual-repeat)                                     // 6191
  // TODO(jelbourn): Scroll snapping (virtual repeat)                                                                  // 6192
  // TODO(jelbourn): Remove superfluous row from short months (virtual-repeat)                                         // 6193
  // TODO(jelbourn): Month headers stick to top when scrolling.                                                        // 6194
  // TODO(jelbourn): Previous month opacity is lowered when partially scrolled out of view.                            // 6195
  // TODO(jelbourn): Support md-calendar standalone on a page (as a tabstop w/ aria-live                               // 6196
  //     announcement and key handling).                                                                               // 6197
  // Read-only calendar (not just date-picker).                                                                        // 6198
                                                                                                                       // 6199
  /**                                                                                                                  // 6200
   * Height of one calendar month tbody. This must be made known to the virtual-repeat and is                          // 6201
   * subsequently used for scrolling to specific months.                                                               // 6202
   */                                                                                                                  // 6203
  var TBODY_HEIGHT = 265;                                                                                              // 6204
                                                                                                                       // 6205
  /**                                                                                                                  // 6206
   * Height of a calendar month with a single row. This is needed to calculate the offset for                          // 6207
   * rendering an extra month in virtual-repeat that only contains one row.                                            // 6208
   */                                                                                                                  // 6209
  var TBODY_SINGLE_ROW_HEIGHT = 45;                                                                                    // 6210
                                                                                                                       // 6211
  function calendarDirective() {                                                                                       // 6212
    return {                                                                                                           // 6213
      template:                                                                                                        // 6214
          '<table aria-hidden="true" class="md-calendar-day-header"><thead></thead></table>' +                         // 6215
          '<div class="md-calendar-scroll-mask">' +                                                                    // 6216
          '<md-virtual-repeat-container class="md-calendar-scroll-container" ' +                                       // 6217
                'md-offset-size="' + (TBODY_SINGLE_ROW_HEIGHT - TBODY_HEIGHT) + '">' +                                 // 6218
              '<table role="grid" tabindex="0" class="md-calendar" aria-readonly="true">' +                            // 6219
                '<tbody role="rowgroup" md-virtual-repeat="i in ctrl.items" md-calendar-month ' +                      // 6220
                    'md-month-offset="$index" class="md-calendar-month" ' +                                            // 6221
                    'md-start-index="ctrl.getSelectedMonthIndex()" ' +                                                 // 6222
                    'md-item-size="' + TBODY_HEIGHT + '"></tbody>' +                                                   // 6223
              '</table>' +                                                                                             // 6224
            '</md-virtual-repeat-container>' +                                                                         // 6225
          '</div>',                                                                                                    // 6226
      scope: {                                                                                                         // 6227
        minDate: '=mdMinDate',                                                                                         // 6228
        maxDate: '=mdMaxDate',                                                                                         // 6229
      },                                                                                                               // 6230
      require: ['ngModel', 'mdCalendar'],                                                                              // 6231
      controller: CalendarCtrl,                                                                                        // 6232
      controllerAs: 'ctrl',                                                                                            // 6233
      bindToController: true,                                                                                          // 6234
      link: function(scope, element, attrs, controllers) {                                                             // 6235
        var ngModelCtrl = controllers[0];                                                                              // 6236
        var mdCalendarCtrl = controllers[1];                                                                           // 6237
        mdCalendarCtrl.configureNgModel(ngModelCtrl);                                                                  // 6238
      }                                                                                                                // 6239
    };                                                                                                                 // 6240
  }                                                                                                                    // 6241
                                                                                                                       // 6242
  /** Class applied to the selected date cell/. */                                                                     // 6243
  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';                                                               // 6244
                                                                                                                       // 6245
  /** Class applied to the focused date cell/. */                                                                      // 6246
  var FOCUSED_DATE_CLASS = 'md-focus';                                                                                 // 6247
                                                                                                                       // 6248
  /** Next identifier for calendar instance. */                                                                        // 6249
  var nextUniqueId = 0;                                                                                                // 6250
                                                                                                                       // 6251
  /** The first renderable date in the virtual-scrolling calendar (for all instances). */                              // 6252
  var firstRenderableDate = null;                                                                                      // 6253
                                                                                                                       // 6254
  /**                                                                                                                  // 6255
   * Controller for the mdCalendar component.                                                                          // 6256
   * @ngInject @constructor                                                                                            // 6257
   */                                                                                                                  // 6258
  function CalendarCtrl($element, $attrs, $scope, $animate, $q, $mdConstant,                                           // 6259
      $mdTheming, $$mdDateUtil, $mdDateLocale, $mdInkRipple, $mdUtil) {                                                // 6260
    $mdTheming($element);                                                                                              // 6261
    /**                                                                                                                // 6262
     * Dummy array-like object for virtual-repeat to iterate over. The length is the total                             // 6263
     * number of months that can be viewed. This is shorter than ideal because of (potential)                          // 6264
     * Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=1181658.                                               // 6265
     */                                                                                                                // 6266
    this.items = {length: 2000};                                                                                       // 6267
                                                                                                                       // 6268
    if (this.maxDate && this.minDate) {                                                                                // 6269
      // Limit the number of months if min and max dates are set.                                                      // 6270
      var numMonths = $$mdDateUtil.getMonthDistance(this.minDate, this.maxDate) + 1;                                   // 6271
      numMonths = Math.max(numMonths, 1);                                                                              // 6272
      // Add an additional month as the final dummy month for rendering purposes.                                      // 6273
      numMonths += 1;                                                                                                  // 6274
      this.items.length = numMonths;                                                                                   // 6275
    }                                                                                                                  // 6276
                                                                                                                       // 6277
    /** @final {!angular.$animate} */                                                                                  // 6278
    this.$animate = $animate;                                                                                          // 6279
                                                                                                                       // 6280
    /** @final {!angular.$q} */                                                                                        // 6281
    this.$q = $q;                                                                                                      // 6282
                                                                                                                       // 6283
    /** @final */                                                                                                      // 6284
    this.$mdInkRipple = $mdInkRipple;                                                                                  // 6285
                                                                                                                       // 6286
    /** @final */                                                                                                      // 6287
    this.$mdUtil = $mdUtil;                                                                                            // 6288
                                                                                                                       // 6289
    /** @final */                                                                                                      // 6290
    this.keyCode = $mdConstant.KEY_CODE;                                                                               // 6291
                                                                                                                       // 6292
    /** @final */                                                                                                      // 6293
    this.dateUtil = $$mdDateUtil;                                                                                      // 6294
                                                                                                                       // 6295
    /** @final */                                                                                                      // 6296
    this.dateLocale = $mdDateLocale;                                                                                   // 6297
                                                                                                                       // 6298
    /** @final {!angular.JQLite} */                                                                                    // 6299
    this.$element = $element;                                                                                          // 6300
                                                                                                                       // 6301
    /** @final {!angular.Scope} */                                                                                     // 6302
    this.$scope = $scope;                                                                                              // 6303
                                                                                                                       // 6304
    /** @final {HTMLElement} */                                                                                        // 6305
    this.calendarElement = $element[0].querySelector('.md-calendar');                                                  // 6306
                                                                                                                       // 6307
    /** @final {HTMLElement} */                                                                                        // 6308
    this.calendarScroller = $element[0].querySelector('.md-virtual-repeat-scroller');                                  // 6309
                                                                                                                       // 6310
    /** @final {Date} */                                                                                               // 6311
    this.today = this.dateUtil.createDateAtMidnight();                                                                 // 6312
                                                                                                                       // 6313
    /** @type {Date} */                                                                                                // 6314
    this.firstRenderableDate = this.dateUtil.incrementMonths(this.today, -this.items.length / 2);                      // 6315
                                                                                                                       // 6316
    if (this.minDate && this.minDate > this.firstRenderableDate) {                                                     // 6317
      this.firstRenderableDate = this.minDate;                                                                         // 6318
    } else if (this.maxDate) {                                                                                         // 6319
      // Calculate the difference between the start date and max date.                                                 // 6320
      // Subtract 1 because it's an inclusive difference and 1 for the final dummy month.                              // 6321
      //                                                                                                               // 6322
      var monthDifference = this.items.length - 2;                                                                     // 6323
      this.firstRenderableDate = this.dateUtil.incrementMonths(this.maxDate, -(this.items.length - 2));                // 6324
    }                                                                                                                  // 6325
                                                                                                                       // 6326
                                                                                                                       // 6327
    /** @final {number} Unique ID for this calendar instance. */                                                       // 6328
    this.id = nextUniqueId++;                                                                                          // 6329
                                                                                                                       // 6330
    /** @type {!angular.NgModelController} */                                                                          // 6331
    this.ngModelCtrl = null;                                                                                           // 6332
                                                                                                                       // 6333
    /**                                                                                                                // 6334
     * The selected date. Keep track of this separately from the ng-model value so that we                             // 6335
     * can know, when the ng-model value changes, what the previous value was before its updated                       // 6336
     * in the component's UI.                                                                                          // 6337
     *                                                                                                                 // 6338
     * @type {Date}                                                                                                    // 6339
     */                                                                                                                // 6340
    this.selectedDate = null;                                                                                          // 6341
                                                                                                                       // 6342
    /**                                                                                                                // 6343
     * The date that is currently focused or showing in the calendar. This will initially be set                       // 6344
     * to the ng-model value if set, otherwise to today. It will be updated as the user navigates                      // 6345
     * to other months. The cell corresponding to the displayDate does not necesarily always have                      // 6346
     * focus in the document (such as for cases when the user is scrolling the calendar).                              // 6347
     * @type {Date}                                                                                                    // 6348
     */                                                                                                                // 6349
    this.displayDate = null;                                                                                           // 6350
                                                                                                                       // 6351
    /**                                                                                                                // 6352
     * The date that has or should have focus.                                                                         // 6353
     * @type {Date}                                                                                                    // 6354
     */                                                                                                                // 6355
    this.focusDate = null;                                                                                             // 6356
                                                                                                                       // 6357
    /** @type {boolean} */                                                                                             // 6358
    this.isInitialized = false;                                                                                        // 6359
                                                                                                                       // 6360
    /** @type {boolean} */                                                                                             // 6361
    this.isMonthTransitionInProgress = false;                                                                          // 6362
                                                                                                                       // 6363
    // Unless the user specifies so, the calendar should not be a tab stop.                                            // 6364
    // This is necessary because ngAria might add a tabindex to anything with an ng-model                              // 6365
    // (based on whether or not the user has turned that particular feature on/off).                                   // 6366
    if (!$attrs['tabindex']) {                                                                                         // 6367
      $element.attr('tabindex', '-1');                                                                                 // 6368
    }                                                                                                                  // 6369
                                                                                                                       // 6370
    var self = this;                                                                                                   // 6371
                                                                                                                       // 6372
    /**                                                                                                                // 6373
     * Handles a click event on a date cell.                                                                           // 6374
     * Created here so that every cell can use the same function instance.                                             // 6375
     * @this {HTMLTableCellElement} The cell that was clicked.                                                         // 6376
     */                                                                                                                // 6377
    this.cellClickHandler = function() {                                                                               // 6378
      var cellElement = this;                                                                                          // 6379
      if (this.hasAttribute('data-timestamp')) {                                                                       // 6380
        $scope.$apply(function() {                                                                                     // 6381
          var timestamp = Number(cellElement.getAttribute('data-timestamp'));                                          // 6382
          self.setNgModelValue(self.dateUtil.createDateAtMidnight(timestamp));                                         // 6383
        });                                                                                                            // 6384
      }                                                                                                                // 6385
    };                                                                                                                 // 6386
                                                                                                                       // 6387
    this.attachCalendarEventListeners();                                                                               // 6388
  }                                                                                                                    // 6389
  CalendarCtrl.$inject = ["$element", "$attrs", "$scope", "$animate", "$q", "$mdConstant", "$mdTheming", "$$mdDateUtil", "$mdDateLocale", "$mdInkRipple", "$mdUtil"];
                                                                                                                       // 6391
                                                                                                                       // 6392
  /*** Initialization ***/                                                                                             // 6393
                                                                                                                       // 6394
  /**                                                                                                                  // 6395
   * Sets up the controller's reference to ngModelController.                                                          // 6396
   * @param {!angular.NgModelController} ngModelCtrl                                                                   // 6397
   */                                                                                                                  // 6398
  CalendarCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                    // 6399
    this.ngModelCtrl = ngModelCtrl;                                                                                    // 6400
                                                                                                                       // 6401
    var self = this;                                                                                                   // 6402
    ngModelCtrl.$render = function() {                                                                                 // 6403
      self.changeSelectedDate(self.ngModelCtrl.$viewValue);                                                            // 6404
    };                                                                                                                 // 6405
  };                                                                                                                   // 6406
                                                                                                                       // 6407
  /**                                                                                                                  // 6408
   * Initialize the calendar by building the months that are initially visible.                                        // 6409
   * Initialization should occur after the ngModel value is known.                                                     // 6410
   */                                                                                                                  // 6411
  CalendarCtrl.prototype.buildInitialCalendarDisplay = function() {                                                    // 6412
    this.buildWeekHeader();                                                                                            // 6413
    this.hideVerticalScrollbar();                                                                                      // 6414
                                                                                                                       // 6415
    this.displayDate = this.selectedDate || this.today;                                                                // 6416
    this.isInitialized = true;                                                                                         // 6417
  };                                                                                                                   // 6418
                                                                                                                       // 6419
  /**                                                                                                                  // 6420
   * Hides the vertical scrollbar on the calendar scroller by setting the width on the                                 // 6421
   * calendar scroller and the `overflow: hidden` wrapper around the scroller, and then setting                        // 6422
   * a padding-right on the scroller equal to the width of the browser's scrollbar.                                    // 6423
   *                                                                                                                   // 6424
   * This will cause a reflow.                                                                                         // 6425
   */                                                                                                                  // 6426
  CalendarCtrl.prototype.hideVerticalScrollbar = function() {                                                          // 6427
    var element = this.$element[0];                                                                                    // 6428
                                                                                                                       // 6429
    var scrollMask = element.querySelector('.md-calendar-scroll-mask');                                                // 6430
    var scroller = this.calendarScroller;                                                                              // 6431
                                                                                                                       // 6432
    var headerWidth = element.querySelector('.md-calendar-day-header').clientWidth;                                    // 6433
    var scrollbarWidth = scroller.offsetWidth - scroller.clientWidth;                                                  // 6434
                                                                                                                       // 6435
    scrollMask.style.width = headerWidth + 'px';                                                                       // 6436
    scroller.style.width = (headerWidth + scrollbarWidth) + 'px';                                                      // 6437
    scroller.style.paddingRight = scrollbarWidth + 'px';                                                               // 6438
  };                                                                                                                   // 6439
                                                                                                                       // 6440
                                                                                                                       // 6441
  /** Attach event listeners for the calendar. */                                                                      // 6442
  CalendarCtrl.prototype.attachCalendarEventListeners = function() {                                                   // 6443
    // Keyboard interaction.                                                                                           // 6444
    this.$element.on('keydown', angular.bind(this, this.handleKeyEvent));                                              // 6445
  };                                                                                                                   // 6446
                                                                                                                       // 6447
  /*** User input handling ***/                                                                                        // 6448
                                                                                                                       // 6449
  /**                                                                                                                  // 6450
   * Handles a key event in the calendar with the appropriate action. The action will either                           // 6451
   * be to select the focused date or to navigate to focus a new date.                                                 // 6452
   * @param {KeyboardEvent} event                                                                                      // 6453
   */                                                                                                                  // 6454
  CalendarCtrl.prototype.handleKeyEvent = function(event) {                                                            // 6455
    var self = this;                                                                                                   // 6456
    this.$scope.$apply(function() {                                                                                    // 6457
      // Capture escape and emit back up so that a wrapping component                                                  // 6458
      // (such as a date-picker) can decide to close.                                                                  // 6459
      if (event.which == self.keyCode.ESCAPE || event.which == self.keyCode.TAB) {                                     // 6460
        self.$scope.$emit('md-calendar-close');                                                                        // 6461
                                                                                                                       // 6462
        if (event.which == self.keyCode.TAB) {                                                                         // 6463
          event.preventDefault();                                                                                      // 6464
        }                                                                                                              // 6465
                                                                                                                       // 6466
        return;                                                                                                        // 6467
      }                                                                                                                // 6468
                                                                                                                       // 6469
      // Remaining key events fall into two categories: selection and navigation.                                      // 6470
      // Start by checking if this is a selection event.                                                               // 6471
      if (event.which === self.keyCode.ENTER) {                                                                        // 6472
        self.setNgModelValue(self.displayDate);                                                                        // 6473
        event.preventDefault();                                                                                        // 6474
        return;                                                                                                        // 6475
      }                                                                                                                // 6476
                                                                                                                       // 6477
      // Selection isn't occuring, so the key event is either navigation or nothing.                                   // 6478
      var date = self.getFocusDateFromKeyEvent(event);                                                                 // 6479
      if (date) {                                                                                                      // 6480
        date = self.boundDateByMinAndMax(date);                                                                        // 6481
        event.preventDefault();                                                                                        // 6482
        event.stopPropagation();                                                                                       // 6483
                                                                                                                       // 6484
        // Since this is a keyboard interaction, actually give the newly focused date keyboard                         // 6485
        // focus after the been brought into view.                                                                     // 6486
        self.changeDisplayDate(date).then(function () {                                                                // 6487
          self.focus(date);                                                                                            // 6488
        });                                                                                                            // 6489
      }                                                                                                                // 6490
    });                                                                                                                // 6491
  };                                                                                                                   // 6492
                                                                                                                       // 6493
  /**                                                                                                                  // 6494
   * Gets the date to focus as the result of a key event.                                                              // 6495
   * @param {KeyboardEvent} event                                                                                      // 6496
   * @returns {Date} Date to navigate to, or null if the key does not match a calendar shortcut.                       // 6497
   */                                                                                                                  // 6498
  CalendarCtrl.prototype.getFocusDateFromKeyEvent = function(event) {                                                  // 6499
    var dateUtil = this.dateUtil;                                                                                      // 6500
    var keyCode = this.keyCode;                                                                                        // 6501
                                                                                                                       // 6502
    switch (event.which) {                                                                                             // 6503
      case keyCode.RIGHT_ARROW: return dateUtil.incrementDays(this.displayDate, 1);                                    // 6504
      case keyCode.LEFT_ARROW: return dateUtil.incrementDays(this.displayDate, -1);                                    // 6505
      case keyCode.DOWN_ARROW:                                                                                         // 6506
        return event.metaKey ?                                                                                         // 6507
          dateUtil.incrementMonths(this.displayDate, 1) :                                                              // 6508
          dateUtil.incrementDays(this.displayDate, 7);                                                                 // 6509
      case keyCode.UP_ARROW:                                                                                           // 6510
        return event.metaKey ?                                                                                         // 6511
          dateUtil.incrementMonths(this.displayDate, -1) :                                                             // 6512
          dateUtil.incrementDays(this.displayDate, -7);                                                                // 6513
      case keyCode.PAGE_DOWN: return dateUtil.incrementMonths(this.displayDate, 1);                                    // 6514
      case keyCode.PAGE_UP: return dateUtil.incrementMonths(this.displayDate, -1);                                     // 6515
      case keyCode.HOME: return dateUtil.getFirstDateOfMonth(this.displayDate);                                        // 6516
      case keyCode.END: return dateUtil.getLastDateOfMonth(this.displayDate);                                          // 6517
      default: return null;                                                                                            // 6518
    }                                                                                                                  // 6519
  };                                                                                                                   // 6520
                                                                                                                       // 6521
  /**                                                                                                                  // 6522
   * Gets the "index" of the currently selected date as it would be in the virtual-repeat.                             // 6523
   * @returns {number}                                                                                                 // 6524
   */                                                                                                                  // 6525
  CalendarCtrl.prototype.getSelectedMonthIndex = function() {                                                          // 6526
    return this.dateUtil.getMonthDistance(this.firstRenderableDate,                                                    // 6527
        this.selectedDate || this.today);                                                                              // 6528
  };                                                                                                                   // 6529
                                                                                                                       // 6530
  /**                                                                                                                  // 6531
   * Scrolls to the month of the given date.                                                                           // 6532
   * @param {Date} date                                                                                                // 6533
   */                                                                                                                  // 6534
  CalendarCtrl.prototype.scrollToMonth = function(date) {                                                              // 6535
    if (!this.dateUtil.isValidDate(date)) {                                                                            // 6536
      return;                                                                                                          // 6537
    }                                                                                                                  // 6538
                                                                                                                       // 6539
    var monthDistance = this.dateUtil.getMonthDistance(this.firstRenderableDate, date);                                // 6540
    this.calendarScroller.scrollTop = monthDistance * TBODY_HEIGHT;                                                    // 6541
  };                                                                                                                   // 6542
                                                                                                                       // 6543
  /**                                                                                                                  // 6544
   * Sets the ng-model value for the calendar and emits a change event.                                                // 6545
   * @param {Date} date                                                                                                // 6546
   */                                                                                                                  // 6547
  CalendarCtrl.prototype.setNgModelValue = function(date) {                                                            // 6548
    this.$scope.$emit('md-calendar-change', date);                                                                     // 6549
    this.ngModelCtrl.$setViewValue(date);                                                                              // 6550
    this.ngModelCtrl.$render();                                                                                        // 6551
  };                                                                                                                   // 6552
                                                                                                                       // 6553
  /**                                                                                                                  // 6554
   * Focus the cell corresponding to the given date.                                                                   // 6555
   * @param {Date=} opt_date                                                                                           // 6556
   */                                                                                                                  // 6557
  CalendarCtrl.prototype.focus = function(opt_date) {                                                                  // 6558
    var date = opt_date || this.selectedDate || this.today;                                                            // 6559
                                                                                                                       // 6560
    var previousFocus = this.calendarElement.querySelector('.md-focus');                                               // 6561
    if (previousFocus) {                                                                                               // 6562
      previousFocus.classList.remove(FOCUSED_DATE_CLASS);                                                              // 6563
    }                                                                                                                  // 6564
                                                                                                                       // 6565
    var cellId = this.getDateId(date);                                                                                 // 6566
    var cell = document.getElementById(cellId);                                                                        // 6567
    if (cell) {                                                                                                        // 6568
      cell.classList.add(FOCUSED_DATE_CLASS);                                                                          // 6569
      cell.focus();                                                                                                    // 6570
    } else {                                                                                                           // 6571
      this.focusDate = date;                                                                                           // 6572
    }                                                                                                                  // 6573
  };                                                                                                                   // 6574
                                                                                                                       // 6575
  /**                                                                                                                  // 6576
   * If a date exceeds minDate or maxDate, returns date matching minDate or maxDate, respectively.                     // 6577
   * Otherwise, returns the date.                                                                                      // 6578
   * @param {Date} date                                                                                                // 6579
   * @return {Date}                                                                                                    // 6580
   */                                                                                                                  // 6581
  CalendarCtrl.prototype.boundDateByMinAndMax = function(date) {                                                       // 6582
    var boundDate = date;                                                                                              // 6583
    if (this.minDate && date < this.minDate) {                                                                         // 6584
      boundDate = new Date(this.minDate.getTime());                                                                    // 6585
    }                                                                                                                  // 6586
    if (this.maxDate && date > this.maxDate) {                                                                         // 6587
      boundDate = new Date(this.maxDate.getTime());                                                                    // 6588
    }                                                                                                                  // 6589
    return boundDate;                                                                                                  // 6590
  };                                                                                                                   // 6591
                                                                                                                       // 6592
  /*** Updating the displayed / selected date ***/                                                                     // 6593
                                                                                                                       // 6594
  /**                                                                                                                  // 6595
   * Change the selected date in the calendar (ngModel value has already been changed).                                // 6596
   * @param {Date} date                                                                                                // 6597
   */                                                                                                                  // 6598
  CalendarCtrl.prototype.changeSelectedDate = function(date) {                                                         // 6599
    var self = this;                                                                                                   // 6600
    var previousSelectedDate = this.selectedDate;                                                                      // 6601
    this.selectedDate = date;                                                                                          // 6602
    this.changeDisplayDate(date).then(function() {                                                                     // 6603
                                                                                                                       // 6604
      // Remove the selected class from the previously selected date, if any.                                          // 6605
      if (previousSelectedDate) {                                                                                      // 6606
        var prevDateCell =                                                                                             // 6607
            document.getElementById(self.getDateId(previousSelectedDate));                                             // 6608
        if (prevDateCell) {                                                                                            // 6609
          prevDateCell.classList.remove(SELECTED_DATE_CLASS);                                                          // 6610
          prevDateCell.setAttribute('aria-selected', 'false');                                                         // 6611
        }                                                                                                              // 6612
      }                                                                                                                // 6613
                                                                                                                       // 6614
      // Apply the select class to the new selected date if it is set.                                                 // 6615
      if (date) {                                                                                                      // 6616
        var dateCell = document.getElementById(self.getDateId(date));                                                  // 6617
        if (dateCell) {                                                                                                // 6618
          dateCell.classList.add(SELECTED_DATE_CLASS);                                                                 // 6619
          dateCell.setAttribute('aria-selected', 'true');                                                              // 6620
        }                                                                                                              // 6621
      }                                                                                                                // 6622
    });                                                                                                                // 6623
  };                                                                                                                   // 6624
                                                                                                                       // 6625
                                                                                                                       // 6626
  /**                                                                                                                  // 6627
   * Change the date that is being shown in the calendar. If the given date is in a different                          // 6628
   * month, the displayed month will be transitioned.                                                                  // 6629
   * @param {Date} date                                                                                                // 6630
   */                                                                                                                  // 6631
  CalendarCtrl.prototype.changeDisplayDate = function(date) {                                                          // 6632
    // Initialization is deferred until this function is called because we want to reflect                             // 6633
    // the starting value of ngModel.                                                                                  // 6634
    if (!this.isInitialized) {                                                                                         // 6635
      this.buildInitialCalendarDisplay();                                                                              // 6636
      return this.$q.when();                                                                                           // 6637
    }                                                                                                                  // 6638
                                                                                                                       // 6639
    // If trying to show an invalid date or a transition is in progress, do nothing.                                   // 6640
    if (!this.dateUtil.isValidDate(date) || this.isMonthTransitionInProgress) {                                        // 6641
      return this.$q.when();                                                                                           // 6642
    }                                                                                                                  // 6643
                                                                                                                       // 6644
    this.isMonthTransitionInProgress = true;                                                                           // 6645
    var animationPromise = this.animateDateChange(date);                                                               // 6646
                                                                                                                       // 6647
    this.displayDate = date;                                                                                           // 6648
                                                                                                                       // 6649
    var self = this;                                                                                                   // 6650
    animationPromise.then(function() {                                                                                 // 6651
      self.isMonthTransitionInProgress = false;                                                                        // 6652
    });                                                                                                                // 6653
                                                                                                                       // 6654
    return animationPromise;                                                                                           // 6655
  };                                                                                                                   // 6656
                                                                                                                       // 6657
  /**                                                                                                                  // 6658
   * Animates the transition from the calendar's current month to the given month.                                     // 6659
   * @param {Date} date                                                                                                // 6660
   * @returns {angular.$q.Promise} The animation promise.                                                              // 6661
   */                                                                                                                  // 6662
  CalendarCtrl.prototype.animateDateChange = function(date) {                                                          // 6663
    this.scrollToMonth(date);                                                                                          // 6664
    return this.$q.when();                                                                                             // 6665
  };                                                                                                                   // 6666
                                                                                                                       // 6667
  /*** Constructing the calendar table ***/                                                                            // 6668
                                                                                                                       // 6669
  /**                                                                                                                  // 6670
   * Builds and appends a day-of-the-week header to the calendar.                                                      // 6671
   * This should only need to be called once during initialization.                                                    // 6672
   */                                                                                                                  // 6673
  CalendarCtrl.prototype.buildWeekHeader = function() {                                                                // 6674
    var firstDayOfWeek = this.dateLocale.firstDayOfWeek;                                                               // 6675
    var shortDays = this.dateLocale.shortDays;                                                                         // 6676
                                                                                                                       // 6677
    var row = document.createElement('tr');                                                                            // 6678
    for (var i = 0; i < 7; i++) {                                                                                      // 6679
      var th = document.createElement('th');                                                                           // 6680
      th.textContent = shortDays[(i + firstDayOfWeek) % 7];                                                            // 6681
      row.appendChild(th);                                                                                             // 6682
    }                                                                                                                  // 6683
                                                                                                                       // 6684
    this.$element.find('thead').append(row);                                                                           // 6685
  };                                                                                                                   // 6686
                                                                                                                       // 6687
    /**                                                                                                                // 6688
   * Gets an identifier for a date unique to the calendar instance for internal                                        // 6689
   * purposes. Not to be displayed.                                                                                    // 6690
   * @param {Date} date                                                                                                // 6691
   * @returns {string}                                                                                                 // 6692
   */                                                                                                                  // 6693
  CalendarCtrl.prototype.getDateId = function(date) {                                                                  // 6694
    return [                                                                                                           // 6695
      'md',                                                                                                            // 6696
      this.id,                                                                                                         // 6697
      date.getFullYear(),                                                                                              // 6698
      date.getMonth(),                                                                                                 // 6699
      date.getDate()                                                                                                   // 6700
    ].join('-');                                                                                                       // 6701
  };                                                                                                                   // 6702
})();                                                                                                                  // 6703
                                                                                                                       // 6704
})();                                                                                                                  // 6705
(function(){                                                                                                           // 6706
"use strict";                                                                                                          // 6707
                                                                                                                       // 6708
(function() {                                                                                                          // 6709
  'use strict';                                                                                                        // 6710
                                                                                                                       // 6711
                                                                                                                       // 6712
  angular.module('material.components.datepicker')                                                                     // 6713
      .directive('mdCalendarMonth', mdCalendarMonthDirective);                                                         // 6714
                                                                                                                       // 6715
                                                                                                                       // 6716
  /**                                                                                                                  // 6717
   * Private directive consumed by md-calendar. Having this directive lets the calender use                            // 6718
   * md-virtual-repeat and also cleanly separates the month DOM construction functions from                            // 6719
   * the rest of the calendar controller logic.                                                                        // 6720
   */                                                                                                                  // 6721
  function mdCalendarMonthDirective() {                                                                                // 6722
    return {                                                                                                           // 6723
      require: ['^^mdCalendar', 'mdCalendarMonth'],                                                                    // 6724
      scope: {offset: '=mdMonthOffset'},                                                                               // 6725
      controller: CalendarMonthCtrl,                                                                                   // 6726
      controllerAs: 'mdMonthCtrl',                                                                                     // 6727
      bindToController: true,                                                                                          // 6728
      link: function(scope, element, attrs, controllers) {                                                             // 6729
        var calendarCtrl = controllers[0];                                                                             // 6730
        var monthCtrl = controllers[1];                                                                                // 6731
                                                                                                                       // 6732
        monthCtrl.calendarCtrl = calendarCtrl;                                                                         // 6733
        monthCtrl.generateContent();                                                                                   // 6734
                                                                                                                       // 6735
        // The virtual-repeat re-uses the same DOM elements, so there are only a limited number                        // 6736
        // of repeated items that are linked, and then those elements have their bindings updataed.                    // 6737
        // Since the months are not generated by bindings, we simply regenerate the entire thing                       // 6738
        // when the binding (offset) changes.                                                                          // 6739
        scope.$watch(function() { return monthCtrl.offset; }, function(offset, oldOffset) {                            // 6740
          if (offset != oldOffset) {                                                                                   // 6741
            monthCtrl.generateContent();                                                                               // 6742
          }                                                                                                            // 6743
        });                                                                                                            // 6744
      }                                                                                                                // 6745
    };                                                                                                                 // 6746
  }                                                                                                                    // 6747
                                                                                                                       // 6748
  /** Class applied to the cell for today. */                                                                          // 6749
  var TODAY_CLASS = 'md-calendar-date-today';                                                                          // 6750
                                                                                                                       // 6751
  /** Class applied to the selected date cell/. */                                                                     // 6752
  var SELECTED_DATE_CLASS = 'md-calendar-selected-date';                                                               // 6753
                                                                                                                       // 6754
  /** Class applied to the focused date cell/. */                                                                      // 6755
  var FOCUSED_DATE_CLASS = 'md-focus';                                                                                 // 6756
                                                                                                                       // 6757
  /**                                                                                                                  // 6758
   * Controller for a single calendar month.                                                                           // 6759
   * @ngInject @constructor                                                                                            // 6760
   */                                                                                                                  // 6761
  function CalendarMonthCtrl($element, $$mdDateUtil, $mdDateLocale) {                                                  // 6762
    this.dateUtil = $$mdDateUtil;                                                                                      // 6763
    this.dateLocale = $mdDateLocale;                                                                                   // 6764
    this.$element = $element;                                                                                          // 6765
    this.calendarCtrl = null;                                                                                          // 6766
                                                                                                                       // 6767
    /**                                                                                                                // 6768
     * Number of months from the start of the month "items" that the currently rendered month                          // 6769
     * occurs. Set via angular data binding.                                                                           // 6770
     * @type {number}                                                                                                  // 6771
     */                                                                                                                // 6772
    this.offset;                                                                                                       // 6773
                                                                                                                       // 6774
    /**                                                                                                                // 6775
     * Date cell to focus after appending the month to the document.                                                   // 6776
     * @type {HTMLElement}                                                                                             // 6777
     */                                                                                                                // 6778
    this.focusAfterAppend = null;                                                                                      // 6779
  }                                                                                                                    // 6780
  CalendarMonthCtrl.$inject = ["$element", "$$mdDateUtil", "$mdDateLocale"];                                           // 6781
                                                                                                                       // 6782
  /** Generate and append the content for this month to the directive element. */                                      // 6783
  CalendarMonthCtrl.prototype.generateContent = function() {                                                           // 6784
    var calendarCtrl = this.calendarCtrl;                                                                              // 6785
    var date = this.dateUtil.incrementMonths(calendarCtrl.firstRenderableDate, this.offset);                           // 6786
                                                                                                                       // 6787
    this.$element.empty();                                                                                             // 6788
    this.$element.append(this.buildCalendarForMonth(date));                                                            // 6789
                                                                                                                       // 6790
    if (this.focusAfterAppend) {                                                                                       // 6791
      this.focusAfterAppend.classList.add(FOCUSED_DATE_CLASS);                                                         // 6792
      this.focusAfterAppend.focus();                                                                                   // 6793
      this.focusAfterAppend = null;                                                                                    // 6794
    }                                                                                                                  // 6795
  };                                                                                                                   // 6796
                                                                                                                       // 6797
  /**                                                                                                                  // 6798
   * Creates a single cell to contain a date in the calendar with all appropriate                                      // 6799
   * attributes and classes added. If a date is given, the cell content will be set                                    // 6800
   * based on the date.                                                                                                // 6801
   * @param {Date=} opt_date                                                                                           // 6802
   * @returns {HTMLElement}                                                                                            // 6803
   */                                                                                                                  // 6804
  CalendarMonthCtrl.prototype.buildDateCell = function(opt_date) {                                                     // 6805
    var calendarCtrl = this.calendarCtrl;                                                                              // 6806
                                                                                                                       // 6807
    // TODO(jelbourn): cloneNode is likely a faster way of doing this.                                                 // 6808
    var cell = document.createElement('td');                                                                           // 6809
    cell.tabIndex = -1;                                                                                                // 6810
    cell.classList.add('md-calendar-date');                                                                            // 6811
    cell.setAttribute('role', 'gridcell');                                                                             // 6812
                                                                                                                       // 6813
    if (opt_date) {                                                                                                    // 6814
      cell.setAttribute('tabindex', '-1');                                                                             // 6815
      cell.setAttribute('aria-label', this.dateLocale.longDateFormatter(opt_date));                                    // 6816
      cell.id = calendarCtrl.getDateId(opt_date);                                                                      // 6817
                                                                                                                       // 6818
      // Use `data-timestamp` attribute because IE10 does not support the `dataset` property.                          // 6819
      cell.setAttribute('data-timestamp', opt_date.getTime());                                                         // 6820
                                                                                                                       // 6821
      // TODO(jelourn): Doing these comparisons for class addition during generation might be slow.                    // 6822
      // It may be better to finish the construction and then query the node and add the class.                        // 6823
      if (this.dateUtil.isSameDay(opt_date, calendarCtrl.today)) {                                                     // 6824
        cell.classList.add(TODAY_CLASS);                                                                               // 6825
      }                                                                                                                // 6826
                                                                                                                       // 6827
      if (this.dateUtil.isValidDate(calendarCtrl.selectedDate) &&                                                      // 6828
          this.dateUtil.isSameDay(opt_date, calendarCtrl.selectedDate)) {                                              // 6829
        cell.classList.add(SELECTED_DATE_CLASS);                                                                       // 6830
        cell.setAttribute('aria-selected', 'true');                                                                    // 6831
      }                                                                                                                // 6832
                                                                                                                       // 6833
      var cellText = this.dateLocale.dates[opt_date.getDate()];                                                        // 6834
                                                                                                                       // 6835
      if (this.dateUtil.isDateWithinRange(opt_date,                                                                    // 6836
          this.calendarCtrl.minDate, this.calendarCtrl.maxDate)) {                                                     // 6837
        // Add a indicator for select, hover, and focus states.                                                        // 6838
        var selectionIndicator = document.createElement('span');                                                       // 6839
        cell.appendChild(selectionIndicator);                                                                          // 6840
        selectionIndicator.classList.add('md-calendar-date-selection-indicator');                                      // 6841
        selectionIndicator.textContent = cellText;                                                                     // 6842
                                                                                                                       // 6843
        cell.addEventListener('click', calendarCtrl.cellClickHandler);                                                 // 6844
                                                                                                                       // 6845
        if (calendarCtrl.focusDate && this.dateUtil.isSameDay(opt_date, calendarCtrl.focusDate)) {                     // 6846
          this.focusAfterAppend = cell;                                                                                // 6847
        }                                                                                                              // 6848
      } else {                                                                                                         // 6849
        cell.classList.add('md-calendar-date-disabled');                                                               // 6850
        cell.textContent = cellText;                                                                                   // 6851
      }                                                                                                                // 6852
    }                                                                                                                  // 6853
                                                                                                                       // 6854
    return cell;                                                                                                       // 6855
  };                                                                                                                   // 6856
                                                                                                                       // 6857
  /**                                                                                                                  // 6858
   * Builds a `tr` element for the calendar grid.                                                                      // 6859
   * @param rowNumber The week number within the month.                                                                // 6860
   * @returns {HTMLElement}                                                                                            // 6861
   */                                                                                                                  // 6862
  CalendarMonthCtrl.prototype.buildDateRow = function(rowNumber) {                                                     // 6863
    var row = document.createElement('tr');                                                                            // 6864
    row.setAttribute('role', 'row');                                                                                   // 6865
                                                                                                                       // 6866
    // Because of an NVDA bug (with Firefox), the row needs an aria-label in order                                     // 6867
    // to prevent the entire row being read aloud when the user moves between rows.                                    // 6868
    // See http://community.nvda-project.org/ticket/4643.                                                              // 6869
    row.setAttribute('aria-label', this.dateLocale.weekNumberFormatter(rowNumber));                                    // 6870
                                                                                                                       // 6871
    return row;                                                                                                        // 6872
  };                                                                                                                   // 6873
                                                                                                                       // 6874
  /**                                                                                                                  // 6875
   * Builds the <tbody> content for the given date's month.                                                            // 6876
   * @param {Date=} opt_dateInMonth                                                                                    // 6877
   * @returns {DocumentFragment} A document fragment containing the <tr> elements.                                     // 6878
   */                                                                                                                  // 6879
  CalendarMonthCtrl.prototype.buildCalendarForMonth = function(opt_dateInMonth) {                                      // 6880
    var date = this.dateUtil.isValidDate(opt_dateInMonth) ? opt_dateInMonth : new Date();                              // 6881
                                                                                                                       // 6882
    var firstDayOfMonth = this.dateUtil.getFirstDateOfMonth(date);                                                     // 6883
    var firstDayOfTheWeek = this.getLocaleDay_(firstDayOfMonth);                                                       // 6884
    var numberOfDaysInMonth = this.dateUtil.getNumberOfDaysInMonth(date);                                              // 6885
                                                                                                                       // 6886
    // Store rows for the month in a document fragment so that we can append them all at once.                         // 6887
    var monthBody = document.createDocumentFragment();                                                                 // 6888
                                                                                                                       // 6889
    var rowNumber = 1;                                                                                                 // 6890
    var row = this.buildDateRow(rowNumber);                                                                            // 6891
    monthBody.appendChild(row);                                                                                        // 6892
                                                                                                                       // 6893
    // If this is the final month in the list of items, only the first week should render,                             // 6894
    // so we should return immediately after the first row is complete and has been                                    // 6895
    // attached to the body.                                                                                           // 6896
    var isFinalMonth = this.offset === this.calendarCtrl.items.length - 1;                                             // 6897
                                                                                                                       // 6898
    // Add a label for the month. If the month starts on a Sun/Mon/Tues, the month label                               // 6899
    // goes on a row above the first of the month. Otherwise, the month label takes up the first                       // 6900
    // two cells of the first row.                                                                                     // 6901
    var blankCellOffset = 0;                                                                                           // 6902
    var monthLabelCell = document.createElement('td');                                                                 // 6903
    monthLabelCell.classList.add('md-calendar-month-label');                                                           // 6904
    // If the entire month is after the max date, render the label as a disabled state.                                // 6905
    if (this.calendarCtrl.maxDate && firstDayOfMonth > this.calendarCtrl.maxDate) {                                    // 6906
      monthLabelCell.classList.add('md-calendar-month-label-disabled');                                                // 6907
    }                                                                                                                  // 6908
    monthLabelCell.textContent = this.dateLocale.monthHeaderFormatter(date);                                           // 6909
    if (firstDayOfTheWeek <= 2) {                                                                                      // 6910
      monthLabelCell.setAttribute('colspan', '7');                                                                     // 6911
                                                                                                                       // 6912
      var monthLabelRow = this.buildDateRow();                                                                         // 6913
      monthLabelRow.appendChild(monthLabelCell);                                                                       // 6914
      monthBody.insertBefore(monthLabelRow, row);                                                                      // 6915
                                                                                                                       // 6916
      if (isFinalMonth) {                                                                                              // 6917
        return monthBody;                                                                                              // 6918
      }                                                                                                                // 6919
    } else {                                                                                                           // 6920
      blankCellOffset = 2;                                                                                             // 6921
      monthLabelCell.setAttribute('colspan', '2');                                                                     // 6922
      row.appendChild(monthLabelCell);                                                                                 // 6923
    }                                                                                                                  // 6924
                                                                                                                       // 6925
    // Add a blank cell for each day of the week that occurs before the first of the month.                            // 6926
    // For example, if the first day of the month is a Tuesday, add blank cells for Sun and Mon.                       // 6927
    // The blankCellOffset is needed in cases where the first N cells are used by the month label.                     // 6928
    for (var i = blankCellOffset; i < firstDayOfTheWeek; i++) {                                                        // 6929
      row.appendChild(this.buildDateCell());                                                                           // 6930
    }                                                                                                                  // 6931
                                                                                                                       // 6932
    // Add a cell for each day of the month, keeping track of the day of the week so that                              // 6933
    // we know when to start a new row.                                                                                // 6934
    var dayOfWeek = firstDayOfTheWeek;                                                                                 // 6935
    var iterationDate = firstDayOfMonth;                                                                               // 6936
    for (var d = 1; d <= numberOfDaysInMonth; d++) {                                                                   // 6937
      // If we've reached the end of the week, start a new row.                                                        // 6938
      if (dayOfWeek === 7) {                                                                                           // 6939
        // We've finished the first row, so we're done if this is the final month.                                     // 6940
        if (isFinalMonth) {                                                                                            // 6941
          return monthBody;                                                                                            // 6942
        }                                                                                                              // 6943
        dayOfWeek = 0;                                                                                                 // 6944
        rowNumber++;                                                                                                   // 6945
        row = this.buildDateRow(rowNumber);                                                                            // 6946
        monthBody.appendChild(row);                                                                                    // 6947
      }                                                                                                                // 6948
                                                                                                                       // 6949
      iterationDate.setDate(d);                                                                                        // 6950
      var cell = this.buildDateCell(iterationDate);                                                                    // 6951
      row.appendChild(cell);                                                                                           // 6952
                                                                                                                       // 6953
      dayOfWeek++;                                                                                                     // 6954
    }                                                                                                                  // 6955
                                                                                                                       // 6956
    // Ensure that the last row of the month has 7 cells.                                                              // 6957
    while (row.childNodes.length < 7) {                                                                                // 6958
      row.appendChild(this.buildDateCell());                                                                           // 6959
    }                                                                                                                  // 6960
                                                                                                                       // 6961
    // Ensure that all months have 6 rows. This is necessary for now because the virtual-repeat                        // 6962
    // requires that all items have exactly the same height.                                                           // 6963
    while (monthBody.childNodes.length < 6) {                                                                          // 6964
      var whitespaceRow = this.buildDateRow();                                                                         // 6965
      for (var i = 0; i < 7; i++) {                                                                                    // 6966
        whitespaceRow.appendChild(this.buildDateCell());                                                               // 6967
      }                                                                                                                // 6968
      monthBody.appendChild(whitespaceRow);                                                                            // 6969
    }                                                                                                                  // 6970
                                                                                                                       // 6971
    return monthBody;                                                                                                  // 6972
  };                                                                                                                   // 6973
                                                                                                                       // 6974
  /**                                                                                                                  // 6975
   * Gets the day-of-the-week index for a date for the current locale.                                                 // 6976
   * @private                                                                                                          // 6977
   * @param {Date} date                                                                                                // 6978
   * @returns {number} The column index of the date in the calendar.                                                   // 6979
   */                                                                                                                  // 6980
  CalendarMonthCtrl.prototype.getLocaleDay_ = function(date) {                                                         // 6981
    return (date.getDay() + (7 - this.dateLocale.firstDayOfWeek)) % 7                                                  // 6982
  };                                                                                                                   // 6983
})();                                                                                                                  // 6984
                                                                                                                       // 6985
})();                                                                                                                  // 6986
(function(){                                                                                                           // 6987
"use strict";                                                                                                          // 6988
                                                                                                                       // 6989
(function() {                                                                                                          // 6990
  'use strict';                                                                                                        // 6991
                                                                                                                       // 6992
  /**                                                                                                                  // 6993
   * @ngdoc service                                                                                                    // 6994
   * @name $mdDateLocaleProvider                                                                                       // 6995
   * @module material.components.datepicker                                                                            // 6996
   *                                                                                                                   // 6997
   * @description                                                                                                      // 6998
   * The `$mdDateLocaleProvider` is the provider that creates the `$mdDateLocale` service.                             // 6999
   * This provider that allows the user to specify messages, formatters, and parsers for date                          // 7000
   * internationalization. The `$mdDateLocale` service itself is consumed by Angular Material                          // 7001
   * components that that deal with dates.                                                                             // 7002
   *                                                                                                                   // 7003
   * @property {(Array<string>)=} months Array of month names (in order).                                              // 7004
   * @property {(Array<string>)=} shortMonths Array of abbreviated month names.                                        // 7005
   * @property {(Array<string>)=} days Array of the days of the week (in order).                                       // 7006
   * @property {(Array<string>)=} shortDays Array of abbreviated dayes of the week.                                    // 7007
   * @property {(Array<string>)=} dates Array of dates of the month. Only necessary for locales                        // 7008
   *     using a numeral system other than [1, 2, 3...].                                                               // 7009
   * @property {(Array<string>)=} firstDayOfWeek The first day of the week. Sunday = 0, Monday = 1,                    // 7010
   *    etc.                                                                                                           // 7011
   * @property {(function(string): Date)=} parseDate Function to parse a date object from a string.                    // 7012
   * @property {(function(Date): string)=} formatDate Function to format a date object to a string.                    // 7013
   * @property {(function(Date): string)=} monthHeaderFormatter Function that returns the label for                    // 7014
   *     a month given a date.                                                                                         // 7015
   * @property {(function(number): string)=} weekNumberFormatter Function that returns a label for                     // 7016
   *     a week given the week number.                                                                                 // 7017
   * @property {(string)=} msgCalendar Translation of the label "Calendar" for the current locale.                     // 7018
   * @property {(string)=} msgOpenCalendar Translation of the button label "Open calendar" for the                     // 7019
   *     current locale.                                                                                               // 7020
   *                                                                                                                   // 7021
   * @usage                                                                                                            // 7022
   * <hljs lang="js">                                                                                                  // 7023
   *   myAppModule.config(function($mdDateLocaleProvider) {                                                            // 7024
   *                                                                                                                   // 7025
   *     // Example of a French localization.                                                                          // 7026
   *     $mdDateLocaleProvider.months = ['janvier', 'février', 'mars', ...];                                           // 7027
   *     $mdDateLocaleProvider.shortMonths = ['janv', 'févr', 'mars', ...];                                            // 7028
   *     $mdDateLocaleProvider.days = ['dimanche', 'lundi', 'mardi', ...];                                             // 7029
   *     $mdDateLocaleProvider.shortDays = ['Di', 'Lu', 'Ma', ...];                                                    // 7030
   *                                                                                                                   // 7031
   *     // Can change week display to start on Monday.                                                                // 7032
   *     $mdDateLocaleProvider.firstDayOfWeek = 1;                                                                     // 7033
   *                                                                                                                   // 7034
   *     // Optional.                                                                                                  // 7035
   *     $mdDateLocaleProvider.dates = [1, 2, 3, 4, 5, 6, ...];                                                        // 7036
   *                                                                                                                   // 7037
   *     // Example uses moment.js to parse and format dates.                                                          // 7038
   *     $mdDateLocaleProvider.parseDate = function(dateString) {                                                      // 7039
   *       var m = moment(dateString, 'L', true);                                                                      // 7040
   *       return m.isValid() ? m.toDate() : new Date(NaN);                                                            // 7041
   *     };                                                                                                            // 7042
   *                                                                                                                   // 7043
   *     $mdDateLocaleProvider.formatDate = function(date) {                                                           // 7044
   *       return moment(date).format('L');                                                                            // 7045
   *     };                                                                                                            // 7046
   *                                                                                                                   // 7047
   *     $mdDateLocaleProvider.monthHeaderFormatter = function(date) {                                                 // 7048
   *       return myShortMonths[date.getMonth()] + ' ' + date.getFullYear();                                           // 7049
   *     };                                                                                                            // 7050
   *                                                                                                                   // 7051
   *     // In addition to date display, date components also need localized messages                                  // 7052
   *     // for aria-labels for screen-reader users.                                                                   // 7053
   *                                                                                                                   // 7054
   *     $mdDateLocaleProvider.weekNumberFormatter = function(weekNumber) {                                            // 7055
   *       return 'Semaine ' + weekNumber;                                                                             // 7056
   *     };                                                                                                            // 7057
   *                                                                                                                   // 7058
   *     $mdDateLocaleProvider.msgCalendar = 'Calendrier';                                                             // 7059
   *     $mdDateLocaleProvider.msgOpenCalendar = 'Ouvrir le calendrier';                                               // 7060
   *                                                                                                                   // 7061
   * });                                                                                                               // 7062
   * </hljs>                                                                                                           // 7063
   *                                                                                                                   // 7064
   */                                                                                                                  // 7065
                                                                                                                       // 7066
  angular.module('material.components.datepicker').config(["$provide", function($provide) {                            // 7067
    // TODO(jelbourn): Assert provided values are correctly formatted. Need assertions.                                // 7068
                                                                                                                       // 7069
    /** @constructor */                                                                                                // 7070
    function DateLocaleProvider() {                                                                                    // 7071
      /** Array of full month names. E.g., ['January', 'Febuary', ...] */                                              // 7072
      this.months = null;                                                                                              // 7073
                                                                                                                       // 7074
      /** Array of abbreviated month names. E.g., ['Jan', 'Feb', ...] */                                               // 7075
      this.shortMonths = null;                                                                                         // 7076
                                                                                                                       // 7077
      /** Array of full day of the week names. E.g., ['Monday', 'Tuesday', ...] */                                     // 7078
      this.days = null;                                                                                                // 7079
                                                                                                                       // 7080
      /** Array of abbreviated dat of the week names. E.g., ['M', 'T', ...] */                                         // 7081
      this.shortDays = null;                                                                                           // 7082
                                                                                                                       // 7083
      /** Array of dates of a month (1 - 31). Characters might be different in some locales. */                        // 7084
      this.dates = null;                                                                                               // 7085
                                                                                                                       // 7086
      /** Index of the first day of the week. 0 = Sunday, 1 = Monday, etc. */                                          // 7087
      this.firstDayOfWeek = 0;                                                                                         // 7088
                                                                                                                       // 7089
      /**                                                                                                              // 7090
       * Function that converts the date portion of a Date to a string.                                                // 7091
       * @type {(function(Date): string)}                                                                              // 7092
       */                                                                                                              // 7093
      this.formatDate = null;                                                                                          // 7094
                                                                                                                       // 7095
      /**                                                                                                              // 7096
       * Function that converts a date string to a Date object (the date portion)                                      // 7097
       * @type {function(string): Date}                                                                                // 7098
       */                                                                                                              // 7099
      this.parseDate = null;                                                                                           // 7100
                                                                                                                       // 7101
      /**                                                                                                              // 7102
       * Function that formats a Date into a month header string.                                                      // 7103
       * @type {function(Date): string}                                                                                // 7104
       */                                                                                                              // 7105
      this.monthHeaderFormatter = null;                                                                                // 7106
                                                                                                                       // 7107
      /**                                                                                                              // 7108
       * Function that formats a week number into a label for the week.                                                // 7109
       * @type {function(number): string}                                                                              // 7110
       */                                                                                                              // 7111
      this.weekNumberFormatter = null;                                                                                 // 7112
                                                                                                                       // 7113
      /**                                                                                                              // 7114
       * Function that formats a date into a long aria-label that is read                                              // 7115
       * when the focused date changes.                                                                                // 7116
       * @type {function(Date): string}                                                                                // 7117
       */                                                                                                              // 7118
      this.longDateFormatter = null;                                                                                   // 7119
                                                                                                                       // 7120
      /**                                                                                                              // 7121
       * ARIA label for the calendar "dialog" used in the datepicker.                                                  // 7122
       * @type {string}                                                                                                // 7123
       */                                                                                                              // 7124
      this.msgCalendar = '';                                                                                           // 7125
                                                                                                                       // 7126
      /**                                                                                                              // 7127
       * ARIA label for the datepicker's "Open calendar" buttons.                                                      // 7128
       * @type {string}                                                                                                // 7129
       */                                                                                                              // 7130
      this.msgOpenCalendar = '';                                                                                       // 7131
    }                                                                                                                  // 7132
                                                                                                                       // 7133
    /**                                                                                                                // 7134
     * Factory function that returns an instance of the dateLocale service.                                            // 7135
     * @ngInject                                                                                                       // 7136
     * @param $locale                                                                                                  // 7137
     * @returns {DateLocale}                                                                                           // 7138
     */                                                                                                                // 7139
    DateLocaleProvider.prototype.$get = function($locale) {                                                            // 7140
      /**                                                                                                              // 7141
       * Default date-to-string formatting function.                                                                   // 7142
       * @param {!Date} date                                                                                           // 7143
       * @returns {string}                                                                                             // 7144
       */                                                                                                              // 7145
      function defaultFormatDate(date) {                                                                               // 7146
        if (!date) {                                                                                                   // 7147
          return '';                                                                                                   // 7148
        }                                                                                                              // 7149
                                                                                                                       // 7150
        // All of the dates created through ng-material *should* be set to midnight.                                   // 7151
        // If we encounter a date where the localeTime shows at 11pm instead of midnight,                              // 7152
        // we have run into an issue with DST where we need to increment the hour by one:                              // 7153
        // var d = new Date(1992, 9, 8, 0, 0, 0);                                                                      // 7154
        // d.toLocaleString(); // == "10/7/1992, 11:00:00 PM"                                                          // 7155
        var localeTime = date.toLocaleTimeString();                                                                    // 7156
        var formatDate = date;                                                                                         // 7157
        if (date.getHours() == 0 &&                                                                                    // 7158
            (localeTime.indexOf('11:') !== -1 || localeTime.indexOf('23:') !== -1)) {                                  // 7159
          formatDate = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 1, 0, 0);                         // 7160
        }                                                                                                              // 7161
                                                                                                                       // 7162
        return formatDate.toLocaleDateString();                                                                        // 7163
      }                                                                                                                // 7164
                                                                                                                       // 7165
      /**                                                                                                              // 7166
       * Default string-to-date parsing function.                                                                      // 7167
       * @param {string} dateString                                                                                    // 7168
       * @returns {!Date}                                                                                              // 7169
       */                                                                                                              // 7170
      function defaultParseDate(dateString) {                                                                          // 7171
        return new Date(dateString);                                                                                   // 7172
      }                                                                                                                // 7173
                                                                                                                       // 7174
      /**                                                                                                              // 7175
       * Default function to determine whether a string makes sense to be                                              // 7176
       * parsed to a Date object.                                                                                      // 7177
       *                                                                                                               // 7178
       * This is very permissive and is just a basic sanity check to ensure that                                       // 7179
       * things like single integers aren't able to be parsed into dates.                                              // 7180
       * @param {string} dateString                                                                                    // 7181
       * @returns {boolean}                                                                                            // 7182
       */                                                                                                              // 7183
      function defaultIsDateComplete(dateString) {                                                                     // 7184
        dateString = dateString.trim();                                                                                // 7185
                                                                                                                       // 7186
        // Looks for three chunks of content (either numbers or text) separated                                        // 7187
        // by delimiters.                                                                                              // 7188
        var re = /^(([a-zA-Z]{3,}|[0-9]{1,4})([ \.,]+|[\/\-])){2}([a-zA-Z]{3,}|[0-9]{1,4})$/;                          // 7189
        return re.test(dateString);                                                                                    // 7190
      }                                                                                                                // 7191
                                                                                                                       // 7192
      /**                                                                                                              // 7193
       * Default date-to-string formatter to get a month header.                                                       // 7194
       * @param {!Date} date                                                                                           // 7195
       * @returns {string}                                                                                             // 7196
       */                                                                                                              // 7197
      function defaultMonthHeaderFormatter(date) {                                                                     // 7198
        return service.shortMonths[date.getMonth()] + ' ' + date.getFullYear();                                        // 7199
      }                                                                                                                // 7200
                                                                                                                       // 7201
      /**                                                                                                              // 7202
       * Default week number formatter.                                                                                // 7203
       * @param number                                                                                                 // 7204
       * @returns {string}                                                                                             // 7205
       */                                                                                                              // 7206
      function defaultWeekNumberFormatter(number) {                                                                    // 7207
        return 'Week ' + number;                                                                                       // 7208
      }                                                                                                                // 7209
                                                                                                                       // 7210
      /**                                                                                                              // 7211
       * Default formatter for date cell aria-labels.                                                                  // 7212
       * @param {!Date} date                                                                                           // 7213
       * @returns {string}                                                                                             // 7214
       */                                                                                                              // 7215
      function defaultLongDateFormatter(date) {                                                                        // 7216
        // Example: 'Thursday June 18 2015'                                                                            // 7217
        return [                                                                                                       // 7218
          service.days[date.getDay()],                                                                                 // 7219
          service.months[date.getMonth()],                                                                             // 7220
          service.dates[date.getDate()],                                                                               // 7221
          date.getFullYear()                                                                                           // 7222
        ].join(' ');                                                                                                   // 7223
      }                                                                                                                // 7224
                                                                                                                       // 7225
      // The default "short" day strings are the first character of each day,                                          // 7226
      // e.g., "Monday" => "M".                                                                                        // 7227
      var defaultShortDays = $locale.DATETIME_FORMATS.DAY.map(function(day) {                                          // 7228
        return day[0];                                                                                                 // 7229
      });                                                                                                              // 7230
                                                                                                                       // 7231
      // The default dates are simply the numbers 1 through 31.                                                        // 7232
      var defaultDates = Array(32);                                                                                    // 7233
      for (var i = 1; i <= 31; i++) {                                                                                  // 7234
        defaultDates[i] = i;                                                                                           // 7235
      }                                                                                                                // 7236
                                                                                                                       // 7237
      // Default ARIA messages are in English (US).                                                                    // 7238
      var defaultMsgCalendar = 'Calendar';                                                                             // 7239
      var defaultMsgOpenCalendar = 'Open calendar';                                                                    // 7240
                                                                                                                       // 7241
      var service = {                                                                                                  // 7242
        months: this.months || $locale.DATETIME_FORMATS.MONTH,                                                         // 7243
        shortMonths: this.shortMonths || $locale.DATETIME_FORMATS.SHORTMONTH,                                          // 7244
        days: this.days || $locale.DATETIME_FORMATS.DAY,                                                               // 7245
        shortDays: this.shortDays || defaultShortDays,                                                                 // 7246
        dates: this.dates || defaultDates,                                                                             // 7247
        firstDayOfWeek: this.firstDayOfWeek || 0,                                                                      // 7248
        formatDate: this.formatDate || defaultFormatDate,                                                              // 7249
        parseDate: this.parseDate || defaultParseDate,                                                                 // 7250
        isDateComplete: this.isDateComplete || defaultIsDateComplete,                                                  // 7251
        monthHeaderFormatter: this.monthHeaderFormatter || defaultMonthHeaderFormatter,                                // 7252
        weekNumberFormatter: this.weekNumberFormatter || defaultWeekNumberFormatter,                                   // 7253
        longDateFormatter: this.longDateFormatter || defaultLongDateFormatter,                                         // 7254
        msgCalendar: this.msgCalendar || defaultMsgCalendar,                                                           // 7255
        msgOpenCalendar: this.msgOpenCalendar || defaultMsgOpenCalendar                                                // 7256
      };                                                                                                               // 7257
                                                                                                                       // 7258
      return service;                                                                                                  // 7259
    };                                                                                                                 // 7260
    DateLocaleProvider.prototype.$get.$inject = ["$locale"];                                                           // 7261
                                                                                                                       // 7262
    $provide.provider('$mdDateLocale', new DateLocaleProvider());                                                      // 7263
  }]);                                                                                                                 // 7264
})();                                                                                                                  // 7265
                                                                                                                       // 7266
})();                                                                                                                  // 7267
(function(){                                                                                                           // 7268
"use strict";                                                                                                          // 7269
                                                                                                                       // 7270
(function() {                                                                                                          // 7271
  'use strict';                                                                                                        // 7272
                                                                                                                       // 7273
  // POST RELEASE                                                                                                      // 7274
  // TODO(jelbourn): Demo that uses moment.js                                                                          // 7275
  // TODO(jelbourn): make sure this plays well with validation and ngMessages.                                         // 7276
  // TODO(jelbourn): calendar pane doesn't open up outside of visible viewport.                                        // 7277
  // TODO(jelbourn): forward more attributes to the internal input (required, autofocus, etc.)                         // 7278
  // TODO(jelbourn): something better for mobile (calendar panel takes up entire screen?)                              // 7279
  // TODO(jelbourn): input behavior (masking? auto-complete?)                                                          // 7280
  // TODO(jelbourn): UTC mode                                                                                          // 7281
  // TODO(jelbourn): RTL                                                                                               // 7282
                                                                                                                       // 7283
                                                                                                                       // 7284
  angular.module('material.components.datepicker')                                                                     // 7285
      .directive('mdDatepicker', datePickerDirective);                                                                 // 7286
                                                                                                                       // 7287
  /**                                                                                                                  // 7288
   * @ngdoc directive                                                                                                  // 7289
   * @name mdDatepicker                                                                                                // 7290
   * @module material.components.datepicker                                                                            // 7291
   *                                                                                                                   // 7292
   * @param {Date} ng-model The component's model. Expects a JavaScript Date object.                                   // 7293
   * @param {expression=} ng-change Expression evaluated when the model value changes.                                 // 7294
   * @param {Date=} md-min-date Expression representing a min date (inclusive).                                        // 7295
   * @param {Date=} md-max-date Expression representing a max date (inclusive).                                        // 7296
   * @param {boolean=} disabled Whether the datepicker is disabled.                                                    // 7297
   * @param {boolean=} required Whether a value is required for the datepicker.                                        // 7298
   *                                                                                                                   // 7299
   * @description                                                                                                      // 7300
   * `<md-datepicker>` is a component used to select a single date.                                                    // 7301
   * For information on how to configure internationalization for the date picker,                                     // 7302
   * see `$mdDateLocaleProvider`.                                                                                      // 7303
   *                                                                                                                   // 7304
   * This component supports [ngMessages](https://docs.angularjs.org/api/ngMessages/directive/ngMessages).             // 7305
   * Supported attributes are:                                                                                         // 7306
   * * `required`: whether a required date is not set.                                                                 // 7307
   * * `mindate`: whether the selected date is before the minimum allowed date.                                        // 7308
   * * `maxdate`: whether the selected date is after the maximum allowed date.                                         // 7309
   *                                                                                                                   // 7310
   * @usage                                                                                                            // 7311
   * <hljs lang="html">                                                                                                // 7312
   *   <md-datepicker ng-model="birthday"></md-datepicker>                                                             // 7313
   * </hljs>                                                                                                           // 7314
   *                                                                                                                   // 7315
   */                                                                                                                  // 7316
  function datePickerDirective() {                                                                                     // 7317
    return {                                                                                                           // 7318
      template:                                                                                                        // 7319
          // Buttons are not in the tab order because users can open the calendar via keyboard                         // 7320
          // interaction on the text input, and multiple tab stops for one component (picker)                          // 7321
          // may be confusing.                                                                                         // 7322
          '<md-button class="md-datepicker-button md-icon-button" type="button" ' +                                    // 7323
              'tabindex="-1" aria-hidden="true" ' +                                                                    // 7324
              'ng-click="ctrl.openCalendarPane($event)">' +                                                            // 7325
            '<md-icon class="md-datepicker-calendar-icon" md-svg-icon="md-calendar"></md-icon>' +                      // 7326
          '</md-button>' +                                                                                             // 7327
          '<div class="md-datepicker-input-container" ' +                                                              // 7328
              'ng-class="{\'md-datepicker-focused\': ctrl.isFocused}">' +                                              // 7329
            '<input class="md-datepicker-input" aria-haspopup="true" ' +                                               // 7330
                'ng-focus="ctrl.setFocused(true)" ng-blur="ctrl.setFocused(false)">' +                                 // 7331
            '<md-button type="button" md-no-ink ' +                                                                    // 7332
                'class="md-datepicker-triangle-button md-icon-button" ' +                                              // 7333
                'ng-click="ctrl.openCalendarPane($event)" ' +                                                          // 7334
                'aria-label="{{::ctrl.dateLocale.msgOpenCalendar}}">' +                                                // 7335
              '<div class="md-datepicker-expand-triangle"></div>' +                                                    // 7336
            '</md-button>' +                                                                                           // 7337
          '</div>' +                                                                                                   // 7338
                                                                                                                       // 7339
          // This pane will be detached from here and re-attached to the document body.                                // 7340
          '<div class="md-datepicker-calendar-pane md-whiteframe-z1">' +                                               // 7341
            '<div class="md-datepicker-input-mask">' +                                                                 // 7342
              '<div class="md-datepicker-input-mask-opaque"></div>' +                                                  // 7343
            '</div>' +                                                                                                 // 7344
            '<div class="md-datepicker-calendar">' +                                                                   // 7345
              '<md-calendar role="dialog" aria-label="{{::ctrl.dateLocale.msgCalendar}}" ' +                           // 7346
                  'md-min-date="ctrl.minDate" md-max-date="ctrl.maxDate"' +                                            // 7347
                  'ng-model="ctrl.date" ng-if="ctrl.isCalendarOpen">' +                                                // 7348
              '</md-calendar>' +                                                                                       // 7349
            '</div>' +                                                                                                 // 7350
          '</div>',                                                                                                    // 7351
      require: ['ngModel', 'mdDatepicker'],                                                                            // 7352
      scope: {                                                                                                         // 7353
        minDate: '=mdMinDate',                                                                                         // 7354
        maxDate: '=mdMaxDate',                                                                                         // 7355
        placeholder: '@mdPlaceholder'                                                                                  // 7356
      },                                                                                                               // 7357
      controller: DatePickerCtrl,                                                                                      // 7358
      controllerAs: 'ctrl',                                                                                            // 7359
      bindToController: true,                                                                                          // 7360
      link: function(scope, element, attr, controllers) {                                                              // 7361
        var ngModelCtrl = controllers[0];                                                                              // 7362
        var mdDatePickerCtrl = controllers[1];                                                                         // 7363
                                                                                                                       // 7364
        mdDatePickerCtrl.configureNgModel(ngModelCtrl);                                                                // 7365
      }                                                                                                                // 7366
    };                                                                                                                 // 7367
  }                                                                                                                    // 7368
                                                                                                                       // 7369
  /** Additional offset for the input's `size` attribute, which is updated based on its content. */                    // 7370
  var EXTRA_INPUT_SIZE = 3;                                                                                            // 7371
                                                                                                                       // 7372
  /** Class applied to the container if the date is invalid. */                                                        // 7373
  var INVALID_CLASS = 'md-datepicker-invalid';                                                                         // 7374
                                                                                                                       // 7375
  /** Default time in ms to debounce input event by. */                                                                // 7376
  var DEFAULT_DEBOUNCE_INTERVAL = 500;                                                                                 // 7377
                                                                                                                       // 7378
  /**                                                                                                                  // 7379
   * Height of the calendar pane used to check if the pane is going outside the boundary of                            // 7380
   * the viewport. See calendar.scss for how $md-calendar-height is computed; an extra 20px is                         // 7381
   * also added to space the pane away from the exact edge of the screen.                                              // 7382
   *                                                                                                                   // 7383
   *  This is computed statically now, but can be changed to be measured if the circumstances                          // 7384
   *  of calendar sizing are changed.                                                                                  // 7385
   */                                                                                                                  // 7386
  var CALENDAR_PANE_HEIGHT = 368;                                                                                      // 7387
                                                                                                                       // 7388
  /**                                                                                                                  // 7389
   * Width of the calendar pane used to check if the pane is going outside the boundary of                             // 7390
   * the viewport. See calendar.scss for how $md-calendar-width is computed; an extra 20px is                          // 7391
   * also added to space the pane away from the exact edge of the screen.                                              // 7392
   *                                                                                                                   // 7393
   *  This is computed statically now, but can be changed to be measured if the circumstances                          // 7394
   *  of calendar sizing are changed.                                                                                  // 7395
   */                                                                                                                  // 7396
  var CALENDAR_PANE_WIDTH = 360;                                                                                       // 7397
                                                                                                                       // 7398
  /**                                                                                                                  // 7399
   * Controller for md-datepicker.                                                                                     // 7400
   *                                                                                                                   // 7401
   * @ngInject @constructor                                                                                            // 7402
   */                                                                                                                  // 7403
  function DatePickerCtrl($scope, $element, $attrs, $compile, $timeout, $mdConstant, $mdTheming,                       // 7404
      $mdUtil, $mdDateLocale, $$mdDateUtil, $$rAF) {                                                                   // 7405
    /** @final */                                                                                                      // 7406
    this.$compile = $compile;                                                                                          // 7407
                                                                                                                       // 7408
    /** @final */                                                                                                      // 7409
    this.$timeout = $timeout;                                                                                          // 7410
                                                                                                                       // 7411
    /** @final */                                                                                                      // 7412
    this.dateLocale = $mdDateLocale;                                                                                   // 7413
                                                                                                                       // 7414
    /** @final */                                                                                                      // 7415
    this.dateUtil = $$mdDateUtil;                                                                                      // 7416
                                                                                                                       // 7417
    /** @final */                                                                                                      // 7418
    this.$mdConstant = $mdConstant;                                                                                    // 7419
                                                                                                                       // 7420
    /* @final */                                                                                                       // 7421
    this.$mdUtil = $mdUtil;                                                                                            // 7422
                                                                                                                       // 7423
    /** @final */                                                                                                      // 7424
    this.$$rAF = $$rAF;                                                                                                // 7425
                                                                                                                       // 7426
    /** @type {!angular.NgModelController} */                                                                          // 7427
    this.ngModelCtrl = null;                                                                                           // 7428
                                                                                                                       // 7429
    /** @type {HTMLInputElement} */                                                                                    // 7430
    this.inputElement = $element[0].querySelector('input');                                                            // 7431
                                                                                                                       // 7432
    /** @final {!angular.JQLite} */                                                                                    // 7433
    this.ngInputElement = angular.element(this.inputElement);                                                          // 7434
                                                                                                                       // 7435
    /** @type {HTMLElement} */                                                                                         // 7436
    this.inputContainer = $element[0].querySelector('.md-datepicker-input-container');                                 // 7437
                                                                                                                       // 7438
    /** @type {HTMLElement} Floating calendar pane. */                                                                 // 7439
    this.calendarPane = $element[0].querySelector('.md-datepicker-calendar-pane');                                     // 7440
                                                                                                                       // 7441
    /** @type {HTMLElement} Calendar icon button. */                                                                   // 7442
    this.calendarButton = $element[0].querySelector('.md-datepicker-button');                                          // 7443
                                                                                                                       // 7444
    /**                                                                                                                // 7445
     * Element covering everything but the input in the top of the floating calendar pane.                             // 7446
     * @type {HTMLElement}                                                                                             // 7447
     */                                                                                                                // 7448
    this.inputMask = $element[0].querySelector('.md-datepicker-input-mask-opaque');                                    // 7449
                                                                                                                       // 7450
    /** @final {!angular.JQLite} */                                                                                    // 7451
    this.$element = $element;                                                                                          // 7452
                                                                                                                       // 7453
    /** @final {!angular.Attributes} */                                                                                // 7454
    this.$attrs = $attrs;                                                                                              // 7455
                                                                                                                       // 7456
    /** @final {!angular.Scope} */                                                                                     // 7457
    this.$scope = $scope;                                                                                              // 7458
                                                                                                                       // 7459
    /** @type {Date} */                                                                                                // 7460
    this.date = null;                                                                                                  // 7461
                                                                                                                       // 7462
    /** @type {boolean} */                                                                                             // 7463
    this.isFocused = false;                                                                                            // 7464
                                                                                                                       // 7465
    /** @type {boolean} */                                                                                             // 7466
    this.isDisabled;                                                                                                   // 7467
    this.setDisabled($element[0].disabled || angular.isString($attrs['disabled']));                                    // 7468
                                                                                                                       // 7469
    /** @type {boolean} Whether the date-picker's calendar pane is open. */                                            // 7470
    this.isCalendarOpen = false;                                                                                       // 7471
                                                                                                                       // 7472
    /**                                                                                                                // 7473
     * Element from which the calendar pane was opened. Keep track of this so that we can return                       // 7474
     * focus to it when the pane is closed.                                                                            // 7475
     * @type {HTMLElement}                                                                                             // 7476
     */                                                                                                                // 7477
    this.calendarPaneOpenedFrom = null;                                                                                // 7478
                                                                                                                       // 7479
    this.calendarPane.id = 'md-date-pane' + $mdUtil.nextUid();                                                         // 7480
                                                                                                                       // 7481
    $mdTheming($element);                                                                                              // 7482
                                                                                                                       // 7483
    /** Pre-bound click handler is saved so that the event listener can be removed. */                                 // 7484
    this.bodyClickHandler = angular.bind(this, this.handleBodyClick);                                                  // 7485
                                                                                                                       // 7486
    /** Pre-bound resize handler so that the event listener can be removed. */                                         // 7487
    this.windowResizeHandler = $mdUtil.debounce(angular.bind(this, this.closeCalendarPane), 100);                      // 7488
                                                                                                                       // 7489
    // Unless the user specifies so, the datepicker should not be a tab stop.                                          // 7490
    // This is necessary because ngAria might add a tabindex to anything with an ng-model                              // 7491
    // (based on whether or not the user has turned that particular feature on/off).                                   // 7492
    if (!$attrs['tabindex']) {                                                                                         // 7493
      $element.attr('tabindex', '-1');                                                                                 // 7494
    }                                                                                                                  // 7495
                                                                                                                       // 7496
    this.installPropertyInterceptors();                                                                                // 7497
    this.attachChangeListeners();                                                                                      // 7498
    this.attachInteractionListeners();                                                                                 // 7499
                                                                                                                       // 7500
    var self = this;                                                                                                   // 7501
    $scope.$on('$destroy', function() {                                                                                // 7502
      self.detachCalendarPane();                                                                                       // 7503
    });                                                                                                                // 7504
  }                                                                                                                    // 7505
  DatePickerCtrl.$inject = ["$scope", "$element", "$attrs", "$compile", "$timeout", "$mdConstant", "$mdTheming", "$mdUtil", "$mdDateLocale", "$$mdDateUtil", "$$rAF"];
                                                                                                                       // 7507
  /**                                                                                                                  // 7508
   * Sets up the controller's reference to ngModelController.                                                          // 7509
   * @param {!angular.NgModelController} ngModelCtrl                                                                   // 7510
   */                                                                                                                  // 7511
  DatePickerCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                  // 7512
    this.ngModelCtrl = ngModelCtrl;                                                                                    // 7513
                                                                                                                       // 7514
    var self = this;                                                                                                   // 7515
    ngModelCtrl.$render = function() {                                                                                 // 7516
      self.date = self.ngModelCtrl.$viewValue;                                                                         // 7517
      self.inputElement.value = self.dateLocale.formatDate(self.date);                                                 // 7518
      self.resizeInputElement();                                                                                       // 7519
      self.setErrorFlags();                                                                                            // 7520
    };                                                                                                                 // 7521
  };                                                                                                                   // 7522
                                                                                                                       // 7523
  /**                                                                                                                  // 7524
   * Attach event listeners for both the text input and the md-calendar.                                               // 7525
   * Events are used instead of ng-model so that updates don't infinitely update the other                             // 7526
   * on a change. This should also be more performant than using a $watch.                                             // 7527
   */                                                                                                                  // 7528
  DatePickerCtrl.prototype.attachChangeListeners = function() {                                                        // 7529
    var self = this;                                                                                                   // 7530
                                                                                                                       // 7531
    self.$scope.$on('md-calendar-change', function(event, date) {                                                      // 7532
      self.ngModelCtrl.$setViewValue(date);                                                                            // 7533
      self.date = date;                                                                                                // 7534
      self.inputElement.value = self.dateLocale.formatDate(date);                                                      // 7535
      self.closeCalendarPane();                                                                                        // 7536
      self.resizeInputElement();                                                                                       // 7537
      self.inputContainer.classList.remove(INVALID_CLASS);                                                             // 7538
    });                                                                                                                // 7539
                                                                                                                       // 7540
    self.ngInputElement.on('input', angular.bind(self, self.resizeInputElement));                                      // 7541
    // TODO(chenmike): Add ability for users to specify this interval.                                                 // 7542
    self.ngInputElement.on('input', self.$mdUtil.debounce(self.handleInputEvent,                                       // 7543
        DEFAULT_DEBOUNCE_INTERVAL, self));                                                                             // 7544
  };                                                                                                                   // 7545
                                                                                                                       // 7546
  /** Attach event listeners for user interaction. */                                                                  // 7547
  DatePickerCtrl.prototype.attachInteractionListeners = function() {                                                   // 7548
    var self = this;                                                                                                   // 7549
    var $scope = this.$scope;                                                                                          // 7550
    var keyCodes = this.$mdConstant.KEY_CODE;                                                                          // 7551
                                                                                                                       // 7552
    // Add event listener through angular so that we can triggerHandler in unit tests.                                 // 7553
    self.ngInputElement.on('keydown', function(event) {                                                                // 7554
      if (event.altKey && event.keyCode == keyCodes.DOWN_ARROW) {                                                      // 7555
        self.openCalendarPane(event);                                                                                  // 7556
        $scope.$digest();                                                                                              // 7557
      }                                                                                                                // 7558
    });                                                                                                                // 7559
                                                                                                                       // 7560
    $scope.$on('md-calendar-close', function() {                                                                       // 7561
      self.closeCalendarPane();                                                                                        // 7562
    });                                                                                                                // 7563
  };                                                                                                                   // 7564
                                                                                                                       // 7565
  /**                                                                                                                  // 7566
   * Capture properties set to the date-picker and imperitively handle internal changes.                               // 7567
   * This is done to avoid setting up additional $watches.                                                             // 7568
   */                                                                                                                  // 7569
  DatePickerCtrl.prototype.installPropertyInterceptors = function() {                                                  // 7570
    var self = this;                                                                                                   // 7571
                                                                                                                       // 7572
    if (this.$attrs['ngDisabled']) {                                                                                   // 7573
      // The expression is to be evaluated against the directive element's scope and not                               // 7574
      // the directive's isolate scope.                                                                                // 7575
      var scope = this.$mdUtil.validateScope(this.$element) ? this.$element.scope() : null;                            // 7576
                                                                                                                       // 7577
      if ( scope ) {                                                                                                   // 7578
        scope.$watch(this.$attrs['ngDisabled'], function(isDisabled) {                                                 // 7579
          self.setDisabled(isDisabled);                                                                                // 7580
        });                                                                                                            // 7581
      }                                                                                                                // 7582
    }                                                                                                                  // 7583
                                                                                                                       // 7584
    Object.defineProperty(this, 'placeholder', {                                                                       // 7585
      get: function() { return self.inputElement.placeholder; },                                                       // 7586
      set: function(value) { self.inputElement.placeholder = value || ''; }                                            // 7587
    });                                                                                                                // 7588
  };                                                                                                                   // 7589
                                                                                                                       // 7590
  /**                                                                                                                  // 7591
   * Sets whether the date-picker is disabled.                                                                         // 7592
   * @param {boolean} isDisabled                                                                                       // 7593
   */                                                                                                                  // 7594
  DatePickerCtrl.prototype.setDisabled = function(isDisabled) {                                                        // 7595
    this.isDisabled = isDisabled;                                                                                      // 7596
    this.inputElement.disabled = isDisabled;                                                                           // 7597
    this.calendarButton.disabled = isDisabled;                                                                         // 7598
  };                                                                                                                   // 7599
                                                                                                                       // 7600
  /**                                                                                                                  // 7601
   * Sets the custom ngModel.$error flags to be consumed by ngMessages. Flags are:                                     // 7602
   *   - mindate: whether the selected date is before the minimum date.                                                // 7603
   *   - maxdate: whether the selected flag is after the maximum date.                                                 // 7604
   */                                                                                                                  // 7605
  DatePickerCtrl.prototype.setErrorFlags = function() {                                                                // 7606
    if (this.dateUtil.isValidDate(this.date)) {                                                                        // 7607
      if (this.dateUtil.isValidDate(this.minDate)) {                                                                   // 7608
        this.ngModelCtrl.$error['mindate'] = this.date < this.minDate;                                                 // 7609
      }                                                                                                                // 7610
                                                                                                                       // 7611
      if (this.dateUtil.isValidDate(this.maxDate)) {                                                                   // 7612
        this.ngModelCtrl.$error['maxdate'] = this.date > this.maxDate;                                                 // 7613
      }                                                                                                                // 7614
    }                                                                                                                  // 7615
  };                                                                                                                   // 7616
                                                                                                                       // 7617
  /** Resizes the input element based on the size of its content. */                                                   // 7618
  DatePickerCtrl.prototype.resizeInputElement = function() {                                                           // 7619
    this.inputElement.size = this.inputElement.value.length + EXTRA_INPUT_SIZE;                                        // 7620
  };                                                                                                                   // 7621
                                                                                                                       // 7622
  /**                                                                                                                  // 7623
   * Sets the model value if the user input is a valid date.                                                           // 7624
   * Adds an invalid class to the input element if not.                                                                // 7625
   */                                                                                                                  // 7626
  DatePickerCtrl.prototype.handleInputEvent = function() {                                                             // 7627
    var inputString = this.inputElement.value;                                                                         // 7628
    var parsedDate = this.dateLocale.parseDate(inputString);                                                           // 7629
    this.dateUtil.setDateTimeToMidnight(parsedDate);                                                                   // 7630
    if (inputString === '') {                                                                                          // 7631
      this.ngModelCtrl.$setViewValue(null);                                                                            // 7632
      this.date = null;                                                                                                // 7633
      this.inputContainer.classList.remove(INVALID_CLASS);                                                             // 7634
    } else if (this.dateUtil.isValidDate(parsedDate) &&                                                                // 7635
        this.dateLocale.isDateComplete(inputString) &&                                                                 // 7636
        this.dateUtil.isDateWithinRange(parsedDate, this.minDate, this.maxDate)) {                                     // 7637
      this.ngModelCtrl.$setViewValue(parsedDate);                                                                      // 7638
      this.date = parsedDate;                                                                                          // 7639
      this.inputContainer.classList.remove(INVALID_CLASS);                                                             // 7640
    } else {                                                                                                           // 7641
      // If there's an input string, it's an invalid date.                                                             // 7642
      this.inputContainer.classList.toggle(INVALID_CLASS, inputString);                                                // 7643
    }                                                                                                                  // 7644
  };                                                                                                                   // 7645
                                                                                                                       // 7646
  /** Position and attach the floating calendar to the document. */                                                    // 7647
  DatePickerCtrl.prototype.attachCalendarPane = function() {                                                           // 7648
    var calendarPane = this.calendarPane;                                                                              // 7649
    calendarPane.style.transform = '';                                                                                 // 7650
    this.$element.addClass('md-datepicker-open');                                                                      // 7651
                                                                                                                       // 7652
    var elementRect = this.inputContainer.getBoundingClientRect();                                                     // 7653
    var bodyRect = document.body.getBoundingClientRect();                                                              // 7654
                                                                                                                       // 7655
    // Check to see if the calendar pane would go off the screen. If so, adjust position                               // 7656
    // accordingly to keep it within the viewport.                                                                     // 7657
    var paneTop = elementRect.top - bodyRect.top;                                                                      // 7658
    var paneLeft = elementRect.left - bodyRect.left;                                                                   // 7659
                                                                                                                       // 7660
    // If the right edge of the pane would be off the screen and shifting it left by the                               // 7661
    // difference would not go past the left edge of the screen. If the calendar pane is too                           // 7662
    // big to fit on the screen at all, move it to the left of the screen and scale the entire                         // 7663
    // element down to fit.                                                                                            // 7664
    if (paneLeft + CALENDAR_PANE_WIDTH > bodyRect.right) {                                                             // 7665
      if (bodyRect.right - CALENDAR_PANE_WIDTH > 0) {                                                                  // 7666
        paneLeft = bodyRect.right - CALENDAR_PANE_WIDTH;                                                               // 7667
      } else {                                                                                                         // 7668
        paneLeft = 0;                                                                                                  // 7669
        var scale = bodyRect.width / CALENDAR_PANE_WIDTH;                                                              // 7670
        calendarPane.style.transform = 'scale(' + scale + ')';                                                         // 7671
      }                                                                                                                // 7672
                                                                                                                       // 7673
      calendarPane.classList.add('md-datepicker-pos-adjusted');                                                        // 7674
    }                                                                                                                  // 7675
                                                                                                                       // 7676
                                                                                                                       // 7677
    if (paneLeft + CALENDAR_PANE_WIDTH > bodyRect.right &&                                                             // 7678
        bodyRect.right - CALENDAR_PANE_WIDTH > 0) {                                                                    // 7679
      paneLeft = bodyRect.right - CALENDAR_PANE_WIDTH;                                                                 // 7680
      calendarPane.classList.add('md-datepicker-pos-adjusted');                                                        // 7681
    }                                                                                                                  // 7682
                                                                                                                       // 7683
    // If the bottom edge of the pane would be off the screen and shifting it up by the                                // 7684
    // difference would not go past the top edge of the screen.                                                        // 7685
    if (paneTop + CALENDAR_PANE_HEIGHT > bodyRect.bottom &&                                                            // 7686
        bodyRect.bottom - CALENDAR_PANE_HEIGHT > 0) {                                                                  // 7687
      paneTop = bodyRect.bottom - CALENDAR_PANE_HEIGHT;                                                                // 7688
      calendarPane.classList.add('md-datepicker-pos-adjusted');                                                        // 7689
    }                                                                                                                  // 7690
                                                                                                                       // 7691
    calendarPane.style.left = paneLeft + 'px';                                                                         // 7692
    calendarPane.style.top = paneTop + 'px';                                                                           // 7693
    document.body.appendChild(calendarPane);                                                                           // 7694
                                                                                                                       // 7695
    // The top of the calendar pane is a transparent box that shows the text input underneath.                         // 7696
    // Since the pane is floating, though, the page underneath the pane *adjacent* to the input is                     // 7697
    // also shown unless we cover it up. The inputMask does this by filling up the remaining space                     // 7698
    // based on the width of the input.                                                                                // 7699
    this.inputMask.style.left = elementRect.width + 'px';                                                              // 7700
                                                                                                                       // 7701
    // Add CSS class after one frame to trigger open animation.                                                        // 7702
    this.$$rAF(function() {                                                                                            // 7703
      calendarPane.classList.add('md-pane-open');                                                                      // 7704
    });                                                                                                                // 7705
  };                                                                                                                   // 7706
                                                                                                                       // 7707
  /** Detach the floating calendar pane from the document. */                                                          // 7708
  DatePickerCtrl.prototype.detachCalendarPane = function() {                                                           // 7709
    this.$element.removeClass('md-datepicker-open');                                                                   // 7710
    this.calendarPane.classList.remove('md-pane-open');                                                                // 7711
    this.calendarPane.classList.remove('md-datepicker-pos-adjusted');                                                  // 7712
                                                                                                                       // 7713
    if (this.calendarPane.parentNode) {                                                                                // 7714
      // Use native DOM removal because we do not want any of the angular state of this element                        // 7715
      // to be disposed.                                                                                               // 7716
      this.calendarPane.parentNode.removeChild(this.calendarPane);                                                     // 7717
    }                                                                                                                  // 7718
  };                                                                                                                   // 7719
                                                                                                                       // 7720
  /**                                                                                                                  // 7721
   * Open the floating calendar pane.                                                                                  // 7722
   * @param {Event} event                                                                                              // 7723
   */                                                                                                                  // 7724
  DatePickerCtrl.prototype.openCalendarPane = function(event) {                                                        // 7725
    if (!this.isCalendarOpen && !this.isDisabled) {                                                                    // 7726
      this.isCalendarOpen = true;                                                                                      // 7727
      this.calendarPaneOpenedFrom = event.target;                                                                      // 7728
      this.attachCalendarPane();                                                                                       // 7729
      this.focusCalendar();                                                                                            // 7730
                                                                                                                       // 7731
      // Because the calendar pane is attached directly to the body, it is possible that the                           // 7732
      // rest of the component (input, etc) is in a different scrolling container, such as                             // 7733
      // an md-content. This means that, if the container is scrolled, the pane would remain                           // 7734
      // stationary. To remedy this, we disable scrolling while the calendar pane is open, which                       // 7735
      // also matches the native behavior for things like `<select>` on Mac and Windows.                               // 7736
      this.$mdUtil.disableScrollAround(this.calendarPane);                                                             // 7737
                                                                                                                       // 7738
      // Attach click listener inside of a timeout because, if this open call was triggered by a                       // 7739
      // click, we don't want it to be immediately propogated up to the body and handled.                              // 7740
      var self = this;                                                                                                 // 7741
      this.$mdUtil.nextTick(function() {                                                                               // 7742
        document.body.addEventListener('click', self.bodyClickHandler);                                                // 7743
      }, false);                                                                                                       // 7744
                                                                                                                       // 7745
      window.addEventListener('resize', this.windowResizeHandler);                                                     // 7746
    }                                                                                                                  // 7747
  };                                                                                                                   // 7748
                                                                                                                       // 7749
  /** Close the floating calendar pane. */                                                                             // 7750
  DatePickerCtrl.prototype.closeCalendarPane = function() {                                                            // 7751
    this.isCalendarOpen = false;                                                                                       // 7752
    this.detachCalendarPane();                                                                                         // 7753
    this.calendarPaneOpenedFrom.focus();                                                                               // 7754
    this.calendarPaneOpenedFrom = null;                                                                                // 7755
    this.$mdUtil.enableScrolling();                                                                                    // 7756
                                                                                                                       // 7757
    document.body.removeEventListener('click', this.bodyClickHandler);                                                 // 7758
    window.removeEventListener('resize', this.windowResizeHandler);                                                    // 7759
  };                                                                                                                   // 7760
                                                                                                                       // 7761
  /** Gets the controller instance for the calendar in the floating pane. */                                           // 7762
  DatePickerCtrl.prototype.getCalendarCtrl = function() {                                                              // 7763
    return angular.element(this.calendarPane.querySelector('md-calendar')).controller('mdCalendar');                   // 7764
  };                                                                                                                   // 7765
                                                                                                                       // 7766
  /** Focus the calendar in the floating pane. */                                                                      // 7767
  DatePickerCtrl.prototype.focusCalendar = function() {                                                                // 7768
    // Use a timeout in order to allow the calendar to be rendered, as it is gated behind an ng-if.                    // 7769
    var self = this;                                                                                                   // 7770
    this.$mdUtil.nextTick(function() {                                                                                 // 7771
      self.getCalendarCtrl().focus();                                                                                  // 7772
    }, false);                                                                                                         // 7773
  };                                                                                                                   // 7774
                                                                                                                       // 7775
  /**                                                                                                                  // 7776
   * Sets whether the input is currently focused.                                                                      // 7777
   * @param {boolean} isFocused                                                                                        // 7778
   */                                                                                                                  // 7779
  DatePickerCtrl.prototype.setFocused = function(isFocused) {                                                          // 7780
    this.isFocused = isFocused;                                                                                        // 7781
  };                                                                                                                   // 7782
                                                                                                                       // 7783
  /**                                                                                                                  // 7784
   * Handles a click on the document body when the floating calendar pane is open.                                     // 7785
   * Closes the floating calendar pane if the click is not inside of it.                                               // 7786
   * @param {MouseEvent} event                                                                                         // 7787
   */                                                                                                                  // 7788
  DatePickerCtrl.prototype.handleBodyClick = function(event) {                                                         // 7789
    if (this.isCalendarOpen) {                                                                                         // 7790
      // TODO(jelbourn): way want to also include the md-datepicker itself in this check.                              // 7791
      var isInCalendar = this.$mdUtil.getClosest(event.target, 'md-calendar');                                         // 7792
      if (!isInCalendar) {                                                                                             // 7793
        this.closeCalendarPane();                                                                                      // 7794
      }                                                                                                                // 7795
                                                                                                                       // 7796
      this.$scope.$digest();                                                                                           // 7797
    }                                                                                                                  // 7798
  };                                                                                                                   // 7799
})();                                                                                                                  // 7800
                                                                                                                       // 7801
})();                                                                                                                  // 7802
(function(){                                                                                                           // 7803
"use strict";                                                                                                          // 7804
                                                                                                                       // 7805
(function() {                                                                                                          // 7806
  'use strict';                                                                                                        // 7807
                                                                                                                       // 7808
  /**                                                                                                                  // 7809
   * Utility for performing date calculations to facilitate operation of the calendar and                              // 7810
   * datepicker.                                                                                                       // 7811
   */                                                                                                                  // 7812
  angular.module('material.components.datepicker').factory('$$mdDateUtil', function() {                                // 7813
    return {                                                                                                           // 7814
      getFirstDateOfMonth: getFirstDateOfMonth,                                                                        // 7815
      getNumberOfDaysInMonth: getNumberOfDaysInMonth,                                                                  // 7816
      getDateInNextMonth: getDateInNextMonth,                                                                          // 7817
      getDateInPreviousMonth: getDateInPreviousMonth,                                                                  // 7818
      isInNextMonth: isInNextMonth,                                                                                    // 7819
      isInPreviousMonth: isInPreviousMonth,                                                                            // 7820
      getDateMidpoint: getDateMidpoint,                                                                                // 7821
      isSameMonthAndYear: isSameMonthAndYear,                                                                          // 7822
      getWeekOfMonth: getWeekOfMonth,                                                                                  // 7823
      incrementDays: incrementDays,                                                                                    // 7824
      incrementMonths: incrementMonths,                                                                                // 7825
      getLastDateOfMonth: getLastDateOfMonth,                                                                          // 7826
      isSameDay: isSameDay,                                                                                            // 7827
      getMonthDistance: getMonthDistance,                                                                              // 7828
      isValidDate: isValidDate,                                                                                        // 7829
      setDateTimeToMidnight: setDateTimeToMidnight,                                                                    // 7830
      createDateAtMidnight: createDateAtMidnight,                                                                      // 7831
      isDateWithinRange: isDateWithinRange                                                                             // 7832
    };                                                                                                                 // 7833
                                                                                                                       // 7834
    /**                                                                                                                // 7835
     * Gets the first day of the month for the given date's month.                                                     // 7836
     * @param {Date} date                                                                                              // 7837
     * @returns {Date}                                                                                                 // 7838
     */                                                                                                                // 7839
    function getFirstDateOfMonth(date) {                                                                               // 7840
      return new Date(date.getFullYear(), date.getMonth(), 1);                                                         // 7841
    }                                                                                                                  // 7842
                                                                                                                       // 7843
    /**                                                                                                                // 7844
     * Gets the number of days in the month for the given date's month.                                                // 7845
     * @param date                                                                                                     // 7846
     * @returns {number}                                                                                               // 7847
     */                                                                                                                // 7848
    function getNumberOfDaysInMonth(date) {                                                                            // 7849
      return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();                                           // 7850
    }                                                                                                                  // 7851
                                                                                                                       // 7852
    /**                                                                                                                // 7853
     * Get an arbitrary date in the month after the given date's month.                                                // 7854
     * @param date                                                                                                     // 7855
     * @returns {Date}                                                                                                 // 7856
     */                                                                                                                // 7857
    function getDateInNextMonth(date) {                                                                                // 7858
      return new Date(date.getFullYear(), date.getMonth() + 1, 1);                                                     // 7859
    }                                                                                                                  // 7860
                                                                                                                       // 7861
    /**                                                                                                                // 7862
     * Get an arbitrary date in the month before the given date's month.                                               // 7863
     * @param date                                                                                                     // 7864
     * @returns {Date}                                                                                                 // 7865
     */                                                                                                                // 7866
    function getDateInPreviousMonth(date) {                                                                            // 7867
      return new Date(date.getFullYear(), date.getMonth() - 1, 1);                                                     // 7868
    }                                                                                                                  // 7869
                                                                                                                       // 7870
    /**                                                                                                                // 7871
     * Gets whether two dates have the same month and year.                                                            // 7872
     * @param {Date} d1                                                                                                // 7873
     * @param {Date} d2                                                                                                // 7874
     * @returns {boolean}                                                                                              // 7875
     */                                                                                                                // 7876
    function isSameMonthAndYear(d1, d2) {                                                                              // 7877
      return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth();                                 // 7878
    }                                                                                                                  // 7879
                                                                                                                       // 7880
    /**                                                                                                                // 7881
     * Gets whether two dates are the same day (not not necesarily the same time).                                     // 7882
     * @param {Date} d1                                                                                                // 7883
     * @param {Date} d2                                                                                                // 7884
     * @returns {boolean}                                                                                              // 7885
     */                                                                                                                // 7886
    function isSameDay(d1, d2) {                                                                                       // 7887
      return d1.getDate() == d2.getDate() && isSameMonthAndYear(d1, d2);                                               // 7888
    }                                                                                                                  // 7889
                                                                                                                       // 7890
    /**                                                                                                                // 7891
     * Gets whether a date is in the month immediately after some date.                                                // 7892
     * @param {Date} startDate The date from which to compare.                                                         // 7893
     * @param {Date} endDate The date to check.                                                                        // 7894
     * @returns {boolean}                                                                                              // 7895
     */                                                                                                                // 7896
    function isInNextMonth(startDate, endDate) {                                                                       // 7897
      var nextMonth = getDateInNextMonth(startDate);                                                                   // 7898
      return isSameMonthAndYear(nextMonth, endDate);                                                                   // 7899
    }                                                                                                                  // 7900
                                                                                                                       // 7901
    /**                                                                                                                // 7902
     * Gets whether a date is in the month immediately before some date.                                               // 7903
     * @param {Date} startDate The date from which to compare.                                                         // 7904
     * @param {Date} endDate The date to check.                                                                        // 7905
     * @returns {boolean}                                                                                              // 7906
     */                                                                                                                // 7907
    function isInPreviousMonth(startDate, endDate) {                                                                   // 7908
      var previousMonth = getDateInPreviousMonth(startDate);                                                           // 7909
      return isSameMonthAndYear(endDate, previousMonth);                                                               // 7910
    }                                                                                                                  // 7911
                                                                                                                       // 7912
    /**                                                                                                                // 7913
     * Gets the midpoint between two dates.                                                                            // 7914
     * @param {Date} d1                                                                                                // 7915
     * @param {Date} d2                                                                                                // 7916
     * @returns {Date}                                                                                                 // 7917
     */                                                                                                                // 7918
    function getDateMidpoint(d1, d2) {                                                                                 // 7919
      return createDateAtMidnight((d1.getTime() + d2.getTime()) / 2);                                                  // 7920
    }                                                                                                                  // 7921
                                                                                                                       // 7922
    /**                                                                                                                // 7923
     * Gets the week of the month that a given date occurs in.                                                         // 7924
     * @param {Date} date                                                                                              // 7925
     * @returns {number} Index of the week of the month (zero-based).                                                  // 7926
     */                                                                                                                // 7927
    function getWeekOfMonth(date) {                                                                                    // 7928
      var firstDayOfMonth = getFirstDateOfMonth(date);                                                                 // 7929
      return Math.floor((firstDayOfMonth.getDay() + date.getDate() - 1) / 7);                                          // 7930
    }                                                                                                                  // 7931
                                                                                                                       // 7932
    /**                                                                                                                // 7933
     * Gets a new date incremented by the given number of days. Number of days can be negative.                        // 7934
     * @param {Date} date                                                                                              // 7935
     * @param {number} numberOfDays                                                                                    // 7936
     * @returns {Date}                                                                                                 // 7937
     */                                                                                                                // 7938
    function incrementDays(date, numberOfDays) {                                                                       // 7939
      return new Date(date.getFullYear(), date.getMonth(), date.getDate() + numberOfDays);                             // 7940
    }                                                                                                                  // 7941
                                                                                                                       // 7942
    /**                                                                                                                // 7943
     * Gets a new date incremented by the given number of months. Number of months can be negative.                    // 7944
     * If the date of the given month does not match the target month, the date will be set to the                     // 7945
     * last day of the month.                                                                                          // 7946
     * @param {Date} date                                                                                              // 7947
     * @param {number} numberOfMonths                                                                                  // 7948
     * @returns {Date}                                                                                                 // 7949
     */                                                                                                                // 7950
    function incrementMonths(date, numberOfMonths) {                                                                   // 7951
      // If the same date in the target month does not actually exist, the Date object will                            // 7952
      // automatically advance *another* month by the number of missing days.                                          // 7953
      // For example, if you try to go from Jan. 30 to Feb. 30, you'll end up on March 2.                              // 7954
      // So, we check if the month overflowed and go to the last day of the target month instead.                      // 7955
      var dateInTargetMonth = new Date(date.getFullYear(), date.getMonth() + numberOfMonths, 1);                       // 7956
      var numberOfDaysInMonth = getNumberOfDaysInMonth(dateInTargetMonth);                                             // 7957
      if (numberOfDaysInMonth < date.getDate()) {                                                                      // 7958
        dateInTargetMonth.setDate(numberOfDaysInMonth);                                                                // 7959
      } else {                                                                                                         // 7960
        dateInTargetMonth.setDate(date.getDate());                                                                     // 7961
      }                                                                                                                // 7962
                                                                                                                       // 7963
      return dateInTargetMonth;                                                                                        // 7964
    }                                                                                                                  // 7965
                                                                                                                       // 7966
    /**                                                                                                                // 7967
     * Get the integer distance between two months. This *only* considers the month and year                           // 7968
     * portion of the Date instances.                                                                                  // 7969
     *                                                                                                                 // 7970
     * @param {Date} start                                                                                             // 7971
     * @param {Date} end                                                                                               // 7972
     * @returns {number} Number of months between `start` and `end`. If `end` is before `start`                        // 7973
     *     chronologically, this number will be negative.                                                              // 7974
     */                                                                                                                // 7975
    function getMonthDistance(start, end) {                                                                            // 7976
      return (12 * (end.getFullYear() - start.getFullYear())) + (end.getMonth() - start.getMonth());                   // 7977
    }                                                                                                                  // 7978
                                                                                                                       // 7979
    /**                                                                                                                // 7980
     * Gets the last day of the month for the given date.                                                              // 7981
     * @param {Date} date                                                                                              // 7982
     * @returns {Date}                                                                                                 // 7983
     */                                                                                                                // 7984
    function getLastDateOfMonth(date) {                                                                                // 7985
      return new Date(date.getFullYear(), date.getMonth(), getNumberOfDaysInMonth(date));                              // 7986
    }                                                                                                                  // 7987
                                                                                                                       // 7988
    /**                                                                                                                // 7989
     * Checks whether a date is valid.                                                                                 // 7990
     * @param {Date} date                                                                                              // 7991
     * @return {boolean} Whether the date is a valid Date.                                                             // 7992
     */                                                                                                                // 7993
    function isValidDate(date) {                                                                                       // 7994
      return date != null && date.getTime && !isNaN(date.getTime());                                                   // 7995
    }                                                                                                                  // 7996
                                                                                                                       // 7997
    /**                                                                                                                // 7998
     * Sets a date's time to midnight.                                                                                 // 7999
     * @param {Date} date                                                                                              // 8000
     */                                                                                                                // 8001
    function setDateTimeToMidnight(date) {                                                                             // 8002
      if (isValidDate(date)) {                                                                                         // 8003
        date.setHours(0, 0, 0, 0);                                                                                     // 8004
      }                                                                                                                // 8005
    }                                                                                                                  // 8006
                                                                                                                       // 8007
    /**                                                                                                                // 8008
     * Creates a date with the time set to midnight.                                                                   // 8009
     * Drop-in replacement for two forms of the Date constructor:                                                      // 8010
     * 1. No argument for Date representing now.                                                                       // 8011
     * 2. Single-argument value representing number of seconds since Unix Epoch.                                       // 8012
     * @param {number=} opt_value                                                                                      // 8013
     * @return {Date} New date with time set to midnight.                                                              // 8014
     */                                                                                                                // 8015
    function createDateAtMidnight(opt_value) {                                                                         // 8016
      var date;                                                                                                        // 8017
      if (angular.isUndefined(opt_value)) {                                                                            // 8018
        date = new Date();                                                                                             // 8019
      } else {                                                                                                         // 8020
        date = new Date(opt_value);                                                                                    // 8021
      }                                                                                                                // 8022
      setDateTimeToMidnight(date);                                                                                     // 8023
      return date;                                                                                                     // 8024
    }                                                                                                                  // 8025
                                                                                                                       // 8026
     /**                                                                                                               // 8027
      * Checks if a date is within a min and max range.                                                                // 8028
      * If minDate or maxDate are not dates, they are ignored.                                                         // 8029
      * @param {Date} date                                                                                             // 8030
      * @param {Date} minDate                                                                                          // 8031
      * @param {Date} maxDate                                                                                          // 8032
      */                                                                                                               // 8033
     function isDateWithinRange(date, minDate, maxDate) {                                                              // 8034
       return (!angular.isDate(minDate) || minDate <= date) &&                                                         // 8035
           (!angular.isDate(maxDate) || maxDate >= date);                                                              // 8036
     }                                                                                                                 // 8037
  });                                                                                                                  // 8038
})();                                                                                                                  // 8039
                                                                                                                       // 8040
})();                                                                                                                  // 8041
(function(){                                                                                                           // 8042
"use strict";                                                                                                          // 8043
                                                                                                                       // 8044
/**                                                                                                                    // 8045
 * @ngdoc module                                                                                                       // 8046
 * @name material.components.dialog                                                                                    // 8047
 */                                                                                                                    // 8048
angular                                                                                                                // 8049
  .module('material.components.dialog', [                                                                              // 8050
    'material.core',                                                                                                   // 8051
    'material.components.backdrop'                                                                                     // 8052
  ])                                                                                                                   // 8053
  .directive('mdDialog', MdDialogDirective)                                                                            // 8054
  .provider('$mdDialog', MdDialogProvider);                                                                            // 8055
                                                                                                                       // 8056
function MdDialogDirective($$rAF, $mdTheming, $mdDialog) {                                                             // 8057
  return {                                                                                                             // 8058
    restrict: 'E',                                                                                                     // 8059
    link: function(scope, element, attr) {                                                                             // 8060
      $mdTheming(element);                                                                                             // 8061
      $$rAF(function() {                                                                                               // 8062
        var images;                                                                                                    // 8063
        var content = element[0].querySelector('md-dialog-content');                                                   // 8064
                                                                                                                       // 8065
        if (content) {                                                                                                 // 8066
          images = content.getElementsByTagName('img');                                                                // 8067
          addOverflowClass();                                                                                          // 8068
          //-- delayed image loading may impact scroll height, check after images are loaded                           // 8069
          angular.element(images).on('load', addOverflowClass);                                                        // 8070
        }                                                                                                              // 8071
                                                                                                                       // 8072
        scope.$on('$destroy', function() {                                                                             // 8073
          $mdDialog.destroy();                                                                                         // 8074
        });                                                                                                            // 8075
                                                                                                                       // 8076
        /**                                                                                                            // 8077
         *                                                                                                             // 8078
         */                                                                                                            // 8079
        function addOverflowClass() {                                                                                  // 8080
          element.toggleClass('md-content-overflow', content.scrollHeight > content.clientHeight);                     // 8081
        }                                                                                                              // 8082
                                                                                                                       // 8083
                                                                                                                       // 8084
      });                                                                                                              // 8085
    }                                                                                                                  // 8086
  };                                                                                                                   // 8087
}                                                                                                                      // 8088
MdDialogDirective.$inject = ["$$rAF", "$mdTheming", "$mdDialog"];                                                      // 8089
                                                                                                                       // 8090
/**                                                                                                                    // 8091
 * @ngdoc service                                                                                                      // 8092
 * @name $mdDialog                                                                                                     // 8093
 * @module material.components.dialog                                                                                  // 8094
 *                                                                                                                     // 8095
 * @description                                                                                                        // 8096
 * `$mdDialog` opens a dialog over the app to inform users about critical information or require                       // 8097
 *  them to make decisions. There are two approaches for setup: a simple promise API                                   // 8098
 *  and regular object syntax.                                                                                         // 8099
 *                                                                                                                     // 8100
 * ## Restrictions                                                                                                     // 8101
 *                                                                                                                     // 8102
 * - The dialog is always given an isolate scope.                                                                      // 8103
 * - The dialog's template must have an outer `<md-dialog>` element.                                                   // 8104
 *   Inside, use an `<md-dialog-content>` element for the dialog's content, and use                                    // 8105
 *   an element with class `md-actions` for the dialog's actions.                                                      // 8106
 * - Dialogs must cover the entire application to keep interactions inside of them.                                    // 8107
 * Use the `parent` option to change where dialogs are appended.                                                       // 8108
 *                                                                                                                     // 8109
 * ## Sizing                                                                                                           // 8110
 * - Complex dialogs can be sized with `flex="percentage"`, i.e. `flex="66"`.                                          // 8111
 * - Default max-width is 80% of the `rootElement` or `parent`.                                                        // 8112
 *                                                                                                                     // 8113
 * @usage                                                                                                              // 8114
 * <hljs lang="html">                                                                                                  // 8115
 * <div  ng-app="demoApp" ng-controller="EmployeeController">                                                          // 8116
 *   <div>                                                                                                             // 8117
 *     <md-button ng-click="showAlert()" class="md-raised md-warn">                                                    // 8118
 *       Employee Alert!                                                                                               // 8119
 *       </md-button>                                                                                                  // 8120
 *   </div>                                                                                                            // 8121
 *   <div>                                                                                                             // 8122
 *     <md-button ng-click="showDialog($event)" class="md-raised">                                                     // 8123
 *       Custom Dialog                                                                                                 // 8124
 *       </md-button>                                                                                                  // 8125
 *   </div>                                                                                                            // 8126
 *   <div>                                                                                                             // 8127
 *     <md-button ng-click="closeAlert()" ng-disabled="!hasAlert()" class="md-raised">                                 // 8128
 *       Close Alert                                                                                                   // 8129
 *     </md-button>                                                                                                    // 8130
 *   </div>                                                                                                            // 8131
 *   <div>                                                                                                             // 8132
 *     <md-button ng-click="showGreeting($event)" class="md-raised md-primary" >                                       // 8133
 *       Greet Employee                                                                                                // 8134
 *       </md-button>                                                                                                  // 8135
 *   </div>                                                                                                            // 8136
 * </div>                                                                                                              // 8137
 * </hljs>                                                                                                             // 8138
 *                                                                                                                     // 8139
 * ### JavaScript: object syntax                                                                                       // 8140
 * <hljs lang="js">                                                                                                    // 8141
 * (function(angular, undefined){                                                                                      // 8142
 *   "use strict";                                                                                                     // 8143
 *                                                                                                                     // 8144
 *   angular                                                                                                           // 8145
 *    .module('demoApp', ['ngMaterial'])                                                                               // 8146
 *    .controller('AppCtrl', AppController);                                                                           // 8147
 *                                                                                                                     // 8148
 *   function AppController($scope, $mdDialog) {                                                                       // 8149
 *     var alert;                                                                                                      // 8150
 *     $scope.showAlert = showAlert;                                                                                   // 8151
 *     $scope.showDialog = showDialog;                                                                                 // 8152
 *     $scope.items = [1, 2, 3];                                                                                       // 8153
 *                                                                                                                     // 8154
 *     // Internal method                                                                                              // 8155
 *     function showAlert() {                                                                                          // 8156
 *       alert = $mdDialog.alert({                                                                                     // 8157
 *         title: 'Attention',                                                                                         // 8158
 *         content: 'This is an example of how easy dialogs can be!',                                                  // 8159
 *         ok: 'Close'                                                                                                 // 8160
 *       });                                                                                                           // 8161
 *                                                                                                                     // 8162
 *       $mdDialog                                                                                                     // 8163
 *         .show( alert )                                                                                              // 8164
 *         .finally(function() {                                                                                       // 8165
 *           alert = undefined;                                                                                        // 8166
 *         });                                                                                                         // 8167
 *     }                                                                                                               // 8168
 *                                                                                                                     // 8169
 *     function showDialog($event) {                                                                                   // 8170
 *        var parentEl = angular.element(document.body);                                                               // 8171
 *        $mdDialog.show({                                                                                             // 8172
 *          parent: parentEl,                                                                                          // 8173
 *          targetEvent: $event,                                                                                       // 8174
 *          template:                                                                                                  // 8175
 *            '<md-dialog aria-label="List dialog">' +                                                                 // 8176
 *            '  <md-dialog-content>'+                                                                                 // 8177
 *            '    <md-list>'+                                                                                         // 8178
 *            '      <md-list-item ng-repeat="item in items">'+                                                        // 8179
 *            '       <p>Number {{item}}</p>' +                                                                        // 8180
 *            '      </md-item>'+                                                                                      // 8181
 *            '    </md-list>'+                                                                                        // 8182
 *            '  </md-dialog-content>' +                                                                               // 8183
 *            '  <div class="md-actions">' +                                                                           // 8184
 *            '    <md-button ng-click="closeDialog()" class="md-primary">' +                                          // 8185
 *            '      Close Dialog' +                                                                                   // 8186
 *            '    </md-button>' +                                                                                     // 8187
 *            '  </div>' +                                                                                             // 8188
 *            '</md-dialog>',                                                                                          // 8189
 *          locals: {                                                                                                  // 8190
 *            items: $scope.items                                                                                      // 8191
 *          },                                                                                                         // 8192
 *          controller: DialogController                                                                               // 8193
 *       });                                                                                                           // 8194
 *       function DialogController($scope, $mdDialog, items) {                                                         // 8195
 *         $scope.items = items;                                                                                       // 8196
 *         $scope.closeDialog = function() {                                                                           // 8197
 *           $mdDialog.hide();                                                                                         // 8198
 *         }                                                                                                           // 8199
 *       }                                                                                                             // 8200
 *     }                                                                                                               // 8201
 *   }                                                                                                                 // 8202
 * })(angular);                                                                                                        // 8203
 * </hljs>                                                                                                             // 8204
 *                                                                                                                     // 8205
 * ### JavaScript: promise API syntax, custom dialog template                                                          // 8206
 * <hljs lang="js">                                                                                                    // 8207
 * (function(angular, undefined){                                                                                      // 8208
 *   "use strict";                                                                                                     // 8209
 *                                                                                                                     // 8210
 *   angular                                                                                                           // 8211
 *     .module('demoApp', ['ngMaterial'])                                                                              // 8212
 *     .controller('EmployeeController', EmployeeEditor)                                                               // 8213
 *     .controller('GreetingController', GreetingController);                                                          // 8214
 *                                                                                                                     // 8215
 *   // Fictitious Employee Editor to show how to use simple and complex dialogs.                                      // 8216
 *                                                                                                                     // 8217
 *   function EmployeeEditor($scope, $mdDialog) {                                                                      // 8218
 *     var alert;                                                                                                      // 8219
 *                                                                                                                     // 8220
 *     $scope.showAlert = showAlert;                                                                                   // 8221
 *     $scope.closeAlert = closeAlert;                                                                                 // 8222
 *     $scope.showGreeting = showCustomGreeting;                                                                       // 8223
 *                                                                                                                     // 8224
 *     $scope.hasAlert = function() { return !!alert };                                                                // 8225
 *     $scope.userName = $scope.userName || 'Bobby';                                                                   // 8226
 *                                                                                                                     // 8227
 *     // Dialog #1 - Show simple alert dialog and cache                                                               // 8228
 *     // reference to dialog instance                                                                                 // 8229
 *                                                                                                                     // 8230
 *     function showAlert() {                                                                                          // 8231
 *       alert = $mdDialog.alert()                                                                                     // 8232
 *         .title('Attention, ' + $scope.userName)                                                                     // 8233
 *         .content('This is an example of how easy dialogs can be!')                                                  // 8234
 *         .ok('Close');                                                                                               // 8235
 *                                                                                                                     // 8236
 *       $mdDialog                                                                                                     // 8237
 *           .show( alert )                                                                                            // 8238
 *           .finally(function() {                                                                                     // 8239
 *             alert = undefined;                                                                                      // 8240
 *           });                                                                                                       // 8241
 *     }                                                                                                               // 8242
 *                                                                                                                     // 8243
 *     // Close the specified dialog instance and resolve with 'finished' flag                                         // 8244
 *     // Normally this is not needed, just use '$mdDialog.hide()' to close                                            // 8245
 *     // the most recent dialog popup.                                                                                // 8246
 *                                                                                                                     // 8247
 *     function closeAlert() {                                                                                         // 8248
 *       $mdDialog.hide( alert, "finished" );                                                                          // 8249
 *       alert = undefined;                                                                                            // 8250
 *     }                                                                                                               // 8251
 *                                                                                                                     // 8252
 *     // Dialog #2 - Demonstrate more complex dialogs construction and popup.                                         // 8253
 *                                                                                                                     // 8254
 *     function showCustomGreeting($event) {                                                                           // 8255
 *         $mdDialog.show({                                                                                            // 8256
 *           targetEvent: $event,                                                                                      // 8257
 *           template:                                                                                                 // 8258
 *             '<md-dialog>' +                                                                                         // 8259
 *                                                                                                                     // 8260
 *             '  <md-dialog-content>Hello {{ employee }}!</md-dialog-content>' +                                      // 8261
 *                                                                                                                     // 8262
 *             '  <div class="md-actions">' +                                                                          // 8263
 *             '    <md-button ng-click="closeDialog()" class="md-primary">' +                                         // 8264
 *             '      Close Greeting' +                                                                                // 8265
 *             '    </md-button>' +                                                                                    // 8266
 *             '  </div>' +                                                                                            // 8267
 *             '</md-dialog>',                                                                                         // 8268
 *           controller: 'GreetingController',                                                                         // 8269
 *           onComplete: afterShowAnimation,                                                                           // 8270
 *           locals: { employee: $scope.userName }                                                                     // 8271
 *         });                                                                                                         // 8272
 *                                                                                                                     // 8273
 *         // When the 'enter' animation finishes...                                                                   // 8274
 *                                                                                                                     // 8275
 *         function afterShowAnimation(scope, element, options) {                                                      // 8276
 *            // post-show code here: DOM element focus, etc.                                                          // 8277
 *         }                                                                                                           // 8278
 *     }                                                                                                               // 8279
 *                                                                                                                     // 8280
 *     // Dialog #3 - Demonstrate use of ControllerAs and passing $scope to dialog                                     // 8281
 *     //             Here we used ng-controller="GreetingController as vm" and                                        // 8282
 *     //             $scope.vm === <controller instance>                                                              // 8283
 *                                                                                                                     // 8284
 *     function showCustomGreeting() {                                                                                 // 8285
 *                                                                                                                     // 8286
 *        $mdDialog.show({                                                                                             // 8287
 *           clickOutsideToClose: true,                                                                                // 8288
 *                                                                                                                     // 8289
 *           scope: $scope,        // use parent scope in template                                                     // 8290
 *           preserveScope: true,  // do not forget this if use parent scope                                           // 8291
                                                                                                                       // 8292
 *           // Since GreetingController is instantiated with ControllerAs syntax                                      // 8293
 *           // AND we are passing the parent '$scope' to the dialog, we MUST                                          // 8294
 *           // use 'vm.<xxx>' in the template markup                                                                  // 8295
 *                                                                                                                     // 8296
 *           template: '<md-dialog>' +                                                                                 // 8297
 *                     '  <md-dialog-content>' +                                                                       // 8298
 *                     '     Hi There {{vm.employee}}' +                                                               // 8299
 *                     '  </md-dialog-content>' +                                                                      // 8300
 *                     '</md-dialog>',                                                                                 // 8301
 *                                                                                                                     // 8302
 *           controller: function DialogController($scope, $mdDialog) {                                                // 8303
 *             $scope.closeDialog = function() {                                                                       // 8304
 *               $mdDialog.hide();                                                                                     // 8305
 *             }                                                                                                       // 8306
 *           }                                                                                                         // 8307
 *        });                                                                                                          // 8308
 *     }                                                                                                               // 8309
 *                                                                                                                     // 8310
 *   }                                                                                                                 // 8311
 *                                                                                                                     // 8312
 *   // Greeting controller used with the more complex 'showCustomGreeting()' custom dialog                            // 8313
 *                                                                                                                     // 8314
 *   function GreetingController($scope, $mdDialog, employee) {                                                        // 8315
 *     // Assigned from construction <code>locals</code> options...                                                    // 8316
 *     $scope.employee = employee;                                                                                     // 8317
 *                                                                                                                     // 8318
 *     $scope.closeDialog = function() {                                                                               // 8319
 *       // Easily hides most recent dialog shown...                                                                   // 8320
 *       // no specific instance reference is needed.                                                                  // 8321
 *       $mdDialog.hide();                                                                                             // 8322
 *     };                                                                                                              // 8323
 *   }                                                                                                                 // 8324
 *                                                                                                                     // 8325
 * })(angular);                                                                                                        // 8326
 * </hljs>                                                                                                             // 8327
 */                                                                                                                    // 8328
                                                                                                                       // 8329
/**                                                                                                                    // 8330
 * @ngdoc method                                                                                                       // 8331
 * @name $mdDialog#alert                                                                                               // 8332
 *                                                                                                                     // 8333
 * @description                                                                                                        // 8334
 * Builds a preconfigured dialog with the specified message.                                                           // 8335
 *                                                                                                                     // 8336
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:                                       // 8337
 *                                                                                                                     // 8338
 * - $mdDialogPreset#title(string) - sets title to string                                                              // 8339
 * - $mdDialogPreset#content(string) - sets content / message to string                                                // 8340
 * - $mdDialogPreset#ok(string) - sets okay button text to string                                                      // 8341
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog                                                      // 8342
 *                                                                                                                     // 8343
 */                                                                                                                    // 8344
                                                                                                                       // 8345
/**                                                                                                                    // 8346
 * @ngdoc method                                                                                                       // 8347
 * @name $mdDialog#confirm                                                                                             // 8348
 *                                                                                                                     // 8349
 * @description                                                                                                        // 8350
 * Builds a preconfigured dialog with the specified message. You can call show and the promise returned                // 8351
 * will be resolved only if the user clicks the confirm action on the dialog.                                          // 8352
 *                                                                                                                     // 8353
 * @returns {obj} an `$mdDialogPreset` with the chainable configuration methods:                                       // 8354
 *                                                                                                                     // 8355
 * Additionally, it supports the following methods:                                                                    // 8356
 *                                                                                                                     // 8357
 * - $mdDialogPreset#title(string) - sets title to string                                                              // 8358
 * - $mdDialogPreset#content(string) - sets content / message to string                                                // 8359
 * - $mdDialogPreset#ok(string) - sets okay button text to string                                                      // 8360
 * - $mdDialogPreset#cancel(string) - sets cancel button text to string                                                // 8361
 * - $mdDialogPreset#theme(string) - sets the theme of the dialog                                                      // 8362
 *                                                                                                                     // 8363
 */                                                                                                                    // 8364
                                                                                                                       // 8365
/**                                                                                                                    // 8366
 * @ngdoc method                                                                                                       // 8367
 * @name $mdDialog#show                                                                                                // 8368
 *                                                                                                                     // 8369
 * @description                                                                                                        // 8370
 * Show a dialog with the specified options.                                                                           // 8371
 *                                                                                                                     // 8372
 * @param {object} optionsOrPreset Either provide an `$mdDialogPreset` returned from `alert()`, and                    // 8373
 * `confirm()`, or an options object with the following properties:                                                    // 8374
 *   - `templateUrl` - `{string=}`: The url of a template that will be used as the content                             // 8375
 *   of the dialog.                                                                                                    // 8376
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual template string.                        // 8377
 *   - `targetEvent` - `{DOMClickEvent=}`: A click's event object. When passed in as an option,                        // 8378
 *     the location of the click will be used as the starting point for the opening animation                          // 8379
 *     of the the dialog.                                                                                              // 8380
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified,                    // 8381
 *     it will create a new isolate scope.                                                                             // 8382
 *     This scope will be destroyed when the dialog is removed unless `preserveScope` is set to true.                  // 8383
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 8384
 *   - `disableParentScroll` - `{boolean=}`: Whether to disable scrolling while the dialog is open.                    // 8385
 *     Default true.                                                                                                   // 8386
 *   - `hasBackdrop` - `{boolean=}`: Whether there should be an opaque backdrop behind the dialog.                     // 8387
 *     Default true.                                                                                                   // 8388
 *   - `clickOutsideToClose` - `{boolean=}`: Whether the user can click outside the dialog to                          // 8389
 *     close it. Default false.                                                                                        // 8390
 *   - `escapeToClose` - `{boolean=}`: Whether the user can press escape to close the dialog.                          // 8391
 *     Default true.                                                                                                   // 8392
 *   - `focusOnOpen` - `{boolean=}`: An option to override focus behavior on open. Only disable if                     // 8393
 *     focusing some other way, as focus management is required for dialogs to be accessible.                          // 8394
 *     Defaults to true.                                                                                               // 8395
 *   - `controller` - `{string=}`: The controller to associate with the dialog. The controller                         // 8396
 *     will be injected with the local `$mdDialog`, which passes along a scope for the dialog.                         // 8397
 *   - `locals` - `{object=}`: An object containing key/value pairs. The keys will be used as names                    // 8398
 *     of values to inject into the controller. For example, `locals: {three: 3}` would inject                         // 8399
 *     `three` into the controller, with the value 3. If `bindToController` is true, they will be                      // 8400
 *     copied to the controller instead.                                                                               // 8401
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.                     // 8402
 *     These values will not be available until after initialization.                                                  // 8403
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values, and the                         // 8404
 *     dialog will not open until all of the promises resolve.                                                         // 8405
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 8406
 *   - `parent` - `{element=}`: The element to append the dialog to. Defaults to appending                             // 8407
 *     to the root element of the application.                                                                         // 8408
 *   - `onComplete` `{function=}`: Callback function used to announce when the show() action is                        // 8409
 *     finished.                                                                                                       // 8410
 *   - `onRemoving` `{function=} Callback function used to announce the close/hide() action is                         // 8411
 *     starting. This allows developers to run custom animations in parallel the close animations.                     // 8412
 *                                                                                                                     // 8413
 * @returns {promise} A promise that can be resolved with `$mdDialog.hide()` or                                        // 8414
 * rejected with `$mdDialog.cancel()`.                                                                                 // 8415
 */                                                                                                                    // 8416
                                                                                                                       // 8417
/**                                                                                                                    // 8418
 * @ngdoc method                                                                                                       // 8419
 * @name $mdDialog#hide                                                                                                // 8420
 *                                                                                                                     // 8421
 * @description                                                                                                        // 8422
 * Hide an existing dialog and resolve the promise returned from `$mdDialog.show()`.                                   // 8423
 *                                                                                                                     // 8424
 * @param {*=} response An argument for the resolved promise.                                                          // 8425
 *                                                                                                                     // 8426
 * @returns {promise} A promise that is resolved when the dialog has been closed.                                      // 8427
 */                                                                                                                    // 8428
                                                                                                                       // 8429
/**                                                                                                                    // 8430
 * @ngdoc method                                                                                                       // 8431
 * @name $mdDialog#cancel                                                                                              // 8432
 *                                                                                                                     // 8433
 * @description                                                                                                        // 8434
 * Hide an existing dialog and reject the promise returned from `$mdDialog.show()`.                                    // 8435
 *                                                                                                                     // 8436
 * @param {*=} response An argument for the rejected promise.                                                          // 8437
 *                                                                                                                     // 8438
 * @returns {promise} A promise that is resolved when the dialog has been closed.                                      // 8439
 */                                                                                                                    // 8440
                                                                                                                       // 8441
function MdDialogProvider($$interimElementProvider) {                                                                  // 8442
                                                                                                                       // 8443
  advancedDialogOptions.$inject = ["$mdDialog", "$mdTheming"];                                                         // 8444
  dialogDefaultOptions.$inject = ["$mdDialog", "$mdAria", "$mdUtil", "$mdConstant", "$animate", "$document", "$window", "$rootElement"];
  return $$interimElementProvider('$mdDialog')                                                                         // 8446
    .setDefaults({                                                                                                     // 8447
      methods: ['disableParentScroll', 'hasBackdrop', 'clickOutsideToClose', 'escapeToClose', 'targetEvent', 'parent'],
      options: dialogDefaultOptions                                                                                    // 8449
    })                                                                                                                 // 8450
    .addPreset('alert', {                                                                                              // 8451
      methods: ['title', 'content', 'ariaLabel', 'ok', 'theme', 'css'],                                                // 8452
      options: advancedDialogOptions                                                                                   // 8453
    })                                                                                                                 // 8454
    .addPreset('confirm', {                                                                                            // 8455
      methods: ['title', 'content', 'ariaLabel', 'ok', 'cancel', 'theme', 'css'],                                      // 8456
      options: advancedDialogOptions                                                                                   // 8457
    });                                                                                                                // 8458
                                                                                                                       // 8459
  /* @ngInject */                                                                                                      // 8460
  function advancedDialogOptions($mdDialog, $mdTheming) {                                                              // 8461
    return {                                                                                                           // 8462
      template: [                                                                                                      // 8463
        '<md-dialog md-theme="{{ dialog.theme }}" aria-label="{{ dialog.ariaLabel }}" class="{{ dialog.css }}">',      // 8464
        ' <md-dialog-content role="document" tabIndex="-1">',                                                          // 8465
        '   <h2 class="md-title">{{ dialog.title }}</h2>',                                                             // 8466
        '   <div class="md-dialog-content-body" md-template="::dialog.mdContent"></div>',                              // 8467
        ' </md-dialog-content>',                                                                                       // 8468
        ' <div class="md-actions">',                                                                                   // 8469
        '   <md-button ng-if="dialog.$type == \'confirm\'"' +                                                          // 8470
        '     ng-click="dialog.abort()" class="md-primary">',                                                          // 8471
        '     {{ dialog.cancel }}',                                                                                    // 8472
        '   </md-button>',                                                                                             // 8473
        '   <md-button ng-click="dialog.hide()" class="md-primary" md-autofocus="dialog.$type!=\'confirm\'">',         // 8474
        '     {{ dialog.ok }}',                                                                                        // 8475
        '   </md-button>',                                                                                             // 8476
        ' </div>',                                                                                                     // 8477
        '</md-dialog>'                                                                                                 // 8478
      ].join('').replace(/\s\s+/g, ''),                                                                                // 8479
      controller: function mdDialogCtrl() {                                                                            // 8480
        this.hide = function() {                                                                                       // 8481
          $mdDialog.hide(true);                                                                                        // 8482
        };                                                                                                             // 8483
        this.abort = function() {                                                                                      // 8484
          $mdDialog.cancel();                                                                                          // 8485
        };                                                                                                             // 8486
      },                                                                                                               // 8487
      controllerAs: 'dialog',                                                                                          // 8488
      bindToController: true,                                                                                          // 8489
      theme: $mdTheming.defaultTheme()                                                                                 // 8490
    };                                                                                                                 // 8491
  }                                                                                                                    // 8492
                                                                                                                       // 8493
  /* @ngInject */                                                                                                      // 8494
  function dialogDefaultOptions($mdDialog, $mdAria, $mdUtil, $mdConstant, $animate, $document, $window, $rootElement) {
    return {                                                                                                           // 8496
      hasBackdrop: true,                                                                                               // 8497
      isolateScope: true,                                                                                              // 8498
      onShow: onShow,                                                                                                  // 8499
      onRemove: onRemove,                                                                                              // 8500
      clickOutsideToClose: false,                                                                                      // 8501
      escapeToClose: true,                                                                                             // 8502
      targetEvent: null,                                                                                               // 8503
      focusOnOpen: true,                                                                                               // 8504
      disableParentScroll: true,                                                                                       // 8505
      transformTemplate: function(template) {                                                                          // 8506
        return '<div class="md-dialog-container">' + validatedTemplate(template) + '</div>';                           // 8507
                                                                                                                       // 8508
        /**                                                                                                            // 8509
         * The specified template should contain a <md-dialog> wrapper element....                                     // 8510
         */                                                                                                            // 8511
        function validatedTemplate(template) {                                                                         // 8512
          template || ""                                                                                               // 8513
          return /<\/md-dialog>/g.test(template) ? template : "<md-dialog>" + template + "</md-dialog>";               // 8514
        }                                                                                                              // 8515
      }                                                                                                                // 8516
    };                                                                                                                 // 8517
                                                                                                                       // 8518
    /**                                                                                                                // 8519
     * Show method for dialogs                                                                                         // 8520
     */                                                                                                                // 8521
    function onShow(scope, element, options, controller) {                                                             // 8522
      angular.element($document[0].body).addClass('md-dialog-is-showing');                                             // 8523
                                                                                                                       // 8524
      wrapSimpleContent();                                                                                             // 8525
                                                                                                                       // 8526
      captureSourceAndParent(element, options);                                                                        // 8527
      configureAria(element.find('md-dialog'), options);                                                               // 8528
      showBackdrop(scope, element, options);                                                                           // 8529
                                                                                                                       // 8530
      return dialogPopIn(element, options)                                                                             // 8531
        .then(function() {                                                                                             // 8532
          activateListeners(element, options);                                                                         // 8533
          lockScreenReader(element, options);                                                                          // 8534
          focusOnOpen();                                                                                               // 8535
        });                                                                                                            // 8536
                                                                                                                       // 8537
      /**                                                                                                              // 8538
       * For alerts, focus on content... otherwise focus on                                                            // 8539
       * the close button (or equivalent)                                                                              // 8540
       */                                                                                                              // 8541
      function focusOnOpen() {                                                                                         // 8542
        if (options.focusOnOpen) {                                                                                     // 8543
          var target = $mdUtil.findFocusTarget(element) || findCloseButton();                                          // 8544
          target.focus();                                                                                              // 8545
        }                                                                                                              // 8546
                                                                                                                       // 8547
        /**                                                                                                            // 8548
         *  If no element with class dialog-close, try to find the last                                                // 8549
         *  button child in md-actions and assume it is a close button                                                 // 8550
         */                                                                                                            // 8551
        function findCloseButton() {                                                                                   // 8552
          var closeButton = element[0].querySelector('.dialog-close');                                                 // 8553
          if (!closeButton) {                                                                                          // 8554
            var actionButtons = element[0].querySelectorAll('.md-actions button');                                     // 8555
            closeButton = actionButtons[actionButtons.length - 1];                                                     // 8556
          }                                                                                                            // 8557
          return angular.element(closeButton);                                                                         // 8558
        }                                                                                                              // 8559
      }                                                                                                                // 8560
                                                                                                                       // 8561
      /**                                                                                                              // 8562
       * Wrap any simple content [specified via .content("")] in <p></p> tags.                                         // 8563
       * otherwise accept HTML content within the dialog content area...                                               // 8564
       * NOTE: Dialog uses the md-template directive to safely inject HTML content.                                    // 8565
       */                                                                                                              // 8566
      function wrapSimpleContent() {                                                                                   // 8567
        if ( controller ) {                                                                                            // 8568
          var HTML_END_TAG = /<\/[\w-]*>/gm;                                                                           // 8569
          var content = controller.content || options.content || "";                                                   // 8570
                                                                                                                       // 8571
          var hasHTML = HTML_END_TAG.test(content);                                                                    // 8572
          if (!hasHTML) {                                                                                              // 8573
            content = $mdUtil.supplant("<p>{0}</p>", [content]);                                                       // 8574
          }                                                                                                            // 8575
                                                                                                                       // 8576
          // Publish updated dialog content body... to be compiled by mdTemplate directive                             // 8577
          controller.mdContent = content;                                                                              // 8578
        }                                                                                                              // 8579
      }                                                                                                                // 8580
                                                                                                                       // 8581
    }                                                                                                                  // 8582
                                                                                                                       // 8583
    /**                                                                                                                // 8584
     * Remove function for all dialogs                                                                                 // 8585
     */                                                                                                                // 8586
    function onRemove(scope, element, options) {                                                                       // 8587
      options.deactivateListeners();                                                                                   // 8588
      options.unlockScreenReader();                                                                                    // 8589
      options.hideBackdrop(options.$destroy);                                                                          // 8590
                                                                                                                       // 8591
      // For navigation $destroy events, do a quick, non-animated removal,                                             // 8592
      // but for normal closes (from clicks, etc) animate the removal                                                  // 8593
                                                                                                                       // 8594
      return !!options.$destroy ? detachAndClean() : animateRemoval().then( detachAndClean );                          // 8595
                                                                                                                       // 8596
      /**                                                                                                              // 8597
       * For normal closes, animate the removal.                                                                       // 8598
       * For forced closes (like $destroy events), skip the animations                                                 // 8599
       */                                                                                                              // 8600
      function animateRemoval() {                                                                                      // 8601
        return dialogPopOut(element, options);                                                                         // 8602
      }                                                                                                                // 8603
                                                                                                                       // 8604
      /**                                                                                                              // 8605
       * Detach the element                                                                                            // 8606
       */                                                                                                              // 8607
      function detachAndClean() {                                                                                      // 8608
        angular.element($document[0].body).removeClass('md-dialog-is-showing');                                        // 8609
        element.remove();                                                                                              // 8610
                                                                                                                       // 8611
        if (!options.$destroy) options.origin.focus();                                                                 // 8612
      }                                                                                                                // 8613
    }                                                                                                                  // 8614
                                                                                                                       // 8615
    /**                                                                                                                // 8616
     * Capture originator/trigger element information (if available)                                                   // 8617
     * and the parent container for the dialog; defaults to the $rootElement                                           // 8618
     * unless overridden in the options.parent                                                                         // 8619
     */                                                                                                                // 8620
    function captureSourceAndParent(element, options) {                                                                // 8621
      options.origin = angular.extend({                                                                                // 8622
        element: null,                                                                                                 // 8623
        bounds: null,                                                                                                  // 8624
        focus: angular.noop                                                                                            // 8625
      }, options.origin || {});                                                                                        // 8626
                                                                                                                       // 8627
      var source = angular.element((options.targetEvent || {}).target);                                                // 8628
      if (source && source.length) {                                                                                   // 8629
        // Compute and save the target element's bounding rect, so that if the                                         // 8630
        // element is hidden when the dialog closes, we can shrink the dialog                                          // 8631
        // back to the same position it expanded from.                                                                 // 8632
        options.origin.element = source;                                                                               // 8633
        options.origin.bounds = source[0].getBoundingClientRect();                                                     // 8634
        options.origin.focus = function() {                                                                            // 8635
          source.focus();                                                                                              // 8636
        }                                                                                                              // 8637
      }                                                                                                                // 8638
                                                                                                                       // 8639
      // If the parent specifier is a simple string selector, then query for                                           // 8640
      // the DOM element.                                                                                              // 8641
      if ( angular.isString(options.parent) ) {                                                                        // 8642
        var simpleSelector = options.parent,                                                                           // 8643
            container = $document[0].querySelectorAll(simpleSelector);                                                 // 8644
        options.parent = container.length ? container[0] : null;                                                       // 8645
      }                                                                                                                // 8646
      // If we have a reference to a raw dom element, always wrap it in jqLite                                         // 8647
      options.parent = angular.element(options.parent || $rootElement);                                                // 8648
                                                                                                                       // 8649
    }                                                                                                                  // 8650
                                                                                                                       // 8651
    /**                                                                                                                // 8652
     * Listen for escape keys and outside clicks to auto close                                                         // 8653
     */                                                                                                                // 8654
    function activateListeners(element, options) {                                                                     // 8655
      var window = angular.element($window);                                                                           // 8656
      var onWindowResize = $mdUtil.debounce(function(){                                                                // 8657
        stretchDialogContainerToViewport(element, options);                                                            // 8658
      }, 60);                                                                                                          // 8659
                                                                                                                       // 8660
      var removeListeners = [];                                                                                        // 8661
      var smartClose = function() {                                                                                    // 8662
        // Only 'confirm' dialogs have a cancel button... escape/clickOutside will                                     // 8663
        // cancel or fallback to hide.                                                                                 // 8664
        var closeFn = ( options.$type == 'alert' ) ? $mdDialog.hide : $mdDialog.cancel;                                // 8665
        $mdUtil.nextTick(closeFn, true);                                                                               // 8666
      };                                                                                                               // 8667
                                                                                                                       // 8668
      if (options.escapeToClose) {                                                                                     // 8669
        var target = options.parent;                                                                                   // 8670
        var keyHandlerFn = function(ev) {                                                                              // 8671
          if (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE) {                                                            // 8672
            ev.stopPropagation();                                                                                      // 8673
            ev.preventDefault();                                                                                       // 8674
                                                                                                                       // 8675
            smartClose();                                                                                              // 8676
          }                                                                                                            // 8677
        };                                                                                                             // 8678
                                                                                                                       // 8679
        // Add keyup listeners                                                                                         // 8680
        element.on('keyup', keyHandlerFn);                                                                             // 8681
        target.on('keyup', keyHandlerFn);                                                                              // 8682
        window.on('resize', onWindowResize);                                                                           // 8683
                                                                                                                       // 8684
        // Queue remove listeners function                                                                             // 8685
        removeListeners.push(function() {                                                                              // 8686
                                                                                                                       // 8687
          element.off('keyup', keyHandlerFn);                                                                          // 8688
          target.off('keyup', keyHandlerFn);                                                                           // 8689
          window.off('resize', onWindowResize);                                                                        // 8690
                                                                                                                       // 8691
        });                                                                                                            // 8692
      }                                                                                                                // 8693
      if (options.clickOutsideToClose) {                                                                               // 8694
        var target = element;                                                                                          // 8695
        var clickHandler = function(ev) {                                                                              // 8696
          // Only close if we click the flex container outside on the backdrop                                         // 8697
          if (ev.target === target[0]) {                                                                               // 8698
            ev.stopPropagation();                                                                                      // 8699
            ev.preventDefault();                                                                                       // 8700
                                                                                                                       // 8701
            smartClose();                                                                                              // 8702
          }                                                                                                            // 8703
        };                                                                                                             // 8704
                                                                                                                       // 8705
        // Add click listeners                                                                                         // 8706
        target.on('click', clickHandler);                                                                              // 8707
                                                                                                                       // 8708
        // Queue remove listeners function                                                                             // 8709
        removeListeners.push(function() {                                                                              // 8710
          target.off('click', clickHandler);                                                                           // 8711
        });                                                                                                            // 8712
      }                                                                                                                // 8713
                                                                                                                       // 8714
      // Attach specific `remove` listener handler                                                                     // 8715
      options.deactivateListeners = function() {                                                                       // 8716
        removeListeners.forEach(function(removeFn) {                                                                   // 8717
          removeFn();                                                                                                  // 8718
        });                                                                                                            // 8719
        options.deactivateListeners = null;                                                                            // 8720
      };                                                                                                               // 8721
    }                                                                                                                  // 8722
                                                                                                                       // 8723
    /**                                                                                                                // 8724
     * Show modal backdrop element...                                                                                  // 8725
     */                                                                                                                // 8726
    function showBackdrop(scope, element, options) {                                                                   // 8727
                                                                                                                       // 8728
      if (options.disableParentScroll) {                                                                               // 8729
        // !! DO this before creating the backdrop; since disableScrollAround()                                        // 8730
        //    configures the scroll offset; which is used by mdBackDrop postLink()                                     // 8731
        options.restoreScroll = $mdUtil.disableScrollAround(element, options.parent);                                  // 8732
      }                                                                                                                // 8733
                                                                                                                       // 8734
      if (options.hasBackdrop) {                                                                                       // 8735
        options.backdrop = $mdUtil.createBackdrop(scope, "md-dialog-backdrop md-opaque");                              // 8736
        $animate.enter(options.backdrop, options.parent);                                                              // 8737
      }                                                                                                                // 8738
                                                                                                                       // 8739
      /**                                                                                                              // 8740
       * Hide modal backdrop element...                                                                                // 8741
       */                                                                                                              // 8742
      options.hideBackdrop = function hideBackdrop($destroy) {                                                         // 8743
        if (options.backdrop) {                                                                                        // 8744
          if ( !!$destroy ) options.backdrop.remove();                                                                 // 8745
          else              $animate.leave(options.backdrop);                                                          // 8746
        }                                                                                                              // 8747
                                                                                                                       // 8748
        if (options.disableParentScroll) {                                                                             // 8749
          options.restoreScroll();                                                                                     // 8750
          delete options.restoreScroll;                                                                                // 8751
        }                                                                                                              // 8752
                                                                                                                       // 8753
        options.hideBackdrop = null;                                                                                   // 8754
      }                                                                                                                // 8755
    }                                                                                                                  // 8756
                                                                                                                       // 8757
    /**                                                                                                                // 8758
     * Inject ARIA-specific attributes appropriate for Dialogs                                                         // 8759
     */                                                                                                                // 8760
    function configureAria(element, options) {                                                                         // 8761
                                                                                                                       // 8762
      var role = (options.$type === 'alert') ? 'alertdialog' : 'dialog';                                               // 8763
      var dialogContent = element.find('md-dialog-content');                                                           // 8764
      var dialogId = element.attr('id') || ('dialog_' + $mdUtil.nextUid());                                            // 8765
                                                                                                                       // 8766
      element.attr({                                                                                                   // 8767
        'role': role,                                                                                                  // 8768
        'tabIndex': '-1'                                                                                               // 8769
      });                                                                                                              // 8770
                                                                                                                       // 8771
      if (dialogContent.length === 0) {                                                                                // 8772
        dialogContent = element;                                                                                       // 8773
      }                                                                                                                // 8774
                                                                                                                       // 8775
      dialogContent.attr('id', dialogId);                                                                              // 8776
      element.attr('aria-describedby', dialogId);                                                                      // 8777
                                                                                                                       // 8778
      if (options.ariaLabel) {                                                                                         // 8779
        $mdAria.expect(element, 'aria-label', options.ariaLabel);                                                      // 8780
      }                                                                                                                // 8781
      else {                                                                                                           // 8782
        $mdAria.expectAsync(element, 'aria-label', function() {                                                        // 8783
          var words = dialogContent.text().split(/\s+/);                                                               // 8784
          if (words.length > 3) words = words.slice(0, 3).concat('...');                                               // 8785
          return words.join(' ');                                                                                      // 8786
        });                                                                                                            // 8787
      }                                                                                                                // 8788
    }                                                                                                                  // 8789
                                                                                                                       // 8790
    /**                                                                                                                // 8791
     * Prevents screen reader interaction behind modal window                                                          // 8792
     * on swipe interfaces                                                                                             // 8793
     */                                                                                                                // 8794
    function lockScreenReader(element, options) {                                                                      // 8795
      var isHidden = true;                                                                                             // 8796
                                                                                                                       // 8797
      // get raw DOM node                                                                                              // 8798
      walkDOM(element[0]);                                                                                             // 8799
                                                                                                                       // 8800
      options.unlockScreenReader = function() {                                                                        // 8801
        isHidden = false;                                                                                              // 8802
        walkDOM(element[0]);                                                                                           // 8803
                                                                                                                       // 8804
        options.unlockScreenReader = null;                                                                             // 8805
      };                                                                                                               // 8806
                                                                                                                       // 8807
      /**                                                                                                              // 8808
       * Walk DOM to apply or remove aria-hidden on sibling nodes                                                      // 8809
       * and parent sibling nodes                                                                                      // 8810
       *                                                                                                               // 8811
       */                                                                                                              // 8812
      function walkDOM(element) {                                                                                      // 8813
        while (element.parentNode) {                                                                                   // 8814
          if (element === document.body) {                                                                             // 8815
            return;                                                                                                    // 8816
          }                                                                                                            // 8817
          var children = element.parentNode.children;                                                                  // 8818
          for (var i = 0; i < children.length; i++) {                                                                  // 8819
            // skip over child if it is an ascendant of the dialog                                                     // 8820
            // or a script or style tag                                                                                // 8821
            if (element !== children[i] && !isNodeOneOf(children[i], ['SCRIPT', 'STYLE'])) {                           // 8822
              children[i].setAttribute('aria-hidden', isHidden);                                                       // 8823
            }                                                                                                          // 8824
          }                                                                                                            // 8825
                                                                                                                       // 8826
          walkDOM(element = element.parentNode);                                                                       // 8827
        }                                                                                                              // 8828
      }                                                                                                                // 8829
    }                                                                                                                  // 8830
                                                                                                                       // 8831
    /**                                                                                                                // 8832
     * Ensure the dialog container fill-stretches to the viewport                                                      // 8833
     */                                                                                                                // 8834
    function stretchDialogContainerToViewport(container, options) {                                                    // 8835
                                                                                                                       // 8836
      var isFixed = $window.getComputedStyle($document[0].body).position == 'fixed';                                   // 8837
      var backdrop = options.backdrop ? $window.getComputedStyle(options.backdrop[0]) : null;                          // 8838
      var height = backdrop ? Math.min($document[0].body.clientHeight, Math.ceil(Math.abs(parseInt(backdrop.height, 10)))) : 0;
                                                                                                                       // 8840
      container.css({                                                                                                  // 8841
        top: (isFixed ? $mdUtil.scrollTop(options.parent) : 0) + 'px',                                                 // 8842
        height: height ? height + 'px' : '100%'                                                                        // 8843
      });                                                                                                              // 8844
                                                                                                                       // 8845
      return container;                                                                                                // 8846
    }                                                                                                                  // 8847
                                                                                                                       // 8848
    /**                                                                                                                // 8849
     *  Dialog open and pop-in animation                                                                               // 8850
     */                                                                                                                // 8851
    function dialogPopIn(container, options) {                                                                         // 8852
                                                                                                                       // 8853
      // Add the `md-dialog-container` to the DOM                                                                      // 8854
      options.parent.append(container);                                                                                // 8855
      stretchDialogContainerToViewport(container, options);                                                            // 8856
                                                                                                                       // 8857
      var dialogEl = container.find('md-dialog');                                                                      // 8858
      var animator = $mdUtil.dom.animator;                                                                             // 8859
      var buildTranslateToOrigin = animator.calculateZoomToOrigin;                                                     // 8860
      var translateOptions = {transitionInClass: 'md-transition-in', transitionOutClass: 'md-transition-out'};         // 8861
      var from = animator.toTransformCss(buildTranslateToOrigin(dialogEl, options.origin));                            // 8862
      var to = animator.toTransformCss("");  // defaults to center display (or parent or $rootElement)                 // 8863
                                                                                                                       // 8864
      return animator                                                                                                  // 8865
        .translate3d(dialogEl, from, to, translateOptions)                                                             // 8866
        .then(function(animateReversal) {                                                                              // 8867
                                                                                                                       // 8868
                                                                                                                       // 8869
                                                                                                                       // 8870
          // Build a reversal translate function synched to this translation...                                        // 8871
          options.reverseAnimate = function() {                                                                        // 8872
                                                                                                                       // 8873
            delete options.reverseAnimate;                                                                             // 8874
            return animateReversal(                                                                                    // 8875
              animator.toTransformCss(                                                                                 // 8876
                // in case the origin element has moved or is hidden,                                                  // 8877
                // let's recalculate the translateCSS                                                                  // 8878
                buildTranslateToOrigin(dialogEl, options.origin)                                                       // 8879
              )                                                                                                        // 8880
            );                                                                                                         // 8881
                                                                                                                       // 8882
          };                                                                                                           // 8883
          return true;                                                                                                 // 8884
        });                                                                                                            // 8885
    }                                                                                                                  // 8886
                                                                                                                       // 8887
    /**                                                                                                                // 8888
     * Dialog close and pop-out animation                                                                              // 8889
     */                                                                                                                // 8890
    function dialogPopOut(container, options) {                                                                        // 8891
      return options.reverseAnimate();                                                                                 // 8892
    }                                                                                                                  // 8893
                                                                                                                       // 8894
    /**                                                                                                                // 8895
     * Utility function to filter out raw DOM nodes                                                                    // 8896
     */                                                                                                                // 8897
    function isNodeOneOf(elem, nodeTypeArray) {                                                                        // 8898
      if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {                                                               // 8899
        return true;                                                                                                   // 8900
      }                                                                                                                // 8901
    }                                                                                                                  // 8902
                                                                                                                       // 8903
  }                                                                                                                    // 8904
}                                                                                                                      // 8905
MdDialogProvider.$inject = ["$$interimElementProvider"];                                                               // 8906
                                                                                                                       // 8907
})();                                                                                                                  // 8908
(function(){                                                                                                           // 8909
"use strict";                                                                                                          // 8910
                                                                                                                       // 8911
/**                                                                                                                    // 8912
 * @ngdoc module                                                                                                       // 8913
 * @name material.components.divider                                                                                   // 8914
 * @description Divider module!                                                                                        // 8915
 */                                                                                                                    // 8916
angular.module('material.components.divider', [                                                                        // 8917
  'material.core'                                                                                                      // 8918
])                                                                                                                     // 8919
  .directive('mdDivider', MdDividerDirective);                                                                         // 8920
                                                                                                                       // 8921
/**                                                                                                                    // 8922
 * @ngdoc directive                                                                                                    // 8923
 * @name mdDivider                                                                                                     // 8924
 * @module material.components.divider                                                                                 // 8925
 * @restrict E                                                                                                         // 8926
 *                                                                                                                     // 8927
 * @description                                                                                                        // 8928
 * Dividers group and separate content within lists and page layouts using strong visual and spatial distinctions. This divider is a thin rule, lightweight enough to not distract the user from content.
 *                                                                                                                     // 8930
 * @param {boolean=} md-inset Add this attribute to activate the inset divider style.                                  // 8931
 * @usage                                                                                                              // 8932
 * <hljs lang="html">                                                                                                  // 8933
 * <md-divider></md-divider>                                                                                           // 8934
 *                                                                                                                     // 8935
 * <md-divider md-inset></md-divider>                                                                                  // 8936
 * </hljs>                                                                                                             // 8937
 *                                                                                                                     // 8938
 */                                                                                                                    // 8939
function MdDividerDirective($mdTheming) {                                                                              // 8940
  return {                                                                                                             // 8941
    restrict: 'E',                                                                                                     // 8942
    link: $mdTheming                                                                                                   // 8943
  };                                                                                                                   // 8944
}                                                                                                                      // 8945
MdDividerDirective.$inject = ["$mdTheming"];                                                                           // 8946
                                                                                                                       // 8947
})();                                                                                                                  // 8948
(function(){                                                                                                           // 8949
"use strict";                                                                                                          // 8950
                                                                                                                       // 8951
(function() {                                                                                                          // 8952
  'use strict';                                                                                                        // 8953
                                                                                                                       // 8954
  /**                                                                                                                  // 8955
   * @ngdoc module                                                                                                     // 8956
   * @name material.components.fabActions                                                                              // 8957
   */                                                                                                                  // 8958
  angular                                                                                                              // 8959
    .module('material.components.fabActions', ['material.core'])                                                       // 8960
    .directive('mdFabActions', MdFabActionsDirective);                                                                 // 8961
                                                                                                                       // 8962
  /**                                                                                                                  // 8963
   * @ngdoc directive                                                                                                  // 8964
   * @name mdFabActions                                                                                                // 8965
   * @module material.components.fabActions                                                                            // 8966
   *                                                                                                                   // 8967
   * @restrict E                                                                                                       // 8968
   *                                                                                                                   // 8969
   * @description                                                                                                      // 8970
   * The `<md-fab-actions>` directive is used inside of a `<md-fab-speed-dial>` or                                     // 8971
   * `<md-fab-toolbar>` directive to mark the an element (or elements) as the actions and setup the                    // 8972
   * proper event listeners.                                                                                           // 8973
   *                                                                                                                   // 8974
   * @usage                                                                                                            // 8975
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.                                 // 8976
   */                                                                                                                  // 8977
  function MdFabActionsDirective() {                                                                                   // 8978
    return {                                                                                                           // 8979
      restrict: 'E',                                                                                                   // 8980
                                                                                                                       // 8981
      require: ['^?mdFabSpeedDial', '^?mdFabToolbar'],                                                                 // 8982
                                                                                                                       // 8983
      compile: function(element, attributes) {                                                                         // 8984
        var children = element.children();                                                                             // 8985
                                                                                                                       // 8986
        var hasNgRepeat = false;                                                                                       // 8987
                                                                                                                       // 8988
        angular.forEach(['', 'data-', 'x-'], function(prefix) {                                                        // 8989
          hasNgRepeat = hasNgRepeat || (children.attr(prefix + 'ng-repeat') ? true : false);                           // 8990
        });                                                                                                            // 8991
                                                                                                                       // 8992
        // Support both ng-repeat and static content                                                                   // 8993
        if (hasNgRepeat) {                                                                                             // 8994
          children.addClass('md-fab-action-item');                                                                     // 8995
        } else {                                                                                                       // 8996
          // Wrap every child in a new div and add a class that we can scale/fling independently                       // 8997
          children.wrap('<div class="md-fab-action-item">');                                                           // 8998
        }                                                                                                              // 8999
      }                                                                                                                // 9000
    }                                                                                                                  // 9001
  }                                                                                                                    // 9002
                                                                                                                       // 9003
})();                                                                                                                  // 9004
                                                                                                                       // 9005
})();                                                                                                                  // 9006
(function(){                                                                                                           // 9007
"use strict";                                                                                                          // 9008
                                                                                                                       // 9009
(function() {                                                                                                          // 9010
  'use strict';                                                                                                        // 9011
                                                                                                                       // 9012
  angular.module('material.components.fabShared', ['material.core'])                                                   // 9013
    .controller('FabController', FabController);                                                                       // 9014
                                                                                                                       // 9015
  function FabController($scope, $element, $animate, $mdUtil, $mdConstant) {                                           // 9016
    var vm = this;                                                                                                     // 9017
                                                                                                                       // 9018
    // NOTE: We use async evals below to avoid conflicts with any existing digest loops                                // 9019
                                                                                                                       // 9020
    vm.open = function() {                                                                                             // 9021
      $scope.$evalAsync("vm.isOpen = true");                                                                           // 9022
    };                                                                                                                 // 9023
                                                                                                                       // 9024
    vm.close = function() {                                                                                            // 9025
      // Async eval to avoid conflicts with existing digest loops                                                      // 9026
      $scope.$evalAsync("vm.isOpen = false");                                                                          // 9027
                                                                                                                       // 9028
      // Focus the trigger when the element closes so users can still tab to the next item                             // 9029
      $element.find('md-fab-trigger')[0].focus();                                                                      // 9030
    };                                                                                                                 // 9031
                                                                                                                       // 9032
    // Toggle the open/close state when the trigger is clicked                                                         // 9033
    vm.toggle = function() {                                                                                           // 9034
      $scope.$evalAsync("vm.isOpen = !vm.isOpen");                                                                     // 9035
    };                                                                                                                 // 9036
                                                                                                                       // 9037
    setupDefaults();                                                                                                   // 9038
    setupListeners();                                                                                                  // 9039
    setupWatchers();                                                                                                   // 9040
    fireInitialAnimations();                                                                                           // 9041
                                                                                                                       // 9042
    function setupDefaults() {                                                                                         // 9043
      // Set the default direction to 'down' if none is specified                                                      // 9044
      vm.direction = vm.direction || 'down';                                                                           // 9045
                                                                                                                       // 9046
      // Set the default to be closed                                                                                  // 9047
      vm.isOpen = vm.isOpen || false;                                                                                  // 9048
                                                                                                                       // 9049
      // Start the keyboard interaction at the first action                                                            // 9050
      resetActionIndex();                                                                                              // 9051
    }                                                                                                                  // 9052
                                                                                                                       // 9053
    var events = [];                                                                                                   // 9054
                                                                                                                       // 9055
    function setupListeners() {                                                                                        // 9056
      var eventTypes = [                                                                                               // 9057
        'mousedown', 'mouseup', 'click', 'touchstart', 'touchend', 'focusin', 'focusout'                               // 9058
      ];                                                                                                               // 9059
                                                                                                                       // 9060
      // Add our listeners                                                                                             // 9061
      angular.forEach(eventTypes, function(eventType) {                                                                // 9062
        $element.on(eventType, parseEvents);                                                                           // 9063
      });                                                                                                              // 9064
                                                                                                                       // 9065
      // Remove our listeners when destroyed                                                                           // 9066
      $scope.$on('$destroy', function() {                                                                              // 9067
        angular.forEach(eventTypes, function(eventType) {                                                              // 9068
          $element.off(eventType, parseEvents);                                                                        // 9069
        });                                                                                                            // 9070
        // remove any attached keyboard handlers in case element is removed while                                      // 9071
        // speed dial is open                                                                                          // 9072
        disableKeyboard();                                                                                             // 9073
      });                                                                                                              // 9074
    }                                                                                                                  // 9075
                                                                                                                       // 9076
    function resetEvents() {                                                                                           // 9077
      events = [];                                                                                                     // 9078
    }                                                                                                                  // 9079
                                                                                                                       // 9080
    function equalsEvents(toCheck) {                                                                                   // 9081
      var isEqual, strippedCheck, moreToCheck;                                                                         // 9082
                                                                                                                       // 9083
      // Quick check to make sure we don't get stuck in an infinite loop                                               // 9084
      var numTests = 0;                                                                                                // 9085
                                                                                                                       // 9086
      do {                                                                                                             // 9087
        // Strip out the question mark                                                                                 // 9088
        strippedCheck = toCheck.map(function(event) {                                                                  // 9089
          return event.replace('?', '')                                                                                // 9090
        });                                                                                                            // 9091
                                                                                                                       // 9092
        // Check if they are equal                                                                                     // 9093
        isEqual = angular.equals(events, strippedCheck);                                                               // 9094
                                                                                                                       // 9095
        // If not, check to see if removing an optional event makes them equal                                         // 9096
        if (!isEqual) {                                                                                                // 9097
          toCheck = removeOptionalEvent(toCheck);                                                                      // 9098
          moreToCheck = (toCheck.length >= events.length && toCheck.length !== strippedCheck.length);                  // 9099
        }                                                                                                              // 9100
      }                                                                                                                // 9101
      while (numTests < 10 && !isEqual && moreToCheck);                                                                // 9102
                                                                                                                       // 9103
      return isEqual;                                                                                                  // 9104
    }                                                                                                                  // 9105
                                                                                                                       // 9106
    function removeOptionalEvent(events) {                                                                             // 9107
      var foundOptional = false;                                                                                       // 9108
                                                                                                                       // 9109
      return events.filter(function(event) {                                                                           // 9110
        // If we have not found an optional one, keep searching                                                        // 9111
        if (!foundOptional && event.indexOf('?') !== -1) {                                                             // 9112
          foundOptional = true;                                                                                        // 9113
                                                                                                                       // 9114
          // If we find an optional one, remove only that one and keep going                                           // 9115
          return false;                                                                                                // 9116
        }                                                                                                              // 9117
                                                                                                                       // 9118
        return true;                                                                                                   // 9119
      });                                                                                                              // 9120
    }                                                                                                                  // 9121
                                                                                                                       // 9122
    function parseEvents(latestEvent) {                                                                                // 9123
      events.push(latestEvent.type);                                                                                   // 9124
                                                                                                                       // 9125
      // Handle desktop click                                                                                          // 9126
      if (equalsEvents(['mousedown', 'focusout?', 'focusin?', 'mouseup', 'click'])) {                                  // 9127
        handleItemClick(latestEvent);                                                                                  // 9128
        resetEvents();                                                                                                 // 9129
        return;                                                                                                        // 9130
      }                                                                                                                // 9131
                                                                                                                       // 9132
      // Handle mobile click/tap (and keyboard enter)                                                                  // 9133
      if (equalsEvents(['touchstart?', 'touchend?', 'click'])) {                                                       // 9134
        handleItemClick(latestEvent);                                                                                  // 9135
        resetEvents();                                                                                                 // 9136
        return;                                                                                                        // 9137
      }                                                                                                                // 9138
                                                                                                                       // 9139
      // Handle tab keys (focusin)                                                                                     // 9140
      if (equalsEvents(['focusin'])) {                                                                                 // 9141
        vm.open();                                                                                                     // 9142
        resetEvents();                                                                                                 // 9143
        return;                                                                                                        // 9144
      }                                                                                                                // 9145
                                                                                                                       // 9146
      // Handle tab keys (focusout)                                                                                    // 9147
      if (equalsEvents(['focusout'])) {                                                                                // 9148
        vm.close();                                                                                                    // 9149
        resetEvents();                                                                                                 // 9150
        return;                                                                                                        // 9151
      }                                                                                                                // 9152
                                                                                                                       // 9153
      eventUnhandled();                                                                                                // 9154
    }                                                                                                                  // 9155
                                                                                                                       // 9156
    /*                                                                                                                 // 9157
     * No event was handled, so setup a timeout to clear the events                                                    // 9158
     *                                                                                                                 // 9159
     * TODO: Use $mdUtil.debounce()?                                                                                   // 9160
     */                                                                                                                // 9161
    var resetEventsTimeout;                                                                                            // 9162
                                                                                                                       // 9163
    function eventUnhandled() {                                                                                        // 9164
      if (resetEventsTimeout) {                                                                                        // 9165
        window.clearTimeout(resetEventsTimeout);                                                                       // 9166
      }                                                                                                                // 9167
                                                                                                                       // 9168
      resetEventsTimeout = window.setTimeout(function() {                                                              // 9169
        resetEvents();                                                                                                 // 9170
      }, 250);                                                                                                         // 9171
    }                                                                                                                  // 9172
                                                                                                                       // 9173
    function resetActionIndex() {                                                                                      // 9174
      vm.currentActionIndex = -1;                                                                                      // 9175
    }                                                                                                                  // 9176
                                                                                                                       // 9177
    function setupWatchers() {                                                                                         // 9178
      // Watch for changes to the direction and update classes/attributes                                              // 9179
      $scope.$watch('vm.direction', function(newDir, oldDir) {                                                         // 9180
        // Add the appropriate classes so we can target the direction in the CSS                                       // 9181
        $animate.removeClass($element, 'md-' + oldDir);                                                                // 9182
        $animate.addClass($element, 'md-' + newDir);                                                                   // 9183
                                                                                                                       // 9184
        // Reset the action index since it may have changed                                                            // 9185
        resetActionIndex();                                                                                            // 9186
      });                                                                                                              // 9187
                                                                                                                       // 9188
      var trigger, actions;                                                                                            // 9189
                                                                                                                       // 9190
      // Watch for changes to md-open                                                                                  // 9191
      $scope.$watch('vm.isOpen', function(isOpen) {                                                                    // 9192
        // Reset the action index since it may have changed                                                            // 9193
        resetActionIndex();                                                                                            // 9194
                                                                                                                       // 9195
        // We can't get the trigger/actions outside of the watch because the component hasn't been                     // 9196
        // linked yet, so we wait until the first watch fires to cache them.                                           // 9197
        if (!trigger || !actions) {                                                                                    // 9198
          trigger = getTriggerElement();                                                                               // 9199
          actions = getActionsElement();                                                                               // 9200
        }                                                                                                              // 9201
                                                                                                                       // 9202
        if (isOpen) {                                                                                                  // 9203
          enableKeyboard();                                                                                            // 9204
        } else {                                                                                                       // 9205
          disableKeyboard();                                                                                           // 9206
        }                                                                                                              // 9207
                                                                                                                       // 9208
        var toAdd = isOpen ? 'md-is-open' : '';                                                                        // 9209
        var toRemove = isOpen ? '' : 'md-is-open';                                                                     // 9210
                                                                                                                       // 9211
        // Set the proper ARIA attributes                                                                              // 9212
        trigger.attr('aria-haspopup', true);                                                                           // 9213
        trigger.attr('aria-expanded', isOpen);                                                                         // 9214
        actions.attr('aria-hidden', !isOpen);                                                                          // 9215
                                                                                                                       // 9216
        // Animate the CSS classes                                                                                     // 9217
        $animate.setClass($element, toAdd, toRemove);                                                                  // 9218
      });                                                                                                              // 9219
    }                                                                                                                  // 9220
                                                                                                                       // 9221
    // Fire the animations once in a separate digest loop to initialize them                                           // 9222
    function fireInitialAnimations() {                                                                                 // 9223
      $mdUtil.nextTick(function() {                                                                                    // 9224
        $animate.addClass($element, 'md-noop');                                                                        // 9225
      });                                                                                                              // 9226
    }                                                                                                                  // 9227
                                                                                                                       // 9228
    function enableKeyboard() {                                                                                        // 9229
      angular.element(document).on('keydown', keyPressed);                                                             // 9230
    }                                                                                                                  // 9231
                                                                                                                       // 9232
    function disableKeyboard() {                                                                                       // 9233
      angular.element(document).off('keydown', keyPressed);                                                            // 9234
    }                                                                                                                  // 9235
                                                                                                                       // 9236
    function keyPressed(event) {                                                                                       // 9237
      switch (event.which) {                                                                                           // 9238
        case $mdConstant.KEY_CODE.SPACE: event.preventDefault(); return false;                                         // 9239
        case $mdConstant.KEY_CODE.ESCAPE: vm.close(); event.preventDefault(); return false;                            // 9240
        case $mdConstant.KEY_CODE.LEFT_ARROW: doKeyLeft(event); return false;                                          // 9241
        case $mdConstant.KEY_CODE.UP_ARROW: doKeyUp(event); return false;                                              // 9242
        case $mdConstant.KEY_CODE.RIGHT_ARROW: doKeyRight(event); return false;                                        // 9243
        case $mdConstant.KEY_CODE.DOWN_ARROW: doKeyDown(event); return false;                                          // 9244
      }                                                                                                                // 9245
    }                                                                                                                  // 9246
                                                                                                                       // 9247
    function doActionPrev(event) {                                                                                     // 9248
      focusAction(event, -1);                                                                                          // 9249
    }                                                                                                                  // 9250
                                                                                                                       // 9251
    function doActionNext(event) {                                                                                     // 9252
      focusAction(event, 1);                                                                                           // 9253
    }                                                                                                                  // 9254
                                                                                                                       // 9255
    function focusAction(event, direction) {                                                                           // 9256
      // Grab all of the actions                                                                                       // 9257
      var actions = getActionsElement()[0].querySelectorAll('.md-fab-action-item');                                    // 9258
                                                                                                                       // 9259
      // Disable all other actions for tabbing                                                                         // 9260
      angular.forEach(actions, function(action) {                                                                      // 9261
        angular.element(angular.element(action).children()[0]).attr('tabindex', -1);                                   // 9262
      });                                                                                                              // 9263
                                                                                                                       // 9264
      // Increment/decrement the counter with restrictions                                                             // 9265
      vm.currentActionIndex = vm.currentActionIndex + direction;                                                       // 9266
      vm.currentActionIndex = Math.min(actions.length - 1, vm.currentActionIndex);                                     // 9267
      vm.currentActionIndex = Math.max(0, vm.currentActionIndex);                                                      // 9268
                                                                                                                       // 9269
      // Focus the element                                                                                             // 9270
      var focusElement =  angular.element(actions[vm.currentActionIndex]).children()[0];                               // 9271
      angular.element(focusElement).attr('tabindex', 0);                                                               // 9272
      focusElement.focus();                                                                                            // 9273
                                                                                                                       // 9274
      // Make sure the event doesn't bubble and cause something else                                                   // 9275
      event.preventDefault();                                                                                          // 9276
      event.stopImmediatePropagation();                                                                                // 9277
    }                                                                                                                  // 9278
                                                                                                                       // 9279
    function doKeyLeft(event) {                                                                                        // 9280
      if (vm.direction === 'left') {                                                                                   // 9281
        doActionNext(event);                                                                                           // 9282
      } else {                                                                                                         // 9283
        doActionPrev(event);                                                                                           // 9284
      }                                                                                                                // 9285
    }                                                                                                                  // 9286
                                                                                                                       // 9287
    function doKeyUp(event) {                                                                                          // 9288
      if (vm.direction === 'down') {                                                                                   // 9289
        doActionPrev(event);                                                                                           // 9290
      } else {                                                                                                         // 9291
        doActionNext(event);                                                                                           // 9292
      }                                                                                                                // 9293
    }                                                                                                                  // 9294
                                                                                                                       // 9295
    function doKeyRight(event) {                                                                                       // 9296
      if (vm.direction === 'left') {                                                                                   // 9297
        doActionPrev(event);                                                                                           // 9298
      } else {                                                                                                         // 9299
        doActionNext(event);                                                                                           // 9300
      }                                                                                                                // 9301
    }                                                                                                                  // 9302
                                                                                                                       // 9303
    function doKeyDown(event) {                                                                                        // 9304
      if (vm.direction === 'up') {                                                                                     // 9305
        doActionPrev(event);                                                                                           // 9306
      } else {                                                                                                         // 9307
        doActionNext(event);                                                                                           // 9308
      }                                                                                                                // 9309
    }                                                                                                                  // 9310
                                                                                                                       // 9311
    function isTrigger(element) {                                                                                      // 9312
      return $mdUtil.getClosest(element, 'md-fab-trigger');                                                            // 9313
    }                                                                                                                  // 9314
                                                                                                                       // 9315
    function isAction(element) {                                                                                       // 9316
      return $mdUtil.getClosest(element, 'md-fab-actions');                                                            // 9317
    }                                                                                                                  // 9318
                                                                                                                       // 9319
    function handleItemClick(event) {                                                                                  // 9320
      if (isTrigger(event.target)) {                                                                                   // 9321
        vm.toggle();                                                                                                   // 9322
      }                                                                                                                // 9323
                                                                                                                       // 9324
      if (isAction(event.target)) {                                                                                    // 9325
        vm.close();                                                                                                    // 9326
      }                                                                                                                // 9327
    }                                                                                                                  // 9328
                                                                                                                       // 9329
    function getTriggerElement() {                                                                                     // 9330
      return $element.find('md-fab-trigger');                                                                          // 9331
    }                                                                                                                  // 9332
                                                                                                                       // 9333
    function getActionsElement() {                                                                                     // 9334
      return $element.find('md-fab-actions');                                                                          // 9335
    }                                                                                                                  // 9336
  }                                                                                                                    // 9337
  FabController.$inject = ["$scope", "$element", "$animate", "$mdUtil", "$mdConstant"];                                // 9338
})();                                                                                                                  // 9339
                                                                                                                       // 9340
})();                                                                                                                  // 9341
(function(){                                                                                                           // 9342
"use strict";                                                                                                          // 9343
                                                                                                                       // 9344
(function() {                                                                                                          // 9345
  'use strict';                                                                                                        // 9346
                                                                                                                       // 9347
  /**                                                                                                                  // 9348
   * @ngdoc module                                                                                                     // 9349
   * @name material.components.fabSpeedDial                                                                            // 9350
   */                                                                                                                  // 9351
  angular                                                                                                              // 9352
    // Declare our module                                                                                              // 9353
    .module('material.components.fabSpeedDial', [                                                                      // 9354
      'material.core',                                                                                                 // 9355
      'material.components.fabShared',                                                                                 // 9356
      'material.components.fabTrigger',                                                                                // 9357
      'material.components.fabActions'                                                                                 // 9358
    ])                                                                                                                 // 9359
                                                                                                                       // 9360
    // Register our directive                                                                                          // 9361
    .directive('mdFabSpeedDial', MdFabSpeedDialDirective)                                                              // 9362
                                                                                                                       // 9363
    // Register our custom animations                                                                                  // 9364
    .animation('.md-fling', MdFabSpeedDialFlingAnimation)                                                              // 9365
    .animation('.md-scale', MdFabSpeedDialScaleAnimation)                                                              // 9366
                                                                                                                       // 9367
    // Register a service for each animation so that we can easily inject them into unit tests                         // 9368
    .service('mdFabSpeedDialFlingAnimation', MdFabSpeedDialFlingAnimation)                                             // 9369
    .service('mdFabSpeedDialScaleAnimation', MdFabSpeedDialScaleAnimation);                                            // 9370
                                                                                                                       // 9371
  /**                                                                                                                  // 9372
   * @ngdoc directive                                                                                                  // 9373
   * @name mdFabSpeedDial                                                                                              // 9374
   * @module material.components.fabSpeedDial                                                                          // 9375
   *                                                                                                                   // 9376
   * @restrict E                                                                                                       // 9377
   *                                                                                                                   // 9378
   * @description                                                                                                      // 9379
   * The `<md-fab-speed-dial>` directive is used to present a series of popup elements (usually                        // 9380
   * `<md-button>`s) for quick access to common actions.                                                               // 9381
   *                                                                                                                   // 9382
   * There are currently two animations available by applying one of the following classes to                          // 9383
   * the component:                                                                                                    // 9384
   *                                                                                                                   // 9385
   *  - `md-fling` - The speed dial items appear from underneath the trigger and move into their                       // 9386
   *    appropriate positions.                                                                                         // 9387
   *  - `md-scale` - The speed dial items appear in their proper places by scaling from 0% to 100%.                    // 9388
   *                                                                                                                   // 9389
   * You may also easily position the trigger by applying one one of the following classes to the                      // 9390
   * `<md-fab-speed-dial>` element:                                                                                    // 9391
   *  - `md-fab-top-left`                                                                                              // 9392
   *  - `md-fab-top-right`                                                                                             // 9393
   *  - `md-fab-bottom-left`                                                                                           // 9394
   *  - `md-fab-bottom-right`                                                                                          // 9395
   *                                                                                                                   // 9396
   * These CSS classes use `position: absolute`, so you need to ensure that the container element                      // 9397
   * also uses `position: absolute` or `position: relative` in order for them to work.                                 // 9398
   *                                                                                                                   // 9399
   * @usage                                                                                                            // 9400
   * <hljs lang="html">                                                                                                // 9401
   * <md-fab-speed-dial md-direction="up" class="md-fling">                                                            // 9402
   *   <md-fab-trigger>                                                                                                // 9403
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>                     // 9404
   *   </md-fab-trigger>                                                                                               // 9405
   *                                                                                                                   // 9406
   *   <md-fab-actions>                                                                                                // 9407
   *     <md-button aria-label="Add User">                                                                             // 9408
   *       <md-icon icon="/img/icons/user.svg"></md-icon>                                                              // 9409
   *     </md-button>                                                                                                  // 9410
   *                                                                                                                   // 9411
   *     <md-button aria-label="Add Group">                                                                            // 9412
   *       <md-icon icon="/img/icons/group.svg"></md-icon>                                                             // 9413
   *     </md-button>                                                                                                  // 9414
   *   </md-fab-actions>                                                                                               // 9415
   * </md-fab-speed-dial>                                                                                              // 9416
   * </hljs>                                                                                                           // 9417
   *                                                                                                                   // 9418
   * @param {string=} md-direction From which direction you would like the speed dial to appear                        // 9419
   * relative to the trigger element.                                                                                  // 9420
   * @param {expression=} md-open Programmatically control whether or not the speed-dial is visible.                   // 9421
   */                                                                                                                  // 9422
  function MdFabSpeedDialDirective() {                                                                                 // 9423
    return {                                                                                                           // 9424
      restrict: 'E',                                                                                                   // 9425
                                                                                                                       // 9426
      scope: {                                                                                                         // 9427
        direction: '@?mdDirection',                                                                                    // 9428
        isOpen: '=?mdOpen'                                                                                             // 9429
      },                                                                                                               // 9430
                                                                                                                       // 9431
      bindToController: true,                                                                                          // 9432
      controller: 'FabController',                                                                                     // 9433
      controllerAs: 'vm',                                                                                              // 9434
                                                                                                                       // 9435
      link: FabSpeedDialLink                                                                                           // 9436
    };                                                                                                                 // 9437
                                                                                                                       // 9438
    function FabSpeedDialLink(scope, element) {                                                                        // 9439
      // Prepend an element to hold our CSS variables so we can use them in the animations below                       // 9440
      element.prepend('<div class="md-css-variables"></div>');                                                         // 9441
    }                                                                                                                  // 9442
  }                                                                                                                    // 9443
                                                                                                                       // 9444
  function MdFabSpeedDialFlingAnimation() {                                                                            // 9445
    function runAnimation(element) {                                                                                   // 9446
      var el = element[0];                                                                                             // 9447
      var ctrl = element.controller('mdFabSpeedDial');                                                                 // 9448
      var items = el.querySelectorAll('.md-fab-action-item');                                                          // 9449
                                                                                                                       // 9450
      // Grab our trigger element                                                                                      // 9451
      var triggerElement = el.querySelector('md-fab-trigger');                                                         // 9452
                                                                                                                       // 9453
      // Grab our element which stores CSS variables                                                                   // 9454
      var variablesElement = el.querySelector('.md-css-variables');                                                    // 9455
                                                                                                                       // 9456
      // Setup JS variables based on our CSS variables                                                                 // 9457
      var startZIndex = parseInt(window.getComputedStyle(variablesElement).zIndex);                                    // 9458
                                                                                                                       // 9459
      // Always reset the items to their natural position/state                                                        // 9460
      angular.forEach(items, function(item, index) {                                                                   // 9461
        var styles = item.style;                                                                                       // 9462
                                                                                                                       // 9463
        styles.transform = styles.webkitTransform = '';                                                                // 9464
        styles.transitionDelay = '';                                                                                   // 9465
        styles.opacity = 1;                                                                                            // 9466
                                                                                                                       // 9467
        // Make the items closest to the trigger have the highest z-index                                              // 9468
        styles.zIndex = (items.length - index) + startZIndex;                                                          // 9469
      });                                                                                                              // 9470
                                                                                                                       // 9471
      // Set the trigger to be above all of the actions so they disappear behind it.                                   // 9472
      triggerElement.style.zIndex = startZIndex + items.length + 1;                                                    // 9473
                                                                                                                       // 9474
      // If the control is closed, hide the items behind the trigger                                                   // 9475
      if (!ctrl.isOpen) {                                                                                              // 9476
        angular.forEach(items, function(item, index) {                                                                 // 9477
          var newPosition, axis;                                                                                       // 9478
          var styles = item.style;                                                                                     // 9479
                                                                                                                       // 9480
          switch (ctrl.direction) {                                                                                    // 9481
            case 'up':                                                                                                 // 9482
              newPosition = item.scrollHeight * (index + 1);                                                           // 9483
              axis = 'Y';                                                                                              // 9484
              break;                                                                                                   // 9485
            case 'down':                                                                                               // 9486
              newPosition = -item.scrollHeight * (index + 1);                                                          // 9487
              axis = 'Y';                                                                                              // 9488
              break;                                                                                                   // 9489
            case 'left':                                                                                               // 9490
              newPosition = item.scrollWidth * (index + 1);                                                            // 9491
              axis = 'X';                                                                                              // 9492
              break;                                                                                                   // 9493
            case 'right':                                                                                              // 9494
              newPosition = -item.scrollWidth * (index + 1);                                                           // 9495
              axis = 'X';                                                                                              // 9496
              break;                                                                                                   // 9497
          }                                                                                                            // 9498
                                                                                                                       // 9499
          var newTranslate = 'translate' + axis + '(' + newPosition + 'px)';                                           // 9500
                                                                                                                       // 9501
          styles.transform = styles.webkitTransform = newTranslate;                                                    // 9502
        });                                                                                                            // 9503
      }                                                                                                                // 9504
    }                                                                                                                  // 9505
                                                                                                                       // 9506
    return {                                                                                                           // 9507
      addClass: function(element, className, done) {                                                                   // 9508
        if (element.hasClass('md-fling')) {                                                                            // 9509
          runAnimation(element);                                                                                       // 9510
          done();                                                                                                      // 9511
        }                                                                                                              // 9512
      },                                                                                                               // 9513
      removeClass: function(element, className, done) {                                                                // 9514
        runAnimation(element);                                                                                         // 9515
        done();                                                                                                        // 9516
      }                                                                                                                // 9517
    }                                                                                                                  // 9518
  }                                                                                                                    // 9519
                                                                                                                       // 9520
  function MdFabSpeedDialScaleAnimation() {                                                                            // 9521
    var delay = 65;                                                                                                    // 9522
                                                                                                                       // 9523
    function runAnimation(element) {                                                                                   // 9524
      var el = element[0];                                                                                             // 9525
      var ctrl = element.controller('mdFabSpeedDial');                                                                 // 9526
      var items = el.querySelectorAll('.md-fab-action-item');                                                          // 9527
                                                                                                                       // 9528
      // Always reset the items to their natural position/state                                                        // 9529
      angular.forEach(items, function(item, index) {                                                                   // 9530
        var styles = item.style,                                                                                       // 9531
          offsetDelay = index * delay;                                                                                 // 9532
                                                                                                                       // 9533
        styles.opacity = ctrl.isOpen ? 1 : 0;                                                                          // 9534
        styles.transform = styles.webkitTransform = ctrl.isOpen ? 'scale(1)' : 'scale(0)';                             // 9535
        styles.transitionDelay = (ctrl.isOpen ? offsetDelay : (items.length - offsetDelay)) + 'ms';                    // 9536
      });                                                                                                              // 9537
    }                                                                                                                  // 9538
                                                                                                                       // 9539
    return {                                                                                                           // 9540
      addClass: function(element, className, done) {                                                                   // 9541
        runAnimation(element);                                                                                         // 9542
        done();                                                                                                        // 9543
      },                                                                                                               // 9544
                                                                                                                       // 9545
      removeClass: function(element, className, done) {                                                                // 9546
        runAnimation(element);                                                                                         // 9547
        done();                                                                                                        // 9548
      }                                                                                                                // 9549
    }                                                                                                                  // 9550
  }                                                                                                                    // 9551
})();                                                                                                                  // 9552
                                                                                                                       // 9553
})();                                                                                                                  // 9554
(function(){                                                                                                           // 9555
"use strict";                                                                                                          // 9556
                                                                                                                       // 9557
(function() {                                                                                                          // 9558
  'use strict';                                                                                                        // 9559
                                                                                                                       // 9560
  /**                                                                                                                  // 9561
   * @ngdoc module                                                                                                     // 9562
   * @name material.components.fabToolbar                                                                              // 9563
   */                                                                                                                  // 9564
  angular                                                                                                              // 9565
    // Declare our module                                                                                              // 9566
    .module('material.components.fabToolbar', [                                                                        // 9567
      'material.core',                                                                                                 // 9568
      'material.components.fabShared',                                                                                 // 9569
      'material.components.fabTrigger',                                                                                // 9570
      'material.components.fabActions'                                                                                 // 9571
    ])                                                                                                                 // 9572
                                                                                                                       // 9573
    // Register our directive                                                                                          // 9574
    .directive('mdFabToolbar', MdFabToolbarDirective)                                                                  // 9575
                                                                                                                       // 9576
    // Register our custom animations                                                                                  // 9577
    .animation('.md-fab-toolbar', MdFabToolbarAnimation)                                                               // 9578
                                                                                                                       // 9579
    // Register a service for the animation so that we can easily inject it into unit tests                            // 9580
    .service('mdFabToolbarAnimation', MdFabToolbarAnimation);                                                          // 9581
                                                                                                                       // 9582
  /**                                                                                                                  // 9583
   * @ngdoc directive                                                                                                  // 9584
   * @name mdFabToolbar                                                                                                // 9585
   * @module material.components.fabToolbar                                                                            // 9586
   *                                                                                                                   // 9587
   * @restrict E                                                                                                       // 9588
   *                                                                                                                   // 9589
   * @description                                                                                                      // 9590
   *                                                                                                                   // 9591
   * The `<md-fab-toolbar>` directive is used present a toolbar of elements (usually `<md-button>`s)                   // 9592
   * for quick access to common actions when a floating action button is activated (via click or                       // 9593
   * keyboard navigation).                                                                                             // 9594
   *                                                                                                                   // 9595
   * You may also easily position the trigger by applying one one of the following classes to the                      // 9596
   * `<md-fab-toolbar>` element:                                                                                       // 9597
   *  - `md-fab-top-left`                                                                                              // 9598
   *  - `md-fab-top-right`                                                                                             // 9599
   *  - `md-fab-bottom-left`                                                                                           // 9600
   *  - `md-fab-bottom-right`                                                                                          // 9601
   *                                                                                                                   // 9602
   * These CSS classes use `position: absolute`, so you need to ensure that the container element                      // 9603
   * also uses `position: absolute` or `position: relative` in order for them to work.                                 // 9604
   *                                                                                                                   // 9605
   * @usage                                                                                                            // 9606
   *                                                                                                                   // 9607
   * <hljs lang="html">                                                                                                // 9608
   * <md-fab-toolbar md-direction='left'>                                                                              // 9609
   *   <md-fab-trigger>                                                                                                // 9610
   *     <md-button aria-label="Add..."><md-icon icon="/img/icons/plus.svg"></md-icon></md-button>                     // 9611
   *   </md-fab-trigger>                                                                                               // 9612
   *                                                                                                                   // 9613
   *   <md-fab-actions>                                                                                                // 9614
   *     <md-button aria-label="Add User">                                                                             // 9615
   *       <md-icon icon="/img/icons/user.svg"></md-icon>                                                              // 9616
   *     </md-button>                                                                                                  // 9617
   *                                                                                                                   // 9618
   *     <md-button aria-label="Add Group">                                                                            // 9619
   *       <md-icon icon="/img/icons/group.svg"></md-icon>                                                             // 9620
   *     </md-button>                                                                                                  // 9621
   *   </md-fab-actions>                                                                                               // 9622
   * </md-fab-toolbar>                                                                                                 // 9623
   * </hljs>                                                                                                           // 9624
   *                                                                                                                   // 9625
   * @param {string=} md-direction From which direction you would like the toolbar items to appear                     // 9626
   * relative to the trigger element. Supports `left` and `right` directions.                                          // 9627
   * @param {expression=} md-open Programmatically control whether or not the toolbar is visible.                      // 9628
   */                                                                                                                  // 9629
  function MdFabToolbarDirective() {                                                                                   // 9630
    return {                                                                                                           // 9631
      restrict: 'E',                                                                                                   // 9632
      transclude: true,                                                                                                // 9633
      template: '<div class="md-fab-toolbar-wrapper">' +                                                               // 9634
      '  <div class="md-fab-toolbar-content" ng-transclude></div>' +                                                   // 9635
      '</div>',                                                                                                        // 9636
                                                                                                                       // 9637
      scope: {                                                                                                         // 9638
        direction: '@?mdDirection',                                                                                    // 9639
        isOpen: '=?mdOpen'                                                                                             // 9640
      },                                                                                                               // 9641
                                                                                                                       // 9642
      bindToController: true,                                                                                          // 9643
      controller: 'FabController',                                                                                     // 9644
      controllerAs: 'vm',                                                                                              // 9645
                                                                                                                       // 9646
      link: link                                                                                                       // 9647
    };                                                                                                                 // 9648
                                                                                                                       // 9649
    function link(scope, element, attributes) {                                                                        // 9650
      // Add the base class for animations                                                                             // 9651
      element.addClass('md-fab-toolbar');                                                                              // 9652
                                                                                                                       // 9653
      // Prepend the background element to the trigger's button                                                        // 9654
      element.find('md-fab-trigger').find('button')                                                                    // 9655
        .prepend('<div class="md-fab-toolbar-background"></div>');                                                     // 9656
    }                                                                                                                  // 9657
  }                                                                                                                    // 9658
                                                                                                                       // 9659
  function MdFabToolbarAnimation() {                                                                                   // 9660
                                                                                                                       // 9661
    function runAnimation(element, className, done) {                                                                  // 9662
      // If no className was specified, don't do anything                                                              // 9663
      if (!className) {                                                                                                // 9664
        return;                                                                                                        // 9665
      }                                                                                                                // 9666
                                                                                                                       // 9667
      var el = element[0];                                                                                             // 9668
      var ctrl = element.controller('mdFabToolbar');                                                                   // 9669
                                                                                                                       // 9670
      // Grab the relevant child elements                                                                              // 9671
      var backgroundElement = el.querySelector('.md-fab-toolbar-background');                                          // 9672
      var triggerElement = el.querySelector('md-fab-trigger button');                                                  // 9673
      var toolbarElement = el.querySelector('md-toolbar');                                                             // 9674
      var iconElement = el.querySelector('md-fab-trigger button md-icon');                                             // 9675
      var actions = element.find('md-fab-actions').children();                                                         // 9676
                                                                                                                       // 9677
      // If we have both elements, use them to position the new background                                             // 9678
      if (triggerElement && backgroundElement) {                                                                       // 9679
        // Get our variables                                                                                           // 9680
        var color = window.getComputedStyle(triggerElement).getPropertyValue('background-color');                      // 9681
        var width = el.offsetWidth;                                                                                    // 9682
        var height = el.offsetHeight;                                                                                  // 9683
                                                                                                                       // 9684
        // Make a square                                                                                               // 9685
        var scale = width * 2;                                                                                         // 9686
                                                                                                                       // 9687
        // Set some basic styles no matter what animation we're doing                                                  // 9688
        backgroundElement.style.backgroundColor = color;                                                               // 9689
        backgroundElement.style.borderRadius = width + 'px';                                                           // 9690
                                                                                                                       // 9691
        // If we're open                                                                                               // 9692
        if (ctrl.isOpen) {                                                                                             // 9693
          // Turn on toolbar pointer events when closed                                                                // 9694
          toolbarElement.style.pointerEvents = 'initial';                                                              // 9695
                                                                                                                       // 9696
          // Set the width/height to take up the full toolbar width                                                    // 9697
          backgroundElement.style.width = scale + 'px';                                                                // 9698
          backgroundElement.style.height = scale + 'px';                                                               // 9699
                                                                                                                       // 9700
          // Set the top/left to move up/left (or right) by the scale width/height                                     // 9701
          backgroundElement.style.top = -(scale / 2) + 'px';                                                           // 9702
                                                                                                                       // 9703
          if (element.hasClass('md-right')) {                                                                          // 9704
            backgroundElement.style.left = -(scale / 2) + 'px';                                                        // 9705
            backgroundElement.style.right = null;                                                                      // 9706
          }                                                                                                            // 9707
                                                                                                                       // 9708
          if (element.hasClass('md-left')) {                                                                           // 9709
            backgroundElement.style.right = -(scale / 2) + 'px';                                                       // 9710
            backgroundElement.style.left = null;                                                                       // 9711
          }                                                                                                            // 9712
                                                                                                                       // 9713
          // Set the next close animation to have the proper delays                                                    // 9714
          backgroundElement.style.transitionDelay = '0ms';                                                             // 9715
          iconElement && (iconElement.style.transitionDelay = '.3s');                                                  // 9716
                                                                                                                       // 9717
          // Apply a transition delay to actions                                                                       // 9718
          angular.forEach(actions, function(action, index) {                                                           // 9719
            action.style.transitionDelay = (actions.length - index) * 25 + 'ms';                                       // 9720
          });                                                                                                          // 9721
        } else {                                                                                                       // 9722
          // Turn off toolbar pointer events when closed                                                               // 9723
          toolbarElement.style.pointerEvents = 'none';                                                                 // 9724
                                                                                                                       // 9725
          // Otherwise, set the width/height to the trigger's width/height                                             // 9726
          backgroundElement.style.width = triggerElement.offsetWidth + 'px';                                           // 9727
          backgroundElement.style.height = triggerElement.offsetHeight + 'px';                                         // 9728
                                                                                                                       // 9729
          // Reset the position                                                                                        // 9730
          backgroundElement.style.top = '0px';                                                                         // 9731
                                                                                                                       // 9732
          if (element.hasClass('md-right')) {                                                                          // 9733
            backgroundElement.style.left = '0px';                                                                      // 9734
            backgroundElement.style.right = null;                                                                      // 9735
          }                                                                                                            // 9736
                                                                                                                       // 9737
          if (element.hasClass('md-left')) {                                                                           // 9738
            backgroundElement.style.right = '0px';                                                                     // 9739
            backgroundElement.style.left = null;                                                                       // 9740
          }                                                                                                            // 9741
                                                                                                                       // 9742
          // Set the next open animation to have the proper delays                                                     // 9743
          backgroundElement.style.transitionDelay = '200ms';                                                           // 9744
          iconElement && (iconElement.style.transitionDelay = '0ms');                                                  // 9745
                                                                                                                       // 9746
          // Apply a transition delay to actions                                                                       // 9747
          angular.forEach(actions, function(action, index) {                                                           // 9748
            action.style.transitionDelay = 200 + (index * 25) + 'ms';                                                  // 9749
          });                                                                                                          // 9750
        }                                                                                                              // 9751
      }                                                                                                                // 9752
    }                                                                                                                  // 9753
                                                                                                                       // 9754
    return {                                                                                                           // 9755
      addClass: function(element, className, done) {                                                                   // 9756
        runAnimation(element, className, done);                                                                        // 9757
        done();                                                                                                        // 9758
      },                                                                                                               // 9759
                                                                                                                       // 9760
      removeClass: function(element, className, done) {                                                                // 9761
        runAnimation(element, className, done);                                                                        // 9762
        done();                                                                                                        // 9763
      }                                                                                                                // 9764
    }                                                                                                                  // 9765
  }                                                                                                                    // 9766
})();                                                                                                                  // 9767
})();                                                                                                                  // 9768
(function(){                                                                                                           // 9769
"use strict";                                                                                                          // 9770
                                                                                                                       // 9771
(function() {                                                                                                          // 9772
  'use strict';                                                                                                        // 9773
                                                                                                                       // 9774
  /**                                                                                                                  // 9775
   * @ngdoc module                                                                                                     // 9776
   * @name material.components.fabTrigger                                                                              // 9777
   */                                                                                                                  // 9778
  angular                                                                                                              // 9779
    .module('material.components.fabTrigger', ['material.core'])                                                       // 9780
    .directive('mdFabTrigger', MdFabTriggerDirective);                                                                 // 9781
                                                                                                                       // 9782
  /**                                                                                                                  // 9783
   * @ngdoc directive                                                                                                  // 9784
   * @name mdFabTrigger                                                                                                // 9785
   * @module material.components.fabSpeedDial                                                                          // 9786
   *                                                                                                                   // 9787
   * @restrict E                                                                                                       // 9788
   *                                                                                                                   // 9789
   * @description                                                                                                      // 9790
   * The `<md-fab-trigger>` directive is used inside of a `<md-fab-speed-dial>` or                                     // 9791
   * `<md-fab-toolbar>` directive to mark the an element (or elements) as the trigger and setup the                    // 9792
   * proper event listeners.                                                                                           // 9793
   *                                                                                                                   // 9794
   * @usage                                                                                                            // 9795
   * See the `<md-fab-speed-dial>` or `<md-fab-toolbar>` directives for example usage.                                 // 9796
   */                                                                                                                  // 9797
  function MdFabTriggerDirective() {                                                                                   // 9798
    // TODO: Remove this completely?                                                                                   // 9799
    return {                                                                                                           // 9800
      restrict: 'E',                                                                                                   // 9801
                                                                                                                       // 9802
      require: ['^?mdFabSpeedDial', '^?mdFabToolbar']                                                                  // 9803
    };                                                                                                                 // 9804
  }                                                                                                                    // 9805
})();                                                                                                                  // 9806
                                                                                                                       // 9807
                                                                                                                       // 9808
})();                                                                                                                  // 9809
(function(){                                                                                                           // 9810
"use strict";                                                                                                          // 9811
                                                                                                                       // 9812
/**                                                                                                                    // 9813
 * @ngdoc module                                                                                                       // 9814
 * @name material.components.gridList                                                                                  // 9815
 */                                                                                                                    // 9816
angular.module('material.components.gridList', ['material.core'])                                                      // 9817
       .directive('mdGridList', GridListDirective)                                                                     // 9818
       .directive('mdGridTile', GridTileDirective)                                                                     // 9819
       .directive('mdGridTileFooter', GridTileCaptionDirective)                                                        // 9820
       .directive('mdGridTileHeader', GridTileCaptionDirective)                                                        // 9821
       .factory('$mdGridLayout', GridLayoutFactory);                                                                   // 9822
                                                                                                                       // 9823
/**                                                                                                                    // 9824
 * @ngdoc directive                                                                                                    // 9825
 * @name mdGridList                                                                                                    // 9826
 * @module material.components.gridList                                                                                // 9827
 * @restrict E                                                                                                         // 9828
 * @description                                                                                                        // 9829
 * Grid lists are an alternative to standard list views. Grid lists are distinct                                       // 9830
 * from grids used for layouts and other visual presentations.                                                         // 9831
 *                                                                                                                     // 9832
 * A grid list is best suited to presenting a homogenous data type, typically                                          // 9833
 * images, and is optimized for visual comprehension and differentiating between                                       // 9834
 * like data types.                                                                                                    // 9835
 *                                                                                                                     // 9836
 * A grid list is a continuous element consisting of tessellated, regular                                              // 9837
 * subdivisions called cells that contain tiles (`md-grid-tile`).                                                      // 9838
 *                                                                                                                     // 9839
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7OVlEaXZ5YmU1Xzg/components_grids_usage2.png"
 *    style="width: 300px; height: auto; margin-right: 16px;" alt="Concept of grid explained visually">                // 9841
 * <img src="//material-design.storage.googleapis.com/publish/v_2/material_ext_publish/0Bx4BSt6jniD7VGhsOE5idWlJWXM/components_grids_usage3.png"
 *    style="width: 300px; height: auto;" alt="Grid concepts legend">                                                  // 9843
 *                                                                                                                     // 9844
 * Cells are arrayed vertically and horizontally within the grid.                                                      // 9845
 *                                                                                                                     // 9846
 * Tiles hold content and can span one or more cells vertically or horizontally.                                       // 9847
 *                                                                                                                     // 9848
 * ### Responsive Attributes                                                                                           // 9849
 *                                                                                                                     // 9850
 * The `md-grid-list` directive supports "responsive" attributes, which allow                                          // 9851
 * different `md-cols`, `md-gutter` and `md-row-height` values depending on the                                        // 9852
 * currently matching media query (as defined in `$mdConstant.MEDIA`).                                                 // 9853
 *                                                                                                                     // 9854
 * In order to set a responsive attribute, first define the fallback value with                                        // 9855
 * the standard attribute name, then add additional attributes with the                                                // 9856
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`                                          // 9857
 * (ie. `md-cols-lg="8"`)                                                                                              // 9858
 *                                                                                                                     // 9859
 * @param {number} md-cols Number of columns in the grid.                                                              // 9860
 * @param {string} md-row-height One of                                                                                // 9861
 * <ul>                                                                                                                // 9862
 *   <li>CSS length - Fixed height rows (eg. `8px` or `1rem`)</li>                                                     // 9863
 *   <li>`{width}:{height}` - Ratio of width to height (eg.                                                            // 9864
 *   `md-row-height="16:9"`)</li>                                                                                      // 9865
 *   <li>`"fit"` - Height will be determined by subdividing the available                                              // 9866
 *   height by the number of rows</li>                                                                                 // 9867
 * </ul>                                                                                                               // 9868
 * @param {string=} md-gutter The amount of space between tiles in CSS units                                           // 9869
 *     (default 1px)                                                                                                   // 9870
 * @param {expression=} md-on-layout Expression to evaluate after layout. Event                                        // 9871
 *     object is available as `$event`, and contains performance information.                                          // 9872
 *                                                                                                                     // 9873
 * @usage                                                                                                              // 9874
 * Basic:                                                                                                              // 9875
 * <hljs lang="html">                                                                                                  // 9876
 * <md-grid-list md-cols="5" md-gutter="1em" md-row-height="4:3">                                                      // 9877
 *   <md-grid-tile></md-grid-tile>                                                                                     // 9878
 * </md-grid-list>                                                                                                     // 9879
 * </hljs>                                                                                                             // 9880
 *                                                                                                                     // 9881
 * Fixed-height rows:                                                                                                  // 9882
 * <hljs lang="html">                                                                                                  // 9883
 * <md-grid-list md-cols="4" md-row-height="200px" ...>                                                                // 9884
 *   <md-grid-tile></md-grid-tile>                                                                                     // 9885
 * </md-grid-list>                                                                                                     // 9886
 * </hljs>                                                                                                             // 9887
 *                                                                                                                     // 9888
 * Fit rows:                                                                                                           // 9889
 * <hljs lang="html">                                                                                                  // 9890
 * <md-grid-list md-cols="4" md-row-height="fit" style="height: 400px;" ...>                                           // 9891
 *   <md-grid-tile></md-grid-tile>                                                                                     // 9892
 * </md-grid-list>                                                                                                     // 9893
 * </hljs>                                                                                                             // 9894
 *                                                                                                                     // 9895
 * Using responsive attributes:                                                                                        // 9896
 * <hljs lang="html">                                                                                                  // 9897
 * <md-grid-list                                                                                                       // 9898
 *     md-cols-sm="2"                                                                                                  // 9899
 *     md-cols-md="4"                                                                                                  // 9900
 *     md-cols-lg="8"                                                                                                  // 9901
 *     md-cols-gt-lg="12"                                                                                              // 9902
 *     ...>                                                                                                            // 9903
 *   <md-grid-tile></md-grid-tile>                                                                                     // 9904
 * </md-grid-list>                                                                                                     // 9905
 * </hljs>                                                                                                             // 9906
 */                                                                                                                    // 9907
function GridListDirective($interpolate, $mdConstant, $mdGridLayout, $mdMedia) {                                       // 9908
  return {                                                                                                             // 9909
    restrict: 'E',                                                                                                     // 9910
    controller: GridListController,                                                                                    // 9911
    scope: {                                                                                                           // 9912
      mdOnLayout: '&'                                                                                                  // 9913
    },                                                                                                                 // 9914
    link: postLink                                                                                                     // 9915
  };                                                                                                                   // 9916
                                                                                                                       // 9917
  function postLink(scope, element, attrs, ctrl) {                                                                     // 9918
    // Apply semantics                                                                                                 // 9919
    element.attr('role', 'list');                                                                                      // 9920
                                                                                                                       // 9921
    // Provide the controller with a way to trigger layouts.                                                           // 9922
    ctrl.layoutDelegate = layoutDelegate;                                                                              // 9923
                                                                                                                       // 9924
    var invalidateLayout = angular.bind(ctrl, ctrl.invalidateLayout),                                                  // 9925
        unwatchAttrs = watchMedia();                                                                                   // 9926
      scope.$on('$destroy', unwatchMedia);                                                                             // 9927
                                                                                                                       // 9928
    /**                                                                                                                // 9929
     * Watches for changes in media, invalidating layout as necessary.                                                 // 9930
     */                                                                                                                // 9931
    function watchMedia() {                                                                                            // 9932
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 9933
        $mdMedia(mediaName); // initialize                                                                             // 9934
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])                                                                // 9935
            .addListener(invalidateLayout);                                                                            // 9936
      }                                                                                                                // 9937
      return $mdMedia.watchResponsiveAttributes(                                                                       // 9938
          ['md-cols', 'md-row-height'], attrs, layoutIfMediaMatch);                                                    // 9939
    }                                                                                                                  // 9940
                                                                                                                       // 9941
    function unwatchMedia() {                                                                                          // 9942
      ctrl.layoutDelegate = angular.noop;                                                                              // 9943
                                                                                                                       // 9944
      unwatchAttrs();                                                                                                  // 9945
      for (var mediaName in $mdConstant.MEDIA) {                                                                       // 9946
        $mdMedia.getQuery($mdConstant.MEDIA[mediaName])                                                                // 9947
            .removeListener(invalidateLayout);                                                                         // 9948
      }                                                                                                                // 9949
    }                                                                                                                  // 9950
                                                                                                                       // 9951
    /**                                                                                                                // 9952
     * Performs grid layout if the provided mediaName matches the currently                                            // 9953
     * active media type.                                                                                              // 9954
     */                                                                                                                // 9955
    function layoutIfMediaMatch(mediaName) {                                                                           // 9956
      if (mediaName == null) {                                                                                         // 9957
        // TODO(shyndman): It would be nice to only layout if we have                                                  // 9958
        // instances of attributes using this media type                                                               // 9959
        ctrl.invalidateLayout();                                                                                       // 9960
      } else if ($mdMedia(mediaName)) {                                                                                // 9961
        ctrl.invalidateLayout();                                                                                       // 9962
      }                                                                                                                // 9963
    }                                                                                                                  // 9964
                                                                                                                       // 9965
    var lastLayoutProps;                                                                                               // 9966
                                                                                                                       // 9967
    /**                                                                                                                // 9968
     * Invokes the layout engine, and uses its results to lay out our                                                  // 9969
     * tile elements.                                                                                                  // 9970
     *                                                                                                                 // 9971
     * @param {boolean} tilesInvalidated Whether tiles have been                                                       // 9972
     *    added/removed/moved since the last layout. This is to avoid situations                                       // 9973
     *    where tiles are replaced with properties identical to their removed                                          // 9974
     *    counterparts.                                                                                                // 9975
     */                                                                                                                // 9976
    function layoutDelegate(tilesInvalidated) {                                                                        // 9977
      var tiles = getTileElements();                                                                                   // 9978
      var props = {                                                                                                    // 9979
        tileSpans: getTileSpans(tiles),                                                                                // 9980
        colCount: getColumnCount(),                                                                                    // 9981
        rowMode: getRowMode(),                                                                                         // 9982
        rowHeight: getRowHeight(),                                                                                     // 9983
        gutter: getGutter()                                                                                            // 9984
      };                                                                                                               // 9985
                                                                                                                       // 9986
      if (!tilesInvalidated && angular.equals(props, lastLayoutProps)) {                                               // 9987
        return;                                                                                                        // 9988
      }                                                                                                                // 9989
                                                                                                                       // 9990
      var performance =                                                                                                // 9991
        $mdGridLayout(props.colCount, props.tileSpans, tiles)                                                          // 9992
          .map(function(tilePositions, rowCount) {                                                                     // 9993
            return {                                                                                                   // 9994
              grid: {                                                                                                  // 9995
                element: element,                                                                                      // 9996
                style: getGridStyle(props.colCount, rowCount,                                                          // 9997
                    props.gutter, props.rowMode, props.rowHeight)                                                      // 9998
              },                                                                                                       // 9999
              tiles: tilePositions.map(function(ps, i) {                                                               // 10000
                return {                                                                                               // 10001
                  element: angular.element(tiles[i]),                                                                  // 10002
                  style: getTileStyle(ps.position, ps.spans,                                                           // 10003
                      props.colCount, rowCount,                                                                        // 10004
                      props.gutter, props.rowMode, props.rowHeight)                                                    // 10005
                }                                                                                                      // 10006
              })                                                                                                       // 10007
            }                                                                                                          // 10008
          })                                                                                                           // 10009
          .reflow()                                                                                                    // 10010
          .performance();                                                                                              // 10011
                                                                                                                       // 10012
      // Report layout                                                                                                 // 10013
      scope.mdOnLayout({                                                                                               // 10014
        $event: {                                                                                                      // 10015
          performance: performance                                                                                     // 10016
        }                                                                                                              // 10017
      });                                                                                                              // 10018
                                                                                                                       // 10019
      lastLayoutProps = props;                                                                                         // 10020
    }                                                                                                                  // 10021
                                                                                                                       // 10022
    // Use $interpolate to do some simple string interpolation as a convenience.                                       // 10023
                                                                                                                       // 10024
    var startSymbol = $interpolate.startSymbol();                                                                      // 10025
    var endSymbol = $interpolate.endSymbol();                                                                          // 10026
                                                                                                                       // 10027
    // Returns an expression wrapped in the interpolator's start and end symbols.                                      // 10028
    function expr(exprStr) {                                                                                           // 10029
      return startSymbol + exprStr + endSymbol;                                                                        // 10030
    }                                                                                                                  // 10031
                                                                                                                       // 10032
    // The amount of space a single 1x1 tile would take up (either width or height), used as                           // 10033
    // a basis for other calculations. This consists of taking the base size percent (as would be                      // 10034
    // if evenly dividing the size between cells), and then subtracting the size of one gutter.                        // 10035
    // However, since there are no gutters on the edges, each tile only uses a fration                                 // 10036
    // (gutterShare = numGutters / numCells) of the gutter size. (Imagine having one gutter per                        // 10037
    // tile, and then breaking up the extra gutter on the edge evenly among the cells).                                // 10038
    var UNIT = $interpolate(expr('share') + '% - (' + expr('gutter') + ' * ' + expr('gutterShare') + ')');             // 10039
                                                                                                                       // 10040
    // The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.                        // 10041
    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the                             // 10042
    // row/column (offset).                                                                                            // 10043
    var POSITION  = $interpolate('calc((' + expr('unit') + ' + ' + expr('gutter') + ') * ' + expr('offset') + ')');    // 10044
                                                                                                                       // 10045
    // The actual size of a tile, e.g., width or height, taking rowSpan or colSpan into account.                       // 10046
    // This is computed by multiplying the base unit by the rowSpan/colSpan, and then adding back                      // 10047
    // in the space that the gutter would normally have used (which was already accounted for in                       // 10048
    // the base unit calculation).                                                                                     // 10049
    var DIMENSION = $interpolate('calc((' + expr('unit') + ') * ' + expr('span') + ' + (' + expr('span') + ' - 1) * ' + expr('gutter') + ')');
                                                                                                                       // 10051
    /**                                                                                                                // 10052
     * Gets the styles applied to a tile element described by the given parameters.                                    // 10053
     * @param {{row: number, col: number}} position The row and column indices of the tile.                            // 10054
     * @param {{row: number, col: number}} spans The rowSpan and colSpan of the tile.                                  // 10055
     * @param {number} colCount The number of columns.                                                                 // 10056
     * @param {number} rowCount The number of rows.                                                                    // 10057
     * @param {string} gutter The amount of space between tiles. This will be something like                           // 10058
     *     '5px' or '2em'.                                                                                             // 10059
     * @param {string} rowMode The row height mode. Can be one of:                                                     // 10060
     *     'fixed': all rows have a fixed size, given by rowHeight,                                                    // 10061
     *     'ratio': row height defined as a ratio to width, or                                                         // 10062
     *     'fit': fit to the grid-list element height, divinding evenly among rows.                                    // 10063
     * @param {string|number} rowHeight The height of a row. This is only used for 'fixed' mode and                    // 10064
     *     for 'ratio' mode. For 'ratio' mode, this is the *ratio* of width-to-height (e.g., 0.75).                    // 10065
     * @returns {Object} Map of CSS properties to be applied to the style element. Will define                         // 10066
     *     values for top, left, width, height, marginTop, and paddingTop.                                             // 10067
     */                                                                                                                // 10068
    function getTileStyle(position, spans, colCount, rowCount, gutter, rowMode, rowHeight) {                           // 10069
      // TODO(shyndman): There are style caching opportunities here.                                                   // 10070
                                                                                                                       // 10071
      // Percent of the available horizontal space that one column takes up.                                           // 10072
      var hShare = (1 / colCount) * 100;                                                                               // 10073
                                                                                                                       // 10074
      // Fraction of the gutter size that each column takes up.                                                        // 10075
      var hGutterShare = (colCount - 1) / colCount;                                                                    // 10076
                                                                                                                       // 10077
      // Base horizontal size of a column.                                                                             // 10078
      var hUnit = UNIT({share: hShare, gutterShare: hGutterShare, gutter: gutter});                                    // 10079
                                                                                                                       // 10080
      // The width and horizontal position of each tile is always calculated the same way, but the                     // 10081
      // height and vertical position depends on the rowMode.                                                          // 10082
      var style = {                                                                                                    // 10083
        left: POSITION({ unit: hUnit, offset: position.col, gutter: gutter }),                                         // 10084
        width: DIMENSION({ unit: hUnit, span: spans.col, gutter: gutter }),                                            // 10085
        // resets                                                                                                      // 10086
        paddingTop: '',                                                                                                // 10087
        marginTop: '',                                                                                                 // 10088
        top: '',                                                                                                       // 10089
        height: ''                                                                                                     // 10090
      };                                                                                                               // 10091
                                                                                                                       // 10092
      switch (rowMode) {                                                                                               // 10093
        case 'fixed':                                                                                                  // 10094
          // In fixed mode, simply use the given rowHeight.                                                            // 10095
          style.top = POSITION({ unit: rowHeight, offset: position.row, gutter: gutter });                             // 10096
          style.height = DIMENSION({ unit: rowHeight, span: spans.row, gutter: gutter });                              // 10097
          break;                                                                                                       // 10098
                                                                                                                       // 10099
        case 'ratio':                                                                                                  // 10100
          // Percent of the available vertical space that one row takes up. Here, rowHeight holds                      // 10101
          // the ratio value. For example, if the width:height ratio is 4:3, rowHeight = 1.333.                        // 10102
          var vShare = hShare / rowHeight;                                                                             // 10103
                                                                                                                       // 10104
          // Base veritcal size of a row.                                                                              // 10105
          var vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });                              // 10106
                                                                                                                       // 10107
          // padidngTop and marginTop are used to maintain the given aspect ratio, as                                  // 10108
          // a percentage-based value for these properties is applied to the *width* of the                            // 10109
          // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties                                // 10110
          style.paddingTop = DIMENSION({ unit: vUnit, span: spans.row, gutter: gutter});                               // 10111
          style.marginTop = POSITION({ unit: vUnit, offset: position.row, gutter: gutter });                           // 10112
          break;                                                                                                       // 10113
                                                                                                                       // 10114
        case 'fit':                                                                                                    // 10115
          // Fraction of the gutter size that each column takes up.                                                    // 10116
          var vGutterShare = (rowCount - 1) / rowCount;                                                                // 10117
                                                                                                                       // 10118
          // Percent of the available vertical space that one row takes up.                                            // 10119
          var vShare = (1 / rowCount) * 100;                                                                           // 10120
                                                                                                                       // 10121
          // Base vertical size of a row.                                                                              // 10122
          var vUnit = UNIT({share: vShare, gutterShare: vGutterShare, gutter: gutter});                                // 10123
                                                                                                                       // 10124
          style.top = POSITION({unit: vUnit, offset: position.row, gutter: gutter});                                   // 10125
          style.height = DIMENSION({unit: vUnit, span: spans.row, gutter: gutter});                                    // 10126
          break;                                                                                                       // 10127
      }                                                                                                                // 10128
                                                                                                                       // 10129
      return style;                                                                                                    // 10130
    }                                                                                                                  // 10131
                                                                                                                       // 10132
    function getGridStyle(colCount, rowCount, gutter, rowMode, rowHeight) {                                            // 10133
      var style = {                                                                                                    // 10134
        height: '',                                                                                                    // 10135
        paddingBottom: ''                                                                                              // 10136
      };                                                                                                               // 10137
                                                                                                                       // 10138
      switch(rowMode) {                                                                                                // 10139
        case 'fixed':                                                                                                  // 10140
          style.height = DIMENSION({ unit: rowHeight, span: rowCount, gutter: gutter });                               // 10141
          break;                                                                                                       // 10142
                                                                                                                       // 10143
        case 'ratio':                                                                                                  // 10144
          // rowHeight is width / height                                                                               // 10145
          var hGutterShare = colCount === 1 ? 0 : (colCount - 1) / colCount,                                           // 10146
              hShare = (1 / colCount) * 100,                                                                           // 10147
              vShare = hShare * (1 / rowHeight),                                                                       // 10148
              vUnit = UNIT({ share: vShare, gutterShare: hGutterShare, gutter: gutter });                              // 10149
                                                                                                                       // 10150
          style.paddingBottom = DIMENSION({ unit: vUnit, span: rowCount, gutter: gutter});                             // 10151
          break;                                                                                                       // 10152
                                                                                                                       // 10153
        case 'fit':                                                                                                    // 10154
          // noop, as the height is user set                                                                           // 10155
          break;                                                                                                       // 10156
      }                                                                                                                // 10157
                                                                                                                       // 10158
      return style;                                                                                                    // 10159
    }                                                                                                                  // 10160
                                                                                                                       // 10161
    function getTileElements() {                                                                                       // 10162
      return [].filter.call(element.children(), function(ele) {                                                        // 10163
        return ele.tagName == 'MD-GRID-TILE';                                                                          // 10164
      });                                                                                                              // 10165
    }                                                                                                                  // 10166
                                                                                                                       // 10167
    /**                                                                                                                // 10168
     * Gets an array of objects containing the rowspan and colspan for each tile.                                      // 10169
     * @returns {Array<{row: number, col: number}>}                                                                    // 10170
     */                                                                                                                // 10171
    function getTileSpans(tileElements) {                                                                              // 10172
      return [].map.call(tileElements, function(ele) {                                                                 // 10173
        var ctrl = angular.element(ele).controller('mdGridTile');                                                      // 10174
        return {                                                                                                       // 10175
          row: parseInt(                                                                                               // 10176
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-rowspan'), 10) || 1,                                    // 10177
          col: parseInt(                                                                                               // 10178
              $mdMedia.getResponsiveAttribute(ctrl.$attrs, 'md-colspan'), 10) || 1                                     // 10179
        };                                                                                                             // 10180
      });                                                                                                              // 10181
    }                                                                                                                  // 10182
                                                                                                                       // 10183
    function getColumnCount() {                                                                                        // 10184
      var colCount = parseInt($mdMedia.getResponsiveAttribute(attrs, 'md-cols'), 10);                                  // 10185
      if (isNaN(colCount)) {                                                                                           // 10186
        throw 'md-grid-list: md-cols attribute was not found, or contained a non-numeric value';                       // 10187
      }                                                                                                                // 10188
      return colCount;                                                                                                 // 10189
    }                                                                                                                  // 10190
                                                                                                                       // 10191
    function getGutter() {                                                                                             // 10192
      return applyDefaultUnit($mdMedia.getResponsiveAttribute(attrs, 'md-gutter') || 1);                               // 10193
    }                                                                                                                  // 10194
                                                                                                                       // 10195
    function getRowHeight() {                                                                                          // 10196
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');                                         // 10197
      switch (getRowMode()) {                                                                                          // 10198
        case 'fixed':                                                                                                  // 10199
          return applyDefaultUnit(rowHeight);                                                                          // 10200
        case 'ratio':                                                                                                  // 10201
          var whRatio = rowHeight.split(':');                                                                          // 10202
          return parseFloat(whRatio[0]) / parseFloat(whRatio[1]);                                                      // 10203
        case 'fit':                                                                                                    // 10204
          return 0; // N/A                                                                                             // 10205
      }                                                                                                                // 10206
    }                                                                                                                  // 10207
                                                                                                                       // 10208
    function getRowMode() {                                                                                            // 10209
      var rowHeight = $mdMedia.getResponsiveAttribute(attrs, 'md-row-height');                                         // 10210
      if (rowHeight == 'fit') {                                                                                        // 10211
        return 'fit';                                                                                                  // 10212
      } else if (rowHeight.indexOf(':') !== -1) {                                                                      // 10213
        return 'ratio';                                                                                                // 10214
      } else {                                                                                                         // 10215
        return 'fixed';                                                                                                // 10216
      }                                                                                                                // 10217
    }                                                                                                                  // 10218
                                                                                                                       // 10219
    function applyDefaultUnit(val) {                                                                                   // 10220
      return /\D$/.test(val) ? val : val + 'px';                                                                       // 10221
    }                                                                                                                  // 10222
  }                                                                                                                    // 10223
}                                                                                                                      // 10224
GridListDirective.$inject = ["$interpolate", "$mdConstant", "$mdGridLayout", "$mdMedia"];                              // 10225
                                                                                                                       // 10226
/* @ngInject */                                                                                                        // 10227
function GridListController($mdUtil) {                                                                                 // 10228
  this.layoutInvalidated = false;                                                                                      // 10229
  this.tilesInvalidated = false;                                                                                       // 10230
  this.$timeout_ = $mdUtil.nextTick;                                                                                   // 10231
  this.layoutDelegate = angular.noop;                                                                                  // 10232
}                                                                                                                      // 10233
GridListController.$inject = ["$mdUtil"];                                                                              // 10234
                                                                                                                       // 10235
GridListController.prototype = {                                                                                       // 10236
  invalidateTiles: function() {                                                                                        // 10237
    this.tilesInvalidated = true;                                                                                      // 10238
    this.invalidateLayout();                                                                                           // 10239
  },                                                                                                                   // 10240
                                                                                                                       // 10241
  invalidateLayout: function() {                                                                                       // 10242
    if (this.layoutInvalidated) {                                                                                      // 10243
      return;                                                                                                          // 10244
    }                                                                                                                  // 10245
    this.layoutInvalidated = true;                                                                                     // 10246
    this.$timeout_(angular.bind(this, this.layout));                                                                   // 10247
  },                                                                                                                   // 10248
                                                                                                                       // 10249
  layout: function() {                                                                                                 // 10250
    try {                                                                                                              // 10251
      this.layoutDelegate(this.tilesInvalidated);                                                                      // 10252
    } finally {                                                                                                        // 10253
      this.layoutInvalidated = false;                                                                                  // 10254
      this.tilesInvalidated = false;                                                                                   // 10255
    }                                                                                                                  // 10256
  }                                                                                                                    // 10257
};                                                                                                                     // 10258
                                                                                                                       // 10259
                                                                                                                       // 10260
/* @ngInject */                                                                                                        // 10261
function GridLayoutFactory($mdUtil) {                                                                                  // 10262
  var defaultAnimator = GridTileAnimator;                                                                              // 10263
                                                                                                                       // 10264
  /**                                                                                                                  // 10265
   * Set the reflow animator callback                                                                                  // 10266
   */                                                                                                                  // 10267
  GridLayout.animateWith = function(customAnimator) {                                                                  // 10268
    defaultAnimator = !angular.isFunction(customAnimator) ? GridTileAnimator : customAnimator;                         // 10269
  };                                                                                                                   // 10270
                                                                                                                       // 10271
  return GridLayout;                                                                                                   // 10272
                                                                                                                       // 10273
  /**                                                                                                                  // 10274
   * Publish layout function                                                                                           // 10275
   */                                                                                                                  // 10276
  function GridLayout(colCount, tileSpans) {                                                                           // 10277
      var self, layoutInfo, gridStyles, layoutTime, mapTime, reflowTime;                                               // 10278
                                                                                                                       // 10279
      layoutTime = $mdUtil.time(function() {                                                                           // 10280
        layoutInfo = calculateGridFor(colCount, tileSpans);                                                            // 10281
      });                                                                                                              // 10282
                                                                                                                       // 10283
      return self = {                                                                                                  // 10284
                                                                                                                       // 10285
        /**                                                                                                            // 10286
         * An array of objects describing each tile's position in the grid.                                            // 10287
         */                                                                                                            // 10288
        layoutInfo: function() {                                                                                       // 10289
          return layoutInfo;                                                                                           // 10290
        },                                                                                                             // 10291
                                                                                                                       // 10292
        /**                                                                                                            // 10293
         * Maps grid positioning to an element and a set of styles using the                                           // 10294
         * provided updateFn.                                                                                          // 10295
         */                                                                                                            // 10296
        map: function(updateFn) {                                                                                      // 10297
          mapTime = $mdUtil.time(function() {                                                                          // 10298
            var info = self.layoutInfo();                                                                              // 10299
            gridStyles = updateFn(info.positioning, info.rowCount);                                                    // 10300
          });                                                                                                          // 10301
          return self;                                                                                                 // 10302
        },                                                                                                             // 10303
                                                                                                                       // 10304
        /**                                                                                                            // 10305
         * Default animator simply sets the element.css( <styles> ). An alternate                                      // 10306
         * animator can be provided as an argument. The function has the following                                     // 10307
         * signature:                                                                                                  // 10308
         *                                                                                                             // 10309
         *    function({grid: {element: JQLite, style: Object}, tiles: Array<{element: JQLite, style: Object}>)        // 10310
         */                                                                                                            // 10311
        reflow: function(animatorFn) {                                                                                 // 10312
          reflowTime = $mdUtil.time(function() {                                                                       // 10313
            var animator = animatorFn || defaultAnimator;                                                              // 10314
            animator(gridStyles.grid, gridStyles.tiles);                                                               // 10315
          });                                                                                                          // 10316
          return self;                                                                                                 // 10317
        },                                                                                                             // 10318
                                                                                                                       // 10319
        /**                                                                                                            // 10320
         * Timing for the most recent layout run.                                                                      // 10321
         */                                                                                                            // 10322
        performance: function() {                                                                                      // 10323
          return {                                                                                                     // 10324
            tileCount: tileSpans.length,                                                                               // 10325
            layoutTime: layoutTime,                                                                                    // 10326
            mapTime: mapTime,                                                                                          // 10327
            reflowTime: reflowTime,                                                                                    // 10328
            totalTime: layoutTime + mapTime + reflowTime                                                               // 10329
          };                                                                                                           // 10330
        }                                                                                                              // 10331
      };                                                                                                               // 10332
    }                                                                                                                  // 10333
                                                                                                                       // 10334
  /**                                                                                                                  // 10335
   * Default Gridlist animator simple sets the css for each element;                                                   // 10336
   * NOTE: any transitions effects must be manually set in the CSS.                                                    // 10337
   * e.g.                                                                                                              // 10338
   *                                                                                                                   // 10339
   *  md-grid-tile {                                                                                                   // 10340
   *    transition: all 700ms ease-out 50ms;                                                                           // 10341
   *  }                                                                                                                // 10342
   *                                                                                                                   // 10343
   */                                                                                                                  // 10344
  function GridTileAnimator(grid, tiles) {                                                                             // 10345
    grid.element.css(grid.style);                                                                                      // 10346
    tiles.forEach(function(t) {                                                                                        // 10347
      t.element.css(t.style);                                                                                          // 10348
    })                                                                                                                 // 10349
  }                                                                                                                    // 10350
                                                                                                                       // 10351
  /**                                                                                                                  // 10352
   * Calculates the positions of tiles.                                                                                // 10353
   *                                                                                                                   // 10354
   * The algorithm works as follows:                                                                                   // 10355
   *    An Array<Number> with length colCount (spaceTracker) keeps track of                                            // 10356
   *    available tiling positions, where elements of value 0 represents an                                            // 10357
   *    empty position. Space for a tile is reserved by finding a sequence of                                          // 10358
   *    0s with length <= than the tile's colspan. When such a space has been                                          // 10359
   *    found, the occupied tile positions are incremented by the tile's                                               // 10360
   *    rowspan value, as these positions have become unavailable for that                                             // 10361
   *    many rows.                                                                                                     // 10362
   *                                                                                                                   // 10363
   *    If the end of a row has been reached without finding space for the                                             // 10364
   *    tile, spaceTracker's elements are each decremented by 1 to a minimum                                           // 10365
   *    of 0. Rows are searched in this fashion until space is found.                                                  // 10366
   */                                                                                                                  // 10367
  function calculateGridFor(colCount, tileSpans) {                                                                     // 10368
    var curCol = 0,                                                                                                    // 10369
        curRow = 0,                                                                                                    // 10370
        spaceTracker = newSpaceTracker();                                                                              // 10371
                                                                                                                       // 10372
    return {                                                                                                           // 10373
      positioning: tileSpans.map(function(spans, i) {                                                                  // 10374
        return {                                                                                                       // 10375
          spans: spans,                                                                                                // 10376
          position: reserveSpace(spans, i)                                                                             // 10377
        };                                                                                                             // 10378
      }),                                                                                                              // 10379
      rowCount: curRow + Math.max.apply(Math, spaceTracker)                                                            // 10380
    };                                                                                                                 // 10381
                                                                                                                       // 10382
    function reserveSpace(spans, i) {                                                                                  // 10383
      if (spans.col > colCount) {                                                                                      // 10384
        throw 'md-grid-list: Tile at position ' + i + ' has a colspan ' +                                              // 10385
            '(' + spans.col + ') that exceeds the column count ' +                                                     // 10386
            '(' + colCount + ')';                                                                                      // 10387
      }                                                                                                                // 10388
                                                                                                                       // 10389
      var start = 0,                                                                                                   // 10390
          end = 0;                                                                                                     // 10391
                                                                                                                       // 10392
      // TODO(shyndman): This loop isn't strictly necessary if you can                                                 // 10393
      // determine the minimum number of rows before a space opens up. To do                                           // 10394
      // this, recognize that you've iterated across an entire row looking for                                         // 10395
      // space, and if so fast-forward by the minimum rowSpan count. Repeat                                            // 10396
      // until the required space opens up.                                                                            // 10397
      while (end - start < spans.col) {                                                                                // 10398
        if (curCol >= colCount) {                                                                                      // 10399
          nextRow();                                                                                                   // 10400
          continue;                                                                                                    // 10401
        }                                                                                                              // 10402
                                                                                                                       // 10403
        start = spaceTracker.indexOf(0, curCol);                                                                       // 10404
        if (start === -1 || (end = findEnd(start + 1)) === -1) {                                                       // 10405
          start = end = 0;                                                                                             // 10406
          nextRow();                                                                                                   // 10407
          continue;                                                                                                    // 10408
        }                                                                                                              // 10409
                                                                                                                       // 10410
        curCol = end + 1;                                                                                              // 10411
      }                                                                                                                // 10412
                                                                                                                       // 10413
      adjustRow(start, spans.col, spans.row);                                                                          // 10414
      curCol = start + spans.col;                                                                                      // 10415
                                                                                                                       // 10416
      return {                                                                                                         // 10417
        col: start,                                                                                                    // 10418
        row: curRow                                                                                                    // 10419
      };                                                                                                               // 10420
    }                                                                                                                  // 10421
                                                                                                                       // 10422
    function nextRow() {                                                                                               // 10423
      curCol = 0;                                                                                                      // 10424
      curRow++;                                                                                                        // 10425
      adjustRow(0, colCount, -1); // Decrement row spans by one                                                        // 10426
    }                                                                                                                  // 10427
                                                                                                                       // 10428
    function adjustRow(from, cols, by) {                                                                               // 10429
      for (var i = from; i < from + cols; i++) {                                                                       // 10430
        spaceTracker[i] = Math.max(spaceTracker[i] + by, 0);                                                           // 10431
      }                                                                                                                // 10432
    }                                                                                                                  // 10433
                                                                                                                       // 10434
    function findEnd(start) {                                                                                          // 10435
      var i;                                                                                                           // 10436
      for (i = start; i < spaceTracker.length; i++) {                                                                  // 10437
        if (spaceTracker[i] !== 0) {                                                                                   // 10438
          return i;                                                                                                    // 10439
        }                                                                                                              // 10440
      }                                                                                                                // 10441
                                                                                                                       // 10442
      if (i === spaceTracker.length) {                                                                                 // 10443
        return i;                                                                                                      // 10444
      }                                                                                                                // 10445
    }                                                                                                                  // 10446
                                                                                                                       // 10447
    function newSpaceTracker() {                                                                                       // 10448
      var tracker = [];                                                                                                // 10449
      for (var i = 0; i < colCount; i++) {                                                                             // 10450
        tracker.push(0);                                                                                               // 10451
      }                                                                                                                // 10452
      return tracker;                                                                                                  // 10453
    }                                                                                                                  // 10454
  }                                                                                                                    // 10455
}                                                                                                                      // 10456
GridLayoutFactory.$inject = ["$mdUtil"];                                                                               // 10457
                                                                                                                       // 10458
/**                                                                                                                    // 10459
 * @ngdoc directive                                                                                                    // 10460
 * @name mdGridTile                                                                                                    // 10461
 * @module material.components.gridList                                                                                // 10462
 * @restrict E                                                                                                         // 10463
 * @description                                                                                                        // 10464
 * Tiles contain the content of an `md-grid-list`. They span one or more grid                                          // 10465
 * cells vertically or horizontally, and use `md-grid-tile-{footer,header}` to                                         // 10466
 * display secondary content.                                                                                          // 10467
 *                                                                                                                     // 10468
 * ### Responsive Attributes                                                                                           // 10469
 *                                                                                                                     // 10470
 * The `md-grid-tile` directive supports "responsive" attributes, which allow                                          // 10471
 * different `md-rowspan` and `md-colspan` values depending on the currently                                           // 10472
 * matching media query (as defined in `$mdConstant.MEDIA`).                                                           // 10473
 *                                                                                                                     // 10474
 * In order to set a responsive attribute, first define the fallback value with                                        // 10475
 * the standard attribute name, then add additional attributes with the                                                // 10476
 * following convention: `{base-attribute-name}-{media-query-name}="{value}"`                                          // 10477
 * (ie. `md-colspan-sm="4"`)                                                                                           // 10478
 *                                                                                                                     // 10479
 * @param {number=} md-colspan The number of columns to span (default 1). Cannot                                       // 10480
 *    exceed the number of columns in the grid. Supports interpolation.                                                // 10481
 * @param {number=} md-rowspan The number of rows to span (default 1). Supports                                        // 10482
 *     interpolation.                                                                                                  // 10483
 *                                                                                                                     // 10484
 * @usage                                                                                                              // 10485
 * With header:                                                                                                        // 10486
 * <hljs lang="html">                                                                                                  // 10487
 * <md-grid-tile>                                                                                                      // 10488
 *   <md-grid-tile-header>                                                                                             // 10489
 *     <h3>This is a header</h3>                                                                                       // 10490
 *   </md-grid-tile-header>                                                                                            // 10491
 * </md-grid-tile>                                                                                                     // 10492
 * </hljs>                                                                                                             // 10493
 *                                                                                                                     // 10494
 * With footer:                                                                                                        // 10495
 * <hljs lang="html">                                                                                                  // 10496
 * <md-grid-tile>                                                                                                      // 10497
 *   <md-grid-tile-footer>                                                                                             // 10498
 *     <h3>This is a footer</h3>                                                                                       // 10499
 *   </md-grid-tile-footer>                                                                                            // 10500
 * </md-grid-tile>                                                                                                     // 10501
 * </hljs>                                                                                                             // 10502
 *                                                                                                                     // 10503
 * Spanning multiple rows/columns:                                                                                     // 10504
 * <hljs lang="html">                                                                                                  // 10505
 * <md-grid-tile md-colspan="2" md-rowspan="3">                                                                        // 10506
 * </md-grid-tile>                                                                                                     // 10507
 * </hljs>                                                                                                             // 10508
 *                                                                                                                     // 10509
 * Responsive attributes:                                                                                              // 10510
 * <hljs lang="html">                                                                                                  // 10511
 * <md-grid-tile md-colspan="1" md-colspan-sm="3" md-colspan-md="5">                                                   // 10512
 * </md-grid-tile>                                                                                                     // 10513
 * </hljs>                                                                                                             // 10514
 */                                                                                                                    // 10515
function GridTileDirective($mdMedia) {                                                                                 // 10516
  return {                                                                                                             // 10517
    restrict: 'E',                                                                                                     // 10518
    require: '^mdGridList',                                                                                            // 10519
    template: '<figure ng-transclude></figure>',                                                                       // 10520
    transclude: true,                                                                                                  // 10521
    scope: {},                                                                                                         // 10522
    // Simple controller that exposes attributes to the grid directive                                                 // 10523
    controller: ["$attrs", function($attrs) {                                                                          // 10524
      this.$attrs = $attrs;                                                                                            // 10525
    }],                                                                                                                // 10526
    link: postLink                                                                                                     // 10527
  };                                                                                                                   // 10528
                                                                                                                       // 10529
  function postLink(scope, element, attrs, gridCtrl) {                                                                 // 10530
    // Apply semantics                                                                                                 // 10531
    element.attr('role', 'listitem');                                                                                  // 10532
                                                                                                                       // 10533
    // If our colspan or rowspan changes, trigger a layout                                                             // 10534
    var unwatchAttrs = $mdMedia.watchResponsiveAttributes(['md-colspan', 'md-rowspan'],                                // 10535
        attrs, angular.bind(gridCtrl, gridCtrl.invalidateLayout));                                                     // 10536
                                                                                                                       // 10537
    // Tile registration/deregistration                                                                                // 10538
    gridCtrl.invalidateTiles();                                                                                        // 10539
    scope.$on('$destroy', function() {                                                                                 // 10540
      unwatchAttrs();                                                                                                  // 10541
      gridCtrl.invalidateLayout();                                                                                     // 10542
    });                                                                                                                // 10543
                                                                                                                       // 10544
    if (angular.isDefined(scope.$parent.$index)) {                                                                     // 10545
      scope.$watch(function() { return scope.$parent.$index; },                                                        // 10546
        function indexChanged(newIdx, oldIdx) {                                                                        // 10547
          if (newIdx === oldIdx) {                                                                                     // 10548
            return;                                                                                                    // 10549
          }                                                                                                            // 10550
          gridCtrl.invalidateTiles();                                                                                  // 10551
        });                                                                                                            // 10552
    }                                                                                                                  // 10553
  }                                                                                                                    // 10554
}                                                                                                                      // 10555
GridTileDirective.$inject = ["$mdMedia"];                                                                              // 10556
                                                                                                                       // 10557
                                                                                                                       // 10558
function GridTileCaptionDirective() {                                                                                  // 10559
  return {                                                                                                             // 10560
    template: '<figcaption ng-transclude></figcaption>',                                                               // 10561
    transclude: true                                                                                                   // 10562
  };                                                                                                                   // 10563
}                                                                                                                      // 10564
                                                                                                                       // 10565
})();                                                                                                                  // 10566
(function(){                                                                                                           // 10567
"use strict";                                                                                                          // 10568
                                                                                                                       // 10569
/**                                                                                                                    // 10570
 * @ngdoc module                                                                                                       // 10571
 * @name material.components.icon                                                                                      // 10572
 * @description                                                                                                        // 10573
 * Icon                                                                                                                // 10574
 */                                                                                                                    // 10575
angular.module('material.components.icon', [                                                                           // 10576
    'material.core'                                                                                                    // 10577
  ]);                                                                                                                  // 10578
                                                                                                                       // 10579
})();                                                                                                                  // 10580
(function(){                                                                                                           // 10581
"use strict";                                                                                                          // 10582
                                                                                                                       // 10583
/**                                                                                                                    // 10584
 * @ngdoc module                                                                                                       // 10585
 * @name material.components.input                                                                                     // 10586
 */                                                                                                                    // 10587
                                                                                                                       // 10588
angular.module('material.components.input', [                                                                          // 10589
  'material.core'                                                                                                      // 10590
])                                                                                                                     // 10591
  .directive('mdInputContainer', mdInputContainerDirective)                                                            // 10592
  .directive('label', labelDirective)                                                                                  // 10593
  .directive('input', inputTextareaDirective)                                                                          // 10594
  .directive('textarea', inputTextareaDirective)                                                                       // 10595
  .directive('mdMaxlength', mdMaxlengthDirective)                                                                      // 10596
  .directive('placeholder', placeholderDirective)                                                                      // 10597
  .directive('ngMessages', ngMessagesDirective);                                                                       // 10598
                                                                                                                       // 10599
/**                                                                                                                    // 10600
 * @ngdoc directive                                                                                                    // 10601
 * @name mdInputContainer                                                                                              // 10602
 * @module material.components.input                                                                                   // 10603
 *                                                                                                                     // 10604
 * @restrict E                                                                                                         // 10605
 *                                                                                                                     // 10606
 * @description                                                                                                        // 10607
 * `<md-input-container>` is the parent of any input or textarea element.                                              // 10608
 *                                                                                                                     // 10609
 * Input and textarea elements will not behave properly unless the md-input-container                                  // 10610
 * parent is provided.                                                                                                 // 10611
 *                                                                                                                     // 10612
 * @param md-is-error {expression=} When the given expression evaluates to true, the input container                   // 10613
 *   will go into error state. Defaults to erroring if the input has been touched and is invalid.                      // 10614
 * @param md-no-float {boolean=} When present, placeholders will not be converted to floating                          // 10615
 *   labels.                                                                                                           // 10616
 *                                                                                                                     // 10617
 * @usage                                                                                                              // 10618
 * <hljs lang="html">                                                                                                  // 10619
 *                                                                                                                     // 10620
 * <md-input-container>                                                                                                // 10621
 *   <label>Username</label>                                                                                           // 10622
 *   <input type="text" ng-model="user.name">                                                                          // 10623
 * </md-input-container>                                                                                               // 10624
 *                                                                                                                     // 10625
 * <md-input-container>                                                                                                // 10626
 *   <label>Description</label>                                                                                        // 10627
 *   <textarea ng-model="user.description"></textarea>                                                                 // 10628
 * </md-input-container>                                                                                               // 10629
 *                                                                                                                     // 10630
 * </hljs>                                                                                                             // 10631
 */                                                                                                                    // 10632
function mdInputContainerDirective($mdTheming, $parse) {                                                               // 10633
  ContainerCtrl.$inject = ["$scope", "$element", "$attrs"];                                                            // 10634
  return {                                                                                                             // 10635
    restrict: 'E',                                                                                                     // 10636
    link: postLink,                                                                                                    // 10637
    controller: ContainerCtrl                                                                                          // 10638
  };                                                                                                                   // 10639
                                                                                                                       // 10640
  function postLink(scope, element, attr) {                                                                            // 10641
    $mdTheming(element);                                                                                               // 10642
  }                                                                                                                    // 10643
                                                                                                                       // 10644
  function ContainerCtrl($scope, $element, $attrs) {                                                                   // 10645
    var self = this;                                                                                                   // 10646
                                                                                                                       // 10647
    self.isErrorGetter = $attrs.mdIsError && $parse($attrs.mdIsError);                                                 // 10648
                                                                                                                       // 10649
    self.delegateClick = function() {                                                                                  // 10650
      self.input.focus();                                                                                              // 10651
    };                                                                                                                 // 10652
    self.element = $element;                                                                                           // 10653
    self.setFocused = function(isFocused) {                                                                            // 10654
      $element.toggleClass('md-input-focused', !!isFocused);                                                           // 10655
    };                                                                                                                 // 10656
    self.setHasValue = function(hasValue) {                                                                            // 10657
      $element.toggleClass('md-input-has-value', !!hasValue);                                                          // 10658
    };                                                                                                                 // 10659
    self.setHasMessages = function(hasMessages) {                                                                      // 10660
      $element.toggleClass('md-input-has-messages', !!hasMessages);                                                    // 10661
    };                                                                                                                 // 10662
    self.setHasPlaceholder = function(hasPlaceholder) {                                                                // 10663
      $element.toggleClass('md-input-has-placeholder', !!hasPlaceholder);                                              // 10664
    };                                                                                                                 // 10665
    self.setInvalid = function(isInvalid) {                                                                            // 10666
      $element.toggleClass('md-input-invalid', !!isInvalid);                                                           // 10667
    };                                                                                                                 // 10668
    $scope.$watch(function() {                                                                                         // 10669
      return self.label && self.input;                                                                                 // 10670
    }, function(hasLabelAndInput) {                                                                                    // 10671
      if (hasLabelAndInput && !self.label.attr('for')) {                                                               // 10672
        self.label.attr('for', self.input.attr('id'));                                                                 // 10673
      }                                                                                                                // 10674
    });                                                                                                                // 10675
  }                                                                                                                    // 10676
}                                                                                                                      // 10677
mdInputContainerDirective.$inject = ["$mdTheming", "$parse"];                                                          // 10678
                                                                                                                       // 10679
function labelDirective() {                                                                                            // 10680
  return {                                                                                                             // 10681
    restrict: 'E',                                                                                                     // 10682
    require: '^?mdInputContainer',                                                                                     // 10683
    link: function(scope, element, attr, containerCtrl) {                                                              // 10684
      if (!containerCtrl || attr.mdNoFloat) return;                                                                    // 10685
                                                                                                                       // 10686
      containerCtrl.label = element;                                                                                   // 10687
      scope.$on('$destroy', function() {                                                                               // 10688
        containerCtrl.label = null;                                                                                    // 10689
      });                                                                                                              // 10690
    }                                                                                                                  // 10691
  };                                                                                                                   // 10692
}                                                                                                                      // 10693
                                                                                                                       // 10694
/**                                                                                                                    // 10695
 * @ngdoc directive                                                                                                    // 10696
 * @name mdInput                                                                                                       // 10697
 * @restrict E                                                                                                         // 10698
 * @module material.components.input                                                                                   // 10699
 *                                                                                                                     // 10700
 * @description                                                                                                        // 10701
 * Use the `<input>` or the  `<textarea>` as a child of an `<md-input-container>`.                                     // 10702
 *                                                                                                                     // 10703
 * @param {number=} md-maxlength The maximum number of characters allowed in this input. If this is                    // 10704
 *   specified, a character counter will be shown underneath the input.<br/><br/>                                      // 10705
 *   The purpose of **`md-maxlength`** is exactly to show the max length counter text. If you don't                    // 10706
 *   want the counter text and only need "plain" validation, you can use the "simple" `ng-maxlength`                   // 10707
 *   or maxlength attributes.                                                                                          // 10708
 * @param {string=} aria-label Aria-label is required when no label is present.  A warning message                     // 10709
 *   will be logged in the console if not present.                                                                     // 10710
 * @param {string=} placeholder An alternative approach to using aria-label when the label is not                      // 10711
 *   PRESENT. The placeholder text is copied to the aria-label attribute.                                              // 10712
 * @param md-no-autogrow {boolean=} When present, textareas will not grow automatically.                               // 10713
 *                                                                                                                     // 10714
 * @usage                                                                                                              // 10715
 * <hljs lang="html">                                                                                                  // 10716
 * <md-input-container>                                                                                                // 10717
 *   <label>Color</label>                                                                                              // 10718
 *   <input type="text" ng-model="color" required md-maxlength="10">                                                   // 10719
 * </md-input-container>                                                                                               // 10720
 * </hljs>                                                                                                             // 10721
 * <h3>With Errors</h3>                                                                                                // 10722
 *                                                                                                                     // 10723
 * <hljs lang="html">                                                                                                  // 10724
 * <form name="userForm">                                                                                              // 10725
 *   <md-input-container>                                                                                              // 10726
 *     <label>Last Name</label>                                                                                        // 10727
 *     <input name="lastName" ng-model="lastName" required md-maxlength="10" minlength="4">                            // 10728
 *     <div ng-messages="userForm.lastName.$error" ng-show="userForm.lastName.$dirty">                                 // 10729
 *       <div ng-message="required">This is required!</div>                                                            // 10730
 *       <div ng-message="md-maxlength">That's too long!</div>                                                         // 10731
 *       <div ng-message="minlength">That's too short!</div>                                                           // 10732
 *     </div>                                                                                                          // 10733
 *   </md-input-container>                                                                                             // 10734
 *   <md-input-container>                                                                                              // 10735
 *     <label>Biography</label>                                                                                        // 10736
 *     <textarea name="bio" ng-model="biography" required md-maxlength="150"></textarea>                               // 10737
 *     <div ng-messages="userForm.bio.$error" ng-show="userForm.bio.$dirty">                                           // 10738
 *       <div ng-message="required">This is required!</div>                                                            // 10739
 *       <div ng-message="md-maxlength">That's too long!</div>                                                         // 10740
 *     </div>                                                                                                          // 10741
 *   </md-input-container>                                                                                             // 10742
 *   <md-input-container>                                                                                              // 10743
 *     <input aria-label='title' ng-model='title'>                                                                     // 10744
 *   </md-input-container>                                                                                             // 10745
 *   <md-input-container>                                                                                              // 10746
 *     <input placeholder='title' ng-model='title'>                                                                    // 10747
 *   </md-input-container>                                                                                             // 10748
 * </form>                                                                                                             // 10749
 * </hljs>                                                                                                             // 10750
 *                                                                                                                     // 10751
 * Requires [ngMessages](https://docs.angularjs.org/api/ngMessages).                                                   // 10752
 * Behaves like the [AngularJS input directive](https://docs.angularjs.org/api/ng/directive/input).                    // 10753
 *                                                                                                                     // 10754
 */                                                                                                                    // 10755
                                                                                                                       // 10756
function inputTextareaDirective($mdUtil, $window, $mdAria) {                                                           // 10757
  return {                                                                                                             // 10758
    restrict: 'E',                                                                                                     // 10759
    require: ['^?mdInputContainer', '?ngModel'],                                                                       // 10760
    link: postLink                                                                                                     // 10761
  };                                                                                                                   // 10762
                                                                                                                       // 10763
  function postLink(scope, element, attr, ctrls) {                                                                     // 10764
                                                                                                                       // 10765
    var containerCtrl = ctrls[0];                                                                                      // 10766
    var hasNgModel = !!ctrls[1];                                                                                       // 10767
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();                                                               // 10768
    var isReadonly = angular.isDefined(attr.readonly);                                                                 // 10769
                                                                                                                       // 10770
    if (!containerCtrl) return;                                                                                        // 10771
    if (containerCtrl.input) {                                                                                         // 10772
      throw new Error("<md-input-container> can only have *one* <input>, <textarea> or <md-select> child element!");   // 10773
    }                                                                                                                  // 10774
    containerCtrl.input = element;                                                                                     // 10775
                                                                                                                       // 10776
    if (!containerCtrl.label) {                                                                                        // 10777
      $mdAria.expect(element, 'aria-label', element.attr('placeholder'));                                              // 10778
    }                                                                                                                  // 10779
                                                                                                                       // 10780
    element.addClass('md-input');                                                                                      // 10781
    if (!element.attr('id')) {                                                                                         // 10782
      element.attr('id', 'input_' + $mdUtil.nextUid());                                                                // 10783
    }                                                                                                                  // 10784
                                                                                                                       // 10785
    if (element[0].tagName.toLowerCase() === 'textarea') {                                                             // 10786
      setupTextarea();                                                                                                 // 10787
    }                                                                                                                  // 10788
                                                                                                                       // 10789
    // If the input doesn't have an ngModel, it may have a static value. For that case,                                // 10790
    // we have to do one initial check to determine if the container should be in the                                  // 10791
    // "has a value" state.                                                                                            // 10792
    if (!hasNgModel) {                                                                                                 // 10793
      inputCheckValue();                                                                                               // 10794
    }                                                                                                                  // 10795
                                                                                                                       // 10796
    var isErrorGetter = containerCtrl.isErrorGetter || function() {                                                    // 10797
        return ngModelCtrl.$invalid && ngModelCtrl.$touched;                                                           // 10798
      };                                                                                                               // 10799
    scope.$watch(isErrorGetter, containerCtrl.setInvalid);                                                             // 10800
                                                                                                                       // 10801
    ngModelCtrl.$parsers.push(ngModelPipelineCheckValue);                                                              // 10802
    ngModelCtrl.$formatters.push(ngModelPipelineCheckValue);                                                           // 10803
                                                                                                                       // 10804
    element.on('input', inputCheckValue);                                                                              // 10805
                                                                                                                       // 10806
    if (!isReadonly) {                                                                                                 // 10807
      element                                                                                                          // 10808
        .on('focus', function(ev) {                                                                                    // 10809
          containerCtrl.setFocused(true);                                                                              // 10810
        })                                                                                                             // 10811
        .on('blur', function(ev) {                                                                                     // 10812
          containerCtrl.setFocused(false);                                                                             // 10813
          inputCheckValue();                                                                                           // 10814
        });                                                                                                            // 10815
                                                                                                                       // 10816
    }                                                                                                                  // 10817
                                                                                                                       // 10818
    //ngModelCtrl.$setTouched();                                                                                       // 10819
    //if( ngModelCtrl.$invalid ) containerCtrl.setInvalid();                                                           // 10820
                                                                                                                       // 10821
    scope.$on('$destroy', function() {                                                                                 // 10822
      containerCtrl.setFocused(false);                                                                                 // 10823
      containerCtrl.setHasValue(false);                                                                                // 10824
      containerCtrl.input = null;                                                                                      // 10825
    });                                                                                                                // 10826
                                                                                                                       // 10827
    /**                                                                                                                // 10828
     *                                                                                                                 // 10829
     */                                                                                                                // 10830
    function ngModelPipelineCheckValue(arg) {                                                                          // 10831
      containerCtrl.setHasValue(!ngModelCtrl.$isEmpty(arg));                                                           // 10832
      return arg;                                                                                                      // 10833
    }                                                                                                                  // 10834
                                                                                                                       // 10835
    function inputCheckValue() {                                                                                       // 10836
      // An input's value counts if its length > 0,                                                                    // 10837
      // or if the input's validity state says it has bad input (eg string in a number input)                          // 10838
      containerCtrl.setHasValue(element.val().length > 0 || (element[0].validity || {}).badInput);                     // 10839
    }                                                                                                                  // 10840
                                                                                                                       // 10841
    function setupTextarea() {                                                                                         // 10842
      if (angular.isDefined(element.attr('md-no-autogrow'))) {                                                         // 10843
        return;                                                                                                        // 10844
      }                                                                                                                // 10845
                                                                                                                       // 10846
      var node = element[0];                                                                                           // 10847
      var container = containerCtrl.element[0];                                                                        // 10848
                                                                                                                       // 10849
      var min_rows = NaN;                                                                                              // 10850
      var lineHeight = null;                                                                                           // 10851
      // can't check if height was or not explicity set,                                                               // 10852
      // so rows attribute will take precedence if present                                                             // 10853
      if (node.hasAttribute('rows')) {                                                                                 // 10854
        min_rows = parseInt(node.getAttribute('rows'));                                                                // 10855
      }                                                                                                                // 10856
                                                                                                                       // 10857
      var onChangeTextarea = $mdUtil.debounce(growTextarea, 1);                                                        // 10858
                                                                                                                       // 10859
      function pipelineListener(value) {                                                                               // 10860
        onChangeTextarea();                                                                                            // 10861
        return value;                                                                                                  // 10862
      }                                                                                                                // 10863
                                                                                                                       // 10864
      if (ngModelCtrl) {                                                                                               // 10865
        ngModelCtrl.$formatters.push(pipelineListener);                                                                // 10866
        ngModelCtrl.$viewChangeListeners.push(pipelineListener);                                                       // 10867
      } else {                                                                                                         // 10868
        onChangeTextarea();                                                                                            // 10869
      }                                                                                                                // 10870
      element.on('keydown input', onChangeTextarea);                                                                   // 10871
                                                                                                                       // 10872
      if (isNaN(min_rows)) {                                                                                           // 10873
        element.attr('rows', '1');                                                                                     // 10874
                                                                                                                       // 10875
        element.on('scroll', onScroll);                                                                                // 10876
      }                                                                                                                // 10877
                                                                                                                       // 10878
      angular.element($window).on('resize', onChangeTextarea);                                                         // 10879
                                                                                                                       // 10880
      scope.$on('$destroy', function() {                                                                               // 10881
        angular.element($window).off('resize', onChangeTextarea);                                                      // 10882
      });                                                                                                              // 10883
                                                                                                                       // 10884
      function growTextarea() {                                                                                        // 10885
        // sets the md-input-container height to avoid jumping around                                                  // 10886
        container.style.height = container.offsetHeight + 'px';                                                        // 10887
                                                                                                                       // 10888
        // temporarily disables element's flex so its height 'runs free'                                               // 10889
        element.addClass('md-no-flex');                                                                                // 10890
                                                                                                                       // 10891
        if (isNaN(min_rows)) {                                                                                         // 10892
          node.style.height = "auto";                                                                                  // 10893
          node.scrollTop = 0;                                                                                          // 10894
          var height = getHeight();                                                                                    // 10895
          if (height) node.style.height = height + 'px';                                                               // 10896
        } else {                                                                                                       // 10897
          node.setAttribute("rows", 1);                                                                                // 10898
                                                                                                                       // 10899
          if (!lineHeight) {                                                                                           // 10900
            node.style.minHeight = '0';                                                                                // 10901
                                                                                                                       // 10902
            lineHeight = element.prop('clientHeight');                                                                 // 10903
                                                                                                                       // 10904
            node.style.minHeight = null;                                                                               // 10905
          }                                                                                                            // 10906
                                                                                                                       // 10907
          var rows = Math.max(min_rows, Math.round(node.scrollHeight / lineHeight));                                   // 10908
          node.setAttribute("rows", rows);                                                                             // 10909
        }                                                                                                              // 10910
                                                                                                                       // 10911
        // reset everything back to normal                                                                             // 10912
        element.removeClass('md-no-flex');                                                                             // 10913
        container.style.height = 'auto';                                                                               // 10914
      }                                                                                                                // 10915
                                                                                                                       // 10916
      function getHeight() {                                                                                           // 10917
        var line = node.scrollHeight - node.offsetHeight;                                                              // 10918
        return node.offsetHeight + (line > 0 ? line : 0);                                                              // 10919
      }                                                                                                                // 10920
                                                                                                                       // 10921
      function onScroll(e) {                                                                                           // 10922
        node.scrollTop = 0;                                                                                            // 10923
        // for smooth new line adding                                                                                  // 10924
        var line = node.scrollHeight - node.offsetHeight;                                                              // 10925
        var height = node.offsetHeight + line;                                                                         // 10926
        node.style.height = height + 'px';                                                                             // 10927
      }                                                                                                                // 10928
    }                                                                                                                  // 10929
  }                                                                                                                    // 10930
}                                                                                                                      // 10931
inputTextareaDirective.$inject = ["$mdUtil", "$window", "$mdAria"];                                                    // 10932
                                                                                                                       // 10933
function mdMaxlengthDirective($animate) {                                                                              // 10934
  return {                                                                                                             // 10935
    restrict: 'A',                                                                                                     // 10936
    require: ['ngModel', '^mdInputContainer'],                                                                         // 10937
    link: postLink                                                                                                     // 10938
  };                                                                                                                   // 10939
                                                                                                                       // 10940
  function postLink(scope, element, attr, ctrls) {                                                                     // 10941
    var maxlength;                                                                                                     // 10942
    var ngModelCtrl = ctrls[0];                                                                                        // 10943
    var containerCtrl = ctrls[1];                                                                                      // 10944
    var charCountEl = angular.element('<div class="md-char-counter">');                                                // 10945
    var input = angular.element(containerCtrl.element[0].querySelector('[md-maxlength]'));                             // 10946
                                                                                                                       // 10947
    // Stop model from trimming. This makes it so whitespace                                                           // 10948
    // over the maxlength still counts as invalid.                                                                     // 10949
    attr.$set('ngTrim', 'false');                                                                                      // 10950
                                                                                                                       // 10951
    var ngMessagesSelectors = [                                                                                        // 10952
      'ng-messages',                                                                                                   // 10953
      'data-ng-messages',                                                                                              // 10954
      'x-ng-messages',                                                                                                 // 10955
      '[ng-messages]',                                                                                                 // 10956
      '[data-ng-messages]',                                                                                            // 10957
      '[x-ng-messages]'                                                                                                // 10958
    ];                                                                                                                 // 10959
                                                                                                                       // 10960
    var ngMessages = containerCtrl.element[0].querySelector(ngMessagesSelectors.join(','));                            // 10961
                                                                                                                       // 10962
    // If we have an ngMessages container, put the counter at the top; otherwise, put it after the                     // 10963
    // input so it will be positioned properly in the SCSS                                                             // 10964
    if (ngMessages) {                                                                                                  // 10965
      angular.element(ngMessages).prepend(charCountEl);                                                                // 10966
    } else {                                                                                                           // 10967
      input.after(charCountEl);                                                                                        // 10968
    }                                                                                                                  // 10969
                                                                                                                       // 10970
    ngModelCtrl.$formatters.push(renderCharCount);                                                                     // 10971
    ngModelCtrl.$viewChangeListeners.push(renderCharCount);                                                            // 10972
    element.on('input keydown', function() {                                                                           // 10973
      renderCharCount(); //make sure it's called with no args                                                          // 10974
    });                                                                                                                // 10975
                                                                                                                       // 10976
    scope.$watch(attr.mdMaxlength, function(value) {                                                                   // 10977
      maxlength = value;                                                                                               // 10978
      if (angular.isNumber(value) && value > 0) {                                                                      // 10979
        if (!charCountEl.parent().length) {                                                                            // 10980
          $animate.enter(charCountEl, containerCtrl.element, input);                                                   // 10981
        }                                                                                                              // 10982
        renderCharCount();                                                                                             // 10983
      } else {                                                                                                         // 10984
        $animate.leave(charCountEl);                                                                                   // 10985
      }                                                                                                                // 10986
    });                                                                                                                // 10987
                                                                                                                       // 10988
    ngModelCtrl.$validators['md-maxlength'] = function(modelValue, viewValue) {                                        // 10989
      if (!angular.isNumber(maxlength) || maxlength < 0) {                                                             // 10990
        return true;                                                                                                   // 10991
      }                                                                                                                // 10992
      return ( modelValue || element.val() || viewValue || '' ).length <= maxlength;                                   // 10993
    };                                                                                                                 // 10994
                                                                                                                       // 10995
    function renderCharCount(value) {                                                                                  // 10996
      charCountEl.text(( element.val() || value || '' ).length + '/' + maxlength);                                     // 10997
      return value;                                                                                                    // 10998
    }                                                                                                                  // 10999
  }                                                                                                                    // 11000
}                                                                                                                      // 11001
mdMaxlengthDirective.$inject = ["$animate"];                                                                           // 11002
                                                                                                                       // 11003
function placeholderDirective($log) {                                                                                  // 11004
  return {                                                                                                             // 11005
    restrict: 'A',                                                                                                     // 11006
    require: '^^?mdInputContainer',                                                                                    // 11007
    priority: 200,                                                                                                     // 11008
    link: postLink                                                                                                     // 11009
  };                                                                                                                   // 11010
                                                                                                                       // 11011
  function postLink(scope, element, attr, inputContainer) {                                                            // 11012
    // If there is no input container, just return                                                                     // 11013
    if (!inputContainer) return;                                                                                       // 11014
                                                                                                                       // 11015
    // Add a placeholder class so we can target it in the CSS                                                          // 11016
    inputContainer.setHasPlaceholder(true);                                                                            // 11017
                                                                                                                       // 11018
    var label = inputContainer.element.find('label');                                                                  // 11019
    var hasNoFloat = angular.isDefined(inputContainer.element.attr('md-no-float'));                                    // 11020
                                                                                                                       // 11021
    // If we have a label, or they specify the md-no-float attribute, just return                                      // 11022
    if ((label && label.length) || hasNoFloat) return;                                                                 // 11023
                                                                                                                       // 11024
    // Otherwise, grab/remove the placeholder                                                                          // 11025
    var placeholderText = attr.placeholder;                                                                            // 11026
    element.removeAttr('placeholder');                                                                                 // 11027
                                                                                                                       // 11028
    // And add the placeholder text as a separate label                                                                // 11029
    if (inputContainer.input && inputContainer.input[0].nodeName != 'MD-SELECT') {                                     // 11030
      var placeholder = '<label ng-click="delegateClick()">' + placeholderText + '</label>';                           // 11031
                                                                                                                       // 11032
      inputContainer.element.addClass('md-icon-float');                                                                // 11033
      inputContainer.element.prepend(placeholder);                                                                     // 11034
    }                                                                                                                  // 11035
  }                                                                                                                    // 11036
}                                                                                                                      // 11037
placeholderDirective.$inject = ["$log"];                                                                               // 11038
                                                                                                                       // 11039
function ngMessagesDirective() {                                                                                       // 11040
  return {                                                                                                             // 11041
    restrict: 'EA',                                                                                                    // 11042
    link: postLink,                                                                                                    // 11043
                                                                                                                       // 11044
    // This is optional because we don't want target *all* ngMessage instances, just those inside of                   // 11045
    // mdInputContainer.                                                                                               // 11046
    require: '^^?mdInputContainer'                                                                                     // 11047
  };                                                                                                                   // 11048
                                                                                                                       // 11049
  function postLink(scope, element, attr, inputContainer) {                                                            // 11050
    // If we are not a child of an input container, don't do anything                                                  // 11051
    if (!inputContainer) return;                                                                                       // 11052
                                                                                                                       // 11053
    // Tell our parent input container we have messages so we can set the proper classes                               // 11054
    inputContainer.setHasMessages(true);                                                                               // 11055
                                                                                                                       // 11056
    // When destroyed, inform our input container                                                                      // 11057
    scope.$on('$destroy', function() {                                                                                 // 11058
      inputContainer.setHasMessages(false);                                                                            // 11059
    });                                                                                                                // 11060
  }                                                                                                                    // 11061
}                                                                                                                      // 11062
                                                                                                                       // 11063
})();                                                                                                                  // 11064
(function(){                                                                                                           // 11065
"use strict";                                                                                                          // 11066
                                                                                                                       // 11067
/**                                                                                                                    // 11068
 * @ngdoc module                                                                                                       // 11069
 * @name material.components.menu                                                                                      // 11070
 */                                                                                                                    // 11071
                                                                                                                       // 11072
angular.module('material.components.menu', [                                                                           // 11073
  'material.core',                                                                                                     // 11074
  'material.components.backdrop'                                                                                       // 11075
]);                                                                                                                    // 11076
                                                                                                                       // 11077
})();                                                                                                                  // 11078
(function(){                                                                                                           // 11079
"use strict";                                                                                                          // 11080
                                                                                                                       // 11081
/**                                                                                                                    // 11082
 * @ngdoc module                                                                                                       // 11083
 * @name material.components.list                                                                                      // 11084
 * @description                                                                                                        // 11085
 * List module                                                                                                         // 11086
 */                                                                                                                    // 11087
angular.module('material.components.list', [                                                                           // 11088
  'material.core'                                                                                                      // 11089
])                                                                                                                     // 11090
  .controller('MdListController', MdListController)                                                                    // 11091
  .directive('mdList', mdListDirective)                                                                                // 11092
  .directive('mdListItem', mdListItemDirective);                                                                       // 11093
                                                                                                                       // 11094
/**                                                                                                                    // 11095
 * @ngdoc directive                                                                                                    // 11096
 * @name mdList                                                                                                        // 11097
 * @module material.components.list                                                                                    // 11098
 *                                                                                                                     // 11099
 * @restrict E                                                                                                         // 11100
 *                                                                                                                     // 11101
 * @description                                                                                                        // 11102
 * The `<md-list>` directive is a list container for 1..n `<md-list-item>` tags.                                       // 11103
 *                                                                                                                     // 11104
 * @usage                                                                                                              // 11105
 * <hljs lang="html">                                                                                                  // 11106
 * <md-list>                                                                                                           // 11107
 *   <md-list-item class="md-2-line" ng-repeat="item in todos">                                                        // 11108
 *     <md-checkbox ng-model="item.done"></md-checkbox>                                                                // 11109
 *     <div class="md-list-item-text">                                                                                 // 11110
 *       <h3>{{item.title}}</h3>                                                                                       // 11111
 *       <p>{{item.description}}</p>                                                                                   // 11112
 *     </div>                                                                                                          // 11113
 *   </md-list-item>                                                                                                   // 11114
 * </md-list>                                                                                                          // 11115
 * </hljs>                                                                                                             // 11116
 */                                                                                                                    // 11117
                                                                                                                       // 11118
function mdListDirective($mdTheming) {                                                                                 // 11119
  return {                                                                                                             // 11120
    restrict: 'E',                                                                                                     // 11121
    compile: function(tEl) {                                                                                           // 11122
      tEl[0].setAttribute('role', 'list');                                                                             // 11123
      return $mdTheming;                                                                                               // 11124
    }                                                                                                                  // 11125
  };                                                                                                                   // 11126
}                                                                                                                      // 11127
mdListDirective.$inject = ["$mdTheming"];                                                                              // 11128
/**                                                                                                                    // 11129
 * @ngdoc directive                                                                                                    // 11130
 * @name mdListItem                                                                                                    // 11131
 * @module material.components.list                                                                                    // 11132
 *                                                                                                                     // 11133
 * @restrict E                                                                                                         // 11134
 *                                                                                                                     // 11135
 * @description                                                                                                        // 11136
 * The `<md-list-item>` directive is a container intended for row items in a `<md-list>` container.                    // 11137
 *                                                                                                                     // 11138
 * @usage                                                                                                              // 11139
 * <hljs lang="html">                                                                                                  // 11140
 *  <md-list>                                                                                                          // 11141
 *    <md-list-item>                                                                                                   // 11142
 *            Item content in list                                                                                     // 11143
 *    </md-list-item>                                                                                                  // 11144
 *  </md-list>                                                                                                         // 11145
 * </hljs>                                                                                                             // 11146
 *                                                                                                                     // 11147
 */                                                                                                                    // 11148
function mdListItemDirective($mdAria, $mdConstant, $mdUtil, $timeout) {                                                // 11149
  var proxiedTypes = ['md-checkbox', 'md-switch'];                                                                     // 11150
  return {                                                                                                             // 11151
    restrict: 'E',                                                                                                     // 11152
    controller: 'MdListController',                                                                                    // 11153
    compile: function(tEl, tAttrs) {                                                                                   // 11154
      // Check for proxy controls (no ng-click on parent, and a control inside)                                        // 11155
      var secondaryItem = tEl[0].querySelector('.md-secondary');                                                       // 11156
      var hasProxiedElement;                                                                                           // 11157
      var proxyElement;                                                                                                // 11158
                                                                                                                       // 11159
      tEl[0].setAttribute('role', 'listitem');                                                                         // 11160
                                                                                                                       // 11161
      if (!tAttrs.ngClick) {                                                                                           // 11162
        for (var i = 0, type; type = proxiedTypes[i]; ++i) {                                                           // 11163
          if (proxyElement = tEl[0].querySelector(type)) {                                                             // 11164
            hasProxiedElement = true;                                                                                  // 11165
            break;                                                                                                     // 11166
          }                                                                                                            // 11167
        }                                                                                                              // 11168
        if (hasProxiedElement) {                                                                                       // 11169
          wrapIn('div');                                                                                               // 11170
        } else if (!tEl[0].querySelector('md-button')) {                                                               // 11171
          tEl.addClass('md-no-proxy');                                                                                 // 11172
        }                                                                                                              // 11173
      } else {                                                                                                         // 11174
        wrapIn('button');                                                                                              // 11175
      }                                                                                                                // 11176
      setupToggleAria();                                                                                               // 11177
                                                                                                                       // 11178
                                                                                                                       // 11179
      function setupToggleAria() {                                                                                     // 11180
        var toggleTypes = ['md-switch', 'md-checkbox'];                                                                // 11181
        var toggle;                                                                                                    // 11182
                                                                                                                       // 11183
        for (var i = 0, toggleType; toggleType = toggleTypes[i]; ++i) {                                                // 11184
          if (toggle = tEl.find(toggleType)[0]) {                                                                      // 11185
            if (!toggle.hasAttribute('aria-label')) {                                                                  // 11186
              var p = tEl.find('p')[0];                                                                                // 11187
              if (!p) return;                                                                                          // 11188
              toggle.setAttribute('aria-label', 'Toggle ' + p.textContent);                                            // 11189
            }                                                                                                          // 11190
          }                                                                                                            // 11191
        }                                                                                                              // 11192
      }                                                                                                                // 11193
                                                                                                                       // 11194
      function wrapIn(type) {                                                                                          // 11195
        var container;                                                                                                 // 11196
        if (type == 'div') {                                                                                           // 11197
          container = angular.element('<div class="md-no-style md-list-item-inner">');                                 // 11198
          container.append(tEl.contents());                                                                            // 11199
          tEl.addClass('md-proxy-focus');                                                                              // 11200
        } else {                                                                                                       // 11201
          container = angular.element('<md-button class="md-no-style"><div class="md-list-item-inner"></div></md-button>');
          var copiedAttrs = ['ng-click', 'aria-label', 'ng-disabled'];                                                 // 11203
          angular.forEach(copiedAttrs, function(attr) {                                                                // 11204
            if (tEl[0].hasAttribute(attr)) {                                                                           // 11205
              container[0].setAttribute(attr, tEl[0].getAttribute(attr));                                              // 11206
              tEl[0].removeAttribute(attr);                                                                            // 11207
            }                                                                                                          // 11208
          });                                                                                                          // 11209
          container.children().eq(0).append(tEl.contents());                                                           // 11210
        }                                                                                                              // 11211
                                                                                                                       // 11212
        tEl[0].setAttribute('tabindex', '-1');                                                                         // 11213
        tEl.append(container);                                                                                         // 11214
                                                                                                                       // 11215
        if (secondaryItem && secondaryItem.hasAttribute('ng-click')) {                                                 // 11216
          $mdAria.expect(secondaryItem, 'aria-label');                                                                 // 11217
          var buttonWrapper = angular.element('<md-button class="md-secondary-container md-icon-button">');            // 11218
          buttonWrapper.attr('ng-click', secondaryItem.getAttribute('ng-click'));                                      // 11219
          secondaryItem.removeAttribute('ng-click');                                                                   // 11220
          secondaryItem.setAttribute('tabindex', '-1');                                                                // 11221
          secondaryItem.classList.remove('md-secondary');                                                              // 11222
          buttonWrapper.append(secondaryItem);                                                                         // 11223
          secondaryItem = buttonWrapper[0];                                                                            // 11224
        }                                                                                                              // 11225
                                                                                                                       // 11226
        // Check for a secondary item and move it outside                                                              // 11227
        if ( secondaryItem && (                                                                                        // 11228
          secondaryItem.hasAttribute('ng-click') ||                                                                    // 11229
            ( tAttrs.ngClick &&                                                                                        // 11230
             isProxiedElement(secondaryItem) )                                                                         // 11231
        )) {                                                                                                           // 11232
          tEl.addClass('md-with-secondary');                                                                           // 11233
          tEl.append(secondaryItem);                                                                                   // 11234
        }                                                                                                              // 11235
      }                                                                                                                // 11236
                                                                                                                       // 11237
      function isProxiedElement(el) {                                                                                  // 11238
        return proxiedTypes.indexOf(el.nodeName.toLowerCase()) != -1;                                                  // 11239
      }                                                                                                                // 11240
                                                                                                                       // 11241
      return postLink;                                                                                                 // 11242
                                                                                                                       // 11243
      function postLink($scope, $element, $attr, ctrl) {                                                               // 11244
                                                                                                                       // 11245
        var proxies    = [],                                                                                           // 11246
            firstChild = $element[0].firstElementChild,                                                                // 11247
            hasClick   = firstChild && firstChild.hasAttribute('ng-click');                                            // 11248
                                                                                                                       // 11249
        computeProxies();                                                                                              // 11250
        computeClickable();                                                                                            // 11251
                                                                                                                       // 11252
        if ($element.hasClass('md-proxy-focus') && proxies.length) {                                                   // 11253
          angular.forEach(proxies, function(proxy) {                                                                   // 11254
            proxy = angular.element(proxy);                                                                            // 11255
                                                                                                                       // 11256
            $scope.mouseActive = false;                                                                                // 11257
            proxy.on('mousedown', function() {                                                                         // 11258
              $scope.mouseActive = true;                                                                               // 11259
              $timeout(function(){                                                                                     // 11260
                $scope.mouseActive = false;                                                                            // 11261
              }, 100);                                                                                                 // 11262
            })                                                                                                         // 11263
            .on('focus', function() {                                                                                  // 11264
              if ($scope.mouseActive === false) { $element.addClass('md-focused'); }                                   // 11265
              proxy.on('blur', function proxyOnBlur() {                                                                // 11266
                $element.removeClass('md-focused');                                                                    // 11267
                proxy.off('blur', proxyOnBlur);                                                                        // 11268
              });                                                                                                      // 11269
            });                                                                                                        // 11270
          });                                                                                                          // 11271
        }                                                                                                              // 11272
                                                                                                                       // 11273
        function computeProxies() {                                                                                    // 11274
          var children = $element.children();                                                                          // 11275
          if (children.length && !children[0].hasAttribute('ng-click')) {                                              // 11276
            angular.forEach(proxiedTypes, function(type) {                                                             // 11277
              angular.forEach(firstChild.querySelectorAll(type), function(child) {                                     // 11278
                proxies.push(child);                                                                                   // 11279
              });                                                                                                      // 11280
            });                                                                                                        // 11281
          }                                                                                                            // 11282
        }                                                                                                              // 11283
        function computeClickable() {                                                                                  // 11284
          if (proxies.length || hasClick) {                                                                            // 11285
            $element.addClass('md-clickable');                                                                         // 11286
                                                                                                                       // 11287
            ctrl.attachRipple($scope, angular.element($element[0].querySelector('.md-no-style')));                     // 11288
          }                                                                                                            // 11289
        }                                                                                                              // 11290
                                                                                                                       // 11291
        if (!hasClick && !proxies.length) {                                                                            // 11292
          firstChild && firstChild.addEventListener('keypress', function(e) {                                          // 11293
            if (e.target.nodeName != 'INPUT' && e.target.nodeName != 'TEXTAREA') {                                     // 11294
              var keyCode = e.which || e.keyCode;                                                                      // 11295
              if (keyCode == $mdConstant.KEY_CODE.SPACE) {                                                             // 11296
                if (firstChild) {                                                                                      // 11297
                  firstChild.click();                                                                                  // 11298
                  e.preventDefault();                                                                                  // 11299
                  e.stopPropagation();                                                                                 // 11300
                }                                                                                                      // 11301
              }                                                                                                        // 11302
            }                                                                                                          // 11303
          });                                                                                                          // 11304
        }                                                                                                              // 11305
                                                                                                                       // 11306
        $element.off('click');                                                                                         // 11307
        $element.off('keypress');                                                                                      // 11308
                                                                                                                       // 11309
        if (proxies.length && firstChild) {                                                                            // 11310
          $element.children().eq(0).on('click', function(e) {                                                          // 11311
            var parentButton = $mdUtil.getClosest(e.target, 'BUTTON');                                                 // 11312
            if (!parentButton && firstChild.contains(e.target)) {                                                      // 11313
              angular.forEach(proxies, function(proxy) {                                                               // 11314
                if (e.target !== proxy && !proxy.contains(e.target)) {                                                 // 11315
                  angular.element(proxy).triggerHandler('click');                                                      // 11316
                }                                                                                                      // 11317
              });                                                                                                      // 11318
            }                                                                                                          // 11319
          });                                                                                                          // 11320
        }                                                                                                              // 11321
      }                                                                                                                // 11322
    }                                                                                                                  // 11323
  };                                                                                                                   // 11324
}                                                                                                                      // 11325
mdListItemDirective.$inject = ["$mdAria", "$mdConstant", "$mdUtil", "$timeout"];                                       // 11326
                                                                                                                       // 11327
/*                                                                                                                     // 11328
 * @private                                                                                                            // 11329
 * @ngdoc controller                                                                                                   // 11330
 * @name MdListController                                                                                              // 11331
 * @module material.components.list                                                                                    // 11332
 *                                                                                                                     // 11333
 */                                                                                                                    // 11334
function MdListController($scope, $element, $mdListInkRipple) {                                                        // 11335
  var ctrl = this;                                                                                                     // 11336
  ctrl.attachRipple = attachRipple;                                                                                    // 11337
                                                                                                                       // 11338
  function attachRipple (scope, element) {                                                                             // 11339
    var options = {};                                                                                                  // 11340
    $mdListInkRipple.attach(scope, element, options);                                                                  // 11341
  }                                                                                                                    // 11342
}                                                                                                                      // 11343
MdListController.$inject = ["$scope", "$element", "$mdListInkRipple"];                                                 // 11344
                                                                                                                       // 11345
                                                                                                                       // 11346
})();                                                                                                                  // 11347
(function(){                                                                                                           // 11348
"use strict";                                                                                                          // 11349
                                                                                                                       // 11350
/**                                                                                                                    // 11351
 * @ngdoc module                                                                                                       // 11352
 * @name material.components.menu-bar                                                                                  // 11353
 */                                                                                                                    // 11354
                                                                                                                       // 11355
angular.module('material.components.menuBar', [                                                                        // 11356
  'material.core',                                                                                                     // 11357
  'material.components.menu'                                                                                           // 11358
]);                                                                                                                    // 11359
                                                                                                                       // 11360
})();                                                                                                                  // 11361
(function(){                                                                                                           // 11362
"use strict";                                                                                                          // 11363
                                                                                                                       // 11364
/**                                                                                                                    // 11365
 * @ngdoc module                                                                                                       // 11366
 * @name material.components.progressCircular                                                                          // 11367
 * @description Circular Progress module!                                                                              // 11368
 */                                                                                                                    // 11369
angular.module('material.components.progressCircular', [                                                               // 11370
  'material.core'                                                                                                      // 11371
])                                                                                                                     // 11372
  .directive('mdProgressCircular', MdProgressCircularDirective);                                                       // 11373
                                                                                                                       // 11374
/**                                                                                                                    // 11375
 * @ngdoc directive                                                                                                    // 11376
 * @name mdProgressCircular                                                                                            // 11377
 * @module material.components.progressCircular                                                                        // 11378
 * @restrict E                                                                                                         // 11379
 *                                                                                                                     // 11380
* @description                                                                                                         // 11381
 * The circular progress directive is used to make loading content in your app as delightful and                       // 11382
 * painless as possible by minimizing the amount of visual change a user sees before they can view                     // 11383
 * and interact with content.                                                                                          // 11384
 *                                                                                                                     // 11385
 * For operations where the percentage of the operation completed can be determined, use a                             // 11386
 * determinate indicator. They give users a quick sense of how long an operation will take.                            // 11387
 *                                                                                                                     // 11388
 * For operations where the user is asked to wait a moment while something finishes up, and it’s                       // 11389
 * not necessary to expose what's happening behind the scenes and how long it will take, use an                        // 11390
 * indeterminate indicator.                                                                                            // 11391
 *                                                                                                                     // 11392
 * @param {string} md-mode Select from one of two modes: **'determinate'** and **'indeterminate'**.                    // 11393
 *                                                                                                                     // 11394
 * Note: if the `md-mode` value is set as undefined or specified as not 1 of the two (2) valid modes, then `.ng-hide`  // 11395
 * will be auto-applied as a style to the component.                                                                   // 11396
 *                                                                                                                     // 11397
 * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute.                       // 11398
 * If `value=""` is also specified, however, then `md-mode="determinate"` would be auto-injected instead.              // 11399
 * @param {number=} value In determinate mode, this number represents the percentage of the                            // 11400
 *     circular progress. Default: 0                                                                                   // 11401
 * @param {number=} md-diameter This specifies the diamter of the circular progress. The value                         // 11402
 * may be a percentage (eg '25%') or a pixel-size value (eg '48'). If this attribute is                                // 11403
 * not present then a default value of '48px' is assumed.                                                              // 11404
 *                                                                                                                     // 11405
 * @usage                                                                                                              // 11406
 * <hljs lang="html">                                                                                                  // 11407
 * <md-progress-circular md-mode="determinate" value="..."></md-progress-circular>                                     // 11408
 *                                                                                                                     // 11409
 * <md-progress-circular md-mode="determinate" ng-value="..."></md-progress-circular>                                  // 11410
 *                                                                                                                     // 11411
 * <md-progress-circular md-mode="determinate" value="..." md-diameter="100"></md-progress-circular>                   // 11412
 *                                                                                                                     // 11413
 * <md-progress-circular md-mode="indeterminate"></md-progress-circular>                                               // 11414
 * </hljs>                                                                                                             // 11415
 */                                                                                                                    // 11416
function MdProgressCircularDirective($mdTheming, $mdUtil, $log) {                                                      // 11417
  var DEFAULT_PROGRESS_SIZE = 100;                                                                                     // 11418
  var DEFAULT_SCALING = 0.5;                                                                                           // 11419
                                                                                                                       // 11420
  var MODE_DETERMINATE = "determinate",                                                                                // 11421
      MODE_INDETERMINATE = "indeterminate";                                                                            // 11422
                                                                                                                       // 11423
                                                                                                                       // 11424
  return {                                                                                                             // 11425
    restrict: 'E',                                                                                                     // 11426
    scope : true,                                                                                                      // 11427
    template:                                                                                                          // 11428
        // The progress 'circle' is composed of two half-circles: the left side and the right                          // 11429
        // side. Each side has CSS applied to 'fill-in' the half-circle to the appropriate progress.                   // 11430
        '<div class="md-spinner-wrapper">' +                                                                           // 11431
          '<div class="md-inner">' +                                                                                   // 11432
            '<div class="md-gap"></div>' +                                                                             // 11433
            '<div class="md-left">' +                                                                                  // 11434
              '<div class="md-half-circle"></div>' +                                                                   // 11435
            '</div>' +                                                                                                 // 11436
            '<div class="md-right">' +                                                                                 // 11437
              '<div class="md-half-circle"></div>' +                                                                   // 11438
            '</div>' +                                                                                                 // 11439
          '</div>' +                                                                                                   // 11440
        '</div>',                                                                                                      // 11441
    compile: compile                                                                                                   // 11442
  };                                                                                                                   // 11443
                                                                                                                       // 11444
  function compile(tElement) {                                                                                         // 11445
    // The javascript in this file is mainly responsible for setting the correct aria attributes.                      // 11446
    // The animation of the progress spinner is done entirely with just CSS.                                           // 11447
    tElement.attr('aria-valuemin', 0);                                                                                 // 11448
    tElement.attr('aria-valuemax', 100);                                                                               // 11449
    tElement.attr('role', 'progressbar');                                                                              // 11450
                                                                                                                       // 11451
    return postLink;                                                                                                   // 11452
  }                                                                                                                    // 11453
                                                                                                                       // 11454
  function postLink(scope, element, attr) {                                                                            // 11455
    $mdTheming(element);                                                                                               // 11456
                                                                                                                       // 11457
    var circle = element;                                                                                              // 11458
    var spinnerWrapper =  angular.element(element.children()[0]);                                                      // 11459
    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;                                                            // 11460
                                                                                                                       // 11461
    element.attr('md-mode', mode());                                                                                   // 11462
                                                                                                                       // 11463
    updateScale();                                                                                                     // 11464
    validateMode();                                                                                                    // 11465
    watchAttributes();                                                                                                 // 11466
                                                                                                                       // 11467
    /**                                                                                                                // 11468
     * Watch the value and md-mode attributes                                                                          // 11469
     */                                                                                                                // 11470
    function watchAttributes() {                                                                                       // 11471
     attr.$observe('value', function(value) {                                                                          // 11472
           var percentValue = clamp(value);                                                                            // 11473
           element.attr('aria-valuenow', percentValue);                                                                // 11474
                                                                                                                       // 11475
           if (mode() == MODE_DETERMINATE) {                                                                           // 11476
             animateIndicator(percentValue);                                                                           // 11477
           }                                                                                                           // 11478
         });                                                                                                           // 11479
     attr.$observe('mdMode',function(mode){                                                                            // 11480
       switch( mode ) {                                                                                                // 11481
         case MODE_DETERMINATE:                                                                                        // 11482
         case MODE_INDETERMINATE:                                                                                      // 11483
           spinnerWrapper.removeClass('ng-hide');                                                                      // 11484
           spinnerWrapper.removeClass( lastMode );                                                                     // 11485
           spinnerWrapper.addClass( lastMode = "md-mode-" + mode );                                                    // 11486
           break;                                                                                                      // 11487
         default:                                                                                                      // 11488
           spinnerWrapper.removeClass( lastMode );                                                                     // 11489
           spinnerWrapper.addClass('ng-hide');                                                                         // 11490
           lastMode = undefined;                                                                                       // 11491
           break;                                                                                                      // 11492
       }                                                                                                               // 11493
     });                                                                                                               // 11494
    }                                                                                                                  // 11495
                                                                                                                       // 11496
    /**                                                                                                                // 11497
     * Update size/scaling of the progress indicator                                                                   // 11498
     * Watch the "value" and "md-mode" attributes                                                                      // 11499
     */                                                                                                                // 11500
    function updateScale() {                                                                                           // 11501
      circle.css(toVendorCSS({                                                                                         // 11502
        transform : $mdUtil.supplant('scale( {0} )',[getDiameterRatio()])                                              // 11503
      }));                                                                                                             // 11504
    }                                                                                                                  // 11505
                                                                                                                       // 11506
    /**                                                                                                                // 11507
     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified                        // 11508
     */                                                                                                                // 11509
    function validateMode() {                                                                                          // 11510
      if ( angular.isUndefined(attr.mdMode) ) {                                                                        // 11511
        var hasValue = angular.isDefined(attr.value);                                                                  // 11512
        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;                                                   // 11513
        var info = "Auto-adding the missing md-mode='{0}' to the ProgressCircular element";                            // 11514
                                                                                                                       // 11515
        $log.debug( $mdUtil.supplant(info, [mode]) );                                                                  // 11516
                                                                                                                       // 11517
        element.attr("md-mode",mode);                                                                                  // 11518
        attr['mdMode'] = mode;                                                                                         // 11519
      }                                                                                                                // 11520
    }                                                                                                                  // 11521
                                                                                                                       // 11522
    var leftC, rightC, gap;                                                                                            // 11523
                                                                                                                       // 11524
    /**                                                                                                                // 11525
     * Manually animate the Determinate indicator based on the specified                                               // 11526
     * percentage value (0-100).                                                                                       // 11527
     *                                                                                                                 // 11528
     * Note: this animation was previously done using SCSS.                                                            // 11529
     * - generated 54K of styles                                                                                       // 11530
     * - use attribute selectors which had poor performances in IE                                                     // 11531
     */                                                                                                                // 11532
    function animateIndicator(value) {                                                                                 // 11533
      if ( !mode() ) return;                                                                                           // 11534
                                                                                                                       // 11535
      leftC  = leftC  || angular.element(element[0].querySelector('.md-left > .md-half-circle'));                      // 11536
      rightC = rightC || angular.element(element[0].querySelector('.md-right > .md-half-circle'));                     // 11537
      gap    = gap    || angular.element(element[0].querySelector('.md-gap'));                                         // 11538
                                                                                                                       // 11539
      var gapStyles = removeEmptyValues({                                                                              // 11540
          borderBottomColor: (value <= 50) ? "transparent !important" : "",                                            // 11541
          transition: (value <= 50) ? "" : "borderBottomColor 0.1s linear"                                             // 11542
        }),                                                                                                            // 11543
        leftStyles = removeEmptyValues({                                                                               // 11544
          transition: (value <= 50) ? "transform 0.1s linear" : "",                                                    // 11545
          transform: $mdUtil.supplant("rotate({0}deg)", [value <= 50 ? 135 : (((value - 50) / 50 * 180) + 135)])       // 11546
        }),                                                                                                            // 11547
        rightStyles = removeEmptyValues({                                                                              // 11548
          transition: (value >= 50) ? "transform 0.1s linear" : "",                                                    // 11549
          transform: $mdUtil.supplant("rotate({0}deg)", [value >= 50 ? 45 : (value / 50 * 180 - 135)])                 // 11550
        });                                                                                                            // 11551
                                                                                                                       // 11552
      leftC.css(toVendorCSS(leftStyles));                                                                              // 11553
      rightC.css(toVendorCSS(rightStyles));                                                                            // 11554
      gap.css(toVendorCSS(gapStyles));                                                                                 // 11555
                                                                                                                       // 11556
    }                                                                                                                  // 11557
                                                                                                                       // 11558
    /**                                                                                                                // 11559
     * We will scale the progress circle based on the default diameter.                                                // 11560
     *                                                                                                                 // 11561
     * Determine the diameter percentage (defaults to 100%)                                                            // 11562
     * May be express as float, percentage, or integer                                                                 // 11563
     */                                                                                                                // 11564
    function getDiameterRatio() {                                                                                      // 11565
      if ( !attr.mdDiameter ) return DEFAULT_SCALING;                                                                  // 11566
                                                                                                                       // 11567
      var match = /([0-9]*)%/.exec(attr.mdDiameter);                                                                   // 11568
      var value = Math.max(0, (match && match[1]/100) || parseFloat(attr.mdDiameter));                                 // 11569
                                                                                                                       // 11570
      // should return ratio; DEFAULT_PROGRESS_SIZE === 100px is default size                                          // 11571
      return  (value > 1) ? value / DEFAULT_PROGRESS_SIZE : value;                                                     // 11572
    }                                                                                                                  // 11573
                                                                                                                       // 11574
    /**                                                                                                                // 11575
     * Is the md-mode a valid option?                                                                                  // 11576
     */                                                                                                                // 11577
    function mode() {                                                                                                  // 11578
      var value = (attr.mdMode || "").trim();                                                                          // 11579
      if ( value ) {                                                                                                   // 11580
        switch(value) {                                                                                                // 11581
          case MODE_DETERMINATE :                                                                                      // 11582
          case MODE_INDETERMINATE :                                                                                    // 11583
            break;                                                                                                     // 11584
          default:                                                                                                     // 11585
            value = undefined;                                                                                         // 11586
            break;                                                                                                     // 11587
        }                                                                                                              // 11588
      }                                                                                                                // 11589
      return value;                                                                                                    // 11590
    }                                                                                                                  // 11591
                                                                                                                       // 11592
  }                                                                                                                    // 11593
                                                                                                                       // 11594
  /**                                                                                                                  // 11595
   * Clamps the value to be between 0 and 100.                                                                         // 11596
   * @param {number} value The value to clamp.                                                                         // 11597
   * @returns {number}                                                                                                 // 11598
   */                                                                                                                  // 11599
  function clamp(value) {                                                                                              // 11600
    return Math.max(0, Math.min(value || 0, 100));                                                                     // 11601
  }                                                                                                                    // 11602
                                                                                                                       // 11603
  function removeEmptyValues(target) {                                                                                 // 11604
    for (var key in target) {                                                                                          // 11605
      if (target.hasOwnProperty(key)) {                                                                                // 11606
        if ( target[key] == "" ) delete target[key];                                                                   // 11607
      }                                                                                                                // 11608
    }                                                                                                                  // 11609
                                                                                                                       // 11610
    return target;                                                                                                     // 11611
  }                                                                                                                    // 11612
}                                                                                                                      // 11613
MdProgressCircularDirective.$inject = ["$mdTheming", "$mdUtil", "$log"];                                               // 11614
                                                                                                                       // 11615
})();                                                                                                                  // 11616
(function(){                                                                                                           // 11617
"use strict";                                                                                                          // 11618
                                                                                                                       // 11619
/**                                                                                                                    // 11620
 * @ngdoc module                                                                                                       // 11621
 * @name material.components.radioButton                                                                               // 11622
 * @description radioButton module!                                                                                    // 11623
 */                                                                                                                    // 11624
angular.module('material.components.radioButton', [                                                                    // 11625
  'material.core'                                                                                                      // 11626
])                                                                                                                     // 11627
  .directive('mdRadioGroup', mdRadioGroupDirective)                                                                    // 11628
  .directive('mdRadioButton', mdRadioButtonDirective);                                                                 // 11629
                                                                                                                       // 11630
/**                                                                                                                    // 11631
 * @ngdoc directive                                                                                                    // 11632
 * @module material.components.radioButton                                                                             // 11633
 * @name mdRadioGroup                                                                                                  // 11634
 *                                                                                                                     // 11635
 * @restrict E                                                                                                         // 11636
 *                                                                                                                     // 11637
 * @description                                                                                                        // 11638
 * The `<md-radio-group>` directive identifies a grouping                                                              // 11639
 * container for the 1..n grouped radio buttons; specified using nested                                                // 11640
 * `<md-radio-button>` tags.                                                                                           // 11641
 *                                                                                                                     // 11642
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 11643
 * the radio button is in the accent color by default. The primary color palette may be used with                      // 11644
 * the `md-primary` class.                                                                                             // 11645
 *                                                                                                                     // 11646
 * Note: `<md-radio-group>` and `<md-radio-button>` handle tabindex differently                                        // 11647
 * than the native `<input type='radio'>` controls. Whereas the native controls                                        // 11648
 * force the user to tab through all the radio buttons, `<md-radio-group>`                                             // 11649
 * is focusable, and by default the `<md-radio-button>`s are not.                                                      // 11650
 *                                                                                                                     // 11651
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 11652
 * @param {boolean=} md-no-ink Use of attribute indicates flag to disable ink ripple effects.                          // 11653
 *                                                                                                                     // 11654
 * @usage                                                                                                              // 11655
 * <hljs lang="html">                                                                                                  // 11656
 * <md-radio-group ng-model="selected">                                                                                // 11657
 *                                                                                                                     // 11658
 *   <md-radio-button                                                                                                  // 11659
 *        ng-repeat="d in colorOptions"                                                                                // 11660
 *        ng-value="d.value" aria-label="{{ d.label }}">                                                               // 11661
 *                                                                                                                     // 11662
 *          {{ d.label }}                                                                                              // 11663
 *                                                                                                                     // 11664
 *   </md-radio-button>                                                                                                // 11665
 *                                                                                                                     // 11666
 * </md-radio-group>                                                                                                   // 11667
 * </hljs>                                                                                                             // 11668
 *                                                                                                                     // 11669
 */                                                                                                                    // 11670
function mdRadioGroupDirective($mdUtil, $mdConstant, $mdTheming, $timeout) {                                           // 11671
  RadioGroupController.prototype = createRadioGroupControllerProto();                                                  // 11672
                                                                                                                       // 11673
  return {                                                                                                             // 11674
    restrict: 'E',                                                                                                     // 11675
    controller: ['$element', RadioGroupController],                                                                    // 11676
    require: ['mdRadioGroup', '?ngModel'],                                                                             // 11677
    link: { pre: linkRadioGroup }                                                                                      // 11678
  };                                                                                                                   // 11679
                                                                                                                       // 11680
  function linkRadioGroup(scope, element, attr, ctrls) {                                                               // 11681
    $mdTheming(element);                                                                                               // 11682
    var rgCtrl = ctrls[0];                                                                                             // 11683
    var ngModelCtrl = ctrls[1] || $mdUtil.fakeNgModel();                                                               // 11684
                                                                                                                       // 11685
    rgCtrl.init(ngModelCtrl);                                                                                          // 11686
                                                                                                                       // 11687
    scope.mouseActive = false;                                                                                         // 11688
    element.attr({                                                                                                     // 11689
              'role': 'radiogroup',                                                                                    // 11690
              'tabIndex': element.attr('tabindex') || '0'                                                              // 11691
            })                                                                                                         // 11692
            .on('keydown', keydownListener)                                                                            // 11693
            .on('mousedown', function(event) {                                                                         // 11694
              scope.mouseActive = true;                                                                                // 11695
              $timeout(function() {                                                                                    // 11696
                scope.mouseActive = false;                                                                             // 11697
              }, 100);                                                                                                 // 11698
            })                                                                                                         // 11699
            .on('focus', function() {                                                                                  // 11700
              if(scope.mouseActive === false) { rgCtrl.$element.addClass('md-focused'); }                              // 11701
            })                                                                                                         // 11702
            .on('blur', function() { rgCtrl.$element.removeClass('md-focused'); });                                    // 11703
                                                                                                                       // 11704
    /**                                                                                                                // 11705
     *                                                                                                                 // 11706
     */                                                                                                                // 11707
    function setFocus() {                                                                                              // 11708
      if (!element.hasClass('md-focused')) { element.addClass('md-focused'); }                                         // 11709
    }                                                                                                                  // 11710
                                                                                                                       // 11711
    /**                                                                                                                // 11712
     *                                                                                                                 // 11713
     */                                                                                                                // 11714
    function keydownListener(ev) {                                                                                     // 11715
      var keyCode = ev.which || ev.keyCode;                                                                            // 11716
      switch(keyCode) {                                                                                                // 11717
        case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                          // 11718
        case $mdConstant.KEY_CODE.UP_ARROW:                                                                            // 11719
          ev.preventDefault();                                                                                         // 11720
          rgCtrl.selectPrevious();                                                                                     // 11721
          setFocus();                                                                                                  // 11722
          break;                                                                                                       // 11723
                                                                                                                       // 11724
        case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                         // 11725
        case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                          // 11726
          ev.preventDefault();                                                                                         // 11727
          rgCtrl.selectNext();                                                                                         // 11728
          setFocus();                                                                                                  // 11729
          break;                                                                                                       // 11730
                                                                                                                       // 11731
        case $mdConstant.KEY_CODE.ENTER:                                                                               // 11732
          var form = angular.element($mdUtil.getClosest(element[0], 'form'));                                          // 11733
          if (form.length > 0) {                                                                                       // 11734
            form.triggerHandler('submit');                                                                             // 11735
          }                                                                                                            // 11736
          break;                                                                                                       // 11737
      }                                                                                                                // 11738
    }                                                                                                                  // 11739
  }                                                                                                                    // 11740
                                                                                                                       // 11741
  function RadioGroupController($element) {                                                                            // 11742
    this._radioButtonRenderFns = [];                                                                                   // 11743
    this.$element = $element;                                                                                          // 11744
  }                                                                                                                    // 11745
                                                                                                                       // 11746
  function createRadioGroupControllerProto() {                                                                         // 11747
    return {                                                                                                           // 11748
      init: function(ngModelCtrl) {                                                                                    // 11749
        this._ngModelCtrl = ngModelCtrl;                                                                               // 11750
        this._ngModelCtrl.$render = angular.bind(this, this.render);                                                   // 11751
      },                                                                                                               // 11752
      add: function(rbRender) {                                                                                        // 11753
        this._radioButtonRenderFns.push(rbRender);                                                                     // 11754
      },                                                                                                               // 11755
      remove: function(rbRender) {                                                                                     // 11756
        var index = this._radioButtonRenderFns.indexOf(rbRender);                                                      // 11757
        if (index !== -1) {                                                                                            // 11758
          this._radioButtonRenderFns.splice(index, 1);                                                                 // 11759
        }                                                                                                              // 11760
      },                                                                                                               // 11761
      render: function() {                                                                                             // 11762
        this._radioButtonRenderFns.forEach(function(rbRender) {                                                        // 11763
          rbRender();                                                                                                  // 11764
        });                                                                                                            // 11765
      },                                                                                                               // 11766
      setViewValue: function(value, eventType) {                                                                       // 11767
        this._ngModelCtrl.$setViewValue(value, eventType);                                                             // 11768
        // update the other radio buttons as well                                                                      // 11769
        this.render();                                                                                                 // 11770
      },                                                                                                               // 11771
      getViewValue: function() {                                                                                       // 11772
        return this._ngModelCtrl.$viewValue;                                                                           // 11773
      },                                                                                                               // 11774
      selectNext: function() {                                                                                         // 11775
        return changeSelectedButton(this.$element, 1);                                                                 // 11776
      },                                                                                                               // 11777
      selectPrevious: function() {                                                                                     // 11778
        return changeSelectedButton(this.$element, -1);                                                                // 11779
      },                                                                                                               // 11780
      setActiveDescendant: function (radioId) {                                                                        // 11781
        this.$element.attr('aria-activedescendant', radioId);                                                          // 11782
      }                                                                                                                // 11783
    };                                                                                                                 // 11784
  }                                                                                                                    // 11785
  /**                                                                                                                  // 11786
   * Change the radio group's selected button by a given increment.                                                    // 11787
   * If no button is selected, select the first button.                                                                // 11788
   */                                                                                                                  // 11789
  function changeSelectedButton(parent, increment) {                                                                   // 11790
    // Coerce all child radio buttons into an array, then wrap then in an iterator                                     // 11791
    var buttons = $mdUtil.iterator(parent[0].querySelectorAll('md-radio-button'), true);                               // 11792
                                                                                                                       // 11793
    if (buttons.count()) {                                                                                             // 11794
      var validate = function (button) {                                                                               // 11795
        // If disabled, then NOT valid                                                                                 // 11796
        return !angular.element(button).attr("disabled");                                                              // 11797
      };                                                                                                               // 11798
                                                                                                                       // 11799
      var selected = parent[0].querySelector('md-radio-button.md-checked');                                            // 11800
      var target = buttons[increment < 0 ? 'previous' : 'next'](selected, validate) || buttons.first();                // 11801
                                                                                                                       // 11802
      // Activate radioButton's click listener (triggerHandler won't create a real click event)                        // 11803
      angular.element(target).triggerHandler('click');                                                                 // 11804
                                                                                                                       // 11805
                                                                                                                       // 11806
    }                                                                                                                  // 11807
  }                                                                                                                    // 11808
                                                                                                                       // 11809
}                                                                                                                      // 11810
mdRadioGroupDirective.$inject = ["$mdUtil", "$mdConstant", "$mdTheming", "$timeout"];                                  // 11811
                                                                                                                       // 11812
/**                                                                                                                    // 11813
 * @ngdoc directive                                                                                                    // 11814
 * @module material.components.radioButton                                                                             // 11815
 * @name mdRadioButton                                                                                                 // 11816
 *                                                                                                                     // 11817
 * @restrict E                                                                                                         // 11818
 *                                                                                                                     // 11819
 * @description                                                                                                        // 11820
 * The `<md-radio-button>`directive is the child directive required to be used within `<md-radio-group>` elements.     // 11821
 *                                                                                                                     // 11822
 * While similar to the `<input type="radio" ng-model="" value="">` directive,                                         // 11823
 * the `<md-radio-button>` directive provides ink effects, ARIA support, and                                           // 11824
 * supports use within named radio groups.                                                                             // 11825
 *                                                                                                                     // 11826
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 11827
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 11828
 *    interaction with the input element.                                                                              // 11829
 * @param {string} ngValue Angular expression which sets the value to which the expression should                      // 11830
 *    be set when selected.*                                                                                           // 11831
 * @param {string} value The value to which the expression should be set when selected.                                // 11832
 * @param {string=} name Property name of the form under which the control is published.                               // 11833
 * @param {string=} aria-label Adds label to radio button for accessibility.                                           // 11834
 * Defaults to radio button's text. If no text content is available, a warning will be logged.                         // 11835
 *                                                                                                                     // 11836
 * @usage                                                                                                              // 11837
 * <hljs lang="html">                                                                                                  // 11838
 *                                                                                                                     // 11839
 * <md-radio-button value="1" aria-label="Label 1">                                                                    // 11840
 *   Label 1                                                                                                           // 11841
 * </md-radio-button>                                                                                                  // 11842
 *                                                                                                                     // 11843
 * <md-radio-button ng-model="color" ng-value="specialValue" aria-label="Green">                                       // 11844
 *   Green                                                                                                             // 11845
 * </md-radio-button>                                                                                                  // 11846
 *                                                                                                                     // 11847
 * </hljs>                                                                                                             // 11848
 *                                                                                                                     // 11849
 */                                                                                                                    // 11850
function mdRadioButtonDirective($mdAria, $mdUtil, $mdTheming) {                                                        // 11851
                                                                                                                       // 11852
  var CHECKED_CSS = 'md-checked';                                                                                      // 11853
                                                                                                                       // 11854
  return {                                                                                                             // 11855
    restrict: 'E',                                                                                                     // 11856
    require: '^mdRadioGroup',                                                                                          // 11857
    transclude: true,                                                                                                  // 11858
    template: '<div class="md-container" md-ink-ripple md-ink-ripple-checkbox>' +                                      // 11859
                '<div class="md-off"></div>' +                                                                         // 11860
                '<div class="md-on"></div>' +                                                                          // 11861
              '</div>' +                                                                                               // 11862
              '<div ng-transclude class="md-label"></div>',                                                            // 11863
    link: link                                                                                                         // 11864
  };                                                                                                                   // 11865
                                                                                                                       // 11866
  function link(scope, element, attr, rgCtrl) {                                                                        // 11867
    var lastChecked;                                                                                                   // 11868
                                                                                                                       // 11869
    $mdTheming(element);                                                                                               // 11870
    configureAria(element, scope);                                                                                     // 11871
                                                                                                                       // 11872
    initialize();                                                                                                      // 11873
                                                                                                                       // 11874
    /**                                                                                                                // 11875
     *                                                                                                                 // 11876
     */                                                                                                                // 11877
    function initialize(controller) {                                                                                  // 11878
      if ( !rgCtrl ) {                                                                                                 // 11879
        throw 'RadioGroupController not found.';                                                                       // 11880
      }                                                                                                                // 11881
                                                                                                                       // 11882
      rgCtrl.add(render);                                                                                              // 11883
      attr.$observe('value', render);                                                                                  // 11884
                                                                                                                       // 11885
      element                                                                                                          // 11886
        .on('click', listener)                                                                                         // 11887
        .on('$destroy', function() {                                                                                   // 11888
          rgCtrl.remove(render);                                                                                       // 11889
        });                                                                                                            // 11890
    }                                                                                                                  // 11891
                                                                                                                       // 11892
    /**                                                                                                                // 11893
     *                                                                                                                 // 11894
     */                                                                                                                // 11895
    function listener(ev) {                                                                                            // 11896
      if (element[0].hasAttribute('disabled')) return;                                                                 // 11897
                                                                                                                       // 11898
      scope.$apply(function() {                                                                                        // 11899
        rgCtrl.setViewValue(attr.value, ev && ev.type);                                                                // 11900
      });                                                                                                              // 11901
    }                                                                                                                  // 11902
                                                                                                                       // 11903
    /**                                                                                                                // 11904
     *  Add or remove the `.md-checked` class from the RadioButton (and conditionally its parent).                     // 11905
     *  Update the `aria-activedescendant` attribute.                                                                  // 11906
     */                                                                                                                // 11907
    function render() {                                                                                                // 11908
      var checked = (rgCtrl.getViewValue() == attr.value);                                                             // 11909
      if (checked === lastChecked) {                                                                                   // 11910
        return;                                                                                                        // 11911
      }                                                                                                                // 11912
                                                                                                                       // 11913
      lastChecked = checked;                                                                                           // 11914
      element.attr('aria-checked', checked);                                                                           // 11915
                                                                                                                       // 11916
      if (checked) {                                                                                                   // 11917
        markParentAsChecked(true);                                                                                     // 11918
        element.addClass(CHECKED_CSS);                                                                                 // 11919
                                                                                                                       // 11920
        rgCtrl.setActiveDescendant(element.attr('id'));                                                                // 11921
                                                                                                                       // 11922
      } else {                                                                                                         // 11923
        markParentAsChecked(false);                                                                                    // 11924
        element.removeClass(CHECKED_CSS);                                                                              // 11925
      }                                                                                                                // 11926
                                                                                                                       // 11927
      /**                                                                                                              // 11928
       * If the radioButton is inside a div, then add class so highlighting will work...                               // 11929
       */                                                                                                              // 11930
      function markParentAsChecked(addClass ) {                                                                        // 11931
        if ( element.parent()[0].nodeName != "MD-RADIO-GROUP") {                                                       // 11932
          element.parent()[ !!addClass ? 'addClass' : 'removeClass'](CHECKED_CSS);                                     // 11933
        }                                                                                                              // 11934
                                                                                                                       // 11935
      }                                                                                                                // 11936
    }                                                                                                                  // 11937
                                                                                                                       // 11938
    /**                                                                                                                // 11939
     * Inject ARIA-specific attributes appropriate for each radio button                                               // 11940
     */                                                                                                                // 11941
    function configureAria( element, scope ){                                                                          // 11942
      scope.ariaId = buildAriaID();                                                                                    // 11943
                                                                                                                       // 11944
      element.attr({                                                                                                   // 11945
        'id' :  scope.ariaId,                                                                                          // 11946
        'role' : 'radio',                                                                                              // 11947
        'aria-checked' : 'false'                                                                                       // 11948
      });                                                                                                              // 11949
                                                                                                                       // 11950
      $mdAria.expectWithText(element, 'aria-label');                                                                   // 11951
                                                                                                                       // 11952
      /**                                                                                                              // 11953
       * Build a unique ID for each radio button that will be used with aria-activedescendant.                         // 11954
       * Preserve existing ID if already specified.                                                                    // 11955
       * @returns {*|string}                                                                                           // 11956
       */                                                                                                              // 11957
      function buildAriaID() {                                                                                         // 11958
        return attr.id || ( 'radio' + "_" + $mdUtil.nextUid() );                                                       // 11959
      }                                                                                                                // 11960
    }                                                                                                                  // 11961
  }                                                                                                                    // 11962
}                                                                                                                      // 11963
mdRadioButtonDirective.$inject = ["$mdAria", "$mdUtil", "$mdTheming"];                                                 // 11964
                                                                                                                       // 11965
})();                                                                                                                  // 11966
(function(){                                                                                                           // 11967
"use strict";                                                                                                          // 11968
                                                                                                                       // 11969
/**                                                                                                                    // 11970
 * @ngdoc module                                                                                                       // 11971
 * @name material.components.progressLinear                                                                            // 11972
 * @description Linear Progress module!                                                                                // 11973
 */                                                                                                                    // 11974
angular.module('material.components.progressLinear', [                                                                 // 11975
  'material.core'                                                                                                      // 11976
])                                                                                                                     // 11977
  .directive('mdProgressLinear', MdProgressLinearDirective);                                                           // 11978
                                                                                                                       // 11979
/**                                                                                                                    // 11980
 * @ngdoc directive                                                                                                    // 11981
 * @name mdProgressLinear                                                                                              // 11982
 * @module material.components.progressLinear                                                                          // 11983
 * @restrict E                                                                                                         // 11984
 *                                                                                                                     // 11985
 * @description                                                                                                        // 11986
 * The linear progress directive is used to make loading content                                                       // 11987
 * in your app as delightful and painless as possible by minimizing                                                    // 11988
 * the amount of visual change a user sees before they can view                                                        // 11989
 * and interact with content.                                                                                          // 11990
 *                                                                                                                     // 11991
 * Each operation should only be represented by one activity indicator                                                 // 11992
 * For example: one refresh operation should not display both a                                                        // 11993
 * refresh bar and an activity circle.                                                                                 // 11994
 *                                                                                                                     // 11995
 * For operations where the percentage of the operation completed                                                      // 11996
 * can be determined, use a determinate indicator. They give users                                                     // 11997
 * a quick sense of how long an operation will take.                                                                   // 11998
 *                                                                                                                     // 11999
 * For operations where the user is asked to wait a moment while                                                       // 12000
 * something finishes up, and it’s not necessary to expose what's                                                      // 12001
 * happening behind the scenes and how long it will take, use an                                                       // 12002
 * indeterminate indicator.                                                                                            // 12003
 *                                                                                                                     // 12004
 * @param {string} md-mode Select from one of four modes: determinate, indeterminate, buffer or query.                 // 12005
 *                                                                                                                     // 12006
 * Note: if the `md-mode` value is set as undefined or specified as 1 of the four (4) valid modes, then `.ng-hide`     // 12007
 * will be auto-applied as a style to the component.                                                                   // 12008
 *                                                                                                                     // 12009
 * Note: if not configured, the `md-mode="indeterminate"` will be auto injected as an attribute. If `value=""` is also specified, however,
 * then `md-mode="determinate"` would be auto-injected instead.                                                        // 12011
 * @param {number=} value In determinate and buffer modes, this number represents the percentage of the primary progress bar. Default: 0
 * @param {number=} md-buffer-value In the buffer mode, this number represents the percentage of the secondary progress bar. Default: 0
 *                                                                                                                     // 12014
 * @usage                                                                                                              // 12015
 * <hljs lang="html">                                                                                                  // 12016
 * <md-progress-linear md-mode="determinate" value="..."></md-progress-linear>                                         // 12017
 *                                                                                                                     // 12018
 * <md-progress-linear md-mode="determinate" ng-value="..."></md-progress-linear>                                      // 12019
 *                                                                                                                     // 12020
 * <md-progress-linear md-mode="indeterminate"></md-progress-linear>                                                   // 12021
 *                                                                                                                     // 12022
 * <md-progress-linear md-mode="buffer" value="..." md-buffer-value="..."></md-progress-linear>                        // 12023
 *                                                                                                                     // 12024
 * <md-progress-linear md-mode="query"></md-progress-linear>                                                           // 12025
 * </hljs>                                                                                                             // 12026
 */                                                                                                                    // 12027
function MdProgressLinearDirective($mdTheming, $mdUtil, $log) {                                                        // 12028
  var MODE_DETERMINATE = "determinate",                                                                                // 12029
      MODE_INDETERMINATE = "indeterminate",                                                                            // 12030
      MODE_BUFFER = "buffer",                                                                                          // 12031
      MODE_QUERY = "query";                                                                                            // 12032
                                                                                                                       // 12033
  return {                                                                                                             // 12034
    restrict: 'E',                                                                                                     // 12035
    template: '<div class="md-container">' +                                                                           // 12036
      '<div class="md-dashed"></div>' +                                                                                // 12037
      '<div class="md-bar md-bar1"></div>' +                                                                           // 12038
      '<div class="md-bar md-bar2"></div>' +                                                                           // 12039
      '</div>',                                                                                                        // 12040
    compile: compile                                                                                                   // 12041
  };                                                                                                                   // 12042
                                                                                                                       // 12043
  function compile(tElement, tAttrs, transclude) {                                                                     // 12044
    tElement.attr('aria-valuemin', 0);                                                                                 // 12045
    tElement.attr('aria-valuemax', 100);                                                                               // 12046
    tElement.attr('role', 'progressbar');                                                                              // 12047
                                                                                                                       // 12048
    return postLink;                                                                                                   // 12049
  }                                                                                                                    // 12050
  function postLink(scope, element, attr) {                                                                            // 12051
    $mdTheming(element);                                                                                               // 12052
                                                                                                                       // 12053
    var lastMode, toVendorCSS = $mdUtil.dom.animator.toCss;                                                            // 12054
    var bar1 = angular.element(element[0].querySelector('.md-bar1')),                                                  // 12055
        bar2 = angular.element(element[0].querySelector('.md-bar2')),                                                  // 12056
        container = angular.element(element[0].querySelector('.md-container'));                                        // 12057
                                                                                                                       // 12058
    element.attr('md-mode', mode());                                                                                   // 12059
                                                                                                                       // 12060
    validateMode();                                                                                                    // 12061
    watchAttributes();                                                                                                 // 12062
                                                                                                                       // 12063
    /**                                                                                                                // 12064
     * Watch the value, md-buffer-value, and md-mode attributes                                                        // 12065
     */                                                                                                                // 12066
    function watchAttributes() {                                                                                       // 12067
      attr.$observe('value', function(value) {                                                                         // 12068
        var percentValue = clamp(value);                                                                               // 12069
        element.attr('aria-valuenow', percentValue);                                                                   // 12070
                                                                                                                       // 12071
        if (mode() != MODE_QUERY) animateIndicator(bar2, percentValue);                                                // 12072
      });                                                                                                              // 12073
                                                                                                                       // 12074
      attr.$observe('mdBufferValue', function(value) {                                                                 // 12075
        animateIndicator(bar1, clamp(value));                                                                          // 12076
      });                                                                                                              // 12077
                                                                                                                       // 12078
      attr.$observe('mdMode',function(mode){                                                                           // 12079
        switch( mode ) {                                                                                               // 12080
          case MODE_QUERY:                                                                                             // 12081
          case MODE_BUFFER:                                                                                            // 12082
          case MODE_DETERMINATE:                                                                                       // 12083
          case MODE_INDETERMINATE:                                                                                     // 12084
            container.removeClass( 'ng-hide' + ' ' + lastMode );                                                       // 12085
            container.addClass( lastMode = "md-mode-" + mode );                                                        // 12086
            break;                                                                                                     // 12087
          default:                                                                                                     // 12088
            container.removeClass( lastMode );                                                                         // 12089
            container.addClass('ng-hide');                                                                             // 12090
            lastMode = undefined;                                                                                      // 12091
            break;                                                                                                     // 12092
        }                                                                                                              // 12093
      });                                                                                                              // 12094
    }                                                                                                                  // 12095
                                                                                                                       // 12096
    /**                                                                                                                // 12097
     * Auto-defaults the mode to either `determinate` or `indeterminate` mode; if not specified                        // 12098
     */                                                                                                                // 12099
    function validateMode() {                                                                                          // 12100
      if ( angular.isUndefined(attr.mdMode) ) {                                                                        // 12101
        var hasValue = angular.isDefined(attr.value);                                                                  // 12102
        var mode = hasValue ? MODE_DETERMINATE : MODE_INDETERMINATE;                                                   // 12103
        var info = "Auto-adding the missing md-mode='{0}' to the ProgressLinear element";                              // 12104
                                                                                                                       // 12105
        $log.debug( $mdUtil.supplant(info, [mode]) );                                                                  // 12106
                                                                                                                       // 12107
        element.attr("md-mode",mode);                                                                                  // 12108
        attr['mdMode'] = mode;                                                                                         // 12109
      }                                                                                                                // 12110
    }                                                                                                                  // 12111
                                                                                                                       // 12112
    /**                                                                                                                // 12113
     * Is the md-mode a valid option?                                                                                  // 12114
     */                                                                                                                // 12115
    function mode() {                                                                                                  // 12116
      var value = (attr.mdMode || "").trim();                                                                          // 12117
      if ( value ) {                                                                                                   // 12118
        switch(value) {                                                                                                // 12119
          case MODE_DETERMINATE:                                                                                       // 12120
          case MODE_INDETERMINATE:                                                                                     // 12121
          case MODE_BUFFER:                                                                                            // 12122
          case MODE_QUERY:                                                                                             // 12123
            break;                                                                                                     // 12124
          default:                                                                                                     // 12125
            value = undefined;                                                                                         // 12126
            break;                                                                                                     // 12127
        }                                                                                                              // 12128
      }                                                                                                                // 12129
      return value;                                                                                                    // 12130
    }                                                                                                                  // 12131
                                                                                                                       // 12132
    /**                                                                                                                // 12133
     * Manually set CSS to animate the Determinate indicator based on the specified                                    // 12134
     * percentage value (0-100).                                                                                       // 12135
     */                                                                                                                // 12136
    function animateIndicator(target, value) {                                                                         // 12137
      if ( !mode() ) return;                                                                                           // 12138
                                                                                                                       // 12139
      var to = $mdUtil.supplant("translateX({0}%) scale({1},1)", [ (value-100)/2, value/100 ]);                        // 12140
      var styles = toVendorCSS({ transform : to });                                                                    // 12141
      angular.element(target).css( styles );                                                                           // 12142
    }                                                                                                                  // 12143
  }                                                                                                                    // 12144
                                                                                                                       // 12145
  /**                                                                                                                  // 12146
   * Clamps the value to be between 0 and 100.                                                                         // 12147
   * @param {number} value The value to clamp.                                                                         // 12148
   * @returns {number}                                                                                                 // 12149
   */                                                                                                                  // 12150
  function clamp(value) {                                                                                              // 12151
    return Math.max(0, Math.min(value || 0, 100));                                                                     // 12152
  }                                                                                                                    // 12153
}                                                                                                                      // 12154
MdProgressLinearDirective.$inject = ["$mdTheming", "$mdUtil", "$log"];                                                 // 12155
                                                                                                                       // 12156
                                                                                                                       // 12157
})();                                                                                                                  // 12158
(function(){                                                                                                           // 12159
"use strict";                                                                                                          // 12160
                                                                                                                       // 12161
/**                                                                                                                    // 12162
 * @ngdoc module                                                                                                       // 12163
 * @name material.components.sidenav                                                                                   // 12164
 *                                                                                                                     // 12165
 * @description                                                                                                        // 12166
 * A Sidenav QP component.                                                                                             // 12167
 */                                                                                                                    // 12168
angular                                                                                                                // 12169
  .module('material.components.sidenav', [                                                                             // 12170
    'material.core',                                                                                                   // 12171
    'material.components.backdrop'                                                                                     // 12172
  ])                                                                                                                   // 12173
  .factory('$mdSidenav', SidenavService )                                                                              // 12174
  .directive('mdSidenav', SidenavDirective)                                                                            // 12175
  .directive('mdSidenavFocus', SidenavFocusDirective)                                                                  // 12176
  .controller('$mdSidenavController', SidenavController);                                                              // 12177
                                                                                                                       // 12178
                                                                                                                       // 12179
/**                                                                                                                    // 12180
 * @ngdoc service                                                                                                      // 12181
 * @name $mdSidenav                                                                                                    // 12182
 * @module material.components.sidenav                                                                                 // 12183
 *                                                                                                                     // 12184
 * @description                                                                                                        // 12185
 * `$mdSidenav` makes it easy to interact with multiple sidenavs                                                       // 12186
 * in an app.                                                                                                          // 12187
 *                                                                                                                     // 12188
 * @usage                                                                                                              // 12189
 * <hljs lang="js">                                                                                                    // 12190
 * // Async lookup for sidenav instance; will resolve when the instance is available                                   // 12191
 * $mdSidenav(componentId).then(function(instance) {                                                                   // 12192
 *   $log.debug( componentId + "is now ready" );                                                                       // 12193
 * });                                                                                                                 // 12194
 * // Async toggle the given sidenav;                                                                                  // 12195
 * // when instance is known ready and lazy lookup is not needed.                                                      // 12196
 * $mdSidenav(componentId)                                                                                             // 12197
 *    .toggle()                                                                                                        // 12198
 *    .then(function(){                                                                                                // 12199
 *      $log.debug('toggled');                                                                                         // 12200
 *    });                                                                                                              // 12201
 * // Async open the given sidenav                                                                                     // 12202
 * $mdSidenav(componentId)                                                                                             // 12203
 *    .open()                                                                                                          // 12204
 *    .then(function(){                                                                                                // 12205
 *      $log.debug('opened');                                                                                          // 12206
 *    });                                                                                                              // 12207
 * // Async close the given sidenav                                                                                    // 12208
 * $mdSidenav(componentId)                                                                                             // 12209
 *    .close()                                                                                                         // 12210
 *    .then(function(){                                                                                                // 12211
 *      $log.debug('closed');                                                                                          // 12212
 *    });                                                                                                              // 12213
 * // Sync check to see if the specified sidenav is set to be open                                                     // 12214
 * $mdSidenav(componentId).isOpen();                                                                                   // 12215
 * // Sync check to whether given sidenav is locked open                                                               // 12216
 * // If this is true, the sidenav will be open regardless of close()                                                  // 12217
 * $mdSidenav(componentId).isLockedOpen();                                                                             // 12218
 * </hljs>                                                                                                             // 12219
 */                                                                                                                    // 12220
function SidenavService($mdComponentRegistry, $q) {                                                                    // 12221
  return function(handle) {                                                                                            // 12222
                                                                                                                       // 12223
    // Lookup the controller instance for the specified sidNav instance                                                // 12224
    var self;                                                                                                          // 12225
    var errorMsg = "SideNav '" + handle + "' is not available!";                                                       // 12226
    var instance = $mdComponentRegistry.get(handle);                                                                   // 12227
                                                                                                                       // 12228
    if(!instance) {                                                                                                    // 12229
      $mdComponentRegistry.notFoundError(handle);                                                                      // 12230
    }                                                                                                                  // 12231
                                                                                                                       // 12232
    return self = {                                                                                                    // 12233
      // -----------------                                                                                             // 12234
      // Sync methods                                                                                                  // 12235
      // -----------------                                                                                             // 12236
      isOpen: function() {                                                                                             // 12237
        return instance && instance.isOpen();                                                                          // 12238
      },                                                                                                               // 12239
      isLockedOpen: function() {                                                                                       // 12240
        return instance && instance.isLockedOpen();                                                                    // 12241
      },                                                                                                               // 12242
      // -----------------                                                                                             // 12243
      // Async methods                                                                                                 // 12244
      // -----------------                                                                                             // 12245
      toggle: function() {                                                                                             // 12246
        return instance ? instance.toggle() : $q.reject(errorMsg);                                                     // 12247
      },                                                                                                               // 12248
      open: function() {                                                                                               // 12249
        return instance ? instance.open() : $q.reject(errorMsg);                                                       // 12250
      },                                                                                                               // 12251
      close: function() {                                                                                              // 12252
        return instance ? instance.close() : $q.reject(errorMsg);                                                      // 12253
      },                                                                                                               // 12254
      then : function( callbackFn ) {                                                                                  // 12255
        var promise = instance ? $q.when(instance) : waitForInstance();                                                // 12256
        return promise.then( callbackFn || angular.noop );                                                             // 12257
      }                                                                                                                // 12258
    };                                                                                                                 // 12259
                                                                                                                       // 12260
    /**                                                                                                                // 12261
     * Deferred lookup of component instance using $component registry                                                 // 12262
     */                                                                                                                // 12263
    function waitForInstance() {                                                                                       // 12264
      return $mdComponentRegistry                                                                                      // 12265
                .when(handle)                                                                                          // 12266
                .then(function( it ){                                                                                  // 12267
                  instance = it;                                                                                       // 12268
                  return it;                                                                                           // 12269
                });                                                                                                    // 12270
    }                                                                                                                  // 12271
  };                                                                                                                   // 12272
}                                                                                                                      // 12273
SidenavService.$inject = ["$mdComponentRegistry", "$q"];                                                               // 12274
/**                                                                                                                    // 12275
 * @ngdoc directive                                                                                                    // 12276
 * @name mdSidenavFocus                                                                                                // 12277
 * @module material.components.sidenav                                                                                 // 12278
 *                                                                                                                     // 12279
 * @restrict A                                                                                                         // 12280
 *                                                                                                                     // 12281
 * @description                                                                                                        // 12282
 * `mdSidenavFocus` provides a way to specify the focused element when a sidenav opens.                                // 12283
 * This is completely optional, as the sidenav itself is focused by default.                                           // 12284
 *                                                                                                                     // 12285
 * @usage                                                                                                              // 12286
 * <hljs lang="html">                                                                                                  // 12287
 * <md-sidenav>                                                                                                        // 12288
 *   <form>                                                                                                            // 12289
 *     <md-input-container>                                                                                            // 12290
 *       <label for="testInput">Label</label>                                                                          // 12291
 *       <input id="testInput" type="text" md-sidenav-focus>                                                           // 12292
 *     </md-input-container>                                                                                           // 12293
 *   </form>                                                                                                           // 12294
 * </md-sidenav>                                                                                                       // 12295
 * </hljs>                                                                                                             // 12296
 **/                                                                                                                   // 12297
function SidenavFocusDirective() {                                                                                     // 12298
  return {                                                                                                             // 12299
    restrict: 'A',                                                                                                     // 12300
    require: '^mdSidenav',                                                                                             // 12301
    link: function(scope, element, attr, sidenavCtrl) {                                                                // 12302
      // @see $mdUtil.findFocusTarget(...)                                                                             // 12303
    }                                                                                                                  // 12304
  };                                                                                                                   // 12305
}                                                                                                                      // 12306
/**                                                                                                                    // 12307
 * @ngdoc directive                                                                                                    // 12308
 * @name mdSidenav                                                                                                     // 12309
 * @module material.components.sidenav                                                                                 // 12310
 * @restrict E                                                                                                         // 12311
 *                                                                                                                     // 12312
 * @description                                                                                                        // 12313
 *                                                                                                                     // 12314
 * A Sidenav component that can be opened and closed programatically.                                                  // 12315
 *                                                                                                                     // 12316
 * By default, upon opening it will slide out on top of the main content area.                                         // 12317
 *                                                                                                                     // 12318
 * For keyboard and screen reader accessibility, focus is sent to the sidenav wrapper by default.                      // 12319
 * It can be overridden with the `md-autofocus` directive on the child element you want focused.                       // 12320
 *                                                                                                                     // 12321
 * @usage                                                                                                              // 12322
 * <hljs lang="html">                                                                                                  // 12323
 * <div layout="row" ng-controller="MyController">                                                                     // 12324
 *   <md-sidenav md-component-id="left" class="md-sidenav-left">                                                       // 12325
 *     Left Nav!                                                                                                       // 12326
 *   </md-sidenav>                                                                                                     // 12327
 *                                                                                                                     // 12328
 *   <md-content>                                                                                                      // 12329
 *     Center Content                                                                                                  // 12330
 *     <md-button ng-click="openLeftMenu()">                                                                           // 12331
 *       Open Left Menu                                                                                                // 12332
 *     </md-button>                                                                                                    // 12333
 *   </md-content>                                                                                                     // 12334
 *                                                                                                                     // 12335
 *   <md-sidenav md-component-id="right"                                                                               // 12336
 *     md-is-locked-open="$mdMedia('min-width: 333px')"                                                                // 12337
 *     class="md-sidenav-right">                                                                                       // 12338
 *     <form>                                                                                                          // 12339
 *       <md-input-container>                                                                                          // 12340
 *         <label for="testInput">Test input</label>                                                                   // 12341
 *         <input id="testInput" type="text"                                                                           // 12342
 *                ng-model="data" md-autofocus>                                                                        // 12343
 *       </md-input-container>                                                                                         // 12344
 *     </form>                                                                                                         // 12345
 *   </md-sidenav>                                                                                                     // 12346
 * </div>                                                                                                              // 12347
 * </hljs>                                                                                                             // 12348
 *                                                                                                                     // 12349
 * <hljs lang="js">                                                                                                    // 12350
 * var app = angular.module('myApp', ['ngMaterial']);                                                                  // 12351
 * app.controller('MyController', function($scope, $mdSidenav) {                                                       // 12352
 *   $scope.openLeftMenu = function() {                                                                                // 12353
 *     $mdSidenav('left').toggle();                                                                                    // 12354
 *   };                                                                                                                // 12355
 * });                                                                                                                 // 12356
 * </hljs>                                                                                                             // 12357
 *                                                                                                                     // 12358
 * @param {expression=} md-is-open A model bound to whether the sidenav is opened.                                     // 12359
 * @param {string=} md-component-id componentId to use with $mdSidenav service.                                        // 12360
 * @param {expression=} md-is-locked-open When this expression evalutes to true,                                       // 12361
 * the sidenav 'locks open': it falls into the content's flow instead                                                  // 12362
 * of appearing over it. This overrides the `is-open` attribute.                                                       // 12363
 *                                                                                                                     // 12364
 * The $mdMedia() service is exposed to the is-locked-open attribute, which                                            // 12365
 * can be given a media query or one of the `sm`, `gt-sm`, `md`, `gt-md`, `lg` or `gt-lg` presets.                     // 12366
 * Examples:                                                                                                           // 12367
 *                                                                                                                     // 12368
 *   - `<md-sidenav md-is-locked-open="shouldLockOpen"></md-sidenav>`                                                  // 12369
 *   - `<md-sidenav md-is-locked-open="$mdMedia('min-width: 1000px')"></md-sidenav>`                                   // 12370
 *   - `<md-sidenav md-is-locked-open="$mdMedia('sm')"></md-sidenav>` (locks open on small screens)                    // 12371
 */                                                                                                                    // 12372
function SidenavDirective($mdMedia, $mdUtil, $mdConstant, $mdTheming, $animate, $compile, $parse, $log, $q, $document) {
  return {                                                                                                             // 12374
    restrict: 'E',                                                                                                     // 12375
    scope: {                                                                                                           // 12376
      isOpen: '=?mdIsOpen'                                                                                             // 12377
    },                                                                                                                 // 12378
    controller: '$mdSidenavController',                                                                                // 12379
    compile: function(element) {                                                                                       // 12380
      element.addClass('md-closed');                                                                                   // 12381
      element.attr('tabIndex', '-1');                                                                                  // 12382
      return postLink;                                                                                                 // 12383
    }                                                                                                                  // 12384
  };                                                                                                                   // 12385
                                                                                                                       // 12386
  /**                                                                                                                  // 12387
   * Directive Post Link function...                                                                                   // 12388
   */                                                                                                                  // 12389
  function postLink(scope, element, attr, sidenavCtrl) {                                                               // 12390
    var lastParentOverFlow;                                                                                            // 12391
    var triggeringElement = null;                                                                                      // 12392
    var promise = $q.when(true);                                                                                       // 12393
                                                                                                                       // 12394
    var isLockedOpenParsed = $parse(attr.mdIsLockedOpen);                                                              // 12395
    var isLocked = function() {                                                                                        // 12396
      return isLockedOpenParsed(scope.$parent, {                                                                       // 12397
        $media: function(arg) {                                                                                        // 12398
          $log.warn("$media is deprecated for is-locked-open. Use $mdMedia instead.");                                 // 12399
          return $mdMedia(arg);                                                                                        // 12400
        },                                                                                                             // 12401
        $mdMedia: $mdMedia                                                                                             // 12402
      });                                                                                                              // 12403
    };                                                                                                                 // 12404
    var backdrop = $mdUtil.createBackdrop(scope, "md-sidenav-backdrop md-opaque ng-enter");                            // 12405
                                                                                                                       // 12406
    $mdTheming.inherit(backdrop, element);                                                                             // 12407
                                                                                                                       // 12408
    element.on('$destroy', function() {                                                                                // 12409
      backdrop.remove();                                                                                               // 12410
      sidenavCtrl.destroy();                                                                                           // 12411
    });                                                                                                                // 12412
                                                                                                                       // 12413
    scope.$on('$destroy', angular.bind(backdrop, backdrop.remove));                                                    // 12414
    scope.$watch(isLocked, updateIsLocked);                                                                            // 12415
    scope.$watch('isOpen', updateIsOpen);                                                                              // 12416
                                                                                                                       // 12417
                                                                                                                       // 12418
    // Publish special accessor for the Controller instance                                                            // 12419
    sidenavCtrl.$toggleOpen = toggleOpen;                                                                              // 12420
                                                                                                                       // 12421
    /**                                                                                                                // 12422
     * Toggle the DOM classes to indicate `locked`                                                                     // 12423
     * @param isLocked                                                                                                 // 12424
     */                                                                                                                // 12425
    function updateIsLocked(isLocked, oldValue) {                                                                      // 12426
      scope.isLockedOpen = isLocked;                                                                                   // 12427
      if (isLocked === oldValue) {                                                                                     // 12428
        element.toggleClass('md-locked-open', !!isLocked);                                                             // 12429
      } else {                                                                                                         // 12430
        $animate[isLocked ? 'addClass' : 'removeClass'](element, 'md-locked-open');                                    // 12431
      }                                                                                                                // 12432
      backdrop.toggleClass('md-locked-open', !!isLocked);                                                              // 12433
    }                                                                                                                  // 12434
                                                                                                                       // 12435
    /**                                                                                                                // 12436
     * Toggle the SideNav view and attach/detach listeners                                                             // 12437
     * @param isOpen                                                                                                   // 12438
     */                                                                                                                // 12439
    function updateIsOpen(isOpen) {                                                                                    // 12440
      // Support deprecated md-sidenav-focus attribute as fallback                                                     // 12441
      var focusEl = $mdUtil.findFocusTarget(element) || $mdUtil.findFocusTarget(element,'[md-sidenav-focus]') || element;
      var parent = element.parent();                                                                                   // 12443
                                                                                                                       // 12444
      parent[isOpen ? 'on' : 'off']('keydown', onKeyDown);                                                             // 12445
      backdrop[isOpen ? 'on' : 'off']('click', close);                                                                 // 12446
                                                                                                                       // 12447
      if ( isOpen ) {                                                                                                  // 12448
        // Capture upon opening..                                                                                      // 12449
        triggeringElement = $document[0].activeElement;                                                                // 12450
      }                                                                                                                // 12451
                                                                                                                       // 12452
      disableParentScroll(isOpen);                                                                                     // 12453
                                                                                                                       // 12454
      return promise = $q.all([                                                                                        // 12455
                isOpen ? $animate.enter(backdrop, parent) : $animate.leave(backdrop),                                  // 12456
                $animate[isOpen ? 'removeClass' : 'addClass'](element, 'md-closed')                                    // 12457
              ])                                                                                                       // 12458
              .then(function() {                                                                                       // 12459
                // Perform focus when animations are ALL done...                                                       // 12460
                if (scope.isOpen) {                                                                                    // 12461
                  focusEl && focusEl.focus();                                                                          // 12462
                }                                                                                                      // 12463
              });                                                                                                      // 12464
    }                                                                                                                  // 12465
                                                                                                                       // 12466
    /**                                                                                                                // 12467
     * Prevent parent scrolling (when the SideNav is open)                                                             // 12468
     */                                                                                                                // 12469
    function disableParentScroll(disabled) {                                                                           // 12470
      var parent = element.parent();                                                                                   // 12471
      if ( disabled && !lastParentOverFlow ) {                                                                         // 12472
                                                                                                                       // 12473
        lastParentOverFlow = parent.css('overflow');                                                                   // 12474
        parent.css('overflow', 'hidden');                                                                              // 12475
                                                                                                                       // 12476
      } else if (angular.isDefined(lastParentOverFlow)) {                                                              // 12477
                                                                                                                       // 12478
        parent.css('overflow', lastParentOverFlow);                                                                    // 12479
        lastParentOverFlow = undefined;                                                                                // 12480
                                                                                                                       // 12481
      }                                                                                                                // 12482
    }                                                                                                                  // 12483
                                                                                                                       // 12484
    /**                                                                                                                // 12485
     * Toggle the sideNav view and publish a promise to be resolved when                                               // 12486
     * the view animation finishes.                                                                                    // 12487
     *                                                                                                                 // 12488
     * @param isOpen                                                                                                   // 12489
     * @returns {*}                                                                                                    // 12490
     */                                                                                                                // 12491
    function toggleOpen( isOpen ) {                                                                                    // 12492
      if (scope.isOpen == isOpen ) {                                                                                   // 12493
                                                                                                                       // 12494
        return $q.when(true);                                                                                          // 12495
                                                                                                                       // 12496
      } else {                                                                                                         // 12497
        return $q(function(resolve){                                                                                   // 12498
          // Toggle value to force an async `updateIsOpen()` to run                                                    // 12499
          scope.isOpen = isOpen;                                                                                       // 12500
                                                                                                                       // 12501
          $mdUtil.nextTick(function() {                                                                                // 12502
            // When the current `updateIsOpen()` animation finishes                                                    // 12503
            promise.then(function(result) {                                                                            // 12504
                                                                                                                       // 12505
              if ( !scope.isOpen ) {                                                                                   // 12506
                // reset focus to originating element (if available) upon close                                        // 12507
                triggeringElement && triggeringElement.focus();                                                        // 12508
                triggeringElement = null;                                                                              // 12509
              }                                                                                                        // 12510
                                                                                                                       // 12511
              resolve(result);                                                                                         // 12512
            });                                                                                                        // 12513
          });                                                                                                          // 12514
                                                                                                                       // 12515
        });                                                                                                            // 12516
                                                                                                                       // 12517
      }                                                                                                                // 12518
    }                                                                                                                  // 12519
                                                                                                                       // 12520
    /**                                                                                                                // 12521
     * Auto-close sideNav when the `escape` key is pressed.                                                            // 12522
     * @param evt                                                                                                      // 12523
     */                                                                                                                // 12524
    function onKeyDown(ev) {                                                                                           // 12525
      var isEscape = (ev.keyCode === $mdConstant.KEY_CODE.ESCAPE);                                                     // 12526
      return isEscape ? close(ev) : $q.when(true);                                                                     // 12527
    }                                                                                                                  // 12528
                                                                                                                       // 12529
    /**                                                                                                                // 12530
     * With backdrop `clicks` or `escape` key-press, immediately                                                       // 12531
     * apply the CSS close transition... Then notify the controller                                                    // 12532
     * to close() and perform its own actions.                                                                         // 12533
     */                                                                                                                // 12534
    function close(ev) {                                                                                               // 12535
      ev.preventDefault();                                                                                             // 12536
      ev.stopPropagation();                                                                                            // 12537
                                                                                                                       // 12538
      return sidenavCtrl.close();                                                                                      // 12539
    }                                                                                                                  // 12540
                                                                                                                       // 12541
  }                                                                                                                    // 12542
}                                                                                                                      // 12543
SidenavDirective.$inject = ["$mdMedia", "$mdUtil", "$mdConstant", "$mdTheming", "$animate", "$compile", "$parse", "$log", "$q", "$document"];
                                                                                                                       // 12545
/*                                                                                                                     // 12546
 * @private                                                                                                            // 12547
 * @ngdoc controller                                                                                                   // 12548
 * @name SidenavController                                                                                             // 12549
 * @module material.components.sidenav                                                                                 // 12550
 *                                                                                                                     // 12551
 */                                                                                                                    // 12552
function SidenavController($scope, $element, $attrs, $mdComponentRegistry, $q) {                                       // 12553
                                                                                                                       // 12554
  var self = this;                                                                                                     // 12555
                                                                                                                       // 12556
  // Use Default internal method until overridden by directive postLink                                                // 12557
                                                                                                                       // 12558
  // Synchronous getters                                                                                               // 12559
  self.isOpen = function() { return !!$scope.isOpen; };                                                                // 12560
  self.isLockedOpen = function() { return !!$scope.isLockedOpen; };                                                    // 12561
                                                                                                                       // 12562
  // Async actions                                                                                                     // 12563
  self.open   = function() { return self.$toggleOpen( true );  };                                                      // 12564
  self.close  = function() { return self.$toggleOpen( false ); };                                                      // 12565
  self.toggle = function() { return self.$toggleOpen( !$scope.isOpen );  };                                            // 12566
  self.$toggleOpen = function(value) { return $q.when($scope.isOpen = value); };                                       // 12567
                                                                                                                       // 12568
  self.destroy = $mdComponentRegistry.register(self, $attrs.mdComponentId);                                            // 12569
}                                                                                                                      // 12570
SidenavController.$inject = ["$scope", "$element", "$attrs", "$mdComponentRegistry", "$q"];                            // 12571
                                                                                                                       // 12572
})();                                                                                                                  // 12573
(function(){                                                                                                           // 12574
"use strict";                                                                                                          // 12575
                                                                                                                       // 12576
/**                                                                                                                    // 12577
 * @ngdoc module                                                                                                       // 12578
 * @name material.components.select                                                                                    // 12579
 */                                                                                                                    // 12580
                                                                                                                       // 12581
/***************************************************                                                                   // 12582
                                                                                                                       // 12583
 ### TODO ###                                                                                                          // 12584
 **DOCUMENTATION AND DEMOS**                                                                                           // 12585
                                                                                                                       // 12586
 - [ ] ng-model with child mdOptions (basic)                                                                           // 12587
 - [ ] ng-model="foo" ng-model-options="{ trackBy: '$value.id' }" for objects                                          // 12588
 - [ ] mdOption with value                                                                                             // 12589
 - [ ] Usage with input inside                                                                                         // 12590
                                                                                                                       // 12591
 ### TODO - POST RC1 ###                                                                                               // 12592
 - [ ] Abstract placement logic in $mdSelect service to $mdMenu service                                                // 12593
                                                                                                                       // 12594
 ***************************************************/                                                                  // 12595
                                                                                                                       // 12596
var SELECT_EDGE_MARGIN = 8;                                                                                            // 12597
var selectNextId = 0;                                                                                                  // 12598
                                                                                                                       // 12599
angular.module('material.components.select', [                                                                         // 12600
    'material.core',                                                                                                   // 12601
    'material.components.backdrop'                                                                                     // 12602
  ])                                                                                                                   // 12603
  .directive('mdSelect', SelectDirective)                                                                              // 12604
  .directive('mdSelectMenu', SelectMenuDirective)                                                                      // 12605
  .directive('mdOption', OptionDirective)                                                                              // 12606
  .directive('mdOptgroup', OptgroupDirective)                                                                          // 12607
  .provider('$mdSelect', SelectProvider);                                                                              // 12608
                                                                                                                       // 12609
/**                                                                                                                    // 12610
 * @ngdoc directive                                                                                                    // 12611
 * @name mdSelect                                                                                                      // 12612
 * @restrict E                                                                                                         // 12613
 * @module material.components.select                                                                                  // 12614
 *                                                                                                                     // 12615
 * @description Displays a select box, bound to an ng-model.                                                           // 12616
 *                                                                                                                     // 12617
 * @param {expression} ng-model The model!                                                                             // 12618
 * @param {boolean=} multiple Whether it's multiple.                                                                   // 12619
 * @param {expression=} md-on-close expression to be evaluated when the select is closed                               // 12620
 * @param {string=} placeholder Placeholder hint text.                                                                 // 12621
 * @param {string=} aria-label Optional label for accessibility. Only necessary if no placeholder or                   // 12622
 * @param {string=} md-container-class class list to get applied to the .md-select-menu-container element (for custom styling)
 * explicit label is present.                                                                                          // 12624
 *                                                                                                                     // 12625
 * @usage                                                                                                              // 12626
 * With a placeholder (label and aria-label are added dynamically)                                                     // 12627
 * <hljs lang="html">                                                                                                  // 12628
 *   <md-input-container>                                                                                              // 12629
 *     <md-select                                                                                                      // 12630
 *       ng-model="someModel"                                                                                          // 12631
 *       placeholder="Select a state">                                                                                 // 12632
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>                             // 12633
 *     </md-select>                                                                                                    // 12634
 *   </md-input-container>                                                                                             // 12635
 * </hljs>                                                                                                             // 12636
 *                                                                                                                     // 12637
 * With an explicit label                                                                                              // 12638
 * <hljs lang="html">                                                                                                  // 12639
 *   <md-input-container>                                                                                              // 12640
 *     <label>State</label>                                                                                            // 12641
 *     <md-select                                                                                                      // 12642
 *       ng-model="someModel">                                                                                         // 12643
 *       <md-option ng-value="opt" ng-repeat="opt in neighborhoods2">{{ opt }}</md-option>                             // 12644
 *     </md-select>                                                                                                    // 12645
 *   </md-input-container>                                                                                             // 12646
 * </hljs>                                                                                                             // 12647
 */                                                                                                                    // 12648
function SelectDirective($mdSelect, $mdUtil, $mdTheming, $mdAria, $compile, $parse) {                                  // 12649
  return {                                                                                                             // 12650
    restrict: 'E',                                                                                                     // 12651
    require: ['^?mdInputContainer', 'mdSelect', 'ngModel', '?^form'],                                                  // 12652
    compile: compile,                                                                                                  // 12653
    controller: function() {                                                                                           // 12654
    } // empty placeholder controller to be initialized in link                                                        // 12655
  };                                                                                                                   // 12656
                                                                                                                       // 12657
  function compile(element, attr) {                                                                                    // 12658
    // add the select value that will hold our placeholder or selected option value                                    // 12659
    var valueEl = angular.element('<md-select-value><span></span></md-select-value>');                                 // 12660
    valueEl.append('<span class="md-select-icon" aria-hidden="true"></span>');                                         // 12661
    valueEl.addClass('md-select-value');                                                                               // 12662
    if (!valueEl[0].hasAttribute('id')) {                                                                              // 12663
      valueEl.attr('id', 'select_value_label_' + $mdUtil.nextUid());                                                   // 12664
    }                                                                                                                  // 12665
                                                                                                                       // 12666
    // There's got to be an md-content inside. If there's not one, let's add it.                                       // 12667
    if (!element.find('md-content').length) {                                                                          // 12668
      element.append(angular.element('<md-content>').append(element.contents()));                                      // 12669
    }                                                                                                                  // 12670
                                                                                                                       // 12671
    // Add progress spinner for md-options-loading                                                                     // 12672
    if (attr.mdOnOpen) {                                                                                               // 12673
                                                                                                                       // 12674
      // Show progress indicator while loading async                                                                   // 12675
      // Use ng-hide for `display:none` so the indicator does not interfere with the options list                      // 12676
      element                                                                                                          // 12677
        .find('md-content')                                                                                            // 12678
        .prepend(angular.element(                                                                                      // 12679
          '<div>' +                                                                                                    // 12680
          ' <md-progress-circular md-mode="{{progressMode}}" ng-hide="$$loadingAsyncDone"></md-progress-circular>' +   // 12681
          '</div>'                                                                                                     // 12682
        ));                                                                                                            // 12683
                                                                                                                       // 12684
      // Hide list [of item options] while loading async                                                               // 12685
      element                                                                                                          // 12686
        .find('md-option')                                                                                             // 12687
        .attr('ng-show', '$$loadingAsyncDone');                                                                        // 12688
    }                                                                                                                  // 12689
                                                                                                                       // 12690
    if (attr.name) {                                                                                                   // 12691
      var autofillClone = angular.element('<select class="md-visually-hidden">');                                      // 12692
      autofillClone.attr({                                                                                             // 12693
        'name': '.' + attr.name,                                                                                       // 12694
        'ng-model': attr.ngModel,                                                                                      // 12695
        'aria-hidden': 'true',                                                                                         // 12696
        'tabindex': '-1'                                                                                               // 12697
      });                                                                                                              // 12698
      var opts = element.find('md-option');                                                                            // 12699
      angular.forEach(opts, function(el) {                                                                             // 12700
        var newEl = angular.element('<option>' + el.innerHTML + '</option>');                                          // 12701
        if (el.hasAttribute('ng-value')) newEl.attr('ng-value', el.getAttribute('ng-value'));                          // 12702
        else if (el.hasAttribute('value')) newEl.attr('value', el.getAttribute('value'));                              // 12703
        autofillClone.append(newEl);                                                                                   // 12704
      });                                                                                                              // 12705
                                                                                                                       // 12706
      element.parent().append(autofillClone);                                                                          // 12707
    }                                                                                                                  // 12708
                                                                                                                       // 12709
    // Use everything that's left inside element.contents() as the contents of the menu                                // 12710
    var multiple = angular.isDefined(attr.multiple) ? 'multiple' : '';                                                 // 12711
    var selectTemplate = '' +                                                                                          // 12712
      '<div class="md-select-menu-container">' +                                                                       // 12713
      '<md-select-menu {0}>{1}</md-select-menu>' +                                                                     // 12714
      '</div>';                                                                                                        // 12715
                                                                                                                       // 12716
    selectTemplate = $mdUtil.supplant(selectTemplate, [multiple, element.html()]);                                     // 12717
    element.empty().append(valueEl);                                                                                   // 12718
                                                                                                                       // 12719
    attr.tabindex = attr.tabindex || '0';                                                                              // 12720
                                                                                                                       // 12721
    return function postLink(scope, element, attr, ctrls) {                                                            // 12722
      var isDisabled;                                                                                                  // 12723
                                                                                                                       // 12724
      var containerCtrl = ctrls[0];                                                                                    // 12725
      var mdSelectCtrl = ctrls[1];                                                                                     // 12726
      var ngModelCtrl = ctrls[2];                                                                                      // 12727
      var formCtrl = ctrls[3];                                                                                         // 12728
      // grab a reference to the select menu value label                                                               // 12729
      var valueEl = element.find('md-select-value');                                                                   // 12730
      var isReadonly = angular.isDefined(attr.readonly);                                                               // 12731
                                                                                                                       // 12732
      if (containerCtrl) {                                                                                             // 12733
        var isErrorGetter = containerCtrl.isErrorGetter || function() {                                                // 12734
            return ngModelCtrl.$invalid && ngModelCtrl.$touched;                                                       // 12735
          };                                                                                                           // 12736
                                                                                                                       // 12737
        if (containerCtrl.input) {                                                                                     // 12738
          throw new Error("<md-input-container> can only have *one* child <input>, <textarea> or <select> element!");  // 12739
        }                                                                                                              // 12740
                                                                                                                       // 12741
        containerCtrl.input = element;                                                                                 // 12742
        if (!containerCtrl.label) {                                                                                    // 12743
          $mdAria.expect(element, 'aria-label', element.attr('placeholder'));                                          // 12744
        }                                                                                                              // 12745
                                                                                                                       // 12746
        scope.$watch(isErrorGetter, containerCtrl.setInvalid);                                                         // 12747
      }                                                                                                                // 12748
                                                                                                                       // 12749
      var selectContainer, selectScope, selectMenuCtrl;                                                                // 12750
                                                                                                                       // 12751
      createSelect();                                                                                                  // 12752
      $mdTheming(element);                                                                                             // 12753
                                                                                                                       // 12754
      if (attr.name && formCtrl) {                                                                                     // 12755
        var selectEl = element.parent()[0].querySelector('select[name=".' + attr.name + '"]');                         // 12756
        var controller = angular.element(selectEl).controller();                                                       // 12757
        if (controller) {                                                                                              // 12758
          formCtrl.$removeControl(controller);                                                                         // 12759
        }                                                                                                              // 12760
      }                                                                                                                // 12761
                                                                                                                       // 12762
      if (formCtrl) {                                                                                                  // 12763
        $mdUtil.nextTick(function() {                                                                                  // 12764
          formCtrl.$setPristine();                                                                                     // 12765
        });                                                                                                            // 12766
      }                                                                                                                // 12767
                                                                                                                       // 12768
      var originalRender = ngModelCtrl.$render;                                                                        // 12769
      ngModelCtrl.$render = function() {                                                                               // 12770
        originalRender();                                                                                              // 12771
        syncLabelText();                                                                                               // 12772
        inputCheckValue();                                                                                             // 12773
      };                                                                                                               // 12774
                                                                                                                       // 12775
      mdSelectCtrl.setLabelText = function(text) {                                                                     // 12776
        mdSelectCtrl.setIsPlaceholder(!text);                                                                          // 12777
        // Use placeholder attribute, otherwise fallback to the md-input-container label                               // 12778
        var tmpPlaceholder = attr.placeholder || (containerCtrl && containerCtrl.label ? containerCtrl.label.text() : '');
        text = text || tmpPlaceholder || '';                                                                           // 12780
        var target = valueEl.children().eq(0);                                                                         // 12781
        target.text(text);                                                                                             // 12782
      };                                                                                                               // 12783
                                                                                                                       // 12784
      mdSelectCtrl.setIsPlaceholder = function(isPlaceholder) {                                                        // 12785
        if (isPlaceholder) {                                                                                           // 12786
          valueEl.addClass('md-select-placeholder');                                                                   // 12787
          if (containerCtrl && containerCtrl.label) {                                                                  // 12788
            containerCtrl.label.addClass('md-placeholder md-static');                                                  // 12789
          }                                                                                                            // 12790
        } else {                                                                                                       // 12791
          valueEl.removeClass('md-select-placeholder');                                                                // 12792
          if (containerCtrl && containerCtrl.label) {                                                                  // 12793
            containerCtrl.label.removeClass('md-placeholder');                                                         // 12794
          }                                                                                                            // 12795
        }                                                                                                              // 12796
      };                                                                                                               // 12797
                                                                                                                       // 12798
      if (!isReadonly) {                                                                                               // 12799
        element                                                                                                        // 12800
          .on('focus', function(ev) {                                                                                  // 12801
            // only set focus on if we don't currently have a selected value. This avoids the "bounce"                 // 12802
            // on the label transition because the focus will immediately switch to the open menu.                     // 12803
            if (containerCtrl && containerCtrl.element.hasClass('md-input-has-value')) {                               // 12804
              containerCtrl.setFocused(true);                                                                          // 12805
            }                                                                                                          // 12806
          })                                                                                                           // 12807
          .on('blur', function(ev) {                                                                                   // 12808
            containerCtrl && containerCtrl.setFocused(false);                                                          // 12809
            inputCheckValue();                                                                                         // 12810
          });                                                                                                          // 12811
      }                                                                                                                // 12812
                                                                                                                       // 12813
      mdSelectCtrl.triggerClose = function() {                                                                         // 12814
        $parse(attr.mdOnClose)(scope);                                                                                 // 12815
      };                                                                                                               // 12816
                                                                                                                       // 12817
      scope.$$postDigest(function() {                                                                                  // 12818
        setAriaLabel();                                                                                                // 12819
        syncLabelText();                                                                                               // 12820
      });                                                                                                              // 12821
                                                                                                                       // 12822
      function setAriaLabel() {                                                                                        // 12823
        var labelText = element.attr('placeholder');                                                                   // 12824
        if (!labelText && containerCtrl && containerCtrl.label) {                                                      // 12825
          labelText = containerCtrl.label.text();                                                                      // 12826
        }                                                                                                              // 12827
        $mdAria.expect(element, 'aria-label', labelText);                                                              // 12828
      }                                                                                                                // 12829
                                                                                                                       // 12830
      function syncLabelText() {                                                                                       // 12831
        if (selectContainer) {                                                                                         // 12832
          selectMenuCtrl = selectMenuCtrl || selectContainer.find('md-select-menu').controller('mdSelectMenu');        // 12833
          mdSelectCtrl.setLabelText(selectMenuCtrl.selectedLabels());                                                  // 12834
        }                                                                                                              // 12835
      }                                                                                                                // 12836
                                                                                                                       // 12837
      var deregisterWatcher;                                                                                           // 12838
      attr.$observe('ngMultiple', function(val) {                                                                      // 12839
        if (deregisterWatcher) deregisterWatcher();                                                                    // 12840
        var parser = $parse(val);                                                                                      // 12841
        deregisterWatcher = scope.$watch(function() {                                                                  // 12842
          return parser(scope);                                                                                        // 12843
        }, function(multiple, prevVal) {                                                                               // 12844
          if (multiple === undefined && prevVal === undefined) return; // assume compiler did a good job               // 12845
          if (multiple) {                                                                                              // 12846
            element.attr('multiple', 'multiple');                                                                      // 12847
          } else {                                                                                                     // 12848
            element.removeAttr('multiple');                                                                            // 12849
          }                                                                                                            // 12850
          if (selectContainer) {                                                                                       // 12851
            selectMenuCtrl.setMultiple(multiple);                                                                      // 12852
            originalRender = ngModelCtrl.$render;                                                                      // 12853
            ngModelCtrl.$render = function() {                                                                         // 12854
              originalRender();                                                                                        // 12855
              syncLabelText();                                                                                         // 12856
            };                                                                                                         // 12857
            selectMenuCtrl.refreshViewValue();                                                                         // 12858
            ngModelCtrl.$render();                                                                                     // 12859
          }                                                                                                            // 12860
        });                                                                                                            // 12861
      });                                                                                                              // 12862
                                                                                                                       // 12863
      attr.$observe('disabled', function(disabled) {                                                                   // 12864
        if (angular.isString(disabled)) {                                                                              // 12865
          disabled = true;                                                                                             // 12866
        }                                                                                                              // 12867
        // Prevent click event being registered twice                                                                  // 12868
        if (isDisabled !== undefined && isDisabled === disabled) {                                                     // 12869
          return;                                                                                                      // 12870
        }                                                                                                              // 12871
        isDisabled = disabled;                                                                                         // 12872
        if (disabled) {                                                                                                // 12873
          element.attr({'tabindex': -1, 'aria-disabled': 'true'});                                                     // 12874
          element.off('click', openSelect);                                                                            // 12875
          element.off('keydown', handleKeypress);                                                                      // 12876
        } else {                                                                                                       // 12877
          element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});                                         // 12878
          element.on('click', openSelect);                                                                             // 12879
          element.on('keydown', handleKeypress);                                                                       // 12880
        }                                                                                                              // 12881
      });                                                                                                              // 12882
                                                                                                                       // 12883
      if (!attr.disabled && !attr.ngDisabled) {                                                                        // 12884
        element.attr({'tabindex': attr.tabindex, 'aria-disabled': 'false'});                                           // 12885
        element.on('click', openSelect);                                                                               // 12886
        element.on('keydown', handleKeypress);                                                                         // 12887
      }                                                                                                                // 12888
                                                                                                                       // 12889
      var ariaAttrs = {                                                                                                // 12890
        role: 'combobox',                                                                                              // 12891
        'aria-expanded': 'false'                                                                                       // 12892
      };                                                                                                               // 12893
      if (!element[0].hasAttribute('id')) {                                                                            // 12894
        ariaAttrs.id = 'select_' + $mdUtil.nextUid();                                                                  // 12895
      }                                                                                                                // 12896
      element.attr(ariaAttrs);                                                                                         // 12897
                                                                                                                       // 12898
      scope.$on('$destroy', function() {                                                                               // 12899
        $mdSelect                                                                                                      // 12900
          .destroy()                                                                                                   // 12901
          .finally(function() {                                                                                        // 12902
            if ( selectContainer ) {                                                                                   // 12903
              selectContainer.remove();                                                                                // 12904
            }                                                                                                          // 12905
                                                                                                                       // 12906
            if (containerCtrl) {                                                                                       // 12907
              containerCtrl.setFocused(false);                                                                         // 12908
              containerCtrl.setHasValue(false);                                                                        // 12909
              containerCtrl.input = null;                                                                              // 12910
            }                                                                                                          // 12911
          });                                                                                                          // 12912
      });                                                                                                              // 12913
                                                                                                                       // 12914
                                                                                                                       // 12915
                                                                                                                       // 12916
      function inputCheckValue() {                                                                                     // 12917
        // The select counts as having a value if one or more options are selected,                                    // 12918
        // or if the input's validity state says it has bad input (eg string in a number input)                        // 12919
        containerCtrl && containerCtrl.setHasValue(selectMenuCtrl.selectedLabels().length > 0 || (element[0].validity || {}).badInput);
      }                                                                                                                // 12921
                                                                                                                       // 12922
      // Create a fake select to find out the label value                                                              // 12923
      function createSelect() {                                                                                        // 12924
        selectContainer = angular.element(selectTemplate);                                                             // 12925
        var selectEl = selectContainer.find('md-select-menu');                                                         // 12926
        selectEl.data('$ngModelController', ngModelCtrl);                                                              // 12927
        selectEl.data('$mdSelectController', mdSelectCtrl);                                                            // 12928
        selectScope = scope.$new();                                                                                    // 12929
        $mdTheming.inherit(selectContainer, element);                                                                  // 12930
        if (element.attr('md-container-class')) {                                                                      // 12931
          var value = selectContainer[0].getAttribute('class') + ' ' + element.attr('md-container-class');             // 12932
          selectContainer[0].setAttribute('class', value);                                                             // 12933
        }                                                                                                              // 12934
        selectContainer = $compile(selectContainer)(selectScope);                                                      // 12935
        selectMenuCtrl = selectContainer.find('md-select-menu').controller('mdSelectMenu');                            // 12936
      }                                                                                                                // 12937
                                                                                                                       // 12938
      function handleKeypress(e) {                                                                                     // 12939
        var allowedCodes = [32, 13, 38, 40];                                                                           // 12940
        if (allowedCodes.indexOf(e.keyCode) != -1) {                                                                   // 12941
          // prevent page scrolling on interaction                                                                     // 12942
          e.preventDefault();                                                                                          // 12943
          openSelect(e);                                                                                               // 12944
        } else {                                                                                                       // 12945
          if (e.keyCode <= 90 && e.keyCode >= 31) {                                                                    // 12946
            e.preventDefault();                                                                                        // 12947
            var node = selectMenuCtrl.optNodeForKeyboardSearch(e);                                                     // 12948
            if (!node) return;                                                                                         // 12949
            var optionCtrl = angular.element(node).controller('mdOption');                                             // 12950
            if (!selectMenuCtrl.isMultiple) {                                                                          // 12951
              selectMenuCtrl.deselect(Object.keys(selectMenuCtrl.selected)[0]);                                        // 12952
            }                                                                                                          // 12953
            selectMenuCtrl.select(optionCtrl.hashKey, optionCtrl.value);                                               // 12954
            selectMenuCtrl.refreshViewValue();                                                                         // 12955
            ngModelCtrl.$render();                                                                                     // 12956
          }                                                                                                            // 12957
        }                                                                                                              // 12958
      }                                                                                                                // 12959
                                                                                                                       // 12960
      function openSelect() {                                                                                          // 12961
        selectScope.isOpen = true;                                                                                     // 12962
                                                                                                                       // 12963
        $mdSelect.show({                                                                                               // 12964
          scope: selectScope,                                                                                          // 12965
          preserveScope: true,                                                                                         // 12966
          skipCompile: true,                                                                                           // 12967
          element: selectContainer,                                                                                    // 12968
          target: element[0],                                                                                          // 12969
          hasBackdrop: true,                                                                                           // 12970
          loadingAsync: attr.mdOnOpen ? scope.$eval(attr.mdOnOpen) || true : false                                     // 12971
        }).then(function() {                                                                                           // 12972
          selectScope.isOpen = false;                                                                                  // 12973
        });                                                                                                            // 12974
      }                                                                                                                // 12975
    };                                                                                                                 // 12976
  }                                                                                                                    // 12977
}                                                                                                                      // 12978
SelectDirective.$inject = ["$mdSelect", "$mdUtil", "$mdTheming", "$mdAria", "$compile", "$parse"];                     // 12979
                                                                                                                       // 12980
function SelectMenuDirective($parse, $mdUtil, $mdTheming) {                                                            // 12981
                                                                                                                       // 12982
  SelectMenuController.$inject = ["$scope", "$attrs", "$element"];                                                     // 12983
  return {                                                                                                             // 12984
    restrict: 'E',                                                                                                     // 12985
    require: ['mdSelectMenu', '?ngModel'],                                                                             // 12986
    controller: SelectMenuController,                                                                                  // 12987
    link: {pre: preLink}                                                                                               // 12988
  };                                                                                                                   // 12989
                                                                                                                       // 12990
  // We use preLink instead of postLink to ensure that the select is initialized before                                // 12991
  // its child options run postLink.                                                                                   // 12992
  function preLink(scope, element, attr, ctrls) {                                                                      // 12993
    var selectCtrl = ctrls[0];                                                                                         // 12994
    var ngModel = ctrls[1];                                                                                            // 12995
                                                                                                                       // 12996
    $mdTheming(element);                                                                                               // 12997
    element.on('click', clickListener);                                                                                // 12998
    element.on('keypress', keyListener);                                                                               // 12999
    if (ngModel) selectCtrl.init(ngModel);                                                                             // 13000
    configureAria();                                                                                                   // 13001
                                                                                                                       // 13002
    function configureAria() {                                                                                         // 13003
      element.attr({                                                                                                   // 13004
        'id': 'select_menu_' + $mdUtil.nextUid(),                                                                      // 13005
        'role': 'listbox',                                                                                             // 13006
        'aria-multiselectable': (selectCtrl.isMultiple ? 'true' : 'false')                                             // 13007
      });                                                                                                              // 13008
    }                                                                                                                  // 13009
                                                                                                                       // 13010
    function keyListener(e) {                                                                                          // 13011
      if (e.keyCode == 13 || e.keyCode == 32) {                                                                        // 13012
        clickListener(e);                                                                                              // 13013
      }                                                                                                                // 13014
    }                                                                                                                  // 13015
                                                                                                                       // 13016
    function clickListener(ev) {                                                                                       // 13017
      var option = $mdUtil.getClosest(ev.target, 'md-option');                                                         // 13018
      var optionCtrl = option && angular.element(option).data('$mdOptionController');                                  // 13019
      if (!option || !optionCtrl) return;                                                                              // 13020
      if (option.hasAttribute('disabled')) {                                                                           // 13021
        ev.stopImmediatePropagation();                                                                                 // 13022
        return false;                                                                                                  // 13023
      }                                                                                                                // 13024
                                                                                                                       // 13025
      var optionHashKey = selectCtrl.hashGetter(optionCtrl.value);                                                     // 13026
      var isSelected = angular.isDefined(selectCtrl.selected[optionHashKey]);                                          // 13027
                                                                                                                       // 13028
      scope.$apply(function() {                                                                                        // 13029
        if (selectCtrl.isMultiple) {                                                                                   // 13030
          if (isSelected) {                                                                                            // 13031
            selectCtrl.deselect(optionHashKey);                                                                        // 13032
          } else {                                                                                                     // 13033
            selectCtrl.select(optionHashKey, optionCtrl.value);                                                        // 13034
          }                                                                                                            // 13035
        } else {                                                                                                       // 13036
          if (!isSelected) {                                                                                           // 13037
            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);                                                  // 13038
            selectCtrl.select(optionHashKey, optionCtrl.value);                                                        // 13039
          }                                                                                                            // 13040
        }                                                                                                              // 13041
        selectCtrl.refreshViewValue();                                                                                 // 13042
      });                                                                                                              // 13043
    }                                                                                                                  // 13044
  }                                                                                                                    // 13045
                                                                                                                       // 13046
  function SelectMenuController($scope, $attrs, $element) {                                                            // 13047
    var self = this;                                                                                                   // 13048
    self.isMultiple = angular.isDefined($attrs.multiple);                                                              // 13049
    // selected is an object with keys matching all of the selected options' hashed values                             // 13050
    self.selected = {};                                                                                                // 13051
    // options is an object with keys matching every option's hash value,                                              // 13052
    // and values matching every option's controller.                                                                  // 13053
    self.options = {};                                                                                                 // 13054
                                                                                                                       // 13055
    $scope.$watch(function() {                                                                                         // 13056
      return self.options;                                                                                             // 13057
    }, function() {                                                                                                    // 13058
      self.ngModel.$render();                                                                                          // 13059
    }, true);                                                                                                          // 13060
                                                                                                                       // 13061
    var deregisterCollectionWatch;                                                                                     // 13062
    self.setMultiple = function(isMultiple) {                                                                          // 13063
      var ngModel = self.ngModel;                                                                                      // 13064
      self.isMultiple = isMultiple;                                                                                    // 13065
      if (deregisterCollectionWatch) deregisterCollectionWatch();                                                      // 13066
                                                                                                                       // 13067
      if (self.isMultiple) {                                                                                           // 13068
        ngModel.$validators['md-multiple'] = validateArray;                                                            // 13069
        ngModel.$render = renderMultiple;                                                                              // 13070
                                                                                                                       // 13071
        // watchCollection on the model because by default ngModel only watches the model's                            // 13072
        // reference. This allowed the developer to also push and pop from their array.                                // 13073
        $scope.$watchCollection($attrs.ngModel, function(value) {                                                      // 13074
          if (validateArray(value)) renderMultiple(value);                                                             // 13075
          self.ngModel.$setPristine();                                                                                 // 13076
        });                                                                                                            // 13077
      } else {                                                                                                         // 13078
        delete ngModel.$validators['md-multiple'];                                                                     // 13079
        ngModel.$render = renderSingular;                                                                              // 13080
      }                                                                                                                // 13081
                                                                                                                       // 13082
      function validateArray(modelValue, viewValue) {                                                                  // 13083
        // If a value is truthy but not an array, reject it.                                                           // 13084
        // If value is undefined/falsy, accept that it's an empty array.                                               // 13085
        return angular.isArray(modelValue || viewValue || []);                                                         // 13086
      }                                                                                                                // 13087
    };                                                                                                                 // 13088
                                                                                                                       // 13089
    var searchStr = '';                                                                                                // 13090
    var clearSearchTimeout, optNodes, optText;                                                                         // 13091
    var CLEAR_SEARCH_AFTER = 300;                                                                                      // 13092
    self.optNodeForKeyboardSearch = function(e) {                                                                      // 13093
      clearSearchTimeout && clearTimeout(clearSearchTimeout);                                                          // 13094
      clearSearchTimeout = setTimeout(function() {                                                                     // 13095
        clearSearchTimeout = undefined;                                                                                // 13096
        searchStr = '';                                                                                                // 13097
        optText = undefined;                                                                                           // 13098
        optNodes = undefined;                                                                                          // 13099
      }, CLEAR_SEARCH_AFTER);                                                                                          // 13100
      searchStr += String.fromCharCode(e.keyCode);                                                                     // 13101
      var search = new RegExp('^' + searchStr, 'i');                                                                   // 13102
      if (!optNodes) {                                                                                                 // 13103
        optNodes = $element.find('md-option');                                                                         // 13104
        optText = new Array(optNodes.length);                                                                          // 13105
        angular.forEach(optNodes, function(el, i) {                                                                    // 13106
          optText[i] = el.textContent.trim();                                                                          // 13107
        });                                                                                                            // 13108
      }                                                                                                                // 13109
      for (var i = 0; i < optText.length; ++i) {                                                                       // 13110
        if (search.test(optText[i])) {                                                                                 // 13111
          return optNodes[i];                                                                                          // 13112
        }                                                                                                              // 13113
      }                                                                                                                // 13114
    };                                                                                                                 // 13115
                                                                                                                       // 13116
    self.init = function(ngModel) {                                                                                    // 13117
      self.ngModel = ngModel;                                                                                          // 13118
                                                                                                                       // 13119
      // Allow users to provide `ng-model="foo" ng-model-options="{trackBy: 'foo.id'}"` so                             // 13120
      // that we can properly compare objects set on the model to the available options                                // 13121
      if (ngModel.$options && ngModel.$options.trackBy) {                                                              // 13122
        var trackByLocals = {};                                                                                        // 13123
        var trackByParsed = $parse(ngModel.$options.trackBy);                                                          // 13124
        self.hashGetter = function(value, valueScope) {                                                                // 13125
          trackByLocals.$value = value;                                                                                // 13126
          return trackByParsed(valueScope || $scope, trackByLocals);                                                   // 13127
        };                                                                                                             // 13128
        // If the user doesn't provide a trackBy, we automatically generate an id for every                            // 13129
        // value passed in                                                                                             // 13130
      } else {                                                                                                         // 13131
        self.hashGetter = function getHashValue(value) {                                                               // 13132
          if (angular.isObject(value)) {                                                                               // 13133
            return 'object_' + (value.$$mdSelectId || (value.$$mdSelectId = ++selectNextId));                          // 13134
          }                                                                                                            // 13135
          return value;                                                                                                // 13136
        };                                                                                                             // 13137
      }                                                                                                                // 13138
      self.setMultiple(self.isMultiple);                                                                               // 13139
    };                                                                                                                 // 13140
                                                                                                                       // 13141
    self.selectedLabels = function() {                                                                                 // 13142
      var selectedOptionEls = $mdUtil.nodesToArray($element[0].querySelectorAll('md-option[selected]'));               // 13143
      if (selectedOptionEls.length) {                                                                                  // 13144
        return selectedOptionEls.map(function(el) {                                                                    // 13145
          return el.textContent;                                                                                       // 13146
        }).join(', ');                                                                                                 // 13147
      } else {                                                                                                         // 13148
        return '';                                                                                                     // 13149
      }                                                                                                                // 13150
    };                                                                                                                 // 13151
                                                                                                                       // 13152
    self.select = function(hashKey, hashedValue) {                                                                     // 13153
      var option = self.options[hashKey];                                                                              // 13154
      option && option.setSelected(true);                                                                              // 13155
      self.selected[hashKey] = hashedValue;                                                                            // 13156
    };                                                                                                                 // 13157
    self.deselect = function(hashKey) {                                                                                // 13158
      var option = self.options[hashKey];                                                                              // 13159
      option && option.setSelected(false);                                                                             // 13160
      delete self.selected[hashKey];                                                                                   // 13161
    };                                                                                                                 // 13162
                                                                                                                       // 13163
    self.addOption = function(hashKey, optionCtrl) {                                                                   // 13164
      if (angular.isDefined(self.options[hashKey])) {                                                                  // 13165
        throw new Error('Duplicate md-option values are not allowed in a select. ' +                                   // 13166
          'Duplicate value "' + optionCtrl.value + '" found.');                                                        // 13167
      }                                                                                                                // 13168
      self.options[hashKey] = optionCtrl;                                                                              // 13169
                                                                                                                       // 13170
      // If this option's value was already in our ngModel, go ahead and select it.                                    // 13171
      if (angular.isDefined(self.selected[hashKey])) {                                                                 // 13172
        self.select(hashKey, optionCtrl.value);                                                                        // 13173
        self.refreshViewValue();                                                                                       // 13174
      }                                                                                                                // 13175
    };                                                                                                                 // 13176
    self.removeOption = function(hashKey) {                                                                            // 13177
      delete self.options[hashKey];                                                                                    // 13178
      // Don't deselect an option when it's removed - the user's ngModel should be allowed                             // 13179
      // to have values that do not match a currently available option.                                                // 13180
    };                                                                                                                 // 13181
                                                                                                                       // 13182
    self.refreshViewValue = function() {                                                                               // 13183
      var values = [];                                                                                                 // 13184
      var option;                                                                                                      // 13185
      for (var hashKey in self.selected) {                                                                             // 13186
        // If this hashKey has an associated option, push that option's value to the model.                            // 13187
        if ((option = self.options[hashKey])) {                                                                        // 13188
          values.push(option.value);                                                                                   // 13189
        } else {                                                                                                       // 13190
          // Otherwise, the given hashKey has no associated option, and we got it                                      // 13191
          // from an ngModel value at an earlier time. Push the unhashed value of                                      // 13192
          // this hashKey to the model.                                                                                // 13193
          // This allows the developer to put a value in the model that doesn't yet have                               // 13194
          // an associated option.                                                                                     // 13195
          values.push(self.selected[hashKey]);                                                                         // 13196
        }                                                                                                              // 13197
      }                                                                                                                // 13198
      self.ngModel.$setViewValue(self.isMultiple ? values : values[0]);                                                // 13199
    };                                                                                                                 // 13200
                                                                                                                       // 13201
    function renderMultiple() {                                                                                        // 13202
      var newSelectedValues = self.ngModel.$modelValue || self.ngModel.$viewValue || [];                               // 13203
      if (!angular.isArray(newSelectedValues)) return;                                                                 // 13204
                                                                                                                       // 13205
      var oldSelected = Object.keys(self.selected);                                                                    // 13206
                                                                                                                       // 13207
      var newSelectedHashes = newSelectedValues.map(self.hashGetter);                                                  // 13208
      var deselected = oldSelected.filter(function(hash) {                                                             // 13209
        return newSelectedHashes.indexOf(hash) === -1;                                                                 // 13210
      });                                                                                                              // 13211
                                                                                                                       // 13212
      deselected.forEach(self.deselect);                                                                               // 13213
      newSelectedHashes.forEach(function(hashKey, i) {                                                                 // 13214
        self.select(hashKey, newSelectedValues[i]);                                                                    // 13215
      });                                                                                                              // 13216
    }                                                                                                                  // 13217
                                                                                                                       // 13218
    function renderSingular() {                                                                                        // 13219
      var value = self.ngModel.$viewValue || self.ngModel.$modelValue;                                                 // 13220
      Object.keys(self.selected).forEach(self.deselect);                                                               // 13221
      self.select(self.hashGetter(value), value);                                                                      // 13222
    }                                                                                                                  // 13223
  }                                                                                                                    // 13224
                                                                                                                       // 13225
}                                                                                                                      // 13226
SelectMenuDirective.$inject = ["$parse", "$mdUtil", "$mdTheming"];                                                     // 13227
                                                                                                                       // 13228
function OptionDirective($mdButtonInkRipple, $mdUtil) {                                                                // 13229
                                                                                                                       // 13230
  OptionController.$inject = ["$element"];                                                                             // 13231
  return {                                                                                                             // 13232
    restrict: 'E',                                                                                                     // 13233
    require: ['mdOption', '^^mdSelectMenu'],                                                                           // 13234
    controller: OptionController,                                                                                      // 13235
    compile: compile                                                                                                   // 13236
  };                                                                                                                   // 13237
                                                                                                                       // 13238
  function compile(element, attr) {                                                                                    // 13239
    // Manual transclusion to avoid the extra inner <span> that ng-transclude generates                                // 13240
    element.append(angular.element('<div class="md-text">').append(element.contents()));                               // 13241
                                                                                                                       // 13242
    element.attr('tabindex', attr.tabindex || '0');                                                                    // 13243
    return postLink;                                                                                                   // 13244
  }                                                                                                                    // 13245
                                                                                                                       // 13246
  function postLink(scope, element, attr, ctrls) {                                                                     // 13247
    var optionCtrl = ctrls[0];                                                                                         // 13248
    var selectCtrl = ctrls[1];                                                                                         // 13249
                                                                                                                       // 13250
    if (angular.isDefined(attr.ngValue)) {                                                                             // 13251
      scope.$watch(attr.ngValue, setOptionValue);                                                                      // 13252
    } else if (angular.isDefined(attr.value)) {                                                                        // 13253
      setOptionValue(isNaN(attr.value) ? attr.value : Number(attr.value));                                             // 13254
    } else {                                                                                                           // 13255
      scope.$watch(function() {                                                                                        // 13256
        return element.text();                                                                                         // 13257
      }, setOptionValue);                                                                                              // 13258
    }                                                                                                                  // 13259
                                                                                                                       // 13260
    attr.$observe('disabled', function(disabled) {                                                                     // 13261
      if (disabled) {                                                                                                  // 13262
        element.attr('tabindex', '-1');                                                                                // 13263
      } else {                                                                                                         // 13264
        element.attr('tabindex', '0');                                                                                 // 13265
      }                                                                                                                // 13266
    });                                                                                                                // 13267
                                                                                                                       // 13268
    scope.$$postDigest(function() {                                                                                    // 13269
      attr.$observe('selected', function(selected) {                                                                   // 13270
        if (!angular.isDefined(selected)) return;                                                                      // 13271
        if (typeof selected == 'string') selected = true;                                                              // 13272
        if (selected) {                                                                                                // 13273
          if (!selectCtrl.isMultiple) {                                                                                // 13274
            selectCtrl.deselect(Object.keys(selectCtrl.selected)[0]);                                                  // 13275
          }                                                                                                            // 13276
          selectCtrl.select(optionCtrl.hashKey, optionCtrl.value);                                                     // 13277
        } else {                                                                                                       // 13278
          selectCtrl.deselect(optionCtrl.hashKey);                                                                     // 13279
        }                                                                                                              // 13280
        selectCtrl.refreshViewValue();                                                                                 // 13281
        selectCtrl.ngModel.$render();                                                                                  // 13282
      });                                                                                                              // 13283
    });                                                                                                                // 13284
                                                                                                                       // 13285
    $mdButtonInkRipple.attach(scope, element);                                                                         // 13286
    configureAria();                                                                                                   // 13287
                                                                                                                       // 13288
    function setOptionValue(newValue, oldValue) {                                                                      // 13289
      var oldHashKey = selectCtrl.hashGetter(oldValue, scope);                                                         // 13290
      var newHashKey = selectCtrl.hashGetter(newValue, scope);                                                         // 13291
                                                                                                                       // 13292
      optionCtrl.hashKey = newHashKey;                                                                                 // 13293
      optionCtrl.value = newValue;                                                                                     // 13294
                                                                                                                       // 13295
      selectCtrl.removeOption(oldHashKey, optionCtrl);                                                                 // 13296
      selectCtrl.addOption(newHashKey, optionCtrl);                                                                    // 13297
    }                                                                                                                  // 13298
                                                                                                                       // 13299
    scope.$on('$destroy', function() {                                                                                 // 13300
      selectCtrl.removeOption(optionCtrl.hashKey, optionCtrl);                                                         // 13301
    });                                                                                                                // 13302
                                                                                                                       // 13303
    function configureAria() {                                                                                         // 13304
      var ariaAttrs = {                                                                                                // 13305
        'role': 'option',                                                                                              // 13306
        'aria-selected': 'false'                                                                                       // 13307
      };                                                                                                               // 13308
                                                                                                                       // 13309
      if (!element[0].hasAttribute('id')) {                                                                            // 13310
        ariaAttrs.id = 'select_option_' + $mdUtil.nextUid();                                                           // 13311
      }                                                                                                                // 13312
      element.attr(ariaAttrs);                                                                                         // 13313
    }                                                                                                                  // 13314
  }                                                                                                                    // 13315
                                                                                                                       // 13316
  function OptionController($element) {                                                                                // 13317
    this.selected = false;                                                                                             // 13318
    this.setSelected = function(isSelected) {                                                                          // 13319
      if (isSelected && !this.selected) {                                                                              // 13320
        $element.attr({                                                                                                // 13321
          'selected': 'selected',                                                                                      // 13322
          'aria-selected': 'true'                                                                                      // 13323
        });                                                                                                            // 13324
      } else if (!isSelected && this.selected) {                                                                       // 13325
        $element.removeAttr('selected');                                                                               // 13326
        $element.attr('aria-selected', 'false');                                                                       // 13327
      }                                                                                                                // 13328
      this.selected = isSelected;                                                                                      // 13329
    };                                                                                                                 // 13330
  }                                                                                                                    // 13331
                                                                                                                       // 13332
}                                                                                                                      // 13333
OptionDirective.$inject = ["$mdButtonInkRipple", "$mdUtil"];                                                           // 13334
                                                                                                                       // 13335
function OptgroupDirective() {                                                                                         // 13336
  return {                                                                                                             // 13337
    restrict: 'E',                                                                                                     // 13338
    compile: compile                                                                                                   // 13339
  };                                                                                                                   // 13340
  function compile(el, attrs) {                                                                                        // 13341
    var labelElement = el.find('label');                                                                               // 13342
    if (!labelElement.length) {                                                                                        // 13343
      labelElement = angular.element('<label>');                                                                       // 13344
      el.prepend(labelElement);                                                                                        // 13345
    }                                                                                                                  // 13346
    if (attrs.label) labelElement.text(attrs.label);                                                                   // 13347
  }                                                                                                                    // 13348
}                                                                                                                      // 13349
                                                                                                                       // 13350
function SelectProvider($$interimElementProvider) {                                                                    // 13351
  selectDefaultOptions.$inject = ["$mdSelect", "$mdConstant", "$mdUtil", "$window", "$q", "$$rAF", "$animateCss", "$animate"];
  return $$interimElementProvider('$mdSelect')                                                                         // 13353
    .setDefaults({                                                                                                     // 13354
      methods: ['target'],                                                                                             // 13355
      options: selectDefaultOptions                                                                                    // 13356
    });                                                                                                                // 13357
                                                                                                                       // 13358
  /* @ngInject */                                                                                                      // 13359
  function selectDefaultOptions($mdSelect, $mdConstant, $mdUtil, $window, $q, $$rAF, $animateCss, $animate) {          // 13360
    var ERRROR_TARGET_EXPECTED = "$mdSelect.show() expected a target element in options.target but got '{0}'!";        // 13361
    var animator = $mdUtil.dom.animator;                                                                               // 13362
                                                                                                                       // 13363
    return {                                                                                                           // 13364
      parent: 'body',                                                                                                  // 13365
      themable: true,                                                                                                  // 13366
      onShow: onShow,                                                                                                  // 13367
      onRemove: onRemove,                                                                                              // 13368
      hasBackdrop: true,                                                                                               // 13369
      disableParentScroll: true                                                                                        // 13370
    };                                                                                                                 // 13371
                                                                                                                       // 13372
    /**                                                                                                                // 13373
     * Interim-element onRemove logic....                                                                              // 13374
     */                                                                                                                // 13375
    function onRemove(scope, element, opts) {                                                                          // 13376
      opts = opts || { };                                                                                              // 13377
      opts.cleanupInteraction();                                                                                       // 13378
      opts.cleanupResizing();                                                                                          // 13379
      opts.hideBackdrop();                                                                                             // 13380
                                                                                                                       // 13381
      // For navigation $destroy events, do a quick, non-animated removal,                                             // 13382
      // but for normal closes (from clicks, etc) animate the removal                                                  // 13383
                                                                                                                       // 13384
      return  (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );                   // 13385
                                                                                                                       // 13386
      /**                                                                                                              // 13387
       * For normal closes (eg clicks), animate the removal.                                                           // 13388
       * For forced closes (like $destroy events from navigation),                                                     // 13389
       * skip the animations                                                                                           // 13390
       */                                                                                                              // 13391
      function animateRemoval() {                                                                                      // 13392
        return $animateCss(element, {addClass: 'md-leave'}).start();                                                   // 13393
      }                                                                                                                // 13394
                                                                                                                       // 13395
      /**                                                                                                              // 13396
       * Detach the element and cleanup prior changes                                                                  // 13397
       */                                                                                                              // 13398
      function detachAndClean() {                                                                                      // 13399
        configureAria(opts.target, false);                                                                             // 13400
                                                                                                                       // 13401
        element.attr('opacity', 0);                                                                                    // 13402
        element.removeClass('md-active');                                                                              // 13403
        detachElement(element, opts);                                                                                  // 13404
                                                                                                                       // 13405
        announceClosed(opts);                                                                                          // 13406
                                                                                                                       // 13407
        if (!opts.$destroy && opts.restoreFocus) {                                                                     // 13408
          opts.target.focus();                                                                                         // 13409
        }                                                                                                              // 13410
      }                                                                                                                // 13411
                                                                                                                       // 13412
    }                                                                                                                  // 13413
                                                                                                                       // 13414
    /**                                                                                                                // 13415
     * Interim-element onShow logic....                                                                                // 13416
     */                                                                                                                // 13417
    function onShow(scope, element, opts) {                                                                            // 13418
                                                                                                                       // 13419
      watchAsyncLoad();                                                                                                // 13420
      sanitizeAndConfigure(scope, opts);                                                                               // 13421
      configureAria(opts.target);                                                                                      // 13422
                                                                                                                       // 13423
      opts.hideBackdrop = showBackdrop(scope, element, opts);                                                          // 13424
                                                                                                                       // 13425
      return showDropDown(scope, element, opts)                                                                        // 13426
        .then(function(response) {                                                                                     // 13427
          opts.alreadyOpen = true;                                                                                     // 13428
          opts.cleanupInteraction = activateInteraction();                                                             // 13429
          opts.cleanupResizing = activateResizing();                                                                   // 13430
                                                                                                                       // 13431
          return response;                                                                                             // 13432
        }, opts.hideBackdrop);                                                                                         // 13433
                                                                                                                       // 13434
      // ************************************                                                                          // 13435
      // Closure Functions                                                                                             // 13436
      // ************************************                                                                          // 13437
                                                                                                                       // 13438
      /**                                                                                                              // 13439
       *  Attach the select DOM element(s) and animate to the correct positions                                        // 13440
       *  and scalings...                                                                                              // 13441
       */                                                                                                              // 13442
      function showDropDown(scope, element, opts) {                                                                    // 13443
        opts.parent.append(element);                                                                                   // 13444
                                                                                                                       // 13445
        return $q(function(resolve, reject) {                                                                          // 13446
                                                                                                                       // 13447
          try {                                                                                                        // 13448
                                                                                                                       // 13449
            $animateCss(element, {removeClass: 'md-leave', duration: 0})                                               // 13450
              .start()                                                                                                 // 13451
              .then(positionAndFocusMenu)                                                                              // 13452
              .then(resolve);                                                                                          // 13453
                                                                                                                       // 13454
          } catch (e) {                                                                                                // 13455
            reject(e);                                                                                                 // 13456
          }                                                                                                            // 13457
                                                                                                                       // 13458
        });                                                                                                            // 13459
      }                                                                                                                // 13460
                                                                                                                       // 13461
      /**                                                                                                              // 13462
       * Initialize container and dropDown menu positions/scale, then animate                                          // 13463
       * to show... and autoFocus.                                                                                     // 13464
       */                                                                                                              // 13465
      function positionAndFocusMenu() {                                                                                // 13466
        return $q(function(resolve) {                                                                                  // 13467
          if (opts.isRemoved) return $q.reject(false);                                                                 // 13468
                                                                                                                       // 13469
          var info = calculateMenuPositions(scope, element, opts);                                                     // 13470
                                                                                                                       // 13471
          info.container.element.css(animator.toCss(info.container.styles));                                           // 13472
          info.dropDown.element.css(animator.toCss(info.dropDown.styles));                                             // 13473
                                                                                                                       // 13474
          $$rAF(function() {                                                                                           // 13475
            element.addClass('md-active');                                                                             // 13476
            info.dropDown.element.css(animator.toCss({transform: ''}));                                                // 13477
                                                                                                                       // 13478
            autoFocus(opts.focusedNode);                                                                               // 13479
            resolve();                                                                                                 // 13480
          });                                                                                                          // 13481
                                                                                                                       // 13482
        });                                                                                                            // 13483
      }                                                                                                                // 13484
                                                                                                                       // 13485
      /**                                                                                                              // 13486
       * Show modal backdrop element...                                                                                // 13487
       */                                                                                                              // 13488
      function showBackdrop(scope, element, options) {                                                                 // 13489
                                                                                                                       // 13490
        // If we are not within a dialog...                                                                            // 13491
        if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {                         // 13492
          // !! DO this before creating the backdrop; since disableScrollAround()                                      // 13493
          //    configures the scroll offset; which is used by mdBackDrop postLink()                                   // 13494
          options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);                        // 13495
        } else {                                                                                                       // 13496
          options.disableParentScroll = false;                                                                         // 13497
        }                                                                                                              // 13498
                                                                                                                       // 13499
        if (options.hasBackdrop) {                                                                                     // 13500
          // Override duration to immediately show invisible backdrop                                                  // 13501
          options.backdrop = $mdUtil.createBackdrop(scope, "md-select-backdrop md-click-catcher");                     // 13502
          $animate.enter(options.backdrop, options.parent, null, {duration: 0});                                       // 13503
        }                                                                                                              // 13504
                                                                                                                       // 13505
        /**                                                                                                            // 13506
         * Hide modal backdrop element...                                                                              // 13507
         */                                                                                                            // 13508
        return function hideBackdrop() {                                                                               // 13509
          if (options.backdrop) options.backdrop.remove();                                                             // 13510
          if (options.disableParentScroll) options.restoreScroll();                                                    // 13511
                                                                                                                       // 13512
          delete options.restoreScroll;                                                                                // 13513
        }                                                                                                              // 13514
      }                                                                                                                // 13515
                                                                                                                       // 13516
      /**                                                                                                              // 13517
       *                                                                                                               // 13518
       */                                                                                                              // 13519
      function autoFocus(focusedNode) {                                                                                // 13520
        if (focusedNode && !focusedNode.hasAttribute('disabled')) {                                                    // 13521
          focusedNode.focus();                                                                                         // 13522
        }                                                                                                              // 13523
      }                                                                                                                // 13524
                                                                                                                       // 13525
      /**                                                                                                              // 13526
       * Check for valid opts and set some sane defaults                                                               // 13527
       */                                                                                                              // 13528
      function sanitizeAndConfigure(scope, options) {                                                                  // 13529
        var selectEl = element.find('md-select-menu');                                                                 // 13530
                                                                                                                       // 13531
        if (!options.target) {                                                                                         // 13532
          throw new Error($mdUtil.supplant(ERRROR_TARGET_EXPECTED, [options.target]));                                 // 13533
        }                                                                                                              // 13534
                                                                                                                       // 13535
        angular.extend(options, {                                                                                      // 13536
          isRemoved: false,                                                                                            // 13537
          target: angular.element(options.target), //make sure it's not a naked dom node                               // 13538
          parent: angular.element(options.parent),                                                                     // 13539
          selectEl: selectEl,                                                                                          // 13540
          contentEl: element.find('md-content'),                                                                       // 13541
          optionNodes: selectEl[0].getElementsByTagName('md-option')                                                   // 13542
        });                                                                                                            // 13543
      }                                                                                                                // 13544
                                                                                                                       // 13545
      /**                                                                                                              // 13546
       * Configure various resize listeners for screen changes                                                         // 13547
       */                                                                                                              // 13548
      function activateResizing() {                                                                                    // 13549
        var debouncedOnResize = (function(scope, target, options) {                                                    // 13550
                                                                                                                       // 13551
          return function() {                                                                                          // 13552
            if (options.isRemoved) return;                                                                             // 13553
                                                                                                                       // 13554
            var updates = calculateMenuPositions(scope, target, options);                                              // 13555
            var container = updates.container;                                                                         // 13556
            var dropDown = updates.dropDown;                                                                           // 13557
                                                                                                                       // 13558
            container.element.css(animator.toCss(container.styles));                                                   // 13559
            dropDown.element.css(animator.toCss(dropDown.styles));                                                     // 13560
          };                                                                                                           // 13561
                                                                                                                       // 13562
        })(scope, element, opts);                                                                                      // 13563
                                                                                                                       // 13564
        var window = angular.element($window);                                                                         // 13565
        window.on('resize', debouncedOnResize);                                                                        // 13566
        window.on('orientationchange', debouncedOnResize);                                                             // 13567
                                                                                                                       // 13568
        // Publish deactivation closure...                                                                             // 13569
        return function deactivateResizing() {                                                                         // 13570
                                                                                                                       // 13571
          // Disable resizing handlers                                                                                 // 13572
          window.off('resize', debouncedOnResize);                                                                     // 13573
          window.off('orientationchange', debouncedOnResize);                                                          // 13574
        }                                                                                                              // 13575
      }                                                                                                                // 13576
                                                                                                                       // 13577
      /**                                                                                                              // 13578
       *  If asynchronously loading, watch and update internal                                                         // 13579
       *  '$$loadingAsyncDone' flag                                                                                    // 13580
       */                                                                                                              // 13581
      function watchAsyncLoad() {                                                                                      // 13582
        if (opts.loadingAsync && !opts.isRemoved) {                                                                    // 13583
          scope.$$loadingAsyncDone = false;                                                                            // 13584
          scope.progressMode = 'indeterminate';                                                                        // 13585
                                                                                                                       // 13586
          $q.when(opts.loadingAsync)                                                                                   // 13587
            .then(function() {                                                                                         // 13588
              scope.$$loadingAsyncDone = true;                                                                         // 13589
              scope.progressMode = '';                                                                                 // 13590
              delete opts.loadingAsync;                                                                                // 13591
            }).then(function() {                                                                                       // 13592
              $$rAF(positionAndFocusMenu);                                                                             // 13593
            })                                                                                                         // 13594
        }                                                                                                              // 13595
      }                                                                                                                // 13596
                                                                                                                       // 13597
      /**                                                                                                              // 13598
       *                                                                                                               // 13599
       */                                                                                                              // 13600
      function activateInteraction() {                                                                                 // 13601
        if (opts.isRemoved) return;                                                                                    // 13602
                                                                                                                       // 13603
        var dropDown = opts.selectEl;                                                                                  // 13604
        var selectCtrl = dropDown.controller('mdSelectMenu') || {};                                                    // 13605
                                                                                                                       // 13606
        element.addClass('md-clickable');                                                                              // 13607
                                                                                                                       // 13608
        // Close on backdrop click                                                                                     // 13609
        opts.backdrop && opts.backdrop.on('click', onBackdropClick);                                                   // 13610
                                                                                                                       // 13611
        // Escape to close                                                                                             // 13612
        // Cycling of options, and closing on enter                                                                    // 13613
        dropDown.on('keydown', onMenuKeyDown);                                                                         // 13614
        dropDown.on('mouseup', checkCloseMenu);                                                                        // 13615
                                                                                                                       // 13616
        return function cleanupInteraction() {                                                                         // 13617
          opts.backdrop && opts.backdrop.off('click', onBackdropClick);                                                // 13618
          dropDown.off('keydown', onMenuKeyDown);                                                                      // 13619
          dropDown.off('mouseup', checkCloseMenu);                                                                     // 13620
                                                                                                                       // 13621
          element.removeClass('md-clickable');                                                                         // 13622
          opts.isRemoved = true;                                                                                       // 13623
        };                                                                                                             // 13624
                                                                                                                       // 13625
        // ************************************                                                                        // 13626
        // Closure Functions                                                                                           // 13627
        // ************************************                                                                        // 13628
                                                                                                                       // 13629
        function onBackdropClick(e) {                                                                                  // 13630
          e.preventDefault();                                                                                          // 13631
          e.stopPropagation();                                                                                         // 13632
          opts.restoreFocus = false;                                                                                   // 13633
          $mdUtil.nextTick($mdSelect.hide, true);                                                                      // 13634
        }                                                                                                              // 13635
                                                                                                                       // 13636
        function onMenuKeyDown(ev) {                                                                                   // 13637
          var keyCodes = $mdConstant.KEY_CODE;                                                                         // 13638
                                                                                                                       // 13639
          switch (ev.keyCode) {                                                                                        // 13640
            case keyCodes.UP_ARROW:                                                                                    // 13641
              return focusPrevOption();                                                                                // 13642
              break;                                                                                                   // 13643
            case keyCodes.DOWN_ARROW:                                                                                  // 13644
              return focusNextOption();                                                                                // 13645
              break;                                                                                                   // 13646
            case keyCodes.SPACE:                                                                                       // 13647
            case keyCodes.ENTER:                                                                                       // 13648
              var option = $mdUtil.getClosest(ev.target, 'md-option');                                                 // 13649
              if (option) {                                                                                            // 13650
                dropDown.triggerHandler({                                                                              // 13651
                  type: 'click',                                                                                       // 13652
                  target: option                                                                                       // 13653
                });                                                                                                    // 13654
                ev.preventDefault();                                                                                   // 13655
              }                                                                                                        // 13656
              checkCloseMenu(ev);                                                                                      // 13657
              break;                                                                                                   // 13658
            case keyCodes.TAB:                                                                                         // 13659
            case keyCodes.ESCAPE:                                                                                      // 13660
              ev.preventDefault();                                                                                     // 13661
              opts.restoreFocus = true;                                                                                // 13662
              $mdUtil.nextTick($mdSelect.hide, true);                                                                  // 13663
              break;                                                                                                   // 13664
            default:                                                                                                   // 13665
              if (ev.keyCode >= 31 && ev.keyCode <= 90) {                                                              // 13666
                var optNode = dropDown.controller('mdSelectMenu').optNodeForKeyboardSearch(ev);                        // 13667
                opts.focusedNode = optNode || opts.focusedNode;                                                        // 13668
                optNode && optNode.focus();                                                                            // 13669
              }                                                                                                        // 13670
          }                                                                                                            // 13671
        }                                                                                                              // 13672
                                                                                                                       // 13673
        function focusOption(direction) {                                                                              // 13674
          var optionsArray = $mdUtil.nodesToArray(opts.optionNodes);                                                   // 13675
          var index = optionsArray.indexOf(opts.focusedNode);                                                          // 13676
                                                                                                                       // 13677
          var newOption;                                                                                               // 13678
                                                                                                                       // 13679
          do {                                                                                                         // 13680
            if (index === -1) {                                                                                        // 13681
              // We lost the previously focused element, reset to first option                                         // 13682
              index = 0;                                                                                               // 13683
            } else if (direction === 'next' && index < optionsArray.length - 1) {                                      // 13684
              index++;                                                                                                 // 13685
            } else if (direction === 'prev' && index > 0) {                                                            // 13686
              index--;                                                                                                 // 13687
            }                                                                                                          // 13688
            newOption = optionsArray[index];                                                                           // 13689
            if (newOption.hasAttribute('disabled')) newOption = undefined;                                             // 13690
          } while (!newOption && index < optionsArray.length - 1 && index > 0)                                         // 13691
          newOption && newOption.focus();                                                                              // 13692
          opts.focusedNode = newOption;                                                                                // 13693
        }                                                                                                              // 13694
                                                                                                                       // 13695
        function focusNextOption() {                                                                                   // 13696
          focusOption('next');                                                                                         // 13697
        }                                                                                                              // 13698
                                                                                                                       // 13699
        function focusPrevOption() {                                                                                   // 13700
          focusOption('prev');                                                                                         // 13701
        }                                                                                                              // 13702
                                                                                                                       // 13703
        function checkCloseMenu(ev) {                                                                                  // 13704
          if (ev && ( ev.type == 'mouseup') && (ev.currentTarget != dropDown[0])) return;                              // 13705
          if ( mouseOnScrollbar() ) return;                                                                            // 13706
                                                                                                                       // 13707
          if (!selectCtrl.isMultiple) {                                                                                // 13708
            opts.restoreFocus = true;                                                                                  // 13709
                                                                                                                       // 13710
            $mdUtil.nextTick(function() {                                                                              // 13711
              $mdSelect.hide(selectCtrl.ngModel.$viewValue);                                                           // 13712
            }, true);                                                                                                  // 13713
          }                                                                                                            // 13714
                                                                                                                       // 13715
          /**                                                                                                          // 13716
           * check if the mouseup event was on a scrollbar                                                             // 13717
           */                                                                                                          // 13718
          function mouseOnScrollbar() {                                                                                // 13719
            var clickOnScrollbar = false;                                                                              // 13720
            if (ev && (ev.currentTarget.children.length > 0)) {                                                        // 13721
              var child = ev.currentTarget.children[0];                                                                // 13722
              var hasScrollbar = child.scrollHeight > child.clientHeight;                                              // 13723
              if (hasScrollbar && child.children.length > 0) {                                                         // 13724
                var relPosX = ev.pageX - ev.currentTarget.getBoundingClientRect().left;                                // 13725
                if (relPosX > child.querySelector('md-option').offsetWidth)                                            // 13726
                  clickOnScrollbar = true;                                                                             // 13727
              }                                                                                                        // 13728
            }                                                                                                          // 13729
            return clickOnScrollbar;                                                                                   // 13730
          }                                                                                                            // 13731
        }                                                                                                              // 13732
      }                                                                                                                // 13733
                                                                                                                       // 13734
    }                                                                                                                  // 13735
                                                                                                                       // 13736
    /**                                                                                                                // 13737
     *                                                                                                                 // 13738
     */                                                                                                                // 13739
    function configureAria(element, isExpanded) {                                                                      // 13740
      isExpanded = angular.isUndefined(isExpanded) ? 'true' : 'false';                                                 // 13741
      element && element.attr('aria-expanded', isExpanded);                                                            // 13742
    }                                                                                                                  // 13743
                                                                                                                       // 13744
    /**                                                                                                                // 13745
     * To notify listeners that the Select menu has closed,                                                            // 13746
     * trigger the [optional] user-defined expression                                                                  // 13747
     */                                                                                                                // 13748
    function announceClosed(opts) {                                                                                    // 13749
      var mdSelect = opts.selectEl.controller('mdSelect');                                                             // 13750
      if (mdSelect) {                                                                                                  // 13751
        var menuController = opts.selectEl.controller('mdSelectMenu');                                                 // 13752
        mdSelect.setLabelText(menuController.selectedLabels());                                                        // 13753
        mdSelect.triggerClose();                                                                                       // 13754
      }                                                                                                                // 13755
    }                                                                                                                  // 13756
                                                                                                                       // 13757
    /**                                                                                                                // 13758
     * Use browser to remove this element without triggering a $destroy event                                          // 13759
     */                                                                                                                // 13760
    function detachElement(element, opts) {                                                                            // 13761
      if (element[0].parentNode === opts.parent[0]) {                                                                  // 13762
        opts.parent[0].removeChild(element[0]);                                                                        // 13763
      }                                                                                                                // 13764
    }                                                                                                                  // 13765
                                                                                                                       // 13766
    /**                                                                                                                // 13767
     * Calculate the                                                                                                   // 13768
     */                                                                                                                // 13769
    function calculateMenuPositions(scope, element, opts) {                                                            // 13770
      var optionNodes,                                                                                                 // 13771
        containerNode = element[0],                                                                                    // 13772
        targetNode = opts.target[0].firstElementChild, // target the label                                             // 13773
        parentNode = opts.parent[0],                                                                                   // 13774
        selectNode = opts.selectEl[0],                                                                                 // 13775
        contentNode = opts.contentEl[0],                                                                               // 13776
        parentRect = parentNode.getBoundingClientRect(),                                                               // 13777
        targetRect = targetNode.getBoundingClientRect(),                                                               // 13778
        shouldOpenAroundTarget = false,                                                                                // 13779
        bounds = {                                                                                                     // 13780
          left: parentRect.left + SELECT_EDGE_MARGIN,                                                                  // 13781
          top: SELECT_EDGE_MARGIN,                                                                                     // 13782
          bottom: parentRect.height - SELECT_EDGE_MARGIN,                                                              // 13783
          right: parentRect.width - SELECT_EDGE_MARGIN - ($mdUtil.floatingScrollbars() ? 16 : 0)                       // 13784
        },                                                                                                             // 13785
        spaceAvailable = {                                                                                             // 13786
          top: targetRect.top - bounds.top,                                                                            // 13787
          left: targetRect.left - bounds.left,                                                                         // 13788
          right: bounds.right - (targetRect.left + targetRect.width),                                                  // 13789
          bottom: bounds.bottom - (targetRect.top + targetRect.height)                                                 // 13790
        },                                                                                                             // 13791
        maxWidth = parentRect.width - SELECT_EDGE_MARGIN * 2,                                                          // 13792
        isScrollable = contentNode.scrollHeight > contentNode.offsetHeight,                                            // 13793
        selectedNode = selectNode.querySelector('md-option[selected]'),                                                // 13794
        optionNodes = selectNode.getElementsByTagName('md-option'),                                                    // 13795
        optgroupNodes = selectNode.getElementsByTagName('md-optgroup');                                                // 13796
                                                                                                                       // 13797
      var loading = isPromiseLike(opts.loadingAsync);                                                                  // 13798
      var centeredNode;                                                                                                // 13799
      if (!loading) {                                                                                                  // 13800
        // If a selected node, center around that                                                                      // 13801
        if (selectedNode) {                                                                                            // 13802
          centeredNode = selectedNode;                                                                                 // 13803
          // If there are option groups, center around the first option group                                          // 13804
        } else if (optgroupNodes.length) {                                                                             // 13805
          centeredNode = optgroupNodes[0];                                                                             // 13806
          // Otherwise - if we are not loading async - center around the first optionNode                              // 13807
        } else if (optionNodes.length) {                                                                               // 13808
          centeredNode = optionNodes[0];                                                                               // 13809
          // In case there are no options, center on whatever's in there... (eg progress indicator)                    // 13810
        } else {                                                                                                       // 13811
          centeredNode = contentNode.firstElementChild || contentNode;                                                 // 13812
        }                                                                                                              // 13813
      } else {                                                                                                         // 13814
        // If loading, center on progress indicator                                                                    // 13815
        centeredNode = contentNode.firstElementChild || contentNode;                                                   // 13816
      }                                                                                                                // 13817
                                                                                                                       // 13818
      if (contentNode.offsetWidth > maxWidth) {                                                                        // 13819
        contentNode.style['max-width'] = maxWidth + 'px';                                                              // 13820
      }                                                                                                                // 13821
      if (shouldOpenAroundTarget) {                                                                                    // 13822
        contentNode.style['min-width'] = targetRect.width + 'px';                                                      // 13823
      }                                                                                                                // 13824
                                                                                                                       // 13825
      // Remove padding before we compute the position of the menu                                                     // 13826
      if (isScrollable) {                                                                                              // 13827
        selectNode.classList.add('md-overflow');                                                                       // 13828
      }                                                                                                                // 13829
                                                                                                                       // 13830
      var focusedNode = centeredNode;                                                                                  // 13831
      if ((focusedNode.tagName || '').toUpperCase() === 'MD-OPTGROUP') {                                               // 13832
        focusedNode = optionNodes[0] || contentNode.firstElementChild || contentNode;                                  // 13833
        centeredNode = focusedNode;                                                                                    // 13834
      }                                                                                                                // 13835
      // Cache for autoFocus()                                                                                         // 13836
      opts.focusedNode = focusedNode;                                                                                  // 13837
                                                                                                                       // 13838
      // Get the selectMenuRect *after* max-width is possibly set above                                                // 13839
      var selectMenuRect = selectNode.getBoundingClientRect();                                                         // 13840
      var centeredRect = getOffsetRect(centeredNode);                                                                  // 13841
                                                                                                                       // 13842
      if (centeredNode) {                                                                                              // 13843
        var centeredStyle = $window.getComputedStyle(centeredNode);                                                    // 13844
        centeredRect.paddingLeft = parseInt(centeredStyle.paddingLeft, 10) || 0;                                       // 13845
        centeredRect.paddingRight = parseInt(centeredStyle.paddingRight, 10) || 0;                                     // 13846
      }                                                                                                                // 13847
                                                                                                                       // 13848
      if (isScrollable) {                                                                                              // 13849
        var scrollBuffer = contentNode.offsetHeight / 2;                                                               // 13850
        contentNode.scrollTop = centeredRect.top + centeredRect.height / 2 - scrollBuffer;                             // 13851
                                                                                                                       // 13852
        if (spaceAvailable.top < scrollBuffer) {                                                                       // 13853
          contentNode.scrollTop = Math.min(                                                                            // 13854
            centeredRect.top,                                                                                          // 13855
            contentNode.scrollTop + scrollBuffer - spaceAvailable.top                                                  // 13856
          );                                                                                                           // 13857
        } else if (spaceAvailable.bottom < scrollBuffer) {                                                             // 13858
          contentNode.scrollTop = Math.max(                                                                            // 13859
            centeredRect.top + centeredRect.height - selectMenuRect.height,                                            // 13860
            contentNode.scrollTop - scrollBuffer + spaceAvailable.bottom                                               // 13861
          );                                                                                                           // 13862
        }                                                                                                              // 13863
      }                                                                                                                // 13864
                                                                                                                       // 13865
      var left, top, transformOrigin, minWidth;                                                                        // 13866
      if (shouldOpenAroundTarget) {                                                                                    // 13867
        left = targetRect.left;                                                                                        // 13868
        top = targetRect.top + targetRect.height;                                                                      // 13869
        transformOrigin = '50% 0';                                                                                     // 13870
        if (top + selectMenuRect.height > bounds.bottom) {                                                             // 13871
          top = targetRect.top - selectMenuRect.height;                                                                // 13872
          transformOrigin = '50% 100%';                                                                                // 13873
        }                                                                                                              // 13874
      } else {                                                                                                         // 13875
        left = (targetRect.left + centeredRect.left - centeredRect.paddingLeft) + 2;                                   // 13876
        top = Math.floor(targetRect.top + targetRect.height / 2 - centeredRect.height / 2 -                            // 13877
            centeredRect.top + contentNode.scrollTop) + 2;                                                             // 13878
                                                                                                                       // 13879
        transformOrigin = (centeredRect.left + targetRect.width / 2) + 'px ' +                                         // 13880
          (centeredRect.top + centeredRect.height / 2 - contentNode.scrollTop) + 'px 0px';                             // 13881
                                                                                                                       // 13882
        minWidth = targetRect.width + centeredRect.paddingLeft + centeredRect.paddingRight;                            // 13883
      }                                                                                                                // 13884
                                                                                                                       // 13885
      // Keep left and top within the window                                                                           // 13886
      var containerRect = containerNode.getBoundingClientRect();                                                       // 13887
      var scaleX = Math.round(100 * Math.min(targetRect.width / selectMenuRect.width, 1.0)) / 100;                     // 13888
      var scaleY = Math.round(100 * Math.min(targetRect.height / selectMenuRect.height, 1.0)) / 100;                   // 13889
                                                                                                                       // 13890
      return {                                                                                                         // 13891
        container: {                                                                                                   // 13892
          element: angular.element(containerNode),                                                                     // 13893
          styles: {                                                                                                    // 13894
            left: Math.floor(clamp(bounds.left, left, bounds.right - containerRect.width)),                            // 13895
            top: Math.floor(clamp(bounds.top, top, bounds.bottom - containerRect.height)),                             // 13896
            'min-width': minWidth                                                                                      // 13897
          }                                                                                                            // 13898
        },                                                                                                             // 13899
        dropDown: {                                                                                                    // 13900
          element: angular.element(selectNode),                                                                        // 13901
          styles: {                                                                                                    // 13902
            transformOrigin: transformOrigin,                                                                          // 13903
            transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : ""                   // 13904
          }                                                                                                            // 13905
        }                                                                                                              // 13906
      };                                                                                                               // 13907
                                                                                                                       // 13908
    }                                                                                                                  // 13909
                                                                                                                       // 13910
  }                                                                                                                    // 13911
                                                                                                                       // 13912
  function isPromiseLike(obj) {                                                                                        // 13913
    return obj && angular.isFunction(obj.then);                                                                        // 13914
  }                                                                                                                    // 13915
                                                                                                                       // 13916
  function clamp(min, n, max) {                                                                                        // 13917
    return Math.max(min, Math.min(n, max));                                                                            // 13918
  }                                                                                                                    // 13919
                                                                                                                       // 13920
  function getOffsetRect(node) {                                                                                       // 13921
    return node ? {                                                                                                    // 13922
      left: node.offsetLeft,                                                                                           // 13923
      top: node.offsetTop,                                                                                             // 13924
      width: node.offsetWidth,                                                                                         // 13925
      height: node.offsetHeight                                                                                        // 13926
    } : {left: 0, top: 0, width: 0, height: 0};                                                                        // 13927
  }                                                                                                                    // 13928
}                                                                                                                      // 13929
SelectProvider.$inject = ["$$interimElementProvider"];                                                                 // 13930
                                                                                                                       // 13931
                                                                                                                       // 13932
})();                                                                                                                  // 13933
(function(){                                                                                                           // 13934
"use strict";                                                                                                          // 13935
                                                                                                                       // 13936
  /**                                                                                                                  // 13937
   * @ngdoc module                                                                                                     // 13938
   * @name material.components.slider                                                                                  // 13939
   */                                                                                                                  // 13940
  angular.module('material.components.slider', [                                                                       // 13941
    'material.core'                                                                                                    // 13942
  ])                                                                                                                   // 13943
  .directive('mdSlider', SliderDirective);                                                                             // 13944
                                                                                                                       // 13945
/**                                                                                                                    // 13946
 * @ngdoc directive                                                                                                    // 13947
 * @name mdSlider                                                                                                      // 13948
 * @module material.components.slider                                                                                  // 13949
 * @restrict E                                                                                                         // 13950
 * @description                                                                                                        // 13951
 * The `<md-slider>` component allows the user to choose from a range of                                               // 13952
 * values.                                                                                                             // 13953
 *                                                                                                                     // 13954
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 13955
 * the slider is in the accent color by default. The primary color palette may be used with                            // 13956
 * the `md-primary` class.                                                                                             // 13957
 *                                                                                                                     // 13958
 * It has two modes: 'normal' mode, where the user slides between a wide range                                         // 13959
 * of values, and 'discrete' mode, where the user slides between only a few                                            // 13960
 * select values.                                                                                                      // 13961
 *                                                                                                                     // 13962
 * To enable discrete mode, add the `md-discrete` attribute to a slider,                                               // 13963
 * and use the `step` attribute to change the distance between                                                         // 13964
 * values the user is allowed to pick.                                                                                 // 13965
 *                                                                                                                     // 13966
 * @usage                                                                                                              // 13967
 * <h4>Normal Mode</h4>                                                                                                // 13968
 * <hljs lang="html">                                                                                                  // 13969
 * <md-slider ng-model="myValue" min="5" max="500">                                                                    // 13970
 * </md-slider>                                                                                                        // 13971
 * </hljs>                                                                                                             // 13972
 * <h4>Discrete Mode</h4>                                                                                              // 13973
 * <hljs lang="html">                                                                                                  // 13974
 * <md-slider md-discrete ng-model="myDiscreteValue" step="10" min="10" max="130">                                     // 13975
 * </md-slider>                                                                                                        // 13976
 * </hljs>                                                                                                             // 13977
 *                                                                                                                     // 13978
 * @param {boolean=} md-discrete Whether to enable discrete mode.                                                      // 13979
 * @param {number=} step The distance between values the user is allowed to pick. Default 1.                           // 13980
 * @param {number=} min The minimum value the user is allowed to pick. Default 0.                                      // 13981
 * @param {number=} max The maximum value the user is allowed to pick. Default 100.                                    // 13982
 */                                                                                                                    // 13983
function SliderDirective($$rAF, $window, $mdAria, $mdUtil, $mdConstant, $mdTheming, $mdGesture, $parse, $log) {        // 13984
  return {                                                                                                             // 13985
    scope: {},                                                                                                         // 13986
    require: '?ngModel',                                                                                               // 13987
    template:                                                                                                          // 13988
      '<div class="md-slider-wrapper">' +                                                                              // 13989
        '<div class="md-track-container">' +                                                                           // 13990
          '<div class="md-track"></div>' +                                                                             // 13991
          '<div class="md-track md-track-fill"></div>' +                                                               // 13992
          '<div class="md-track-ticks"></div>' +                                                                       // 13993
        '</div>' +                                                                                                     // 13994
        '<div class="md-thumb-container">' +                                                                           // 13995
          '<div class="md-thumb"></div>' +                                                                             // 13996
          '<div class="md-focus-thumb"></div>' +                                                                       // 13997
          '<div class="md-focus-ring"></div>' +                                                                        // 13998
          '<div class="md-sign">' +                                                                                    // 13999
            '<span class="md-thumb-text"></span>' +                                                                    // 14000
          '</div>' +                                                                                                   // 14001
          '<div class="md-disabled-thumb"></div>' +                                                                    // 14002
        '</div>' +                                                                                                     // 14003
      '</div>',                                                                                                        // 14004
    compile: compile                                                                                                   // 14005
  };                                                                                                                   // 14006
                                                                                                                       // 14007
  // **********************************************************                                                        // 14008
  // Private Methods                                                                                                   // 14009
  // **********************************************************                                                        // 14010
                                                                                                                       // 14011
  function compile (tElement, tAttrs) {                                                                                // 14012
    tElement.attr({                                                                                                    // 14013
      tabIndex: 0,                                                                                                     // 14014
      role: 'slider'                                                                                                   // 14015
    });                                                                                                                // 14016
                                                                                                                       // 14017
    $mdAria.expect(tElement, 'aria-label');                                                                            // 14018
                                                                                                                       // 14019
    return postLink;                                                                                                   // 14020
  }                                                                                                                    // 14021
                                                                                                                       // 14022
  function postLink(scope, element, attr, ngModelCtrl) {                                                               // 14023
    $mdTheming(element);                                                                                               // 14024
    ngModelCtrl = ngModelCtrl || {                                                                                     // 14025
      // Mock ngModelController if it doesn't exist to give us                                                         // 14026
      // the minimum functionality needed                                                                              // 14027
      $setViewValue: function(val) {                                                                                   // 14028
        this.$viewValue = val;                                                                                         // 14029
        this.$viewChangeListeners.forEach(function(cb) { cb(); });                                                     // 14030
      },                                                                                                               // 14031
      $parsers: [],                                                                                                    // 14032
      $formatters: [],                                                                                                 // 14033
      $viewChangeListeners: []                                                                                         // 14034
    };                                                                                                                 // 14035
                                                                                                                       // 14036
    var isDisabledGetter = angular.noop;                                                                               // 14037
    if (attr.disabled != null) {                                                                                       // 14038
      isDisabledGetter = function() { return true; };                                                                  // 14039
    } else if (attr.ngDisabled) {                                                                                      // 14040
      isDisabledGetter = angular.bind(null, $parse(attr.ngDisabled), scope.$parent);                                   // 14041
    }                                                                                                                  // 14042
                                                                                                                       // 14043
    var thumb = angular.element(element[0].querySelector('.md-thumb'));                                                // 14044
    var thumbText = angular.element(element[0].querySelector('.md-thumb-text'));                                       // 14045
    var thumbContainer = thumb.parent();                                                                               // 14046
    var trackContainer = angular.element(element[0].querySelector('.md-track-container'));                             // 14047
    var activeTrack = angular.element(element[0].querySelector('.md-track-fill'));                                     // 14048
    var tickContainer = angular.element(element[0].querySelector('.md-track-ticks'));                                  // 14049
    var throttledRefreshDimensions = $mdUtil.throttle(refreshSliderDimensions, 5000);                                  // 14050
                                                                                                                       // 14051
    // Default values, overridable by attrs                                                                            // 14052
    angular.isDefined(attr.min) ? attr.$observe('min', updateMin) : updateMin(0);                                      // 14053
    angular.isDefined(attr.max) ? attr.$observe('max', updateMax) : updateMax(100);                                    // 14054
    angular.isDefined(attr.step)? attr.$observe('step', updateStep) : updateStep(1);                                   // 14055
                                                                                                                       // 14056
    // We have to manually stop the $watch on ngDisabled because it exists                                             // 14057
    // on the parent scope, and won't be automatically destroyed when                                                  // 14058
    // the component is destroyed.                                                                                     // 14059
    var stopDisabledWatch = angular.noop;                                                                              // 14060
    if (attr.ngDisabled) {                                                                                             // 14061
      stopDisabledWatch = scope.$parent.$watch(attr.ngDisabled, updateAriaDisabled);                                   // 14062
    }                                                                                                                  // 14063
                                                                                                                       // 14064
    $mdGesture.register(element, 'drag');                                                                              // 14065
                                                                                                                       // 14066
    element                                                                                                            // 14067
      .on('keydown', keydownListener)                                                                                  // 14068
      .on('$md.pressdown', onPressDown)                                                                                // 14069
      .on('$md.pressup', onPressUp)                                                                                    // 14070
      .on('$md.dragstart', onDragStart)                                                                                // 14071
      .on('$md.drag', onDrag)                                                                                          // 14072
      .on('$md.dragend', onDragEnd);                                                                                   // 14073
                                                                                                                       // 14074
    // On resize, recalculate the slider's dimensions and re-render                                                    // 14075
    function updateAll() {                                                                                             // 14076
      refreshSliderDimensions();                                                                                       // 14077
      ngModelRender();                                                                                                 // 14078
      redrawTicks();                                                                                                   // 14079
    }                                                                                                                  // 14080
    setTimeout(updateAll, 0);                                                                                          // 14081
                                                                                                                       // 14082
    var debouncedUpdateAll = $$rAF.throttle(updateAll);                                                                // 14083
    angular.element($window).on('resize', debouncedUpdateAll);                                                         // 14084
                                                                                                                       // 14085
    scope.$on('$destroy', function() {                                                                                 // 14086
      angular.element($window).off('resize', debouncedUpdateAll);                                                      // 14087
      stopDisabledWatch();                                                                                             // 14088
    });                                                                                                                // 14089
                                                                                                                       // 14090
    ngModelCtrl.$render = ngModelRender;                                                                               // 14091
    ngModelCtrl.$viewChangeListeners.push(ngModelRender);                                                              // 14092
    ngModelCtrl.$formatters.push(minMaxValidator);                                                                     // 14093
    ngModelCtrl.$formatters.push(stepValidator);                                                                       // 14094
                                                                                                                       // 14095
    /**                                                                                                                // 14096
     * Attributes                                                                                                      // 14097
     */                                                                                                                // 14098
    var min;                                                                                                           // 14099
    var max;                                                                                                           // 14100
    var step;                                                                                                          // 14101
    function updateMin(value) {                                                                                        // 14102
      min = parseFloat(value);                                                                                         // 14103
      element.attr('aria-valuemin', value);                                                                            // 14104
      updateAll();                                                                                                     // 14105
    }                                                                                                                  // 14106
    function updateMax(value) {                                                                                        // 14107
      max = parseFloat(value);                                                                                         // 14108
      element.attr('aria-valuemax', value);                                                                            // 14109
      updateAll();                                                                                                     // 14110
    }                                                                                                                  // 14111
    function updateStep(value) {                                                                                       // 14112
      step = parseFloat(value);                                                                                        // 14113
      redrawTicks();                                                                                                   // 14114
    }                                                                                                                  // 14115
    function updateAriaDisabled(isDisabled) {                                                                          // 14116
      element.attr('aria-disabled', !!isDisabled);                                                                     // 14117
    }                                                                                                                  // 14118
                                                                                                                       // 14119
    // Draw the ticks with canvas.                                                                                     // 14120
    // The alternative to drawing ticks with canvas is to draw one element for each tick,                              // 14121
    // which could quickly become a performance bottleneck.                                                            // 14122
    var tickCanvas, tickCtx;                                                                                           // 14123
    function redrawTicks() {                                                                                           // 14124
      if (!angular.isDefined(attr.mdDiscrete)) return;                                                                 // 14125
      if ( angular.isUndefined(step) )         return;                                                                 // 14126
                                                                                                                       // 14127
      if ( step <= 0 ) {                                                                                               // 14128
        var msg = 'Slider step value must be greater than zero when in discrete mode';                                 // 14129
        $log.error(msg);                                                                                               // 14130
        throw new Error(msg);                                                                                          // 14131
      }                                                                                                                // 14132
                                                                                                                       // 14133
      var numSteps = Math.floor( (max - min) / step );                                                                 // 14134
      if (!tickCanvas) {                                                                                               // 14135
        tickCanvas = angular.element('<canvas style="position:absolute;">');                                           // 14136
        tickContainer.append(tickCanvas);                                                                              // 14137
                                                                                                                       // 14138
        var trackTicksStyle = $window.getComputedStyle(tickContainer[0]);                                              // 14139
        tickCtx = tickCanvas[0].getContext('2d');                                                                      // 14140
        tickCtx.fillStyle = trackTicksStyle.backgroundColor || 'black';                                                // 14141
      }                                                                                                                // 14142
                                                                                                                       // 14143
      var dimensions = getSliderDimensions();                                                                          // 14144
      tickCanvas[0].width = dimensions.width;                                                                          // 14145
      tickCanvas[0].height = dimensions.height;                                                                        // 14146
                                                                                                                       // 14147
      var distance;                                                                                                    // 14148
      for (var i = 0; i <= numSteps; i++) {                                                                            // 14149
        distance = Math.floor(dimensions.width * (i / numSteps));                                                      // 14150
        tickCtx.fillRect(distance - 1, 0, 2, dimensions.height);                                                       // 14151
      }                                                                                                                // 14152
    }                                                                                                                  // 14153
                                                                                                                       // 14154
                                                                                                                       // 14155
    /**                                                                                                                // 14156
     * Refreshing Dimensions                                                                                           // 14157
     */                                                                                                                // 14158
    var sliderDimensions = {};                                                                                         // 14159
    refreshSliderDimensions();                                                                                         // 14160
    function refreshSliderDimensions() {                                                                               // 14161
      sliderDimensions = trackContainer[0].getBoundingClientRect();                                                    // 14162
    }                                                                                                                  // 14163
    function getSliderDimensions() {                                                                                   // 14164
      throttledRefreshDimensions();                                                                                    // 14165
      return sliderDimensions;                                                                                         // 14166
    }                                                                                                                  // 14167
                                                                                                                       // 14168
    /**                                                                                                                // 14169
     * left/right arrow listener                                                                                       // 14170
     */                                                                                                                // 14171
    function keydownListener(ev) {                                                                                     // 14172
      if(element[0].hasAttribute('disabled')) {                                                                        // 14173
        return;                                                                                                        // 14174
      }                                                                                                                // 14175
                                                                                                                       // 14176
      var changeAmount;                                                                                                // 14177
      if (ev.keyCode === $mdConstant.KEY_CODE.LEFT_ARROW) {                                                            // 14178
        changeAmount = -step;                                                                                          // 14179
      } else if (ev.keyCode === $mdConstant.KEY_CODE.RIGHT_ARROW) {                                                    // 14180
        changeAmount = step;                                                                                           // 14181
      }                                                                                                                // 14182
      if (changeAmount) {                                                                                              // 14183
        if (ev.metaKey || ev.ctrlKey || ev.altKey) {                                                                   // 14184
          changeAmount *= 4;                                                                                           // 14185
        }                                                                                                              // 14186
        ev.preventDefault();                                                                                           // 14187
        ev.stopPropagation();                                                                                          // 14188
        scope.$evalAsync(function() {                                                                                  // 14189
          setModelValue(ngModelCtrl.$viewValue + changeAmount);                                                        // 14190
        });                                                                                                            // 14191
      }                                                                                                                // 14192
    }                                                                                                                  // 14193
                                                                                                                       // 14194
    /**                                                                                                                // 14195
     * ngModel setters and validators                                                                                  // 14196
     */                                                                                                                // 14197
    function setModelValue(value) {                                                                                    // 14198
      ngModelCtrl.$setViewValue( minMaxValidator(stepValidator(value)) );                                              // 14199
    }                                                                                                                  // 14200
    function ngModelRender() {                                                                                         // 14201
      if (isNaN(ngModelCtrl.$viewValue)) {                                                                             // 14202
        ngModelCtrl.$viewValue = ngModelCtrl.$modelValue;                                                              // 14203
      }                                                                                                                // 14204
                                                                                                                       // 14205
      var percent = (ngModelCtrl.$viewValue - min) / (max - min);                                                      // 14206
      scope.modelValue = ngModelCtrl.$viewValue;                                                                       // 14207
      element.attr('aria-valuenow', ngModelCtrl.$viewValue);                                                           // 14208
      setSliderPercent(percent);                                                                                       // 14209
      thumbText.text( ngModelCtrl.$viewValue );                                                                        // 14210
    }                                                                                                                  // 14211
                                                                                                                       // 14212
    function minMaxValidator(value) {                                                                                  // 14213
      if (angular.isNumber(value)) {                                                                                   // 14214
        return Math.max(min, Math.min(max, value));                                                                    // 14215
      }                                                                                                                // 14216
    }                                                                                                                  // 14217
    function stepValidator(value) {                                                                                    // 14218
      if (angular.isNumber(value)) {                                                                                   // 14219
        var formattedValue = (Math.round(value / step) * step);                                                        // 14220
        // Format to 3 digits after the decimal point - fixes #2015.                                                   // 14221
        return (Math.round(formattedValue * 1000) / 1000);                                                             // 14222
      }                                                                                                                // 14223
    }                                                                                                                  // 14224
                                                                                                                       // 14225
    /**                                                                                                                // 14226
     * @param percent 0-1                                                                                              // 14227
     */                                                                                                                // 14228
    function setSliderPercent(percent) {                                                                               // 14229
      activeTrack.css('width', (percent * 100) + '%');                                                                 // 14230
      thumbContainer.css(                                                                                              // 14231
        'left',                                                                                                        // 14232
        (percent * 100) + '%'                                                                                          // 14233
      );                                                                                                               // 14234
      element.toggleClass('md-min', percent === 0);                                                                    // 14235
    }                                                                                                                  // 14236
                                                                                                                       // 14237
                                                                                                                       // 14238
    /**                                                                                                                // 14239
     * Slide listeners                                                                                                 // 14240
     */                                                                                                                // 14241
    var isDragging = false;                                                                                            // 14242
    var isDiscrete = angular.isDefined(attr.mdDiscrete);                                                               // 14243
                                                                                                                       // 14244
    function onPressDown(ev) {                                                                                         // 14245
      if (isDisabledGetter()) return;                                                                                  // 14246
                                                                                                                       // 14247
      element.addClass('md-active');                                                                                   // 14248
      element[0].focus();                                                                                              // 14249
      refreshSliderDimensions();                                                                                       // 14250
                                                                                                                       // 14251
      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));                                               // 14252
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 14253
      scope.$apply(function() {                                                                                        // 14254
        setModelValue( closestVal );                                                                                   // 14255
        setSliderPercent( valueToPercent(closestVal));                                                                 // 14256
      });                                                                                                              // 14257
    }                                                                                                                  // 14258
    function onPressUp(ev) {                                                                                           // 14259
      if (isDisabledGetter()) return;                                                                                  // 14260
                                                                                                                       // 14261
      element.removeClass('md-dragging md-active');                                                                    // 14262
                                                                                                                       // 14263
      var exactVal = percentToValue( positionToPercent( ev.pointer.x ));                                               // 14264
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 14265
      scope.$apply(function() {                                                                                        // 14266
        setModelValue(closestVal);                                                                                     // 14267
        ngModelRender();                                                                                               // 14268
      });                                                                                                              // 14269
    }                                                                                                                  // 14270
    function onDragStart(ev) {                                                                                         // 14271
      if (isDisabledGetter()) return;                                                                                  // 14272
      isDragging = true;                                                                                               // 14273
      ev.stopPropagation();                                                                                            // 14274
                                                                                                                       // 14275
      element.addClass('md-dragging');                                                                                 // 14276
      setSliderFromEvent(ev);                                                                                          // 14277
    }                                                                                                                  // 14278
    function onDrag(ev) {                                                                                              // 14279
      if (!isDragging) return;                                                                                         // 14280
      ev.stopPropagation();                                                                                            // 14281
      setSliderFromEvent(ev);                                                                                          // 14282
    }                                                                                                                  // 14283
    function onDragEnd(ev) {                                                                                           // 14284
      if (!isDragging) return;                                                                                         // 14285
      ev.stopPropagation();                                                                                            // 14286
      isDragging = false;                                                                                              // 14287
    }                                                                                                                  // 14288
                                                                                                                       // 14289
    function setSliderFromEvent(ev) {                                                                                  // 14290
      // While panning discrete, update only the                                                                       // 14291
      // visual positioning but not the model value.                                                                   // 14292
      if ( isDiscrete ) adjustThumbPosition( ev.pointer.x );                                                           // 14293
      else              doSlide( ev.pointer.x );                                                                       // 14294
    }                                                                                                                  // 14295
                                                                                                                       // 14296
    /**                                                                                                                // 14297
     * Slide the UI by changing the model value                                                                        // 14298
     * @param x                                                                                                        // 14299
     */                                                                                                                // 14300
    function doSlide( x ) {                                                                                            // 14301
      scope.$evalAsync( function() {                                                                                   // 14302
        setModelValue( percentToValue( positionToPercent(x) ));                                                        // 14303
      });                                                                                                              // 14304
    }                                                                                                                  // 14305
                                                                                                                       // 14306
    /**                                                                                                                // 14307
     * Slide the UI without changing the model (while dragging/panning)                                                // 14308
     * @param x                                                                                                        // 14309
     */                                                                                                                // 14310
    function adjustThumbPosition( x ) {                                                                                // 14311
      var exactVal = percentToValue( positionToPercent( x ));                                                          // 14312
      var closestVal = minMaxValidator( stepValidator(exactVal) );                                                     // 14313
      setSliderPercent( positionToPercent(x) );                                                                        // 14314
      thumbText.text( closestVal );                                                                                    // 14315
    }                                                                                                                  // 14316
                                                                                                                       // 14317
    /**                                                                                                                // 14318
     * Convert horizontal position on slider to percentage value of offset from beginning...                           // 14319
     * @param x                                                                                                        // 14320
     * @returns {number}                                                                                               // 14321
     */                                                                                                                // 14322
    function positionToPercent( x ) {                                                                                  // 14323
      return Math.max(0, Math.min(1, (x - sliderDimensions.left) / (sliderDimensions.width)));                         // 14324
    }                                                                                                                  // 14325
                                                                                                                       // 14326
    /**                                                                                                                // 14327
     * Convert percentage offset on slide to equivalent model value                                                    // 14328
     * @param percent                                                                                                  // 14329
     * @returns {*}                                                                                                    // 14330
     */                                                                                                                // 14331
    function percentToValue( percent ) {                                                                               // 14332
      return (min + percent * (max - min));                                                                            // 14333
    }                                                                                                                  // 14334
                                                                                                                       // 14335
    function valueToPercent( val ) {                                                                                   // 14336
      return (val - min)/(max - min);                                                                                  // 14337
    }                                                                                                                  // 14338
  }                                                                                                                    // 14339
}                                                                                                                      // 14340
SliderDirective.$inject = ["$$rAF", "$window", "$mdAria", "$mdUtil", "$mdConstant", "$mdTheming", "$mdGesture", "$parse", "$log"];
                                                                                                                       // 14342
})();                                                                                                                  // 14343
(function(){                                                                                                           // 14344
"use strict";                                                                                                          // 14345
                                                                                                                       // 14346
/**                                                                                                                    // 14347
 * @ngdoc module                                                                                                       // 14348
 * @name material.components.sticky                                                                                    // 14349
 * @description                                                                                                        // 14350
 * Sticky effects for md                                                                                               // 14351
 *                                                                                                                     // 14352
 */                                                                                                                    // 14353
angular                                                                                                                // 14354
  .module('material.components.sticky', [                                                                              // 14355
    'material.core',                                                                                                   // 14356
    'material.components.content'                                                                                      // 14357
  ])                                                                                                                   // 14358
  .factory('$mdSticky', MdSticky);                                                                                     // 14359
                                                                                                                       // 14360
/**                                                                                                                    // 14361
 * @ngdoc service                                                                                                      // 14362
 * @name $mdSticky                                                                                                     // 14363
 * @module material.components.sticky                                                                                  // 14364
 *                                                                                                                     // 14365
 * @description                                                                                                        // 14366
 * The `$mdSticky`service provides a mixin to make elements sticky.                                                    // 14367
 *                                                                                                                     // 14368
 * @returns A `$mdSticky` function that takes three arguments:                                                         // 14369
 *   - `scope`                                                                                                         // 14370
 *   - `element`: The element that will be 'sticky'                                                                    // 14371
 *   - `elementClone`: A clone of the element, that will be shown                                                      // 14372
 *     when the user starts scrolling past the original element.                                                       // 14373
 *     If not provided, it will use the result of `element.clone()`.                                                   // 14374
 */                                                                                                                    // 14375
function MdSticky($document, $mdConstant, $$rAF, $mdUtil) {                                                            // 14376
                                                                                                                       // 14377
  var browserStickySupport = checkStickySupport();                                                                     // 14378
                                                                                                                       // 14379
  /**                                                                                                                  // 14380
   * Registers an element as sticky, used internally by directives to register themselves                              // 14381
   */                                                                                                                  // 14382
  return function registerStickyElement(scope, element, stickyClone) {                                                 // 14383
    var contentCtrl = element.controller('mdContent');                                                                 // 14384
    if (!contentCtrl) return;                                                                                          // 14385
                                                                                                                       // 14386
    if (browserStickySupport) {                                                                                        // 14387
      element.css({                                                                                                    // 14388
        position: browserStickySupport,                                                                                // 14389
        top: 0,                                                                                                        // 14390
        'z-index': 2                                                                                                   // 14391
      });                                                                                                              // 14392
    } else {                                                                                                           // 14393
      var $$sticky = contentCtrl.$element.data('$$sticky');                                                            // 14394
      if (!$$sticky) {                                                                                                 // 14395
        $$sticky = setupSticky(contentCtrl);                                                                           // 14396
        contentCtrl.$element.data('$$sticky', $$sticky);                                                               // 14397
      }                                                                                                                // 14398
                                                                                                                       // 14399
      var deregister = $$sticky.add(element, stickyClone || element.clone());                                          // 14400
      scope.$on('$destroy', deregister);                                                                               // 14401
    }                                                                                                                  // 14402
  };                                                                                                                   // 14403
                                                                                                                       // 14404
  function setupSticky(contentCtrl) {                                                                                  // 14405
    var contentEl = contentCtrl.$element;                                                                              // 14406
                                                                                                                       // 14407
    // Refresh elements is very expensive, so we use the debounced                                                     // 14408
    // version when possible.                                                                                          // 14409
    var debouncedRefreshElements = $$rAF.throttle(refreshElements);                                                    // 14410
                                                                                                                       // 14411
    // setupAugmentedScrollEvents gives us `$scrollstart` and `$scroll`,                                               // 14412
    // more reliable than `scroll` on android.                                                                         // 14413
    setupAugmentedScrollEvents(contentEl);                                                                             // 14414
    contentEl.on('$scrollstart', debouncedRefreshElements);                                                            // 14415
    contentEl.on('$scroll', onScroll);                                                                                 // 14416
                                                                                                                       // 14417
    var self;                                                                                                          // 14418
    return self = {                                                                                                    // 14419
      prev: null,                                                                                                      // 14420
      current: null, //the currently stickied item                                                                     // 14421
      next: null,                                                                                                      // 14422
      items: [],                                                                                                       // 14423
      add: add,                                                                                                        // 14424
      refreshElements: refreshElements                                                                                 // 14425
    };                                                                                                                 // 14426
                                                                                                                       // 14427
    /***************                                                                                                   // 14428
     * Public                                                                                                          // 14429
     ***************/                                                                                                  // 14430
    // Add an element and its sticky clone to this content's sticky collection                                         // 14431
    function add(element, stickyClone) {                                                                               // 14432
      stickyClone.addClass('md-sticky-clone');                                                                         // 14433
                                                                                                                       // 14434
      var item = {                                                                                                     // 14435
        element: element,                                                                                              // 14436
        clone: stickyClone                                                                                             // 14437
      };                                                                                                               // 14438
      self.items.push(item);                                                                                           // 14439
                                                                                                                       // 14440
      $mdUtil.nextTick(function() {                                                                                    // 14441
        contentEl.prepend(item.clone);                                                                                 // 14442
      });                                                                                                              // 14443
                                                                                                                       // 14444
      debouncedRefreshElements();                                                                                      // 14445
                                                                                                                       // 14446
      return function remove() {                                                                                       // 14447
        self.items.forEach(function(item, index) {                                                                     // 14448
          if (item.element[0] === element[0]) {                                                                        // 14449
            self.items.splice(index, 1);                                                                               // 14450
            item.clone.remove();                                                                                       // 14451
          }                                                                                                            // 14452
        });                                                                                                            // 14453
        debouncedRefreshElements();                                                                                    // 14454
      };                                                                                                               // 14455
    }                                                                                                                  // 14456
                                                                                                                       // 14457
    function refreshElements() {                                                                                       // 14458
      // Sort our collection of elements by their current position in the DOM.                                         // 14459
      // We need to do this because our elements' order of being added may not                                         // 14460
      // be the same as their order of display.                                                                        // 14461
      self.items.forEach(refreshPosition);                                                                             // 14462
      self.items = self.items.sort(function(a, b) {                                                                    // 14463
        return a.top < b.top ? -1 : 1;                                                                                 // 14464
      });                                                                                                              // 14465
                                                                                                                       // 14466
      // Find which item in the list should be active,                                                                 // 14467
      // based upon the content's current scroll position                                                              // 14468
      var item;                                                                                                        // 14469
      var currentScrollTop = contentEl.prop('scrollTop');                                                              // 14470
      for (var i = self.items.length - 1; i >= 0; i--) {                                                               // 14471
        if (currentScrollTop > self.items[i].top) {                                                                    // 14472
          item = self.items[i];                                                                                        // 14473
          break;                                                                                                       // 14474
        }                                                                                                              // 14475
      }                                                                                                                // 14476
      setCurrentItem(item);                                                                                            // 14477
    }                                                                                                                  // 14478
                                                                                                                       // 14479
    /***************                                                                                                   // 14480
     * Private                                                                                                         // 14481
     ***************/                                                                                                  // 14482
                                                                                                                       // 14483
    // Find the `top` of an item relative to the content element,                                                      // 14484
    // and also the height.                                                                                            // 14485
    function refreshPosition(item) {                                                                                   // 14486
      // Find the top of an item by adding to the offsetHeight until we reach the                                      // 14487
      // content element.                                                                                              // 14488
      var current = item.element[0];                                                                                   // 14489
      item.top = 0;                                                                                                    // 14490
      item.left = 0;                                                                                                   // 14491
      while (current && current !== contentEl[0]) {                                                                    // 14492
        item.top += current.offsetTop;                                                                                 // 14493
        item.left += current.offsetLeft;                                                                               // 14494
        current = current.offsetParent;                                                                                // 14495
      }                                                                                                                // 14496
      item.height = item.element.prop('offsetHeight');                                                                 // 14497
      item.clone.css('margin-left', item.left + 'px');                                                                 // 14498
      if ($mdUtil.floatingScrollbars()) {                                                                              // 14499
        item.clone.css('margin-right', '0');                                                                           // 14500
      }                                                                                                                // 14501
    }                                                                                                                  // 14502
                                                                                                                       // 14503
    // As we scroll, push in and select the correct sticky element.                                                    // 14504
    function onScroll() {                                                                                              // 14505
      var scrollTop = contentEl.prop('scrollTop');                                                                     // 14506
      var isScrollingDown = scrollTop > (onScroll.prevScrollTop || 0);                                                 // 14507
                                                                                                                       // 14508
      // Store the previous scroll so we know which direction we are scrolling                                         // 14509
      onScroll.prevScrollTop = scrollTop;                                                                              // 14510
                                                                                                                       // 14511
      //                                                                                                               // 14512
      // AT TOP (not scrolling)                                                                                        // 14513
      //                                                                                                               // 14514
      if (scrollTop === 0) {                                                                                           // 14515
        // If we're at the top, just clear the current item and return                                                 // 14516
        setCurrentItem(null);                                                                                          // 14517
        return;                                                                                                        // 14518
      }                                                                                                                // 14519
                                                                                                                       // 14520
      //                                                                                                               // 14521
      // SCROLLING DOWN (going towards the next item)                                                                  // 14522
      //                                                                                                               // 14523
      if (isScrollingDown) {                                                                                           // 14524
                                                                                                                       // 14525
        // If we've scrolled down past the next item's position, sticky it and return                                  // 14526
        if (self.next && self.next.top <= scrollTop) {                                                                 // 14527
          setCurrentItem(self.next);                                                                                   // 14528
          return;                                                                                                      // 14529
        }                                                                                                              // 14530
                                                                                                                       // 14531
        // If the next item is close to the current one, push the current one up out of the way                        // 14532
        if (self.current && self.next && self.next.top - scrollTop <= self.next.height) {                              // 14533
          translate(self.current, scrollTop + (self.next.top - self.next.height - scrollTop));                         // 14534
          return;                                                                                                      // 14535
        }                                                                                                              // 14536
      }                                                                                                                // 14537
                                                                                                                       // 14538
      //                                                                                                               // 14539
      // SCROLLING UP (not at the top & not scrolling down; must be scrolling up)                                      // 14540
      //                                                                                                               // 14541
      if (!isScrollingDown) {                                                                                          // 14542
                                                                                                                       // 14543
        // If we've scrolled up past the previous item's position, sticky it and return                                // 14544
        if (self.current && self.prev && scrollTop < self.current.top) {                                               // 14545
          setCurrentItem(self.prev);                                                                                   // 14546
          return;                                                                                                      // 14547
        }                                                                                                              // 14548
                                                                                                                       // 14549
        // If the next item is close to the current one, pull the current one down into view                           // 14550
        if (self.next && self.current && (scrollTop >= (self.next.top - self.current.height))) {                       // 14551
          translate(self.current, scrollTop + (self.next.top - scrollTop - self.current.height));                      // 14552
          return;                                                                                                      // 14553
        }                                                                                                              // 14554
      }                                                                                                                // 14555
                                                                                                                       // 14556
      //                                                                                                               // 14557
      // Otherwise, just move the current item to the proper place (scrolling up or down)                              // 14558
      //                                                                                                               // 14559
      if (self.current) {                                                                                              // 14560
        translate(self.current, scrollTop);                                                                            // 14561
      }                                                                                                                // 14562
    }                                                                                                                  // 14563
                                                                                                                       // 14564
    function setCurrentItem(item) {                                                                                    // 14565
      if (self.current === item) return;                                                                               // 14566
      // Deactivate currently active item                                                                              // 14567
      if (self.current) {                                                                                              // 14568
        translate(self.current, null);                                                                                 // 14569
        setStickyState(self.current, null);                                                                            // 14570
      }                                                                                                                // 14571
                                                                                                                       // 14572
      // Activate new item if given                                                                                    // 14573
      if (item) {                                                                                                      // 14574
        setStickyState(item, 'active');                                                                                // 14575
      }                                                                                                                // 14576
                                                                                                                       // 14577
      self.current = item;                                                                                             // 14578
      var index = self.items.indexOf(item);                                                                            // 14579
      // If index === -1, index + 1 = 0. It works out.                                                                 // 14580
      self.next = self.items[index + 1];                                                                               // 14581
      self.prev = self.items[index - 1];                                                                               // 14582
      setStickyState(self.next, 'next');                                                                               // 14583
      setStickyState(self.prev, 'prev');                                                                               // 14584
    }                                                                                                                  // 14585
                                                                                                                       // 14586
    function setStickyState(item, state) {                                                                             // 14587
      if (!item || item.state === state) return;                                                                       // 14588
      if (item.state) {                                                                                                // 14589
        item.clone.attr('sticky-prev-state', item.state);                                                              // 14590
        item.element.attr('sticky-prev-state', item.state);                                                            // 14591
      }                                                                                                                // 14592
      item.clone.attr('sticky-state', state);                                                                          // 14593
      item.element.attr('sticky-state', state);                                                                        // 14594
      item.state = state;                                                                                              // 14595
    }                                                                                                                  // 14596
                                                                                                                       // 14597
    function translate(item, amount) {                                                                                 // 14598
      if (!item) return;                                                                                               // 14599
      if (amount === null || amount === undefined) {                                                                   // 14600
        if (item.translateY) {                                                                                         // 14601
          item.translateY = null;                                                                                      // 14602
          item.clone.css($mdConstant.CSS.TRANSFORM, '');                                                               // 14603
        }                                                                                                              // 14604
      } else {                                                                                                         // 14605
        item.translateY = amount;                                                                                      // 14606
        item.clone.css(                                                                                                // 14607
          $mdConstant.CSS.TRANSFORM,                                                                                   // 14608
          'translate3d(' + item.left + 'px,' + amount + 'px,0)'                                                        // 14609
        );                                                                                                             // 14610
      }                                                                                                                // 14611
    }                                                                                                                  // 14612
  }                                                                                                                    // 14613
                                                                                                                       // 14614
  // Function to check for browser sticky support                                                                      // 14615
  function checkStickySupport($el) {                                                                                   // 14616
    var stickyProp;                                                                                                    // 14617
    var testEl = angular.element('<div>');                                                                             // 14618
    $document[0].body.appendChild(testEl[0]);                                                                          // 14619
                                                                                                                       // 14620
    var stickyProps = ['sticky', '-webkit-sticky'];                                                                    // 14621
    for (var i = 0; i < stickyProps.length; ++i) {                                                                     // 14622
      testEl.css({position: stickyProps[i], top: 0, 'z-index': 2});                                                    // 14623
      if (testEl.css('position') == stickyProps[i]) {                                                                  // 14624
        stickyProp = stickyProps[i];                                                                                   // 14625
        break;                                                                                                         // 14626
      }                                                                                                                // 14627
    }                                                                                                                  // 14628
    testEl.remove();                                                                                                   // 14629
    return stickyProp;                                                                                                 // 14630
  }                                                                                                                    // 14631
                                                                                                                       // 14632
  // Android 4.4 don't accurately give scroll events.                                                                  // 14633
  // To fix this problem, we setup a fake scroll event. We say:                                                        // 14634
  // > If a scroll or touchmove event has happened in the last DELAY milliseconds,                                     // 14635
  //   then send a `$scroll` event every animationFrame.                                                               // 14636
  // Additionally, we add $scrollstart and $scrollend events.                                                          // 14637
  function setupAugmentedScrollEvents(element) {                                                                       // 14638
    var SCROLL_END_DELAY = 200;                                                                                        // 14639
    var isScrolling;                                                                                                   // 14640
    var lastScrollTime;                                                                                                // 14641
    element.on('scroll touchmove', function() {                                                                        // 14642
      if (!isScrolling) {                                                                                              // 14643
        isScrolling = true;                                                                                            // 14644
        $$rAF.throttle(loopScrollEvent);                                                                               // 14645
        element.triggerHandler('$scrollstart');                                                                        // 14646
      }                                                                                                                // 14647
      element.triggerHandler('$scroll');                                                                               // 14648
      lastScrollTime = +$mdUtil.now();                                                                                 // 14649
    });                                                                                                                // 14650
                                                                                                                       // 14651
    function loopScrollEvent() {                                                                                       // 14652
      if (+$mdUtil.now() - lastScrollTime > SCROLL_END_DELAY) {                                                        // 14653
        isScrolling = false;                                                                                           // 14654
        element.triggerHandler('$scrollend');                                                                          // 14655
      } else {                                                                                                         // 14656
        element.triggerHandler('$scroll');                                                                             // 14657
        $$rAF.throttle(loopScrollEvent);                                                                               // 14658
      }                                                                                                                // 14659
    }                                                                                                                  // 14660
  }                                                                                                                    // 14661
                                                                                                                       // 14662
}                                                                                                                      // 14663
MdSticky.$inject = ["$document", "$mdConstant", "$$rAF", "$mdUtil"];                                                   // 14664
                                                                                                                       // 14665
})();                                                                                                                  // 14666
(function(){                                                                                                           // 14667
"use strict";                                                                                                          // 14668
                                                                                                                       // 14669
/**                                                                                                                    // 14670
 * @ngdoc module                                                                                                       // 14671
 * @name material.components.subheader                                                                                 // 14672
 * @description                                                                                                        // 14673
 * SubHeader module                                                                                                    // 14674
 *                                                                                                                     // 14675
 *  Subheaders are special list tiles that delineate distinct sections of a                                            // 14676
 *  list or grid list and are typically related to the current filtering or                                            // 14677
 *  sorting criteria. Subheader tiles are either displayed inline with tiles or                                        // 14678
 *  can be associated with content, for example, in an adjacent column.                                                // 14679
 *                                                                                                                     // 14680
 *  Upon scrolling, subheaders remain pinned to the top of the screen and remain                                       // 14681
 *  pinned until pushed on or off screen by the next subheader. @see [Material                                         // 14682
 *  Design Specifications](https://www.google.com/design/spec/components/subheaders.html)                              // 14683
 *                                                                                                                     // 14684
 *  > To improve the visual grouping of content, use the system color for your subheaders.                             // 14685
 *                                                                                                                     // 14686
 */                                                                                                                    // 14687
angular                                                                                                                // 14688
  .module('material.components.subheader', [                                                                           // 14689
    'material.core',                                                                                                   // 14690
    'material.components.sticky'                                                                                       // 14691
  ])                                                                                                                   // 14692
  .directive('mdSubheader', MdSubheaderDirective);                                                                     // 14693
                                                                                                                       // 14694
/**                                                                                                                    // 14695
 * @ngdoc directive                                                                                                    // 14696
 * @name mdSubheader                                                                                                   // 14697
 * @module material.components.subheader                                                                               // 14698
 *                                                                                                                     // 14699
 * @restrict E                                                                                                         // 14700
 *                                                                                                                     // 14701
 * @description                                                                                                        // 14702
 * The `<md-subheader>` directive is a subheader for a section. By default it is sticky.                               // 14703
 * You can make it not sticky by applying the `md-no-sticky` class to the subheader.                                   // 14704
 *                                                                                                                     // 14705
 *                                                                                                                     // 14706
 * @usage                                                                                                              // 14707
 * <hljs lang="html">                                                                                                  // 14708
 * <md-subheader>Online Friends</md-subheader>                                                                         // 14709
 * </hljs>                                                                                                             // 14710
 */                                                                                                                    // 14711
                                                                                                                       // 14712
function MdSubheaderDirective($mdSticky, $compile, $mdTheming, $mdUtil) {                                              // 14713
  return {                                                                                                             // 14714
    restrict: 'E',                                                                                                     // 14715
    replace: true,                                                                                                     // 14716
    transclude: true,                                                                                                  // 14717
    template: (                                                                                                        // 14718
    '<div class="md-subheader">' +                                                                                     // 14719
    '  <div class="md-subheader-inner">' +                                                                             // 14720
    '    <span class="md-subheader-content"></span>' +                                                                 // 14721
    '  </div>' +                                                                                                       // 14722
    '</div>'                                                                                                           // 14723
    ),                                                                                                                 // 14724
    link: function postLink(scope, element, attr, controllers, transclude) {                                           // 14725
      $mdTheming(element);                                                                                             // 14726
      var outerHTML = element[0].outerHTML;                                                                            // 14727
                                                                                                                       // 14728
      function getContent(el) {                                                                                        // 14729
        return angular.element(el[0].querySelector('.md-subheader-content'));                                          // 14730
      }                                                                                                                // 14731
                                                                                                                       // 14732
      // Transclude the user-given contents of the subheader                                                           // 14733
      // the conventional way.                                                                                         // 14734
      transclude(scope, function(clone) {                                                                              // 14735
        getContent(element).append(clone);                                                                             // 14736
      });                                                                                                              // 14737
                                                                                                                       // 14738
      // Create another clone, that uses the outer and inner contents                                                  // 14739
      // of the element, that will be 'stickied' as the user scrolls.                                                  // 14740
      if (!element.hasClass('md-no-sticky')) {                                                                         // 14741
        transclude(scope, function(clone) {                                                                            // 14742
          // If the user adds an ng-if or ng-repeat directly to the md-subheader element, the                          // 14743
          // compiled clone below will only be a comment tag (since they replace their elements with                   // 14744
          // a comment) which cannot be properly passed to the $mdSticky; so we wrap it in our own                     // 14745
          // DIV to ensure we have something $mdSticky can use                                                         // 14746
          var wrapperHtml = '<div class="md-subheader-wrapper">' + outerHTML + '</div>';                               // 14747
          var stickyClone = $compile(wrapperHtml)(scope);                                                              // 14748
                                                                                                                       // 14749
          // Append the sticky                                                                                         // 14750
          $mdSticky(scope, element, stickyClone);                                                                      // 14751
                                                                                                                       // 14752
          // Delay initialization until after any `ng-if`/`ng-repeat`/etc has finished before                          // 14753
          // attempting to create the clone                                                                            // 14754
          $mdUtil.nextTick(function() {                                                                                // 14755
            getContent(stickyClone).append(clone);                                                                     // 14756
          });                                                                                                          // 14757
        });                                                                                                            // 14758
      }                                                                                                                // 14759
    }                                                                                                                  // 14760
  }                                                                                                                    // 14761
}                                                                                                                      // 14762
MdSubheaderDirective.$inject = ["$mdSticky", "$compile", "$mdTheming", "$mdUtil"];                                     // 14763
                                                                                                                       // 14764
})();                                                                                                                  // 14765
(function(){                                                                                                           // 14766
"use strict";                                                                                                          // 14767
                                                                                                                       // 14768
/**                                                                                                                    // 14769
 * @ngdoc module                                                                                                       // 14770
 * @name material.components.swipe                                                                                     // 14771
 * @description Swipe module!                                                                                          // 14772
 */                                                                                                                    // 14773
/**                                                                                                                    // 14774
 * @ngdoc directive                                                                                                    // 14775
 * @module material.components.swipe                                                                                   // 14776
 * @name mdSwipeLeft                                                                                                   // 14777
 *                                                                                                                     // 14778
 * @restrict A                                                                                                         // 14779
 *                                                                                                                     // 14780
 * @description                                                                                                        // 14781
 * The md-swipe-left directives allows you to specify custom behavior when an element is swiped                        // 14782
 * left.                                                                                                               // 14783
 *                                                                                                                     // 14784
 * @usage                                                                                                              // 14785
 * <hljs lang="html">                                                                                                  // 14786
 * <div md-swipe-left="onSwipeLeft()">Swipe me left!</div>                                                             // 14787
 * </hljs>                                                                                                             // 14788
 */                                                                                                                    // 14789
/**                                                                                                                    // 14790
 * @ngdoc directive                                                                                                    // 14791
 * @module material.components.swipe                                                                                   // 14792
 * @name mdSwipeRight                                                                                                  // 14793
 *                                                                                                                     // 14794
 * @restrict A                                                                                                         // 14795
 *                                                                                                                     // 14796
 * @description                                                                                                        // 14797
 * The md-swipe-right directives allows you to specify custom behavior when an element is swiped                       // 14798
 * right.                                                                                                              // 14799
 *                                                                                                                     // 14800
 * @usage                                                                                                              // 14801
 * <hljs lang="html">                                                                                                  // 14802
 * <div md-swipe-right="onSwipeRight()">Swipe me right!</div>                                                          // 14803
 * </hljs>                                                                                                             // 14804
 */                                                                                                                    // 14805
                                                                                                                       // 14806
angular.module('material.components.swipe', ['material.core'])                                                         // 14807
    .directive('mdSwipeLeft', getDirective('SwipeLeft'))                                                               // 14808
    .directive('mdSwipeRight', getDirective('SwipeRight'));                                                            // 14809
                                                                                                                       // 14810
function getDirective(name) {                                                                                          // 14811
  var directiveName = 'md' + name;                                                                                     // 14812
  var eventName = '$md.' + name.toLowerCase();                                                                         // 14813
                                                                                                                       // 14814
    DirectiveFactory.$inject = ["$parse"];                                                                             // 14815
  return DirectiveFactory;                                                                                             // 14816
                                                                                                                       // 14817
  /* @ngInject */                                                                                                      // 14818
  function DirectiveFactory($parse) {                                                                                  // 14819
      return { restrict: 'A', link: postLink };                                                                        // 14820
      function postLink(scope, element, attr) {                                                                        // 14821
        var fn = $parse(attr[directiveName]);                                                                          // 14822
        element.on(eventName, function(ev) {                                                                           // 14823
          scope.$apply(function() { fn(scope, { $event: ev }); });                                                     // 14824
        });                                                                                                            // 14825
      }                                                                                                                // 14826
    }                                                                                                                  // 14827
}                                                                                                                      // 14828
                                                                                                                       // 14829
                                                                                                                       // 14830
                                                                                                                       // 14831
})();                                                                                                                  // 14832
(function(){                                                                                                           // 14833
"use strict";                                                                                                          // 14834
                                                                                                                       // 14835
/**                                                                                                                    // 14836
 * @private                                                                                                            // 14837
 * @ngdoc module                                                                                                       // 14838
 * @name material.components.switch                                                                                    // 14839
 */                                                                                                                    // 14840
                                                                                                                       // 14841
angular.module('material.components.switch', [                                                                         // 14842
  'material.core',                                                                                                     // 14843
  'material.components.checkbox'                                                                                       // 14844
])                                                                                                                     // 14845
  .directive('mdSwitch', MdSwitch);                                                                                    // 14846
                                                                                                                       // 14847
/**                                                                                                                    // 14848
 * @private                                                                                                            // 14849
 * @ngdoc directive                                                                                                    // 14850
 * @module material.components.switch                                                                                  // 14851
 * @name mdSwitch                                                                                                      // 14852
 * @restrict E                                                                                                         // 14853
 *                                                                                                                     // 14854
 * The switch directive is used very much like the normal [angular checkbox](https://docs.angularjs.org/api/ng/input/input%5Bcheckbox%5D).
 *                                                                                                                     // 14856
 * As per the [material design spec](http://www.google.com/design/spec/style/color.html#color-ui-color-application)    // 14857
 * the switch is in the accent color by default. The primary color palette may be used with                            // 14858
 * the `md-primary` class.                                                                                             // 14859
 *                                                                                                                     // 14860
 * @param {string} ng-model Assignable angular expression to data-bind to.                                             // 14861
 * @param {string=} name Property name of the form under which the control is published.                               // 14862
 * @param {expression=} ng-true-value The value to which the expression should be set when selected.                   // 14863
 * @param {expression=} ng-false-value The value to which the expression should be set when not selected.              // 14864
 * @param {string=} ng-change Angular expression to be executed when input changes due to user interaction with the input element.
 * @param {boolean=} md-no-ink Use of attribute indicates use of ripple ink effects.                                   // 14866
 * @param {string=} aria-label Publish the button label used by screen-readers for accessibility. Defaults to the switch's text.
 *                                                                                                                     // 14868
 * @usage                                                                                                              // 14869
 * <hljs lang="html">                                                                                                  // 14870
 * <md-switch ng-model="isActive" aria-label="Finished?">                                                              // 14871
 *   Finished ?                                                                                                        // 14872
 * </md-switch>                                                                                                        // 14873
 *                                                                                                                     // 14874
 * <md-switch md-no-ink ng-model="hasInk" aria-label="No Ink Effects">                                                 // 14875
 *   No Ink Effects                                                                                                    // 14876
 * </md-switch>                                                                                                        // 14877
 *                                                                                                                     // 14878
 * <md-switch ng-disabled="true" ng-model="isDisabled" aria-label="Disabled">                                          // 14879
 *   Disabled                                                                                                          // 14880
 * </md-switch>                                                                                                        // 14881
 *                                                                                                                     // 14882
 * </hljs>                                                                                                             // 14883
 */                                                                                                                    // 14884
function MdSwitch(mdCheckboxDirective, $mdUtil, $mdConstant, $parse, $$rAF, $mdGesture) {                              // 14885
  var checkboxDirective = mdCheckboxDirective[0];                                                                      // 14886
                                                                                                                       // 14887
  return {                                                                                                             // 14888
    restrict: 'E',                                                                                                     // 14889
    priority: 210, // Run before ngAria                                                                                // 14890
    transclude: true,                                                                                                  // 14891
    template:                                                                                                          // 14892
      '<div class="md-container">' +                                                                                   // 14893
        '<div class="md-bar"></div>' +                                                                                 // 14894
        '<div class="md-thumb-container">' +                                                                           // 14895
          '<div class="md-thumb" md-ink-ripple md-ink-ripple-checkbox></div>' +                                        // 14896
        '</div>'+                                                                                                      // 14897
      '</div>' +                                                                                                       // 14898
      '<div ng-transclude class="md-label"></div>',                                                                    // 14899
    require: '?ngModel',                                                                                               // 14900
    compile: mdSwitchCompile                                                                                           // 14901
  };                                                                                                                   // 14902
                                                                                                                       // 14903
  function mdSwitchCompile(element, attr) {                                                                            // 14904
    var checkboxLink = checkboxDirective.compile(element, attr);                                                       // 14905
    // No transition on initial load.                                                                                  // 14906
    element.addClass('md-dragging');                                                                                   // 14907
                                                                                                                       // 14908
    return function (scope, element, attr, ngModel) {                                                                  // 14909
      ngModel = ngModel || $mdUtil.fakeNgModel();                                                                      // 14910
                                                                                                                       // 14911
      var disabledGetter = null;                                                                                       // 14912
      if (attr.disabled != null) {                                                                                     // 14913
        disabledGetter = function() { return true; };                                                                  // 14914
      } else if (attr.ngDisabled) {                                                                                    // 14915
        disabledGetter = $parse(attr.ngDisabled);                                                                      // 14916
      }                                                                                                                // 14917
                                                                                                                       // 14918
      var thumbContainer = angular.element(element[0].querySelector('.md-thumb-container'));                           // 14919
      var switchContainer = angular.element(element[0].querySelector('.md-container'));                                // 14920
                                                                                                                       // 14921
      // no transition on initial load                                                                                 // 14922
      $$rAF(function() {                                                                                               // 14923
        element.removeClass('md-dragging');                                                                            // 14924
      });                                                                                                              // 14925
                                                                                                                       // 14926
      checkboxLink(scope, element, attr, ngModel);                                                                     // 14927
                                                                                                                       // 14928
      if (disabledGetter) {                                                                                            // 14929
        scope.$watch(disabledGetter, function(isDisabled) {                                                            // 14930
          element.attr('tabindex', isDisabled ? -1 : 0);                                                               // 14931
        });                                                                                                            // 14932
      }                                                                                                                // 14933
                                                                                                                       // 14934
      // These events are triggered by setup drag                                                                      // 14935
      $mdGesture.register(switchContainer, 'drag');                                                                    // 14936
      switchContainer                                                                                                  // 14937
        .on('$md.dragstart', onDragStart)                                                                              // 14938
        .on('$md.drag', onDrag)                                                                                        // 14939
        .on('$md.dragend', onDragEnd);                                                                                 // 14940
                                                                                                                       // 14941
      var drag;                                                                                                        // 14942
      function onDragStart(ev) {                                                                                       // 14943
        // Don't go if the switch is disabled.                                                                         // 14944
        if (disabledGetter && disabledGetter(scope)) return;                                                           // 14945
        ev.stopPropagation();                                                                                          // 14946
                                                                                                                       // 14947
        element.addClass('md-dragging');                                                                               // 14948
        drag = {width: thumbContainer.prop('offsetWidth')};                                                            // 14949
        element.removeClass('transition');                                                                             // 14950
      }                                                                                                                // 14951
                                                                                                                       // 14952
      function onDrag(ev) {                                                                                            // 14953
        if (!drag) return;                                                                                             // 14954
        ev.stopPropagation();                                                                                          // 14955
        ev.srcEvent && ev.srcEvent.preventDefault();                                                                   // 14956
                                                                                                                       // 14957
        var percent = ev.pointer.distanceX / drag.width;                                                               // 14958
                                                                                                                       // 14959
        //if checked, start from right. else, start from left                                                          // 14960
        var translate = ngModel.$viewValue ?  1 + percent : percent;                                                   // 14961
        // Make sure the switch stays inside its bounds, 0-1%                                                          // 14962
        translate = Math.max(0, Math.min(1, translate));                                                               // 14963
                                                                                                                       // 14964
        thumbContainer.css($mdConstant.CSS.TRANSFORM, 'translate3d(' + (100*translate) + '%,0,0)');                    // 14965
        drag.translate = translate;                                                                                    // 14966
      }                                                                                                                // 14967
                                                                                                                       // 14968
      function onDragEnd(ev) {                                                                                         // 14969
        if (!drag) return;                                                                                             // 14970
        ev.stopPropagation();                                                                                          // 14971
                                                                                                                       // 14972
        element.removeClass('md-dragging');                                                                            // 14973
        thumbContainer.css($mdConstant.CSS.TRANSFORM, '');                                                             // 14974
                                                                                                                       // 14975
        // We changed if there is no distance (this is a click a click),                                               // 14976
        // or if the drag distance is >50% of the total.                                                               // 14977
        var isChanged = ngModel.$viewValue ? drag.translate > 0.5 : drag.translate < 0.5;                              // 14978
        if (isChanged) {                                                                                               // 14979
          applyModelValue(!ngModel.$viewValue);                                                                        // 14980
        }                                                                                                              // 14981
        drag = null;                                                                                                   // 14982
      }                                                                                                                // 14983
                                                                                                                       // 14984
      function applyModelValue(newValue) {                                                                             // 14985
        scope.$apply(function() {                                                                                      // 14986
          ngModel.$setViewValue(newValue);                                                                             // 14987
          ngModel.$render();                                                                                           // 14988
        });                                                                                                            // 14989
      }                                                                                                                // 14990
                                                                                                                       // 14991
    };                                                                                                                 // 14992
  }                                                                                                                    // 14993
                                                                                                                       // 14994
                                                                                                                       // 14995
}                                                                                                                      // 14996
MdSwitch.$inject = ["mdCheckboxDirective", "$mdUtil", "$mdConstant", "$parse", "$$rAF", "$mdGesture"];                 // 14997
                                                                                                                       // 14998
})();                                                                                                                  // 14999
(function(){                                                                                                           // 15000
"use strict";                                                                                                          // 15001
                                                                                                                       // 15002
/**                                                                                                                    // 15003
 * @ngdoc module                                                                                                       // 15004
 * @name material.components.tabs                                                                                      // 15005
 * @description                                                                                                        // 15006
 *                                                                                                                     // 15007
 *  Tabs, created with the `<md-tabs>` directive provide *tabbed* navigation with different styles.                    // 15008
 *  The Tabs component consists of clickable tabs that are aligned horizontally side-by-side.                          // 15009
 *                                                                                                                     // 15010
 *  Features include support for:                                                                                      // 15011
 *                                                                                                                     // 15012
 *  - static or dynamic tabs,                                                                                          // 15013
 *  - responsive designs,                                                                                              // 15014
 *  - accessibility support (ARIA),                                                                                    // 15015
 *  - tab pagination,                                                                                                  // 15016
 *  - external or internal tab content,                                                                                // 15017
 *  - focus indicators and arrow-key navigations,                                                                      // 15018
 *  - programmatic lookup and access to tab controllers, and                                                           // 15019
 *  - dynamic transitions through different tab contents.                                                              // 15020
 *                                                                                                                     // 15021
 */                                                                                                                    // 15022
/*                                                                                                                     // 15023
 * @see js folder for tabs implementation                                                                              // 15024
 */                                                                                                                    // 15025
angular.module('material.components.tabs', [                                                                           // 15026
  'material.core',                                                                                                     // 15027
  'material.components.icon'                                                                                           // 15028
]);                                                                                                                    // 15029
                                                                                                                       // 15030
})();                                                                                                                  // 15031
(function(){                                                                                                           // 15032
"use strict";                                                                                                          // 15033
                                                                                                                       // 15034
/**                                                                                                                    // 15035
 * @ngdoc module                                                                                                       // 15036
 * @name material.components.toast                                                                                     // 15037
 * @description                                                                                                        // 15038
 * Toast                                                                                                               // 15039
 */                                                                                                                    // 15040
angular.module('material.components.toast', [                                                                          // 15041
  'material.core',                                                                                                     // 15042
  'material.components.button'                                                                                         // 15043
])                                                                                                                     // 15044
  .directive('mdToast', MdToastDirective)                                                                              // 15045
  .provider('$mdToast', MdToastProvider);                                                                              // 15046
                                                                                                                       // 15047
/* @ngInject */                                                                                                        // 15048
function MdToastDirective($mdToast) {                                                                                  // 15049
  return {                                                                                                             // 15050
    restrict: 'E',                                                                                                     // 15051
    link: function postLink(scope, element, attr) {                                                                    // 15052
      // When navigation force destroys an interimElement, then                                                        // 15053
      // listen and $destroy() that interim instance...                                                                // 15054
      scope.$on('$destroy', function() {                                                                               // 15055
        $mdToast.destroy();                                                                                            // 15056
      });                                                                                                              // 15057
    }                                                                                                                  // 15058
  };                                                                                                                   // 15059
}                                                                                                                      // 15060
MdToastDirective.$inject = ["$mdToast"];                                                                               // 15061
                                                                                                                       // 15062
/**                                                                                                                    // 15063
 * @ngdoc service                                                                                                      // 15064
 * @name $mdToast                                                                                                      // 15065
 * @module material.components.toast                                                                                   // 15066
 *                                                                                                                     // 15067
 * @description                                                                                                        // 15068
 * `$mdToast` is a service to build a toast notification on any position                                               // 15069
 * on the screen with an optional duration, and provides a simple promise API.                                         // 15070
 *                                                                                                                     // 15071
 *                                                                                                                     // 15072
 * ## Restrictions on custom toasts                                                                                    // 15073
 * - The toast's template must have an outer `<md-toast>` element.                                                     // 15074
 * - For a toast action, use element with class `md-action`.                                                           // 15075
 * - Add the class `md-capsule` for curved corners.                                                                    // 15076
 *                                                                                                                     // 15077
 * @usage                                                                                                              // 15078
 * <hljs lang="html">                                                                                                  // 15079
 * <div ng-controller="MyController">                                                                                  // 15080
 *   <md-button ng-click="openToast()">                                                                                // 15081
 *     Open a Toast!                                                                                                   // 15082
 *   </md-button>                                                                                                      // 15083
 * </div>                                                                                                              // 15084
 * </hljs>                                                                                                             // 15085
 *                                                                                                                     // 15086
 * <hljs lang="js">                                                                                                    // 15087
 * var app = angular.module('app', ['ngMaterial']);                                                                    // 15088
 * app.controller('MyController', function($scope, $mdToast) {                                                         // 15089
 *   $scope.openToast = function($event) {                                                                             // 15090
 *     $mdToast.show($mdToast.simple().content('Hello!'));                                                             // 15091
 *     // Could also do $mdToast.showSimple('Hello');                                                                  // 15092
 *   };                                                                                                                // 15093
 * });                                                                                                                 // 15094
 * </hljs>                                                                                                             // 15095
 */                                                                                                                    // 15096
                                                                                                                       // 15097
/**                                                                                                                    // 15098
 * @ngdoc method                                                                                                       // 15099
 * @name $mdToast#showSimple                                                                                           // 15100
 *                                                                                                                     // 15101
 * @description                                                                                                        // 15102
 * Convenience method which builds and shows a simple toast.                                                           // 15103
 *                                                                                                                     // 15104
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or                                         // 15105
 * rejected with `$mdToast.cancel()`.                                                                                  // 15106
 *                                                                                                                     // 15107
 */                                                                                                                    // 15108
                                                                                                                       // 15109
 /**                                                                                                                   // 15110
 * @ngdoc method                                                                                                       // 15111
 * @name $mdToast#simple                                                                                               // 15112
 *                                                                                                                     // 15113
 * @description                                                                                                        // 15114
 * Builds a preconfigured toast.                                                                                       // 15115
 *                                                                                                                     // 15116
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods:                                         // 15117
 *                                                                                                                     // 15118
 * - $mdToastPreset#content(string) - sets toast content to string                                                     // 15119
 * - $mdToastPreset#action(string) - adds an action button. If clicked the promise (returned from `show()`) will resolve
 *   with value 'ok'; otherwise it promise is resolved with 'true' after a hideDelay timeout.                          // 15121
 * - $mdToastPreset#highlightAction(boolean) - sets action button to be highlighted                                    // 15122
 * - $mdToastPreset#capsule(boolean) - adds 'md-capsule' class to the toast (curved corners)                           // 15123
 * - $mdToastPreset#theme(string) - sets the theme on the toast to theme (default is `$mdThemingProvider`'s default theme)
 */                                                                                                                    // 15125
                                                                                                                       // 15126
/**                                                                                                                    // 15127
 * @ngdoc method                                                                                                       // 15128
 * @name $mdToast#updateContent                                                                                        // 15129
 *                                                                                                                     // 15130
 * @description                                                                                                        // 15131
 * Updates the content of an existing toast. Useful for updating things like counts, etc.                              // 15132
 *                                                                                                                     // 15133
 */                                                                                                                    // 15134
                                                                                                                       // 15135
 /**                                                                                                                   // 15136
 * @ngdoc method                                                                                                       // 15137
 * @name $mdToast#build                                                                                                // 15138
 *                                                                                                                     // 15139
 * @description                                                                                                        // 15140
 * Creates a custom `$mdToastPreset` that you can configure.                                                           // 15141
 *                                                                                                                     // 15142
 * @returns {obj} a `$mdToastPreset` with the chainable configuration methods for shows' options (see below).          // 15143
 */                                                                                                                    // 15144
                                                                                                                       // 15145
 /**                                                                                                                   // 15146
 * @ngdoc method                                                                                                       // 15147
 * @name $mdToast#show                                                                                                 // 15148
 *                                                                                                                     // 15149
 * @description Shows the toast.                                                                                       // 15150
 *                                                                                                                     // 15151
 * @param {object} optionsOrPreset Either provide an `$mdToastPreset` returned from `simple()`                         // 15152
 * and `build()`, or an options object with the following properties:                                                  // 15153
 *                                                                                                                     // 15154
 *   - `templateUrl` - `{string=}`: The url of an html template file that will                                         // 15155
 *     be used as the content of the toast. Restrictions: the template must                                            // 15156
 *     have an outer `md-toast` element.                                                                               // 15157
 *   - `template` - `{string=}`: Same as templateUrl, except this is an actual                                         // 15158
 *     template string.                                                                                                // 15159
 *   - `scope` - `{object=}`: the scope to link the template / controller to. If none is specified, it will create a new child scope.
 *     This scope will be destroyed when the toast is removed unless `preserveScope` is set to true.                   // 15161
 *   - `preserveScope` - `{boolean=}`: whether to preserve the scope when the element is removed. Default is false     // 15162
 *   - `hideDelay` - `{number=}`: How many milliseconds the toast should stay                                          // 15163
 *     active before automatically closing.  Set to 0 or false to have the toast stay open until                       // 15164
 *     closed manually. Default: 3000.                                                                                 // 15165
 *   - `position` - `{string=}`: Where to place the toast. Available: any combination                                  // 15166
 *     of 'bottom', 'left', 'top', 'right', 'fit'. Default: 'bottom left'.                                             // 15167
 *   - `controller` - `{string=}`: The controller to associate with this toast.                                        // 15168
 *     The controller will be injected the local `$mdToast.hide( )`, which is a function                               // 15169
 *     used to hide the toast.                                                                                         // 15170
 *   - `locals` - `{string=}`: An object containing key/value pairs. The keys will                                     // 15171
 *     be used as names of values to inject into the controller. For example,                                          // 15172
 *     `locals: {three: 3}` would inject `three` into the controller with the value                                    // 15173
 *     of 3.                                                                                                           // 15174
 *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in. These values will not be available until after initialization.
 *   - `resolve` - `{object=}`: Similar to locals, except it takes promises as values                                  // 15176
 *     and the toast will not open until the promises resolve.                                                         // 15177
 *   - `controllerAs` - `{string=}`: An alias to assign the controller to on the scope.                                // 15178
 *   - `parent` - `{element=}`: The element to append the toast to. Defaults to appending                              // 15179
 *     to the root element of the application.                                                                         // 15180
 *                                                                                                                     // 15181
 * @returns {promise} A promise that can be resolved with `$mdToast.hide()` or                                         // 15182
 * rejected with `$mdToast.cancel()`. `$mdToast.hide()` will resolve either with a Boolean                             // 15183
 * value == 'true' or the value passed as an argument to `$mdToast.hide()`.                                            // 15184
 * And `$mdToast.cancel()` will resolve the promise with a Boolean value == 'false'                                    // 15185
 */                                                                                                                    // 15186
                                                                                                                       // 15187
/**                                                                                                                    // 15188
 * @ngdoc method                                                                                                       // 15189
 * @name $mdToast#hide                                                                                                 // 15190
 *                                                                                                                     // 15191
 * @description                                                                                                        // 15192
 * Hide an existing toast and resolve the promise returned from `$mdToast.show()`.                                     // 15193
 *                                                                                                                     // 15194
 * @param {*=} response An argument for the resolved promise.                                                          // 15195
 *                                                                                                                     // 15196
 * @returns {promise} a promise that is called when the existing element is removed from the DOM.                      // 15197
 * The promise is resolved with either a Boolean value == 'true' or the value passed as the                            // 15198
 * argument to `.hide()`.                                                                                              // 15199
 *                                                                                                                     // 15200
 */                                                                                                                    // 15201
                                                                                                                       // 15202
/**                                                                                                                    // 15203
 * @ngdoc method                                                                                                       // 15204
 * @name $mdToast#cancel                                                                                               // 15205
 *                                                                                                                     // 15206
 * @description                                                                                                        // 15207
 * Hide the existing toast and reject the promise returned from                                                        // 15208
 * `$mdToast.show()`.                                                                                                  // 15209
 *                                                                                                                     // 15210
 * @param {*=} response An argument for the rejected promise.                                                          // 15211
 *                                                                                                                     // 15212
 * @returns {promise} a promise that is called when the existing element is removed from the DOM                       // 15213
 * The promise is resolved with a Boolean value == 'false'.                                                            // 15214
 *                                                                                                                     // 15215
 */                                                                                                                    // 15216
                                                                                                                       // 15217
function MdToastProvider($$interimElementProvider) {                                                                   // 15218
  // Differentiate promise resolves: hide timeout (value == true) and hide action clicks (value == ok).                // 15219
  var ACTION_RESOLVE = 'ok';                                                                                           // 15220
                                                                                                                       // 15221
  var activeToastContent;                                                                                              // 15222
  var $mdToast = $$interimElementProvider('$mdToast')                                                                  // 15223
    .setDefaults({                                                                                                     // 15224
      methods: ['position', 'hideDelay', 'capsule', 'parent' ],                                                        // 15225
      options: toastDefaultOptions                                                                                     // 15226
    })                                                                                                                 // 15227
    .addPreset('simple', {                                                                                             // 15228
      argOption: 'content',                                                                                            // 15229
      methods: ['content', 'action', 'highlightAction', 'theme', 'parent'],                                            // 15230
      options: /* @ngInject */ ["$mdToast", "$mdTheming", function($mdToast, $mdTheming) {                             // 15231
        var opts = {                                                                                                   // 15232
          template: [                                                                                                  // 15233
            '<md-toast md-theme="{{ toast.theme }}" ng-class="{\'md-capsule\': toast.capsule}">',                      // 15234
              '<span flex>{{ toast.content }}</span>',                                                                 // 15235
              '<md-button class="md-action" ng-if="toast.action" ng-click="toast.resolve()" ng-class="{\'md-highlight\': toast.highlightAction}">',
                '{{ toast.action }}',                                                                                  // 15237
              '</md-button>',                                                                                          // 15238
            '</md-toast>'                                                                                              // 15239
          ].join(''),                                                                                                  // 15240
          controller: /* @ngInject */ ["$scope", function mdToastCtrl($scope) {                                        // 15241
            var self = this;                                                                                           // 15242
            $scope.$watch(function() { return activeToastContent; }, function() {                                      // 15243
              self.content = activeToastContent;                                                                       // 15244
            });                                                                                                        // 15245
            this.resolve = function() {                                                                                // 15246
              $mdToast.hide( ACTION_RESOLVE );                                                                         // 15247
            };                                                                                                         // 15248
          }],                                                                                                          // 15249
          theme: $mdTheming.defaultTheme(),                                                                            // 15250
          controllerAs: 'toast',                                                                                       // 15251
          bindToController: true                                                                                       // 15252
        };                                                                                                             // 15253
        return opts;                                                                                                   // 15254
      }]                                                                                                               // 15255
    })                                                                                                                 // 15256
    .addMethod('updateContent', function(newContent) {                                                                 // 15257
      activeToastContent = newContent;                                                                                 // 15258
    });                                                                                                                // 15259
                                                                                                                       // 15260
  toastDefaultOptions.$inject = ["$animate", "$mdToast", "$mdUtil"];                                                   // 15261
    return $mdToast;                                                                                                   // 15262
                                                                                                                       // 15263
  /* @ngInject */                                                                                                      // 15264
  function toastDefaultOptions($animate, $mdToast, $mdUtil) {                                                          // 15265
    var SWIPE_EVENTS = '$md.swipeleft $md.swiperight';                                                                 // 15266
    return {                                                                                                           // 15267
      onShow: onShow,                                                                                                  // 15268
      onRemove: onRemove,                                                                                              // 15269
      position: 'bottom left',                                                                                         // 15270
      themable: true,                                                                                                  // 15271
      hideDelay: 3000                                                                                                  // 15272
    };                                                                                                                 // 15273
                                                                                                                       // 15274
    function onShow(scope, element, options) {                                                                         // 15275
      activeToastContent = options.content;                                                                            // 15276
                                                                                                                       // 15277
      element = $mdUtil.extractElementByName(element, 'md-toast', true);                                               // 15278
      options.onSwipe = function(ev, gesture) {                                                                        // 15279
        //Add swipeleft/swiperight class to element so it can animate correctly                                        // 15280
        element.addClass('md-' + ev.type.replace('$md.',''));                                                          // 15281
        $mdUtil.nextTick($mdToast.cancel);                                                                             // 15282
      };                                                                                                               // 15283
      options.openClass = toastOpenClass(options.position);                                                            // 15284
                                                                                                                       // 15285
                                                                                                                       // 15286
      // 'top left' -> 'md-top md-left'                                                                                // 15287
      options.parent.addClass(options.openClass);                                                                      // 15288
      element.on(SWIPE_EVENTS, options.onSwipe);                                                                       // 15289
      element.addClass(options.position.split(' ').map(function(pos) {                                                 // 15290
        return 'md-' + pos;                                                                                            // 15291
      }).join(' '));                                                                                                   // 15292
                                                                                                                       // 15293
      return $animate.enter(element, options.parent);                                                                  // 15294
    }                                                                                                                  // 15295
                                                                                                                       // 15296
    function onRemove(scope, element, options) {                                                                       // 15297
      element.off(SWIPE_EVENTS, options.onSwipe);                                                                      // 15298
      options.parent.removeClass(options.openClass);                                                                   // 15299
                                                                                                                       // 15300
      return (options.$destroy == true) ? element.remove() : $animate.leave(element);                                  // 15301
    }                                                                                                                  // 15302
                                                                                                                       // 15303
    function toastOpenClass(position) {                                                                                // 15304
      return 'md-toast-open-' +                                                                                        // 15305
        (position.indexOf('top') > -1 ? 'top' : 'bottom');                                                             // 15306
    }                                                                                                                  // 15307
  }                                                                                                                    // 15308
                                                                                                                       // 15309
}                                                                                                                      // 15310
MdToastProvider.$inject = ["$$interimElementProvider"];                                                                // 15311
                                                                                                                       // 15312
})();                                                                                                                  // 15313
(function(){                                                                                                           // 15314
"use strict";                                                                                                          // 15315
                                                                                                                       // 15316
/**                                                                                                                    // 15317
 * @ngdoc module                                                                                                       // 15318
 * @name material.components.toolbar                                                                                   // 15319
 */                                                                                                                    // 15320
angular.module('material.components.toolbar', [                                                                        // 15321
  'material.core',                                                                                                     // 15322
  'material.components.content'                                                                                        // 15323
])                                                                                                                     // 15324
  .directive('mdToolbar', mdToolbarDirective);                                                                         // 15325
                                                                                                                       // 15326
/**                                                                                                                    // 15327
 * @ngdoc directive                                                                                                    // 15328
 * @name mdToolbar                                                                                                     // 15329
 * @module material.components.toolbar                                                                                 // 15330
 * @restrict E                                                                                                         // 15331
 * @description                                                                                                        // 15332
 * `md-toolbar` is used to place a toolbar in your app.                                                                // 15333
 *                                                                                                                     // 15334
 * Toolbars are usually used above a content area to display the title of the                                          // 15335
 * current page, and show relevant action buttons for that page.                                                       // 15336
 *                                                                                                                     // 15337
 * You can change the height of the toolbar by adding either the                                                       // 15338
 * `md-medium-tall` or `md-tall` class to the toolbar.                                                                 // 15339
 *                                                                                                                     // 15340
 * @usage                                                                                                              // 15341
 * <hljs lang="html">                                                                                                  // 15342
 * <div layout="column" layout-fill>                                                                                   // 15343
 *   <md-toolbar>                                                                                                      // 15344
 *                                                                                                                     // 15345
 *     <div class="md-toolbar-tools">                                                                                  // 15346
 *       <span>My App's Title</span>                                                                                   // 15347
 *                                                                                                                     // 15348
 *       <!-- fill up the space between left and right area -->                                                        // 15349
 *       <span flex></span>                                                                                            // 15350
 *                                                                                                                     // 15351
 *       <md-button>                                                                                                   // 15352
 *         Right Bar Button                                                                                            // 15353
 *       </md-button>                                                                                                  // 15354
 *     </div>                                                                                                          // 15355
 *                                                                                                                     // 15356
 *   </md-toolbar>                                                                                                     // 15357
 *   <md-content>                                                                                                      // 15358
 *     Hello!                                                                                                          // 15359
 *   </md-content>                                                                                                     // 15360
 * </div>                                                                                                              // 15361
 * </hljs>                                                                                                             // 15362
 *                                                                                                                     // 15363
 * @param {boolean=} md-scroll-shrink Whether the header should shrink away as                                         // 15364
 * the user scrolls down, and reveal itself as the user scrolls up.                                                    // 15365
 * _**Note (1):** for scrollShrink to work, the toolbar must be a sibling of a                                         // 15366
 * `md-content` element, placed before it. See the scroll shrink demo._                                                // 15367
 * _**Note (2):** The `md-scroll-shrink` attribute is only parsed on component                                         // 15368
 * initialization, it does not watch for scope changes._                                                               // 15369
 *                                                                                                                     // 15370
 *                                                                                                                     // 15371
 * @param {number=} md-shrink-speed-factor How much to change the speed of the toolbar's                               // 15372
 * shrinking by. For example, if 0.25 is given then the toolbar will shrink                                            // 15373
 * at one fourth the rate at which the user scrolls down. Default 0.5.                                                 // 15374
 */                                                                                                                    // 15375
                                                                                                                       // 15376
function mdToolbarDirective($$rAF, $mdConstant, $mdUtil, $mdTheming, $animate) {                                       // 15377
  var translateY = angular.bind(null, $mdUtil.supplant, 'translate3d(0,{0}px,0)');                                     // 15378
                                                                                                                       // 15379
  return {                                                                                                             // 15380
    restrict: 'E',                                                                                                     // 15381
                                                                                                                       // 15382
    link: function(scope, element, attr) {                                                                             // 15383
                                                                                                                       // 15384
      $mdTheming(element);                                                                                             // 15385
                                                                                                                       // 15386
      if (angular.isDefined(attr.mdScrollShrink)) {                                                                    // 15387
        setupScrollShrink();                                                                                           // 15388
      }                                                                                                                // 15389
                                                                                                                       // 15390
      function setupScrollShrink() {                                                                                   // 15391
                                                                                                                       // 15392
        var toolbarHeight;                                                                                             // 15393
        var contentElement;                                                                                            // 15394
        var disableScrollShrink = angular.noop;                                                                        // 15395
                                                                                                                       // 15396
        // Current "y" position of scroll                                                                              // 15397
        // Store the last scroll top position                                                                          // 15398
        var y = 0;                                                                                                     // 15399
        var prevScrollTop = 0;                                                                                         // 15400
        var shrinkSpeedFactor = attr.mdShrinkSpeedFactor || 0.5;                                                       // 15401
                                                                                                                       // 15402
        var debouncedContentScroll = $$rAF.throttle(onContentScroll);                                                  // 15403
        var debouncedUpdateHeight = $mdUtil.debounce(updateToolbarHeight, 5 * 1000);                                   // 15404
                                                                                                                       // 15405
        // Wait for $mdContentLoaded event from mdContent directive.                                                   // 15406
        // If the mdContent element is a sibling of our toolbar, hook it up                                            // 15407
        // to scroll events.                                                                                           // 15408
                                                                                                                       // 15409
        scope.$on('$mdContentLoaded', onMdContentLoad);                                                                // 15410
                                                                                                                       // 15411
        // If the toolbar is used inside an ng-if statement, we may miss the                                           // 15412
        // $mdContentLoaded event, so we attempt to fake it if we have a                                               // 15413
        // md-content close enough.                                                                                    // 15414
                                                                                                                       // 15415
        attr.$observe('mdScrollShrink', onChangeScrollShrink);                                                         // 15416
                                                                                                                       // 15417
        // If the scope is destroyed (which could happen with ng-if), make sure                                        // 15418
        // to disable scroll shrinking again                                                                           // 15419
                                                                                                                       // 15420
        scope.$on('$destroy', disableScrollShrink);                                                                    // 15421
                                                                                                                       // 15422
        /**                                                                                                            // 15423
         *                                                                                                             // 15424
         */                                                                                                            // 15425
        function onChangeScrollShrink(shrinkWithScroll) {                                                              // 15426
          var closestContent = element.parent().find('md-content');                                                    // 15427
                                                                                                                       // 15428
          // If we have a content element, fake the call; this might still fail                                        // 15429
          // if the content element isn't a sibling of the toolbar                                                     // 15430
                                                                                                                       // 15431
          if (!contentElement && closestContent.length) {                                                              // 15432
            onMdContentLoad(null, closestContent);                                                                     // 15433
          }                                                                                                            // 15434
                                                                                                                       // 15435
          // Evaluate the expression                                                                                   // 15436
          shrinkWithScroll = scope.$eval(shrinkWithScroll);                                                            // 15437
                                                                                                                       // 15438
          // Disable only if the attribute's expression evaluates to false                                             // 15439
          if (shrinkWithScroll === false) {                                                                            // 15440
            disableScrollShrink();                                                                                     // 15441
          } else {                                                                                                     // 15442
            disableScrollShrink = enableScrollShrink();                                                                // 15443
          }                                                                                                            // 15444
        }                                                                                                              // 15445
                                                                                                                       // 15446
        /**                                                                                                            // 15447
         *                                                                                                             // 15448
         */                                                                                                            // 15449
        function onMdContentLoad($event, newContentEl) {                                                               // 15450
          // Toolbar and content must be siblings                                                                      // 15451
          if (newContentEl && element.parent()[0] === newContentEl.parent()[0]) {                                      // 15452
            // unhook old content event listener if exists                                                             // 15453
            if (contentElement) {                                                                                      // 15454
              contentElement.off('scroll', debouncedContentScroll);                                                    // 15455
            }                                                                                                          // 15456
                                                                                                                       // 15457
            contentElement = newContentEl;                                                                             // 15458
            disableScrollShrink = enableScrollShrink();                                                                // 15459
          }                                                                                                            // 15460
        }                                                                                                              // 15461
                                                                                                                       // 15462
        /**                                                                                                            // 15463
         *                                                                                                             // 15464
         */                                                                                                            // 15465
        function onContentScroll(e) {                                                                                  // 15466
          var scrollTop = e ? e.target.scrollTop : prevScrollTop;                                                      // 15467
                                                                                                                       // 15468
          debouncedUpdateHeight();                                                                                     // 15469
                                                                                                                       // 15470
          y = Math.min(                                                                                                // 15471
            toolbarHeight / shrinkSpeedFactor,                                                                         // 15472
            Math.max(0, y + scrollTop - prevScrollTop)                                                                 // 15473
          );                                                                                                           // 15474
                                                                                                                       // 15475
          element.css($mdConstant.CSS.TRANSFORM, translateY([-y * shrinkSpeedFactor]));                                // 15476
          contentElement.css($mdConstant.CSS.TRANSFORM, translateY([(toolbarHeight - y) * shrinkSpeedFactor]));        // 15477
                                                                                                                       // 15478
          prevScrollTop = scrollTop;                                                                                   // 15479
                                                                                                                       // 15480
          $mdUtil.nextTick(function() {                                                                                // 15481
            var hasWhiteFrame = element.hasClass('md-whiteframe-z1');                                                  // 15482
                                                                                                                       // 15483
            if (hasWhiteFrame && !y) {                                                                                 // 15484
              $animate.removeClass(element, 'md-whiteframe-z1');                                                       // 15485
            } else if (!hasWhiteFrame && y) {                                                                          // 15486
              $animate.addClass(element, 'md-whiteframe-z1');                                                          // 15487
            }                                                                                                          // 15488
          });                                                                                                          // 15489
                                                                                                                       // 15490
        }                                                                                                              // 15491
                                                                                                                       // 15492
        /**                                                                                                            // 15493
         *                                                                                                             // 15494
         */                                                                                                            // 15495
        function enableScrollShrink() {                                                                                // 15496
          if (!contentElement)     return angular.noop;           // no md-content                                     // 15497
                                                                                                                       // 15498
          contentElement.on('scroll', debouncedContentScroll);                                                         // 15499
          contentElement.attr('scroll-shrink', 'true');                                                                // 15500
                                                                                                                       // 15501
          $$rAF(updateToolbarHeight);                                                                                  // 15502
                                                                                                                       // 15503
          return function disableScrollShrink() {                                                                      // 15504
            contentElement.off('scroll', debouncedContentScroll);                                                      // 15505
            contentElement.attr('scroll-shrink', 'false');                                                             // 15506
                                                                                                                       // 15507
            $$rAF(updateToolbarHeight);                                                                                // 15508
          }                                                                                                            // 15509
        }                                                                                                              // 15510
                                                                                                                       // 15511
        /**                                                                                                            // 15512
         *                                                                                                             // 15513
         */                                                                                                            // 15514
        function updateToolbarHeight() {                                                                               // 15515
          toolbarHeight = element.prop('offsetHeight');                                                                // 15516
          // Add a negative margin-top the size of the toolbar to the content el.                                      // 15517
          // The content will start transformed down the toolbarHeight amount,                                         // 15518
          // so everything looks normal.                                                                               // 15519
          //                                                                                                           // 15520
          // As the user scrolls down, the content will be transformed up slowly                                       // 15521
          // to put the content underneath where the toolbar was.                                                      // 15522
          var margin = (-toolbarHeight * shrinkSpeedFactor) + 'px';                                                    // 15523
                                                                                                                       // 15524
          contentElement.css({                                                                                         // 15525
            "margin-top": margin,                                                                                      // 15526
            "margin-bottom": margin                                                                                    // 15527
          });                                                                                                          // 15528
                                                                                                                       // 15529
          onContentScroll();                                                                                           // 15530
        }                                                                                                              // 15531
                                                                                                                       // 15532
      }                                                                                                                // 15533
                                                                                                                       // 15534
    }                                                                                                                  // 15535
  };                                                                                                                   // 15536
                                                                                                                       // 15537
}                                                                                                                      // 15538
mdToolbarDirective.$inject = ["$$rAF", "$mdConstant", "$mdUtil", "$mdTheming", "$animate"];                            // 15539
                                                                                                                       // 15540
})();                                                                                                                  // 15541
(function(){                                                                                                           // 15542
"use strict";                                                                                                          // 15543
                                                                                                                       // 15544
/**                                                                                                                    // 15545
 * @ngdoc module                                                                                                       // 15546
 * @name material.components.tooltip                                                                                   // 15547
 */                                                                                                                    // 15548
angular                                                                                                                // 15549
    .module('material.components.tooltip', [ 'material.core' ])                                                        // 15550
    .directive('mdTooltip', MdTooltipDirective);                                                                       // 15551
                                                                                                                       // 15552
/**                                                                                                                    // 15553
 * @ngdoc directive                                                                                                    // 15554
 * @name mdTooltip                                                                                                     // 15555
 * @module material.components.tooltip                                                                                 // 15556
 * @description                                                                                                        // 15557
 * Tooltips are used to describe elements that are interactive and primarily graphical (not textual).                  // 15558
 *                                                                                                                     // 15559
 * Place a `<md-tooltip>` as a child of the element it describes.                                                      // 15560
 *                                                                                                                     // 15561
 * A tooltip will activate when the user focuses, hovers over, or touches the parent.                                  // 15562
 *                                                                                                                     // 15563
 * @usage                                                                                                              // 15564
 * <hljs lang="html">                                                                                                  // 15565
 * <md-button class="md-fab md-accent" aria-label="Play">                                                              // 15566
 *   <md-tooltip>                                                                                                      // 15567
 *     Play Music                                                                                                      // 15568
 *   </md-tooltip>                                                                                                     // 15569
 *   <md-icon icon="img/icons/ic_play_arrow_24px.svg"></md-icon>                                                       // 15570
 * </md-button>                                                                                                        // 15571
 * </hljs>                                                                                                             // 15572
 *                                                                                                                     // 15573
 * @param {expression=} md-visible Boolean bound to whether the tooltip is                                             // 15574
 * currently visible.                                                                                                  // 15575
 * @param {number=} md-delay How many milliseconds to wait to show the tooltip after the user focuses, hovers, or touches the parent. Defaults to 300ms.
 * @param {string=} md-direction Which direction would you like the tooltip to go?  Supports left, right, top, and bottom.  Defaults to bottom.
 * @param {boolean=} md-autohide If present or provided with a boolean value, the tooltip will hide on mouse leave, regardless of focus
 */                                                                                                                    // 15579
function MdTooltipDirective($timeout, $window, $$rAF, $document, $mdUtil, $mdTheming, $rootElement,                    // 15580
                            $animate, $q) {                                                                            // 15581
                                                                                                                       // 15582
  var TOOLTIP_SHOW_DELAY = 300;                                                                                        // 15583
  var TOOLTIP_WINDOW_EDGE_SPACE = 8;                                                                                   // 15584
                                                                                                                       // 15585
  return {                                                                                                             // 15586
    restrict: 'E',                                                                                                     // 15587
    transclude: true,                                                                                                  // 15588
    priority:210, // Before ngAria                                                                                     // 15589
    template: '<div class="md-background"></div>' +                                                                    // 15590
              '<div class="md-content" ng-transclude></div>',                                                          // 15591
    scope: {                                                                                                           // 15592
      visible: '=?mdVisible',                                                                                          // 15593
      delay: '=?mdDelay',                                                                                              // 15594
      autohide: '=?mdAutohide'                                                                                         // 15595
    },                                                                                                                 // 15596
    link: postLink                                                                                                     // 15597
  };                                                                                                                   // 15598
                                                                                                                       // 15599
  function postLink(scope, element, attr) {                                                                            // 15600
                                                                                                                       // 15601
    $mdTheming(element);                                                                                               // 15602
                                                                                                                       // 15603
    var parent        = getParentWithPointerEvents(),                                                                  // 15604
        background    = angular.element(element[0].getElementsByClassName('md-background')[0]),                        // 15605
        content       = angular.element(element[0].getElementsByClassName('md-content')[0]),                           // 15606
        direction     = attr.mdDirection,                                                                              // 15607
        current       = getNearestContentElement(),                                                                    // 15608
        tooltipParent = angular.element(current || document.body),                                                     // 15609
        debouncedOnResize = $$rAF.throttle(function () { if (scope.visible) positionTooltip(); });                     // 15610
                                                                                                                       // 15611
    // Initialize element                                                                                              // 15612
                                                                                                                       // 15613
    setDefaults();                                                                                                     // 15614
    manipulateElement();                                                                                               // 15615
    bindEvents();                                                                                                      // 15616
    configureWatchers();                                                                                               // 15617
    addAriaLabel();                                                                                                    // 15618
                                                                                                                       // 15619
                                                                                                                       // 15620
    function setDefaults () {                                                                                          // 15621
      if (!angular.isDefined(attr.mdDelay)) scope.delay = TOOLTIP_SHOW_DELAY;                                          // 15622
    }                                                                                                                  // 15623
                                                                                                                       // 15624
    function configureWatchers () {                                                                                    // 15625
      scope.$on('$destroy', function() {                                                                               // 15626
        scope.visible = false;                                                                                         // 15627
        element.remove();                                                                                              // 15628
        angular.element($window).off('resize', debouncedOnResize);                                                     // 15629
      });                                                                                                              // 15630
      scope.$watch('visible', function (isVisible) {                                                                   // 15631
        if (isVisible) showTooltip();                                                                                  // 15632
        else hideTooltip();                                                                                            // 15633
      });                                                                                                              // 15634
    }                                                                                                                  // 15635
                                                                                                                       // 15636
    function addAriaLabel () {                                                                                         // 15637
      if (!parent.attr('aria-label') && !parent.text().trim()) {                                                       // 15638
        parent.attr('aria-label', element.text().trim());                                                              // 15639
      }                                                                                                                // 15640
    }                                                                                                                  // 15641
                                                                                                                       // 15642
    function manipulateElement () {                                                                                    // 15643
      element.detach();                                                                                                // 15644
      element.attr('role', 'tooltip');                                                                                 // 15645
    }                                                                                                                  // 15646
                                                                                                                       // 15647
    /**                                                                                                                // 15648
     * Scan up dom hierarchy for enabled parent;                                                                       // 15649
     */                                                                                                                // 15650
    function getParentWithPointerEvents () {                                                                           // 15651
      var parent = element.parent();                                                                                   // 15652
                                                                                                                       // 15653
      // jqLite might return a non-null, but still empty, parent; so check for parent and length                       // 15654
      while (hasComputedStyleValue('pointer-events','none', parent)) {                                                 // 15655
        parent = parent.parent();                                                                                      // 15656
      }                                                                                                                // 15657
                                                                                                                       // 15658
      return parent;                                                                                                   // 15659
    }                                                                                                                  // 15660
                                                                                                                       // 15661
     function getNearestContentElement () {                                                                            // 15662
       var current = element.parent()[0];                                                                              // 15663
       // Look for the nearest parent md-content, stopping at the rootElement.                                         // 15664
       while (current && current !== $rootElement[0] && current !== document.body) {                                   // 15665
         current = current.parentNode;                                                                                 // 15666
       }                                                                                                               // 15667
       return current;                                                                                                 // 15668
     }                                                                                                                 // 15669
                                                                                                                       // 15670
                                                                                                                       // 15671
    function hasComputedStyleValue(key, value, target) {                                                               // 15672
      var hasValue = false;                                                                                            // 15673
                                                                                                                       // 15674
      if ( target && target.length  ) {                                                                                // 15675
        key    = attr.$normalize(key);                                                                                 // 15676
        target = target[0] || element[0];                                                                              // 15677
                                                                                                                       // 15678
        var computedStyles = $window.getComputedStyle(target);                                                         // 15679
        hasValue = angular.isDefined(computedStyles[key]) && (computedStyles[key] == value);                           // 15680
      }                                                                                                                // 15681
                                                                                                                       // 15682
      return hasValue;                                                                                                 // 15683
    }                                                                                                                  // 15684
                                                                                                                       // 15685
    function bindEvents () {                                                                                           // 15686
      var mouseActive = false;                                                                                         // 15687
                                                                                                                       // 15688
      var ngWindow = angular.element($window);                                                                         // 15689
                                                                                                                       // 15690
      // Store whether the element was focused when the window loses focus.                                            // 15691
      var windowBlurHandler = function() {                                                                             // 15692
        elementFocusedOnWindowBlur = document.activeElement === parent[0];                                             // 15693
      };                                                                                                               // 15694
      var elementFocusedOnWindowBlur = false;                                                                          // 15695
      ngWindow.on('blur', windowBlurHandler);                                                                          // 15696
      scope.$on('$destroy', function() {                                                                               // 15697
        ngWindow.off('blur', windowBlurHandler);                                                                       // 15698
      });                                                                                                              // 15699
                                                                                                                       // 15700
      var enterHandler = function(e) {                                                                                 // 15701
        // Prevent the tooltip from showing when the window is receiving focus.                                        // 15702
        if (e.type === 'focus' && elementFocusedOnWindowBlur) {                                                        // 15703
          elementFocusedOnWindowBlur = false;                                                                          // 15704
          return;                                                                                                      // 15705
        }                                                                                                              // 15706
        parent.on('blur mouseleave touchend touchcancel', leaveHandler );                                              // 15707
        setVisible(true);                                                                                              // 15708
      };                                                                                                               // 15709
      var leaveHandler = function () {                                                                                 // 15710
        var autohide = scope.hasOwnProperty('autohide') ? scope.autohide : attr.hasOwnProperty('mdAutohide');          // 15711
        if (autohide || mouseActive || ($document[0].activeElement !== parent[0]) ) {                                  // 15712
          parent.off('blur mouseleave touchend touchcancel', leaveHandler );                                           // 15713
          parent.triggerHandler("blur");                                                                               // 15714
          setVisible(false);                                                                                           // 15715
        }                                                                                                              // 15716
        mouseActive = false;                                                                                           // 15717
      };                                                                                                               // 15718
                                                                                                                       // 15719
      // to avoid `synthetic clicks` we listen to mousedown instead of `click`                                         // 15720
      parent.on('mousedown', function() { mouseActive = true; });                                                      // 15721
      parent.on('focus mouseenter touchstart', enterHandler );                                                         // 15722
                                                                                                                       // 15723
                                                                                                                       // 15724
      angular.element($window).on('resize', debouncedOnResize);                                                        // 15725
    }                                                                                                                  // 15726
                                                                                                                       // 15727
    function setVisible (value) {                                                                                      // 15728
      setVisible.value = !!value;                                                                                      // 15729
      if (!setVisible.queued) {                                                                                        // 15730
        if (value) {                                                                                                   // 15731
          setVisible.queued = true;                                                                                    // 15732
          $timeout(function() {                                                                                        // 15733
            scope.visible = setVisible.value;                                                                          // 15734
            setVisible.queued = false;                                                                                 // 15735
          }, scope.delay);                                                                                             // 15736
        } else {                                                                                                       // 15737
          $mdUtil.nextTick(function() { scope.visible = false; });                                                     // 15738
        }                                                                                                              // 15739
      }                                                                                                                // 15740
    }                                                                                                                  // 15741
                                                                                                                       // 15742
    function showTooltip() {                                                                                           // 15743
      // Insert the element before positioning it, so we can get the position                                          // 15744
      // and check if we should display it                                                                             // 15745
      tooltipParent.append(element);                                                                                   // 15746
                                                                                                                       // 15747
      // Check if we should display it or not.                                                                         // 15748
      // This handles hide-* and show-* along with any user defined css                                                // 15749
      if ( hasComputedStyleValue('display','none') ) {                                                                 // 15750
        scope.visible = false;                                                                                         // 15751
        element.detach();                                                                                              // 15752
        return;                                                                                                        // 15753
      }                                                                                                                // 15754
                                                                                                                       // 15755
      positionTooltip();                                                                                               // 15756
      angular.forEach([element, background, content], function (element) {                                             // 15757
        $animate.addClass(element, 'md-show');                                                                         // 15758
      });                                                                                                              // 15759
    }                                                                                                                  // 15760
                                                                                                                       // 15761
    function hideTooltip() {                                                                                           // 15762
        var promises = [];                                                                                             // 15763
        angular.forEach([element, background, content], function (it) {                                                // 15764
          if (it.parent() && it.hasClass('md-show')) {                                                                 // 15765
            promises.push($animate.removeClass(it, 'md-show'));                                                        // 15766
          }                                                                                                            // 15767
        });                                                                                                            // 15768
                                                                                                                       // 15769
        $q.all(promises)                                                                                               // 15770
          .then(function () {                                                                                          // 15771
            if (!scope.visible) element.detach();                                                                      // 15772
          });                                                                                                          // 15773
    }                                                                                                                  // 15774
                                                                                                                       // 15775
    function positionTooltip() {                                                                                       // 15776
      var tipRect = $mdUtil.offsetRect(element, tooltipParent);                                                        // 15777
      var parentRect = $mdUtil.offsetRect(parent, tooltipParent);                                                      // 15778
      var newPosition = getPosition(direction);                                                                        // 15779
                                                                                                                       // 15780
      // If the user provided a direction, just nudge the tooltip onto the screen                                      // 15781
      // Otherwise, recalculate based on 'top' since default is 'bottom'                                               // 15782
      if (direction) {                                                                                                 // 15783
        newPosition = fitInParent(newPosition);                                                                        // 15784
      } else if (newPosition.top > element.prop('offsetParent').scrollHeight - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE) {
        newPosition = fitInParent(getPosition('top'));                                                                 // 15786
      }                                                                                                                // 15787
                                                                                                                       // 15788
      element.css({top: newPosition.top + 'px', left: newPosition.left + 'px'});                                       // 15789
                                                                                                                       // 15790
      positionBackground();                                                                                            // 15791
                                                                                                                       // 15792
      function positionBackground () {                                                                                 // 15793
        var size = direction === 'left' || direction === 'right'                                                       // 15794
              ? Math.sqrt(Math.pow(tipRect.width, 2) + Math.pow(tipRect.height / 2, 2)) * 2                            // 15795
              : Math.sqrt(Math.pow(tipRect.width / 2, 2) + Math.pow(tipRect.height, 2)) * 2,                           // 15796
            position = direction === 'left' ? { left: 100, top: 50 }                                                   // 15797
              : direction === 'right' ? { left: 0, top: 50 }                                                           // 15798
              : direction === 'top' ? { left: 50, top: 100 }                                                           // 15799
              : { left: 50, top: 0 };                                                                                  // 15800
        background.css({                                                                                               // 15801
          width: size + 'px',                                                                                          // 15802
          height: size + 'px',                                                                                         // 15803
          left: position.left + '%',                                                                                   // 15804
          top: position.top + '%'                                                                                      // 15805
        });                                                                                                            // 15806
      }                                                                                                                // 15807
                                                                                                                       // 15808
      function fitInParent (pos) {                                                                                     // 15809
        var newPosition = { left: pos.left, top: pos.top };                                                            // 15810
        newPosition.left = Math.min( newPosition.left, tooltipParent.prop('scrollWidth') - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.left = Math.max( newPosition.left, TOOLTIP_WINDOW_EDGE_SPACE );                                    // 15812
        newPosition.top  = Math.min( newPosition.top,  tooltipParent.prop('scrollHeight') - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE );
        newPosition.top  = Math.max( newPosition.top,  TOOLTIP_WINDOW_EDGE_SPACE );                                    // 15814
        return newPosition;                                                                                            // 15815
      }                                                                                                                // 15816
                                                                                                                       // 15817
      function getPosition (dir) {                                                                                     // 15818
        return dir === 'left'                                                                                          // 15819
          ? { left: parentRect.left - tipRect.width - TOOLTIP_WINDOW_EDGE_SPACE,                                       // 15820
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }                                       // 15821
          : dir === 'right'                                                                                            // 15822
          ? { left: parentRect.left + parentRect.width + TOOLTIP_WINDOW_EDGE_SPACE,                                    // 15823
              top: parentRect.top + parentRect.height / 2 - tipRect.height / 2 }                                       // 15824
          : dir === 'top'                                                                                              // 15825
          ? { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,                                        // 15826
              top: parentRect.top - tipRect.height - TOOLTIP_WINDOW_EDGE_SPACE }                                       // 15827
          : { left: parentRect.left + parentRect.width / 2 - tipRect.width / 2,                                        // 15828
              top: parentRect.top + parentRect.height + TOOLTIP_WINDOW_EDGE_SPACE };                                   // 15829
      }                                                                                                                // 15830
    }                                                                                                                  // 15831
                                                                                                                       // 15832
  }                                                                                                                    // 15833
                                                                                                                       // 15834
}                                                                                                                      // 15835
MdTooltipDirective.$inject = ["$timeout", "$window", "$$rAF", "$document", "$mdUtil", "$mdTheming", "$rootElement", "$animate", "$q"];
                                                                                                                       // 15837
})();                                                                                                                  // 15838
(function(){                                                                                                           // 15839
"use strict";                                                                                                          // 15840
                                                                                                                       // 15841
/**                                                                                                                    // 15842
 * @ngdoc module                                                                                                       // 15843
 * @name material.components.virtualRepeat                                                                             // 15844
 */                                                                                                                    // 15845
angular.module('material.components.virtualRepeat', [                                                                  // 15846
  'material.core'                                                                                                      // 15847
])                                                                                                                     // 15848
.directive('mdVirtualRepeatContainer', VirtualRepeatContainerDirective)                                                // 15849
.directive('mdVirtualRepeat', VirtualRepeatDirective);                                                                 // 15850
                                                                                                                       // 15851
                                                                                                                       // 15852
/**                                                                                                                    // 15853
 * @ngdoc directive                                                                                                    // 15854
 * @name mdVirtualRepeatContainer                                                                                      // 15855
 * @module material.components.virtualRepeat                                                                           // 15856
 * @restrict E                                                                                                         // 15857
 * @description                                                                                                        // 15858
 * `md-virtual-repeat-container` provides the scroll container for md-virtual-repeat.                                  // 15859
 *                                                                                                                     // 15860
 * Virtual repeat is a limited substitute for ng-repeat that renders only                                              // 15861
 * enough dom nodes to fill the container and recycling them as the user scrolls.                                      // 15862
 *                                                                                                                     // 15863
 * @usage                                                                                                              // 15864
 * <hljs lang="html">                                                                                                  // 15865
 *                                                                                                                     // 15866
 * <md-virtual-repeat-container>                                                                                       // 15867
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>                                          // 15868
 * </md-virtual-repeat-container>                                                                                      // 15869
 * </hljs>                                                                                                             // 15870
 *                                                                                                                     // 15871
 * @param {boolean=} md-orient-horizontal Whether the container should scroll horizontally                             // 15872
 *     (defaults to orientation and scrolling vertically).                                                             // 15873
 * @param {boolean=} md-auto-shrink When present, the container will shrink to fit                                     // 15874
 *     the number of items when that number is less than its original size.                                            // 15875
 * @param {number=} md-auto-shrink-min Minimum number of items that md-auto-shrink                                     // 15876
 *     will shrink to (default: 0).                                                                                    // 15877
 */                                                                                                                    // 15878
function VirtualRepeatContainerDirective() {                                                                           // 15879
  return {                                                                                                             // 15880
    controller: VirtualRepeatContainerController,                                                                      // 15881
    template: virtualRepeatContainerTemplate,                                                                          // 15882
    compile: function virtualRepeatContainerCompile($element, $attrs) {                                                // 15883
      $element                                                                                                         // 15884
          .addClass('md-virtual-repeat-container')                                                                     // 15885
          .addClass($attrs.hasOwnProperty('mdOrientHorizontal')                                                        // 15886
              ? 'md-orient-horizontal'                                                                                 // 15887
              : 'md-orient-vertical');                                                                                 // 15888
    }                                                                                                                  // 15889
  };                                                                                                                   // 15890
}                                                                                                                      // 15891
                                                                                                                       // 15892
                                                                                                                       // 15893
function virtualRepeatContainerTemplate($element) {                                                                    // 15894
  return '<div class="md-virtual-repeat-scroller">' +                                                                  // 15895
    '<div class="md-virtual-repeat-sizer"></div>' +                                                                    // 15896
    '<div class="md-virtual-repeat-offsetter">' +                                                                      // 15897
      $element[0].innerHTML +                                                                                          // 15898
    '</div></div>';                                                                                                    // 15899
}                                                                                                                      // 15900
                                                                                                                       // 15901
/**                                                                                                                    // 15902
 * Maximum size, in pixels, that can be explicitly set to an element. The actual value varies                          // 15903
 * between browsers, but IE11 has the very lowest size at a mere 1,533,917px. Ideally we could                         // 15904
 * *compute* this value, but Firefox always reports an element to have a size of zero if it                            // 15905
 * goes over the max, meaning that we'd have to binary search for the value.                                           // 15906
 * @const {number}                                                                                                     // 15907
 */                                                                                                                    // 15908
var MAX_ELEMENT_SIZE = 1533917;                                                                                        // 15909
                                                                                                                       // 15910
/**                                                                                                                    // 15911
 * Number of additional elements to render above and below the visible area inside                                     // 15912
 * of the virtual repeat container. A higher number results in less flicker when scrolling                             // 15913
 * very quickly in Safari, but comes with a higher rendering and dirty-checking cost.                                  // 15914
 * @const {number}                                                                                                     // 15915
 */                                                                                                                    // 15916
var NUM_EXTRA = 3;                                                                                                     // 15917
                                                                                                                       // 15918
/** @ngInject */                                                                                                       // 15919
function VirtualRepeatContainerController($$rAF, $scope, $element, $attrs) {                                           // 15920
  this.$scope = $scope;                                                                                                // 15921
  this.$element = $element;                                                                                            // 15922
  this.$attrs = $attrs;                                                                                                // 15923
                                                                                                                       // 15924
  /** @type {number} The width or height of the container */                                                           // 15925
  this.size = 0;                                                                                                       // 15926
  /** @type {number} The scroll width or height of the scroller */                                                     // 15927
  this.scrollSize = 0;                                                                                                 // 15928
  /** @type {number} The scrollLeft or scrollTop of the scroller */                                                    // 15929
  this.scrollOffset = 0;                                                                                               // 15930
  /** @type {boolean} Whether the scroller is oriented horizontally */                                                 // 15931
  this.horizontal = this.$attrs.hasOwnProperty('mdOrientHorizontal');                                                  // 15932
  /** @type {!VirtualRepeatController} The repeater inside of this container */                                        // 15933
  this.repeater = null;                                                                                                // 15934
  /** @type {boolean} Whether auto-shrink is enabled */                                                                // 15935
  this.autoShrink = this.$attrs.hasOwnProperty('mdAutoShrink');                                                        // 15936
  /** @type {number} Minimum number of items to auto-shrink to */                                                      // 15937
  this.autoShrinkMin = parseInt(this.$attrs.mdAutoShrinkMin, 10) || 0;                                                 // 15938
  /** @type {?number} Original container size when shrank */                                                           // 15939
  this.originalSize = null;                                                                                            // 15940
  /** @type {number} Amount to offset the total scroll size by. */                                                     // 15941
  this.offsetSize = parseInt(this.$attrs.mdOffsetSize, 10) || 0;                                                       // 15942
                                                                                                                       // 15943
                                                                                                                       // 15944
  this.scroller = $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0];                                 // 15945
  this.sizer = this.scroller.getElementsByClassName('md-virtual-repeat-sizer')[0];                                     // 15946
  this.offsetter = this.scroller.getElementsByClassName('md-virtual-repeat-offsetter')[0];                             // 15947
                                                                                                                       // 15948
  $$rAF(angular.bind(this, this.updateSize));                                                                          // 15949
                                                                                                                       // 15950
  // TODO: Come up with a more robust (But hopefully also quick!) way of                                               // 15951
  // detecting that we're not visible.                                                                                 // 15952
  if ($attrs.ngHide) {                                                                                                 // 15953
    $scope.$watch($attrs.ngHide, angular.bind(this, function(hidden) {                                                 // 15954
      if (!hidden) {                                                                                                   // 15955
        $$rAF(angular.bind(this, this.updateSize));                                                                    // 15956
      }                                                                                                                // 15957
    }));                                                                                                               // 15958
  }                                                                                                                    // 15959
}                                                                                                                      // 15960
VirtualRepeatContainerController.$inject = ["$$rAF", "$scope", "$element", "$attrs"];                                  // 15961
                                                                                                                       // 15962
                                                                                                                       // 15963
/** Called by the md-virtual-repeat inside of the container at startup. */                                             // 15964
VirtualRepeatContainerController.prototype.register = function(repeaterCtrl) {                                         // 15965
  this.repeater = repeaterCtrl;                                                                                        // 15966
                                                                                                                       // 15967
  angular.element(this.scroller)                                                                                       // 15968
      .on('scroll wheel touchmove touchend', angular.bind(this, this.handleScroll_));                                  // 15969
};                                                                                                                     // 15970
                                                                                                                       // 15971
                                                                                                                       // 15972
/** @return {boolean} Whether the container is configured for horizontal scrolling. */                                 // 15973
VirtualRepeatContainerController.prototype.isHorizontal = function() {                                                 // 15974
  return this.horizontal;                                                                                              // 15975
};                                                                                                                     // 15976
                                                                                                                       // 15977
                                                                                                                       // 15978
/** @return {number} The size (width or height) of the container. */                                                   // 15979
VirtualRepeatContainerController.prototype.getSize = function() {                                                      // 15980
  return this.size;                                                                                                    // 15981
};                                                                                                                     // 15982
                                                                                                                       // 15983
                                                                                                                       // 15984
/**                                                                                                                    // 15985
 * Resizes the container.                                                                                              // 15986
 * @private                                                                                                            // 15987
 * @param {number} The new size to set.                                                                                // 15988
 */                                                                                                                    // 15989
VirtualRepeatContainerController.prototype.setSize_ = function(size) {                                                 // 15990
  this.size = size;                                                                                                    // 15991
  this.$element[0].style[this.isHorizontal() ? 'width' : 'height'] = size + 'px';                                      // 15992
};                                                                                                                     // 15993
                                                                                                                       // 15994
                                                                                                                       // 15995
/** Instructs the container to re-measure its size. */                                                                 // 15996
VirtualRepeatContainerController.prototype.updateSize = function() {                                                   // 15997
  if (this.originalSize) return;                                                                                       // 15998
                                                                                                                       // 15999
  this.size = this.isHorizontal()                                                                                      // 16000
      ? this.$element[0].clientWidth                                                                                   // 16001
      : this.$element[0].clientHeight;                                                                                 // 16002
  this.repeater && this.repeater.containerUpdated();                                                                   // 16003
};                                                                                                                     // 16004
                                                                                                                       // 16005
                                                                                                                       // 16006
/** @return {number} The container's scrollHeight or scrollWidth. */                                                   // 16007
VirtualRepeatContainerController.prototype.getScrollSize = function() {                                                // 16008
  return this.scrollSize;                                                                                              // 16009
};                                                                                                                     // 16010
                                                                                                                       // 16011
                                                                                                                       // 16012
/**                                                                                                                    // 16013
 * Sets the scroller element to the specified size.                                                                    // 16014
 * @private                                                                                                            // 16015
 * @param {number} size The new size.                                                                                  // 16016
 */                                                                                                                    // 16017
VirtualRepeatContainerController.prototype.sizeScroller_ = function(size) {                                            // 16018
  var dimension =  this.isHorizontal() ? 'width' : 'height';                                                           // 16019
  var crossDimension = this.isHorizontal() ? 'height' : 'width';                                                       // 16020
                                                                                                                       // 16021
  // If the size falls within the browser's maximum explicit size for a single element, we can                         // 16022
  // set the size and be done. Otherwise, we have to create children that add up the the desired                       // 16023
  // size.                                                                                                             // 16024
  if (size < MAX_ELEMENT_SIZE) {                                                                                       // 16025
    this.sizer.style[dimension] = size + 'px';                                                                         // 16026
  } else {                                                                                                             // 16027
    // Clear any existing dimensions.                                                                                  // 16028
    this.sizer.innerHTML = '';                                                                                         // 16029
    this.sizer.style[dimension] = 'auto';                                                                              // 16030
    this.sizer.style[crossDimension] = 'auto';                                                                         // 16031
                                                                                                                       // 16032
    // Divide the total size we have to render into N max-size pieces.                                                 // 16033
    var numChildren = Math.floor(size / MAX_ELEMENT_SIZE);                                                             // 16034
                                                                                                                       // 16035
    // Element template to clone for each max-size piece.                                                              // 16036
    var sizerChild = document.createElement('div');                                                                    // 16037
    sizerChild.style[dimension] = MAX_ELEMENT_SIZE + 'px';                                                             // 16038
    sizerChild.style[crossDimension] = '1px';                                                                          // 16039
                                                                                                                       // 16040
    for (var i = 0; i < numChildren; i++) {                                                                            // 16041
      this.sizer.appendChild(sizerChild.cloneNode(false));                                                             // 16042
    }                                                                                                                  // 16043
                                                                                                                       // 16044
    // Re-use the element template for the remainder.                                                                  // 16045
    sizerChild.style[dimension] = (size - (numChildren * MAX_ELEMENT_SIZE)) + 'px';                                    // 16046
    this.sizer.appendChild(sizerChild);                                                                                // 16047
  }                                                                                                                    // 16048
};                                                                                                                     // 16049
                                                                                                                       // 16050
                                                                                                                       // 16051
/**                                                                                                                    // 16052
 * If auto-shrinking is enabled, shrinks or unshrinks as appropriate.                                                  // 16053
 * @private                                                                                                            // 16054
 * @param {number} size The new size.                                                                                  // 16055
 */                                                                                                                    // 16056
VirtualRepeatContainerController.prototype.autoShrink_ = function(size) {                                              // 16057
  var shrinkSize = Math.max(size, this.autoShrinkMin * this.repeater.getItemSize());                                   // 16058
  if (this.autoShrink && shrinkSize !== this.size) {                                                                   // 16059
    if (shrinkSize < (this.originalSize || this.size)) {                                                               // 16060
      if (!this.originalSize) {                                                                                        // 16061
        this.originalSize = this.size;                                                                                 // 16062
      }                                                                                                                // 16063
                                                                                                                       // 16064
      this.setSize_(shrinkSize);                                                                                       // 16065
    } else if (this.originalSize) {                                                                                    // 16066
      this.setSize_(this.originalSize);                                                                                // 16067
      this.originalSize = null;                                                                                        // 16068
    }                                                                                                                  // 16069
  }                                                                                                                    // 16070
};                                                                                                                     // 16071
                                                                                                                       // 16072
                                                                                                                       // 16073
/**                                                                                                                    // 16074
 * Sets the scrollHeight or scrollWidth. Called by the repeater based on                                               // 16075
 * its item count and item size.                                                                                       // 16076
 * @param {number} itemsSize The total size of the items.                                                              // 16077
 */                                                                                                                    // 16078
VirtualRepeatContainerController.prototype.setScrollSize = function(itemsSize) {                                       // 16079
  var size = itemsSize + this.offsetSize;                                                                              // 16080
  if (this.scrollSize === size) return;                                                                                // 16081
                                                                                                                       // 16082
  this.sizeScroller_(size);                                                                                            // 16083
  this.autoShrink_(size);                                                                                              // 16084
  this.scrollSize = size;                                                                                              // 16085
};                                                                                                                     // 16086
                                                                                                                       // 16087
                                                                                                                       // 16088
/** @return {number} The container's current scroll offset. */                                                         // 16089
VirtualRepeatContainerController.prototype.getScrollOffset = function() {                                              // 16090
  return this.scrollOffset;                                                                                            // 16091
};                                                                                                                     // 16092
                                                                                                                       // 16093
/**                                                                                                                    // 16094
 * Scrolls to a given scrollTop position.                                                                              // 16095
 * @param {number} position                                                                                            // 16096
 */                                                                                                                    // 16097
VirtualRepeatContainerController.prototype.scrollTo = function(position) {                                             // 16098
  this.scroller[this.isHorizontal() ? 'scrollLeft' : 'scrollTop'] = position;                                          // 16099
  this.handleScroll_();                                                                                                // 16100
};                                                                                                                     // 16101
                                                                                                                       // 16102
VirtualRepeatContainerController.prototype.resetScroll = function() {                                                  // 16103
  this.scrollTo(0);                                                                                                    // 16104
};                                                                                                                     // 16105
                                                                                                                       // 16106
                                                                                                                       // 16107
VirtualRepeatContainerController.prototype.handleScroll_ = function() {                                                // 16108
  var offset = this.isHorizontal() ? this.scroller.scrollLeft : this.scroller.scrollTop;                               // 16109
  if (offset === this.scrollOffset) return;                                                                            // 16110
                                                                                                                       // 16111
  var itemSize = this.repeater.getItemSize();                                                                          // 16112
  if (!itemSize) return;                                                                                               // 16113
                                                                                                                       // 16114
  var numItems = Math.max(0, Math.floor(offset / itemSize) - NUM_EXTRA);                                               // 16115
                                                                                                                       // 16116
  var transform = this.isHorizontal() ? 'translateX(' : 'translateY(';                                                 // 16117
      transform +=  (numItems * itemSize) + 'px)';                                                                     // 16118
                                                                                                                       // 16119
  this.scrollOffset = offset;                                                                                          // 16120
  this.offsetter.style.webkitTransform = transform;                                                                    // 16121
  this.offsetter.style.transform = transform;                                                                          // 16122
                                                                                                                       // 16123
  this.repeater.containerUpdated();                                                                                    // 16124
};                                                                                                                     // 16125
                                                                                                                       // 16126
                                                                                                                       // 16127
/**                                                                                                                    // 16128
 * @ngdoc directive                                                                                                    // 16129
 * @name mdVirtualRepeat                                                                                               // 16130
 * @module material.components.virtualRepeat                                                                           // 16131
 * @restrict A                                                                                                         // 16132
 * @priority 1000                                                                                                      // 16133
 * @description                                                                                                        // 16134
 * `md-virtual-repeat` specifies an element to repeat using virtual scrolling.                                         // 16135
 *                                                                                                                     // 16136
 * Virtual repeat is a limited substitute for ng-repeat that renders only                                              // 16137
 * enough dom nodes to fill the container and recycling them as the user scrolls.                                      // 16138
 * Arrays, but not objects are supported for iteration.                                                                // 16139
 * Track by, as alias, and (key, value) syntax are not supported.                                                      // 16140
 *                                                                                                                     // 16141
 * @usage                                                                                                              // 16142
 * <hljs lang="html">                                                                                                  // 16143
 * <md-virtual-repeat-container>                                                                                       // 16144
 *   <div md-virtual-repeat="i in items">Hello {{i}}!</div>                                                            // 16145
 * </md-virtual-repeat-container>                                                                                      // 16146
 *                                                                                                                     // 16147
 * <md-virtual-repeat-container md-orient-horizontal>                                                                  // 16148
 *   <div md-virtual-repeat="i in items" md-item-size="20">Hello {{i}}!</div>                                          // 16149
 * </md-virtual-repeat-container>                                                                                      // 16150
 * </hljs>                                                                                                             // 16151
 *                                                                                                                     // 16152
 * @param {number=} md-item-size The height or width of the repeated elements (which                                   // 16153
 *     must be identical for each element). Optional. Will attempt to read the size                                    // 16154
 *     from the dom if missing, but still assumes that all repeated nodes have same                                    // 16155
 *     height or width.                                                                                                // 16156
 * @param {string=} md-extra-name Evaluates to an additional name to which                                             // 16157
 *     the current iterated item can be assigned on the repeated scope. (Needed                                        // 16158
 *     for use in md-autocomplete).                                                                                    // 16159
 * @param {boolean=} md-on-demand When present, treats the md-virtual-repeat argument                                  // 16160
 *     as an object that can fetch rows rather than an array.                                                          // 16161
 *     NOTE: This object must implement the following interface with two (2) methods:                                  // 16162
 *     getItemAtIndex: function(index) -> item at that index or null if it is not yet                                  // 16163
 *         loaded (It should start downloading the item in that case).                                                 // 16164
 *     getLength: function() -> number The data legnth to which the repeater container                                 // 16165
 *         should be sized. Ideally, when the count is known, this method should return it.                            // 16166
 *         Otherwise, return a higher number than the currently loaded items to produce an                             // 16167
 *         infinite-scroll behavior.                                                                                   // 16168
 */                                                                                                                    // 16169
function VirtualRepeatDirective($parse) {                                                                              // 16170
  return {                                                                                                             // 16171
    controller: VirtualRepeatController,                                                                               // 16172
    priority: 1000,                                                                                                    // 16173
    require: ['mdVirtualRepeat', '^^mdVirtualRepeatContainer'],                                                        // 16174
    restrict: 'A',                                                                                                     // 16175
    terminal: true,                                                                                                    // 16176
    transclude: 'element',                                                                                             // 16177
    compile: function VirtualRepeatCompile($element, $attrs) {                                                         // 16178
      var expression = $attrs.mdVirtualRepeat;                                                                         // 16179
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)\s*$/);                                            // 16180
      var repeatName = match[1];                                                                                       // 16181
      var repeatListExpression = $parse(match[2]);                                                                     // 16182
      var extraName = $attrs.mdExtraName && $parse($attrs.mdExtraName);                                                // 16183
                                                                                                                       // 16184
      return function VirtualRepeatLink($scope, $element, $attrs, ctrl, $transclude) {                                 // 16185
        ctrl[0].link_(ctrl[1], $transclude, repeatName, repeatListExpression, extraName);                              // 16186
      };                                                                                                               // 16187
    }                                                                                                                  // 16188
  };                                                                                                                   // 16189
}                                                                                                                      // 16190
VirtualRepeatDirective.$inject = ["$parse"];                                                                           // 16191
                                                                                                                       // 16192
                                                                                                                       // 16193
/** @ngInject */                                                                                                       // 16194
function VirtualRepeatController($scope, $element, $attrs, $browser, $document, $$rAF) {                               // 16195
  this.$scope = $scope;                                                                                                // 16196
  this.$element = $element;                                                                                            // 16197
  this.$attrs = $attrs;                                                                                                // 16198
  this.$browser = $browser;                                                                                            // 16199
  this.$document = $document;                                                                                          // 16200
  this.$$rAF = $$rAF;                                                                                                  // 16201
                                                                                                                       // 16202
  /** @type {boolean} Whether we are in on-demand mode. */                                                             // 16203
  this.onDemand = $attrs.hasOwnProperty('mdOnDemand');                                                                 // 16204
  /** @type {!Function} Backup reference to $browser.$$checkUrlChange */                                               // 16205
  this.browserCheckUrlChange = $browser.$$checkUrlChange;                                                              // 16206
  /** @type {number} Most recent starting repeat index (based on scroll offset) */                                     // 16207
  this.newStartIndex = 0;                                                                                              // 16208
  /** @type {number} Most recent ending repeat index (based on scroll offset) */                                       // 16209
  this.newEndIndex = 0;                                                                                                // 16210
  /** @type {number} Most recent end visible index (based on scroll offset) */                                         // 16211
  this.newVisibleEnd = 0;                                                                                              // 16212
  /** @type {number} Previous starting repeat index (based on scroll offset) */                                        // 16213
  this.startIndex = 0;                                                                                                 // 16214
  /** @type {number} Previous ending repeat index (based on scroll offset) */                                          // 16215
  this.endIndex = 0;                                                                                                   // 16216
  // TODO: measure width/height of first element from dom if not provided.                                             // 16217
  // getComputedStyle?                                                                                                 // 16218
  /** @type {?number} Height/width of repeated elements. */                                                            // 16219
  this.itemSize = $scope.$eval($attrs.mdItemSize) || null;                                                             // 16220
                                                                                                                       // 16221
  /** @type {boolean} Whether this is the first time that items are rendered. */                                       // 16222
  this.isFirstRender = true;                                                                                           // 16223
                                                                                                                       // 16224
  /** @type {number} Most recently seen length of items. */                                                            // 16225
  this.itemsLength = 0;                                                                                                // 16226
                                                                                                                       // 16227
  /**                                                                                                                  // 16228
   * @type {!Function} Unwatch callback for item size (when md-items-size is                                           // 16229
   *     not specified), or angular.noop otherwise.                                                                    // 16230
   */                                                                                                                  // 16231
  this.unwatchItemSize_ = angular.noop;                                                                                // 16232
                                                                                                                       // 16233
  /**                                                                                                                  // 16234
   * Presently rendered blocks by repeat index.                                                                        // 16235
   * @type {Object<number, !VirtualRepeatController.Block}                                                             // 16236
   */                                                                                                                  // 16237
  this.blocks = {};                                                                                                    // 16238
  /** @type {Array<!VirtualRepeatController.Block>} A pool of presently unused blocks. */                              // 16239
  this.pooledBlocks = [];                                                                                              // 16240
}                                                                                                                      // 16241
VirtualRepeatController.$inject = ["$scope", "$element", "$attrs", "$browser", "$document", "$$rAF"];                  // 16242
                                                                                                                       // 16243
                                                                                                                       // 16244
/**                                                                                                                    // 16245
 * An object representing a repeated item.                                                                             // 16246
 * @typedef {{element: !jqLite, new: boolean, scope: !angular.Scope}}                                                  // 16247
 */                                                                                                                    // 16248
VirtualRepeatController.Block;                                                                                         // 16249
                                                                                                                       // 16250
                                                                                                                       // 16251
/**                                                                                                                    // 16252
 * Called at startup by the md-virtual-repeat postLink function.                                                       // 16253
 * @param {!VirtualRepeatContainerController} container The container's controller.                                    // 16254
 * @param {!Function} transclude The repeated element's bound transclude function.                                     // 16255
 * @param {string} repeatName The left hand side of the repeat expression, indicating                                  // 16256
 *     the name for each item in the array.                                                                            // 16257
 * @param {!Function} repeatListExpression A compiled expression based on the right hand side                          // 16258
 *     of the repeat expression. Points to the array to repeat over.                                                   // 16259
 * @param {string|undefined} extraName The optional extra repeatName.                                                  // 16260
 */                                                                                                                    // 16261
VirtualRepeatController.prototype.link_ =                                                                              // 16262
    function(container, transclude, repeatName, repeatListExpression, extraName) {                                     // 16263
  this.container = container;                                                                                          // 16264
  this.transclude = transclude;                                                                                        // 16265
  this.repeatName = repeatName;                                                                                        // 16266
  this.rawRepeatListExpression = repeatListExpression;                                                                 // 16267
  this.extraName = extraName;                                                                                          // 16268
  this.sized = false;                                                                                                  // 16269
                                                                                                                       // 16270
  this.repeatListExpression = angular.bind(this, this.repeatListExpression_);                                          // 16271
                                                                                                                       // 16272
  this.container.register(this);                                                                                       // 16273
};                                                                                                                     // 16274
                                                                                                                       // 16275
                                                                                                                       // 16276
/** @private Attempts to set itemSize by measuring a repeated element in the dom */                                    // 16277
VirtualRepeatController.prototype.readItemSize_ = function() {                                                         // 16278
  if (this.itemSize) {                                                                                                 // 16279
    // itemSize was successfully read in a different asynchronous call.                                                // 16280
    return;                                                                                                            // 16281
  }                                                                                                                    // 16282
                                                                                                                       // 16283
  this.items = this.repeatListExpression(this.$scope);                                                                 // 16284
  this.parentNode = this.$element[0].parentNode;                                                                       // 16285
  var block = this.getBlock_(0);                                                                                       // 16286
  if (!block.element[0].parentNode) {                                                                                  // 16287
    this.parentNode.appendChild(block.element[0]);                                                                     // 16288
  }                                                                                                                    // 16289
                                                                                                                       // 16290
  this.itemSize = block.element[0][                                                                                    // 16291
      this.container.isHorizontal() ? 'offsetWidth' : 'offsetHeight'] || null;                                         // 16292
                                                                                                                       // 16293
  this.blocks[0] = block;                                                                                              // 16294
  this.poolBlock_(0);                                                                                                  // 16295
                                                                                                                       // 16296
  if (this.itemSize) {                                                                                                 // 16297
    this.containerUpdated();                                                                                           // 16298
  }                                                                                                                    // 16299
};                                                                                                                     // 16300
                                                                                                                       // 16301
                                                                                                                       // 16302
/**                                                                                                                    // 16303
 * Returns the user-specified repeat list, transforming it into an array-like                                          // 16304
 * object in the case of infinite scroll/dynamic load mode.                                                            // 16305
 * @param {!angular.Scope} The scope.                                                                                  // 16306
 * @return {!Array|!Object} An array or array-like object for iteration.                                               // 16307
 */                                                                                                                    // 16308
VirtualRepeatController.prototype.repeatListExpression_ = function(scope) {                                            // 16309
  var repeatList = this.rawRepeatListExpression(scope);                                                                // 16310
                                                                                                                       // 16311
  if (this.onDemand && repeatList) {                                                                                   // 16312
    var virtualList = new VirtualRepeatModelArrayLike(repeatList);                                                     // 16313
    virtualList.$$includeIndexes(this.newStartIndex, this.newVisibleEnd);                                              // 16314
    return virtualList;                                                                                                // 16315
  } else {                                                                                                             // 16316
    return repeatList;                                                                                                 // 16317
  }                                                                                                                    // 16318
};                                                                                                                     // 16319
                                                                                                                       // 16320
                                                                                                                       // 16321
/**                                                                                                                    // 16322
 * Called by the container. Informs us that the containers scroll or size has                                          // 16323
 * changed.                                                                                                            // 16324
 */                                                                                                                    // 16325
VirtualRepeatController.prototype.containerUpdated = function() {                                                      // 16326
  // If itemSize is unknown, attempt to measure it.                                                                    // 16327
  if (!this.itemSize) {                                                                                                // 16328
    this.unwatchItemSize_ = this.$scope.$watchCollection(                                                              // 16329
        this.repeatListExpression,                                                                                     // 16330
        angular.bind(this, function(items) {                                                                           // 16331
          if (items && items.length) {                                                                                 // 16332
            this.$$rAF(angular.bind(this, this.readItemSize_));                                                        // 16333
          }                                                                                                            // 16334
        }));                                                                                                           // 16335
    if (!this.$scope.$root.$$phase) this.$scope.$digest();                                                             // 16336
                                                                                                                       // 16337
    return;                                                                                                            // 16338
  } else if (!this.sized) {                                                                                            // 16339
    this.items = this.repeatListExpression(this.$scope);                                                               // 16340
  }                                                                                                                    // 16341
                                                                                                                       // 16342
  if (!this.sized) {                                                                                                   // 16343
    this.unwatchItemSize_();                                                                                           // 16344
    this.sized = true;                                                                                                 // 16345
    this.$scope.$watchCollection(this.repeatListExpression,                                                            // 16346
        angular.bind(this, this.virtualRepeatUpdate_));                                                                // 16347
  }                                                                                                                    // 16348
                                                                                                                       // 16349
  this.updateIndexes_();                                                                                               // 16350
                                                                                                                       // 16351
  if (this.newStartIndex !== this.startIndex ||                                                                        // 16352
      this.newEndIndex !== this.endIndex ||                                                                            // 16353
      this.container.getScrollOffset() > this.container.getScrollSize()) {                                             // 16354
    if (this.items instanceof VirtualRepeatModelArrayLike) {                                                           // 16355
      this.items.$$includeIndexes(this.newStartIndex, this.newEndIndex);                                               // 16356
    }                                                                                                                  // 16357
    this.virtualRepeatUpdate_(this.items, this.items);                                                                 // 16358
  }                                                                                                                    // 16359
};                                                                                                                     // 16360
                                                                                                                       // 16361
                                                                                                                       // 16362
/**                                                                                                                    // 16363
 * Called by the container. Returns the size of a single repeated item.                                                // 16364
 * @return {?number} Size of a repeated item.                                                                          // 16365
 */                                                                                                                    // 16366
VirtualRepeatController.prototype.getItemSize = function() {                                                           // 16367
  return this.itemSize;                                                                                                // 16368
};                                                                                                                     // 16369
                                                                                                                       // 16370
                                                                                                                       // 16371
/**                                                                                                                    // 16372
 * Updates the order and visible offset of repeated blocks in response to scrolling                                    // 16373
 * or items updates.                                                                                                   // 16374
 * @private                                                                                                            // 16375
 */                                                                                                                    // 16376
VirtualRepeatController.prototype.virtualRepeatUpdate_ = function(items, oldItems) {                                   // 16377
  var itemsLength = items ? items.length : 0;                                                                          // 16378
  var lengthChanged = false;                                                                                           // 16379
                                                                                                                       // 16380
  if (itemsLength !== this.itemsLength) {                                                                              // 16381
    lengthChanged = true;                                                                                              // 16382
    this.itemsLength = itemsLength;                                                                                    // 16383
  }                                                                                                                    // 16384
                                                                                                                       // 16385
  // If the number of items shrank, scroll up to the top.                                                              // 16386
  if (this.items && itemsLength < this.items.length && this.container.getScrollOffset() !== 0) {                       // 16387
    this.items = items;                                                                                                // 16388
    this.container.resetScroll();                                                                                      // 16389
    return;                                                                                                            // 16390
  }                                                                                                                    // 16391
                                                                                                                       // 16392
  this.items = items;                                                                                                  // 16393
  if (items !== oldItems || lengthChanged) {                                                                           // 16394
    this.updateIndexes_();                                                                                             // 16395
  }                                                                                                                    // 16396
                                                                                                                       // 16397
  this.parentNode = this.$element[0].parentNode;                                                                       // 16398
                                                                                                                       // 16399
  if (lengthChanged) {                                                                                                 // 16400
    this.container.setScrollSize(itemsLength * this.itemSize);                                                         // 16401
  }                                                                                                                    // 16402
                                                                                                                       // 16403
  if (this.isFirstRender) {                                                                                            // 16404
    this.isFirstRender = false;                                                                                        // 16405
    var startIndex = this.$attrs.mdStartIndex ? this.$scope.$eval(this.$attrs.mdStartIndex) : 0;                       // 16406
    this.container.scrollTo(startIndex * this.itemSize);                                                               // 16407
  }                                                                                                                    // 16408
                                                                                                                       // 16409
  // Detach and pool any blocks that are no longer in the viewport.                                                    // 16410
  Object.keys(this.blocks).forEach(function(blockIndex) {                                                              // 16411
    var index = parseInt(blockIndex, 10);                                                                              // 16412
    if (index < this.newStartIndex || index >= this.newEndIndex) {                                                     // 16413
      this.poolBlock_(index);                                                                                          // 16414
    }                                                                                                                  // 16415
  }, this);                                                                                                            // 16416
                                                                                                                       // 16417
  // Add needed blocks.                                                                                                // 16418
  // For performance reasons, temporarily block browser url checks as we digest                                        // 16419
  // the restored block scopes ($$checkUrlChange reads window.location to                                              // 16420
  // check for changes and trigger route change, etc, which we don't need when                                         // 16421
  // trying to scroll at 60fps).                                                                                       // 16422
  this.$browser.$$checkUrlChange = angular.noop;                                                                       // 16423
                                                                                                                       // 16424
  var i, block,                                                                                                        // 16425
      newStartBlocks = [],                                                                                             // 16426
      newEndBlocks = [];                                                                                               // 16427
                                                                                                                       // 16428
  // Collect blocks at the top.                                                                                        // 16429
  for (i = this.newStartIndex; i < this.newEndIndex && this.blocks[i] == null; i++) {                                  // 16430
    block = this.getBlock_(i);                                                                                         // 16431
    this.updateBlock_(block, i);                                                                                       // 16432
    newStartBlocks.push(block);                                                                                        // 16433
  }                                                                                                                    // 16434
                                                                                                                       // 16435
  // Update blocks that are already rendered.                                                                          // 16436
  for (; this.blocks[i] != null; i++) {                                                                                // 16437
    this.updateBlock_(this.blocks[i], i);                                                                              // 16438
  }                                                                                                                    // 16439
  var maxIndex = i - 1;                                                                                                // 16440
                                                                                                                       // 16441
  // Collect blocks at the end.                                                                                        // 16442
  for (; i < this.newEndIndex; i++) {                                                                                  // 16443
    block = this.getBlock_(i);                                                                                         // 16444
    this.updateBlock_(block, i);                                                                                       // 16445
    newEndBlocks.push(block);                                                                                          // 16446
  }                                                                                                                    // 16447
                                                                                                                       // 16448
  // Attach collected blocks to the document.                                                                          // 16449
  if (newStartBlocks.length) {                                                                                         // 16450
    this.parentNode.insertBefore(                                                                                      // 16451
        this.domFragmentFromBlocks_(newStartBlocks),                                                                   // 16452
        this.$element[0].nextSibling);                                                                                 // 16453
  }                                                                                                                    // 16454
  if (newEndBlocks.length) {                                                                                           // 16455
    this.parentNode.insertBefore(                                                                                      // 16456
        this.domFragmentFromBlocks_(newEndBlocks),                                                                     // 16457
        this.blocks[maxIndex] && this.blocks[maxIndex].element[0].nextSibling);                                        // 16458
  }                                                                                                                    // 16459
                                                                                                                       // 16460
  // Restore $$checkUrlChange.                                                                                         // 16461
  this.$browser.$$checkUrlChange = this.browserCheckUrlChange;                                                         // 16462
                                                                                                                       // 16463
  this.startIndex = this.newStartIndex;                                                                                // 16464
  this.endIndex = this.newEndIndex;                                                                                    // 16465
};                                                                                                                     // 16466
                                                                                                                       // 16467
                                                                                                                       // 16468
/**                                                                                                                    // 16469
 * @param {number} index Where the block is to be in the repeated list.                                                // 16470
 * @return {!VirtualRepeatController.Block} A new or pooled block to place at the specified index.                     // 16471
 * @private                                                                                                            // 16472
 */                                                                                                                    // 16473
VirtualRepeatController.prototype.getBlock_ = function(index) {                                                        // 16474
  if (this.pooledBlocks.length) {                                                                                      // 16475
    return this.pooledBlocks.pop();                                                                                    // 16476
  }                                                                                                                    // 16477
                                                                                                                       // 16478
  var block;                                                                                                           // 16479
  this.transclude(angular.bind(this, function(clone, scope) {                                                          // 16480
    block = {                                                                                                          // 16481
      element: clone,                                                                                                  // 16482
      new: true,                                                                                                       // 16483
      scope: scope                                                                                                     // 16484
    };                                                                                                                 // 16485
                                                                                                                       // 16486
    this.updateScope_(scope, index);                                                                                   // 16487
    this.parentNode.appendChild(clone[0]);                                                                             // 16488
  }));                                                                                                                 // 16489
                                                                                                                       // 16490
  return block;                                                                                                        // 16491
};                                                                                                                     // 16492
                                                                                                                       // 16493
                                                                                                                       // 16494
/**                                                                                                                    // 16495
 * Updates and if not in a digest cycle, digests the specified block's scope to the data                               // 16496
 * at the specified index.                                                                                             // 16497
 * @param {!VirtualRepeatController.Block} block The block whose scope should be updated.                              // 16498
 * @param {number} index The index to set.                                                                             // 16499
 * @private                                                                                                            // 16500
 */                                                                                                                    // 16501
VirtualRepeatController.prototype.updateBlock_ = function(block, index) {                                              // 16502
  this.blocks[index] = block;                                                                                          // 16503
                                                                                                                       // 16504
  if (!block.new &&                                                                                                    // 16505
      (block.scope.$index === index && block.scope[this.repeatName] === this.items[index])) {                          // 16506
    return;                                                                                                            // 16507
  }                                                                                                                    // 16508
  block.new = false;                                                                                                   // 16509
                                                                                                                       // 16510
  // Update and digest the block's scope.                                                                              // 16511
  this.updateScope_(block.scope, index);                                                                               // 16512
                                                                                                                       // 16513
  // Perform digest before reattaching the block.                                                                      // 16514
  // Any resulting synchronous dom mutations should be much faster as a result.                                        // 16515
  // This might break some directives, but I'm going to try it for now.                                                // 16516
  if (!this.$scope.$root.$$phase) {                                                                                    // 16517
    block.scope.$digest();                                                                                             // 16518
  }                                                                                                                    // 16519
};                                                                                                                     // 16520
                                                                                                                       // 16521
                                                                                                                       // 16522
/**                                                                                                                    // 16523
 * Updates scope to the data at the specified index.                                                                   // 16524
 * @param {!angular.Scope} scope The scope which should be updated.                                                    // 16525
 * @param {number} index The index to set.                                                                             // 16526
 * @private                                                                                                            // 16527
 */                                                                                                                    // 16528
VirtualRepeatController.prototype.updateScope_ = function(scope, index) {                                              // 16529
  scope.$index = index;                                                                                                // 16530
  scope[this.repeatName] = this.items && this.items[index];                                                            // 16531
  if (this.extraName) scope[this.extraName(this.$scope)] = this.items[index];                                          // 16532
};                                                                                                                     // 16533
                                                                                                                       // 16534
                                                                                                                       // 16535
/**                                                                                                                    // 16536
 * Pools the block at the specified index (Pulls its element out of the dom and stores it).                            // 16537
 * @param {number} index The index at which the block to pool is stored.                                               // 16538
 * @private                                                                                                            // 16539
 */                                                                                                                    // 16540
VirtualRepeatController.prototype.poolBlock_ = function(index) {                                                       // 16541
  this.pooledBlocks.push(this.blocks[index]);                                                                          // 16542
  this.parentNode.removeChild(this.blocks[index].element[0]);                                                          // 16543
  delete this.blocks[index];                                                                                           // 16544
};                                                                                                                     // 16545
                                                                                                                       // 16546
                                                                                                                       // 16547
/**                                                                                                                    // 16548
 * Produces a dom fragment containing the elements from the list of blocks.                                            // 16549
 * @param {!Array<!VirtualRepeatController.Block>} blocks The blocks whose elements                                    // 16550
 *     should be added to the document fragment.                                                                       // 16551
 * @return {DocumentFragment}                                                                                          // 16552
 * @private                                                                                                            // 16553
 */                                                                                                                    // 16554
VirtualRepeatController.prototype.domFragmentFromBlocks_ = function(blocks) {                                          // 16555
  var fragment = this.$document[0].createDocumentFragment();                                                           // 16556
  blocks.forEach(function(block) {                                                                                     // 16557
    fragment.appendChild(block.element[0]);                                                                            // 16558
  });                                                                                                                  // 16559
  return fragment;                                                                                                     // 16560
};                                                                                                                     // 16561
                                                                                                                       // 16562
                                                                                                                       // 16563
/**                                                                                                                    // 16564
 * Updates start and end indexes based on length of repeated items and container size.                                 // 16565
 * @private                                                                                                            // 16566
 */                                                                                                                    // 16567
VirtualRepeatController.prototype.updateIndexes_ = function() {                                                        // 16568
  var itemsLength = this.items ? this.items.length : 0;                                                                // 16569
  var containerLength = Math.ceil(this.container.getSize() / this.itemSize);                                           // 16570
                                                                                                                       // 16571
  this.newStartIndex = Math.max(0, Math.min(                                                                           // 16572
      itemsLength - containerLength,                                                                                   // 16573
      Math.floor(this.container.getScrollOffset() / this.itemSize)));                                                  // 16574
  this.newVisibleEnd = this.newStartIndex + containerLength + NUM_EXTRA;                                               // 16575
  this.newEndIndex = Math.min(itemsLength, this.newVisibleEnd);                                                        // 16576
  this.newStartIndex = Math.max(0, this.newStartIndex - NUM_EXTRA);                                                    // 16577
};                                                                                                                     // 16578
                                                                                                                       // 16579
/**                                                                                                                    // 16580
 * This VirtualRepeatModelArrayLike class enforces the interface requirements                                          // 16581
 * for infinite scrolling within a mdVirtualRepeatContainer. An object with this                                       // 16582
 * interface must implement the following interface with two (2) methods:                                              // 16583
 *                                                                                                                     // 16584
 * getItemAtIndex: function(index) -> item at that index or null if it is not yet                                      // 16585
 *     loaded (It should start downloading the item in that case).                                                     // 16586
 *                                                                                                                     // 16587
 * getLength: function() -> number The data legnth to which the repeater container                                     // 16588
 *     should be sized. Ideally, when the count is known, this method should return it.                                // 16589
 *     Otherwise, return a higher number than the currently loaded items to produce an                                 // 16590
 *     infinite-scroll behavior.                                                                                       // 16591
 *                                                                                                                     // 16592
 * @usage                                                                                                              // 16593
 * <hljs lang="html">                                                                                                  // 16594
 *  <md-virtual-repeat-container md-orient-horizontal>                                                                 // 16595
 *    <div md-virtual-repeat="i in items" md-on-demand>                                                                // 16596
 *      Hello {{i}}!                                                                                                   // 16597
 *    </div>                                                                                                           // 16598
 *  </md-virtual-repeat-container>                                                                                     // 16599
 * </hljs>                                                                                                             // 16600
 *                                                                                                                     // 16601
 */                                                                                                                    // 16602
function VirtualRepeatModelArrayLike(model) {                                                                          // 16603
  if (!angular.isFunction(model.getItemAtIndex) ||                                                                     // 16604
      !angular.isFunction(model.getLength)) {                                                                          // 16605
    throw Error('When md-on-demand is enabled, the Object passed to md-virtual-repeat must implement ' +               // 16606
        'functions getItemAtIndex() and getLength() ');                                                                // 16607
  }                                                                                                                    // 16608
                                                                                                                       // 16609
  this.model = model;                                                                                                  // 16610
}                                                                                                                      // 16611
                                                                                                                       // 16612
                                                                                                                       // 16613
VirtualRepeatModelArrayLike.prototype.$$includeIndexes = function(start, end) {                                        // 16614
  for (var i = start; i < end; i++) {                                                                                  // 16615
    if (!this.hasOwnProperty(i)) {                                                                                     // 16616
      this[i] = this.model.getItemAtIndex(i);                                                                          // 16617
    }                                                                                                                  // 16618
  }                                                                                                                    // 16619
  this.length = this.model.getLength();                                                                                // 16620
};                                                                                                                     // 16621
                                                                                                                       // 16622
                                                                                                                       // 16623
function abstractMethod() {                                                                                            // 16624
  throw Error('Non-overridden abstract method called.');                                                               // 16625
}                                                                                                                      // 16626
                                                                                                                       // 16627
})();                                                                                                                  // 16628
(function(){                                                                                                           // 16629
"use strict";                                                                                                          // 16630
                                                                                                                       // 16631
/**                                                                                                                    // 16632
 * @ngdoc module                                                                                                       // 16633
 * @name material.components.whiteframe                                                                                // 16634
 */                                                                                                                    // 16635
angular.module('material.components.whiteframe', []);                                                                  // 16636
                                                                                                                       // 16637
})();                                                                                                                  // 16638
(function(){                                                                                                           // 16639
"use strict";                                                                                                          // 16640
                                                                                                                       // 16641
angular                                                                                                                // 16642
    .module('material.components.autocomplete')                                                                        // 16643
    .controller('MdAutocompleteCtrl', MdAutocompleteCtrl);                                                             // 16644
                                                                                                                       // 16645
var ITEM_HEIGHT  = 41,                                                                                                 // 16646
    MAX_HEIGHT   = 5.5 * ITEM_HEIGHT,                                                                                  // 16647
    MENU_PADDING = 8;                                                                                                  // 16648
                                                                                                                       // 16649
function MdAutocompleteCtrl ($scope, $element, $mdUtil, $mdConstant, $mdTheming, $window,                              // 16650
                             $animate, $rootElement, $attrs, $q) {                                                     // 16651
  //-- private variables                                                                                               // 16652
  var ctrl                 = this,                                                                                     // 16653
      itemParts            = $scope.itemsExpr.split(/ in /i),                                                          // 16654
      itemExpr             = itemParts[ 1 ],                                                                           // 16655
      elements             = null,                                                                                     // 16656
      cache                = {},                                                                                       // 16657
      noBlur               = false,                                                                                    // 16658
      selectedItemWatchers = [],                                                                                       // 16659
      hasFocus             = false,                                                                                    // 16660
      lastCount            = 0;                                                                                        // 16661
                                                                                                                       // 16662
  //-- public variables with handlers                                                                                  // 16663
  defineProperty('hidden', handleHiddenChange, true);                                                                  // 16664
                                                                                                                       // 16665
  //-- public variables                                                                                                // 16666
  ctrl.scope      = $scope;                                                                                            // 16667
  ctrl.parent     = $scope.$parent;                                                                                    // 16668
  ctrl.itemName   = itemParts[ 0 ];                                                                                    // 16669
  ctrl.matches    = [];                                                                                                // 16670
  ctrl.loading    = false;                                                                                             // 16671
  ctrl.hidden     = true;                                                                                              // 16672
  ctrl.index      = null;                                                                                              // 16673
  ctrl.messages   = [];                                                                                                // 16674
  ctrl.id         = $mdUtil.nextUid();                                                                                 // 16675
  ctrl.isDisabled = null;                                                                                              // 16676
  ctrl.isRequired = null;                                                                                              // 16677
                                                                                                                       // 16678
  //-- public methods                                                                                                  // 16679
  ctrl.keydown                       = keydown;                                                                        // 16680
  ctrl.blur                          = blur;                                                                           // 16681
  ctrl.focus                         = focus;                                                                          // 16682
  ctrl.clear                         = clearValue;                                                                     // 16683
  ctrl.select                        = select;                                                                         // 16684
  ctrl.listEnter                     = onListEnter;                                                                    // 16685
  ctrl.listLeave                     = onListLeave;                                                                    // 16686
  ctrl.mouseUp                       = onMouseup;                                                                      // 16687
  ctrl.getCurrentDisplayValue        = getCurrentDisplayValue;                                                         // 16688
  ctrl.registerSelectedItemWatcher   = registerSelectedItemWatcher;                                                    // 16689
  ctrl.unregisterSelectedItemWatcher = unregisterSelectedItemWatcher;                                                  // 16690
  ctrl.notFoundVisible               = notFoundVisible;                                                                // 16691
                                                                                                                       // 16692
  return init();                                                                                                       // 16693
                                                                                                                       // 16694
  //-- initialization methods                                                                                          // 16695
                                                                                                                       // 16696
  /**                                                                                                                  // 16697
   * Initialize the controller, setup watchers, gather elements                                                        // 16698
   */                                                                                                                  // 16699
  function init () {                                                                                                   // 16700
    $mdUtil.initOptionalProperties($scope, $attrs, { searchText: null, selectedItem: null });                          // 16701
    $mdTheming($element);                                                                                              // 16702
    configureWatchers();                                                                                               // 16703
    $mdUtil.nextTick(function () {                                                                                     // 16704
      gatherElements();                                                                                                // 16705
      moveDropdown();                                                                                                  // 16706
      focusElement();                                                                                                  // 16707
      $element.on('focus', focusElement);                                                                              // 16708
    });                                                                                                                // 16709
  }                                                                                                                    // 16710
                                                                                                                       // 16711
  /**                                                                                                                  // 16712
   * Calculates the dropdown's position and applies the new styles to the menu element                                 // 16713
   * @returns {*}                                                                                                      // 16714
   */                                                                                                                  // 16715
  function positionDropdown () {                                                                                       // 16716
    if (!elements) return $mdUtil.nextTick(positionDropdown, false, $scope);                                           // 16717
    var hrect  = elements.wrap.getBoundingClientRect(),                                                                // 16718
        vrect  = elements.snap.getBoundingClientRect(),                                                                // 16719
        root   = elements.root.getBoundingClientRect(),                                                                // 16720
        top    = vrect.bottom - root.top,                                                                              // 16721
        bot    = root.bottom - vrect.top,                                                                              // 16722
        left   = hrect.left - root.left,                                                                               // 16723
        width  = hrect.width,                                                                                          // 16724
        styles = {                                                                                                     // 16725
          left:     left + 'px',                                                                                       // 16726
          minWidth: width + 'px',                                                                                      // 16727
          maxWidth: Math.max(hrect.right - root.left, root.right - hrect.left) - MENU_PADDING + 'px'                   // 16728
        };                                                                                                             // 16729
    if (top > bot && root.height - hrect.bottom - MENU_PADDING < MAX_HEIGHT) {                                         // 16730
      styles.top       = 'auto';                                                                                       // 16731
      styles.bottom    = bot + 'px';                                                                                   // 16732
      styles.maxHeight = Math.min(MAX_HEIGHT, hrect.top - root.top - MENU_PADDING) + 'px';                             // 16733
    } else {                                                                                                           // 16734
      styles.top       = top + 'px';                                                                                   // 16735
      styles.bottom    = 'auto';                                                                                       // 16736
      styles.maxHeight = Math.min(MAX_HEIGHT, root.bottom - hrect.bottom - MENU_PADDING) + 'px';                       // 16737
    }                                                                                                                  // 16738
                                                                                                                       // 16739
    elements.$.scrollContainer.css(styles);                                                                            // 16740
    $mdUtil.nextTick(correctHorizontalAlignment, false);                                                               // 16741
                                                                                                                       // 16742
    /**                                                                                                                // 16743
     * Makes sure that the menu doesn't go off of the screen on either side.                                           // 16744
     */                                                                                                                // 16745
    function correctHorizontalAlignment () {                                                                           // 16746
      var dropdown = elements.scrollContainer.getBoundingClientRect(),                                                 // 16747
          styles   = {};                                                                                               // 16748
      if (dropdown.right > root.right - MENU_PADDING) {                                                                // 16749
        styles.left = (hrect.right - dropdown.width) + 'px';                                                           // 16750
      }                                                                                                                // 16751
      elements.$.scrollContainer.css(styles);                                                                          // 16752
    }                                                                                                                  // 16753
  }                                                                                                                    // 16754
                                                                                                                       // 16755
  /**                                                                                                                  // 16756
   * Moves the dropdown menu to the body tag in order to avoid z-index and overflow issues.                            // 16757
   */                                                                                                                  // 16758
  function moveDropdown () {                                                                                           // 16759
    if (!elements.$.root.length) return;                                                                               // 16760
    $mdTheming(elements.$.scrollContainer);                                                                            // 16761
    elements.$.scrollContainer.detach();                                                                               // 16762
    elements.$.root.append(elements.$.scrollContainer);                                                                // 16763
    if ($animate.pin) $animate.pin(elements.$.scrollContainer, $rootElement);                                          // 16764
  }                                                                                                                    // 16765
                                                                                                                       // 16766
  /**                                                                                                                  // 16767
   * Sends focus to the input element.                                                                                 // 16768
   */                                                                                                                  // 16769
  function focusElement () {                                                                                           // 16770
    if ($scope.autofocus) elements.input.focus();                                                                      // 16771
  }                                                                                                                    // 16772
                                                                                                                       // 16773
  /**                                                                                                                  // 16774
   * Sets up any watchers used by autocomplete                                                                         // 16775
   */                                                                                                                  // 16776
  function configureWatchers () {                                                                                      // 16777
    var wait = parseInt($scope.delay, 10) || 0;                                                                        // 16778
    $attrs.$observe('disabled', function (value) { ctrl.isDisabled = value; });                                        // 16779
    $attrs.$observe('required', function (value) { ctrl.isRequired = value !== null; });                               // 16780
    $scope.$watch('searchText', wait ? $mdUtil.debounce(handleSearchText, wait) : handleSearchText);                   // 16781
    $scope.$watch('selectedItem', selectedItemChange);                                                                 // 16782
    angular.element($window).on('resize', positionDropdown);                                                           // 16783
    $scope.$on('$destroy', cleanup);                                                                                   // 16784
  }                                                                                                                    // 16785
                                                                                                                       // 16786
  /**                                                                                                                  // 16787
   * Removes any events or leftover elements created by this controller                                                // 16788
   */                                                                                                                  // 16789
  function cleanup () {                                                                                                // 16790
    angular.element($window).off('resize', positionDropdown);                                                          // 16791
    if ( elements ){                                                                                                   // 16792
      var items = 'ul scroller scrollContainer input'.split(' ');                                                      // 16793
      angular.forEach(items, function(key){                                                                            // 16794
        elements.$[key].remove();                                                                                      // 16795
      });                                                                                                              // 16796
    }                                                                                                                  // 16797
  }                                                                                                                    // 16798
                                                                                                                       // 16799
  /**                                                                                                                  // 16800
   * Gathers all of the elements needed for this controller                                                            // 16801
   */                                                                                                                  // 16802
  function gatherElements () {                                                                                         // 16803
    elements = {                                                                                                       // 16804
      main:  $element[0],                                                                                              // 16805
      scrollContainer: $element[0].getElementsByClassName('md-virtual-repeat-container')[0],                           // 16806
      scroller: $element[0].getElementsByClassName('md-virtual-repeat-scroller')[0],                                   // 16807
      ul:    $element.find('ul')[0],                                                                                   // 16808
      input: $element.find('input')[0],                                                                                // 16809
      wrap:  $element.find('md-autocomplete-wrap')[0],                                                                 // 16810
      root:  document.body                                                                                             // 16811
    };                                                                                                                 // 16812
    elements.li   = elements.ul.getElementsByTagName('li');                                                            // 16813
    elements.snap = getSnapTarget();                                                                                   // 16814
    elements.$    = getAngularElements(elements);                                                                      // 16815
  }                                                                                                                    // 16816
                                                                                                                       // 16817
  /**                                                                                                                  // 16818
   * Finds the element that the menu will base its position on                                                         // 16819
   * @returns {*}                                                                                                      // 16820
   */                                                                                                                  // 16821
  function getSnapTarget () {                                                                                          // 16822
    for (var element = $element; element.length; element = element.parent()) {                                         // 16823
      if (angular.isDefined(element.attr('md-autocomplete-snap'))) return element[ 0 ];                                // 16824
    }                                                                                                                  // 16825
    return elements.wrap;                                                                                              // 16826
  }                                                                                                                    // 16827
                                                                                                                       // 16828
  /**                                                                                                                  // 16829
   * Gathers angular-wrapped versions of each element                                                                  // 16830
   * @param elements                                                                                                   // 16831
   * @returns {{}}                                                                                                     // 16832
   */                                                                                                                  // 16833
  function getAngularElements (elements) {                                                                             // 16834
    var obj = {};                                                                                                      // 16835
    for (var key in elements) {                                                                                        // 16836
      if (elements.hasOwnProperty(key)) obj[ key ] = angular.element(elements[ key ]);                                 // 16837
    }                                                                                                                  // 16838
    return obj;                                                                                                        // 16839
  }                                                                                                                    // 16840
                                                                                                                       // 16841
  //-- event/change handlers                                                                                           // 16842
                                                                                                                       // 16843
  /**                                                                                                                  // 16844
   * Handles changes to the `hidden` property.                                                                         // 16845
   * @param hidden                                                                                                     // 16846
   * @param oldHidden                                                                                                  // 16847
   */                                                                                                                  // 16848
  function handleHiddenChange (hidden, oldHidden) {                                                                    // 16849
    if (!hidden && oldHidden) {                                                                                        // 16850
      positionDropdown();                                                                                              // 16851
                                                                                                                       // 16852
      if (elements)                                                                                                    // 16853
        $mdUtil.nextTick(function () {                                                                                 // 16854
                                                                                                                       // 16855
          $mdUtil.disableScrollAround(elements.ul);                                                                    // 16856
                                                                                                                       // 16857
        }, false, $scope);                                                                                             // 16858
      } else if (hidden && !oldHidden) {                                                                               // 16859
        $mdUtil.nextTick(function () {                                                                                 // 16860
                                                                                                                       // 16861
          $mdUtil.enableScrolling();                                                                                   // 16862
                                                                                                                       // 16863
        }, false, $scope);                                                                                             // 16864
      }                                                                                                                // 16865
  }                                                                                                                    // 16866
                                                                                                                       // 16867
  /**                                                                                                                  // 16868
   * When the user mouses over the dropdown menu, ignore blur events.                                                  // 16869
   */                                                                                                                  // 16870
  function onListEnter () {                                                                                            // 16871
    noBlur = true;                                                                                                     // 16872
  }                                                                                                                    // 16873
                                                                                                                       // 16874
  /**                                                                                                                  // 16875
   * When the user's mouse leaves the menu, blur events may hide the menu again.                                       // 16876
   */                                                                                                                  // 16877
  function onListLeave () {                                                                                            // 16878
    noBlur = false;                                                                                                    // 16879
    if (!hasFocus) ctrl.hidden = true;                                                                                 // 16880
  }                                                                                                                    // 16881
                                                                                                                       // 16882
  /**                                                                                                                  // 16883
   * When the mouse button is released, send focus back to the input field.                                            // 16884
   */                                                                                                                  // 16885
  function onMouseup () {                                                                                              // 16886
    elements.input.focus();                                                                                            // 16887
  }                                                                                                                    // 16888
                                                                                                                       // 16889
  /**                                                                                                                  // 16890
   * Handles changes to the selected item.                                                                             // 16891
   * @param selectedItem                                                                                               // 16892
   * @param previousSelectedItem                                                                                       // 16893
   */                                                                                                                  // 16894
  function selectedItemChange (selectedItem, previousSelectedItem) {                                                   // 16895
    if (selectedItem) {                                                                                                // 16896
      getDisplayValue(selectedItem).then(function (val) {                                                              // 16897
        $scope.searchText = val;                                                                                       // 16898
        handleSelectedItemChange(selectedItem, previousSelectedItem);                                                  // 16899
      });                                                                                                              // 16900
    }                                                                                                                  // 16901
                                                                                                                       // 16902
    if (selectedItem !== previousSelectedItem) announceItemChange();                                                   // 16903
  }                                                                                                                    // 16904
                                                                                                                       // 16905
  /**                                                                                                                  // 16906
   * Use the user-defined expression to announce changes each time a new item is selected                              // 16907
   */                                                                                                                  // 16908
  function announceItemChange () {                                                                                     // 16909
    angular.isFunction($scope.itemChange) && $scope.itemChange(getItemAsNameVal($scope.selectedItem));                 // 16910
  }                                                                                                                    // 16911
                                                                                                                       // 16912
  /**                                                                                                                  // 16913
   * Use the user-defined expression to announce changes each time the search text is changed                          // 16914
   */                                                                                                                  // 16915
  function announceTextChange () {                                                                                     // 16916
    angular.isFunction($scope.textChange) && $scope.textChange();                                                      // 16917
  }                                                                                                                    // 16918
                                                                                                                       // 16919
  /**                                                                                                                  // 16920
   * Calls any external watchers listening for the selected item.  Used in conjunction with                            // 16921
   * `registerSelectedItemWatcher`.                                                                                    // 16922
   * @param selectedItem                                                                                               // 16923
   * @param previousSelectedItem                                                                                       // 16924
   */                                                                                                                  // 16925
  function handleSelectedItemChange (selectedItem, previousSelectedItem) {                                             // 16926
    selectedItemWatchers.forEach(function (watcher) { watcher(selectedItem, previousSelectedItem); });                 // 16927
  }                                                                                                                    // 16928
                                                                                                                       // 16929
  /**                                                                                                                  // 16930
   * Register a function to be called when the selected item changes.                                                  // 16931
   * @param cb                                                                                                         // 16932
   */                                                                                                                  // 16933
  function registerSelectedItemWatcher (cb) {                                                                          // 16934
    if (selectedItemWatchers.indexOf(cb) == -1) {                                                                      // 16935
      selectedItemWatchers.push(cb);                                                                                   // 16936
    }                                                                                                                  // 16937
  }                                                                                                                    // 16938
                                                                                                                       // 16939
  /**                                                                                                                  // 16940
   * Unregister a function previously registered for selected item changes.                                            // 16941
   * @param cb                                                                                                         // 16942
   */                                                                                                                  // 16943
  function unregisterSelectedItemWatcher (cb) {                                                                        // 16944
    var i = selectedItemWatchers.indexOf(cb);                                                                          // 16945
    if (i != -1) {                                                                                                     // 16946
      selectedItemWatchers.splice(i, 1);                                                                               // 16947
    }                                                                                                                  // 16948
  }                                                                                                                    // 16949
                                                                                                                       // 16950
  /**                                                                                                                  // 16951
   * Handles changes to the searchText property.                                                                       // 16952
   * @param searchText                                                                                                 // 16953
   * @param previousSearchText                                                                                         // 16954
   */                                                                                                                  // 16955
  function handleSearchText (searchText, previousSearchText) {                                                         // 16956
    ctrl.index = getDefaultIndex();                                                                                    // 16957
    // do nothing on init                                                                                              // 16958
    if (searchText === previousSearchText) return;                                                                     // 16959
                                                                                                                       // 16960
    getDisplayValue($scope.selectedItem).then(function (val) {                                                         // 16961
      // clear selected item if search text no longer matches it                                                       // 16962
      if (searchText !== val) {                                                                                        // 16963
        $scope.selectedItem = null;                                                                                    // 16964
                                                                                                                       // 16965
        // trigger change event if available                                                                           // 16966
        if (searchText !== previousSearchText) announceTextChange();                                                   // 16967
                                                                                                                       // 16968
        // cancel results if search text is not long enough                                                            // 16969
        if (!isMinLengthMet()) {                                                                                       // 16970
          ctrl.loading = false;                                                                                        // 16971
          ctrl.matches = [];                                                                                           // 16972
          ctrl.hidden  = shouldHide();                                                                                 // 16973
          updateMessages();                                                                                            // 16974
        } else {                                                                                                       // 16975
          handleQuery();                                                                                               // 16976
        }                                                                                                              // 16977
      }                                                                                                                // 16978
    });                                                                                                                // 16979
                                                                                                                       // 16980
  }                                                                                                                    // 16981
                                                                                                                       // 16982
  /**                                                                                                                  // 16983
   * Handles input blur event, determines if the dropdown should hide.                                                 // 16984
   */                                                                                                                  // 16985
  function blur () {                                                                                                   // 16986
    hasFocus = false;                                                                                                  // 16987
    if (!noBlur) ctrl.hidden = true;                                                                                   // 16988
  }                                                                                                                    // 16989
                                                                                                                       // 16990
  /**                                                                                                                  // 16991
   * Handles input focus event, determines if the dropdown should show.                                                // 16992
   */                                                                                                                  // 16993
  function focus () {                                                                                                  // 16994
    hasFocus = true;                                                                                                   // 16995
    //-- if searchText is null, let's force it to be a string                                                          // 16996
    if (!angular.isString($scope.searchText)) $scope.searchText = '';                                                  // 16997
    if ($scope.minLength > 0) return;                                                                                  // 16998
    ctrl.hidden = shouldHide();                                                                                        // 16999
    if (!ctrl.hidden) handleQuery();                                                                                   // 17000
  }                                                                                                                    // 17001
                                                                                                                       // 17002
  /**                                                                                                                  // 17003
   * Handles keyboard input.                                                                                           // 17004
   * @param event                                                                                                      // 17005
   */                                                                                                                  // 17006
  function keydown (event) {                                                                                           // 17007
    switch (event.keyCode) {                                                                                           // 17008
      case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                            // 17009
        if (ctrl.loading) return;                                                                                      // 17010
        event.stopPropagation();                                                                                       // 17011
        event.preventDefault();                                                                                        // 17012
        ctrl.index   = Math.min(ctrl.index + 1, ctrl.matches.length - 1);                                              // 17013
        updateScroll();                                                                                                // 17014
        updateMessages();                                                                                              // 17015
        break;                                                                                                         // 17016
      case $mdConstant.KEY_CODE.UP_ARROW:                                                                              // 17017
        if (ctrl.loading) return;                                                                                      // 17018
        event.stopPropagation();                                                                                       // 17019
        event.preventDefault();                                                                                        // 17020
        ctrl.index   = ctrl.index < 0 ? ctrl.matches.length - 1 : Math.max(0, ctrl.index - 1);                         // 17021
        updateScroll();                                                                                                // 17022
        updateMessages();                                                                                              // 17023
        break;                                                                                                         // 17024
      case $mdConstant.KEY_CODE.TAB:                                                                                   // 17025
      case $mdConstant.KEY_CODE.ENTER:                                                                                 // 17026
        if (ctrl.hidden || ctrl.loading || ctrl.index < 0 || ctrl.matches.length < 1) return;                          // 17027
        event.stopPropagation();                                                                                       // 17028
        event.preventDefault();                                                                                        // 17029
        select(ctrl.index);                                                                                            // 17030
        break;                                                                                                         // 17031
      case $mdConstant.KEY_CODE.ESCAPE:                                                                                // 17032
        event.stopPropagation();                                                                                       // 17033
        event.preventDefault();                                                                                        // 17034
        clearValue();                                                                                                  // 17035
        ctrl.matches = [];                                                                                             // 17036
        ctrl.hidden  = true;                                                                                           // 17037
        ctrl.index   = getDefaultIndex();                                                                              // 17038
        break;                                                                                                         // 17039
      default:                                                                                                         // 17040
    }                                                                                                                  // 17041
  }                                                                                                                    // 17042
                                                                                                                       // 17043
  //-- getters                                                                                                         // 17044
                                                                                                                       // 17045
  /**                                                                                                                  // 17046
   * Returns the minimum length needed to display the dropdown.                                                        // 17047
   * @returns {*}                                                                                                      // 17048
   */                                                                                                                  // 17049
  function getMinLength () {                                                                                           // 17050
    return angular.isNumber($scope.minLength) ? $scope.minLength : 1;                                                  // 17051
  }                                                                                                                    // 17052
                                                                                                                       // 17053
  /**                                                                                                                  // 17054
   * Returns the display value for an item.                                                                            // 17055
   * @param item                                                                                                       // 17056
   * @returns {*}                                                                                                      // 17057
   */                                                                                                                  // 17058
  function getDisplayValue (item) {                                                                                    // 17059
    return $q.when(getItemText(item) || item);                                                                         // 17060
                                                                                                                       // 17061
    /**                                                                                                                // 17062
     * Getter function to invoke user-defined expression (in the directive)                                            // 17063
     * to convert your object to a single string.                                                                      // 17064
     */                                                                                                                // 17065
    function getItemText (item) {                                                                                      // 17066
      return (item && $scope.itemText) ? $scope.itemText(getItemAsNameVal(item)) : null;                               // 17067
    }                                                                                                                  // 17068
  }                                                                                                                    // 17069
                                                                                                                       // 17070
  /**                                                                                                                  // 17071
   * Returns the locals object for compiling item templates.                                                           // 17072
   * @param item                                                                                                       // 17073
   * @returns {{}}                                                                                                     // 17074
   */                                                                                                                  // 17075
  function getItemAsNameVal (item) {                                                                                   // 17076
    if (!item) return undefined;                                                                                       // 17077
                                                                                                                       // 17078
    var locals = {};                                                                                                   // 17079
    if (ctrl.itemName) locals[ ctrl.itemName ] = item;                                                                 // 17080
                                                                                                                       // 17081
    return locals;                                                                                                     // 17082
  }                                                                                                                    // 17083
                                                                                                                       // 17084
  /**                                                                                                                  // 17085
   * Returns the default index based on whether or not autoselect is enabled.                                          // 17086
   * @returns {number}                                                                                                 // 17087
   */                                                                                                                  // 17088
  function getDefaultIndex () {                                                                                        // 17089
    return $scope.autoselect ? 0 : -1;                                                                                 // 17090
  }                                                                                                                    // 17091
                                                                                                                       // 17092
  /**                                                                                                                  // 17093
   * Determines if the menu should be hidden.                                                                          // 17094
   * @returns {boolean}                                                                                                // 17095
   */                                                                                                                  // 17096
  function shouldHide () {                                                                                             // 17097
    if (!isMinLengthMet() || !ctrl.matches.length) return true;                                                        // 17098
  }                                                                                                                    // 17099
                                                                                                                       // 17100
  /**                                                                                                                  // 17101
   * Returns the display value of the current item.                                                                    // 17102
   * @returns {*}                                                                                                      // 17103
   */                                                                                                                  // 17104
  function getCurrentDisplayValue () {                                                                                 // 17105
    return getDisplayValue(ctrl.matches[ ctrl.index ]);                                                                // 17106
  }                                                                                                                    // 17107
                                                                                                                       // 17108
  /**                                                                                                                  // 17109
   * Determines if the minimum length is met by the search text.                                                       // 17110
   * @returns {*}                                                                                                      // 17111
   */                                                                                                                  // 17112
  function isMinLengthMet () {                                                                                         // 17113
    return angular.isDefined($scope.searchText) && $scope.searchText.length >= getMinLength();                         // 17114
  }                                                                                                                    // 17115
                                                                                                                       // 17116
  //-- actions                                                                                                         // 17117
                                                                                                                       // 17118
  /**                                                                                                                  // 17119
   * Defines a public property with a handler and a default value.                                                     // 17120
   * @param key                                                                                                        // 17121
   * @param handler                                                                                                    // 17122
   * @param value                                                                                                      // 17123
   */                                                                                                                  // 17124
  function defineProperty (key, handler, value) {                                                                      // 17125
    Object.defineProperty(ctrl, key, {                                                                                 // 17126
      get: function () { return value; },                                                                              // 17127
      set: function (newValue) {                                                                                       // 17128
        var oldValue = value;                                                                                          // 17129
        value        = newValue;                                                                                       // 17130
        handler(newValue, oldValue);                                                                                   // 17131
      }                                                                                                                // 17132
    });                                                                                                                // 17133
  }                                                                                                                    // 17134
                                                                                                                       // 17135
  /**                                                                                                                  // 17136
   * Selects the item at the given index.                                                                              // 17137
   * @param index                                                                                                      // 17138
   */                                                                                                                  // 17139
  function select (index) {                                                                                            // 17140
    //-- force form to update state for validation                                                                     // 17141
    $mdUtil.nextTick(function () {                                                                                     // 17142
      getDisplayValue(ctrl.matches[ index ]).then(function (val) {                                                     // 17143
        var ngModel = elements.$.input.controller('ngModel');                                                          // 17144
        ngModel.$setViewValue(val);                                                                                    // 17145
        ngModel.$render();                                                                                             // 17146
      }).finally(function () {                                                                                         // 17147
        $scope.selectedItem = ctrl.matches[ index ];                                                                   // 17148
        ctrl.loading        = false;                                                                                   // 17149
        ctrl.hidden         = true;                                                                                    // 17150
        ctrl.index          = 0;                                                                                       // 17151
        ctrl.matches        = [];                                                                                      // 17152
      });                                                                                                              // 17153
    }, false);                                                                                                         // 17154
  }                                                                                                                    // 17155
                                                                                                                       // 17156
  /**                                                                                                                  // 17157
   * Clears the searchText value and selected item.                                                                    // 17158
   */                                                                                                                  // 17159
  function clearValue () {                                                                                             // 17160
    $scope.searchText = '';                                                                                            // 17161
    select(-1);                                                                                                        // 17162
                                                                                                                       // 17163
    // Per http://www.w3schools.com/jsref/event_oninput.asp                                                            // 17164
    var eventObj = document.createEvent('CustomEvent');                                                                // 17165
    eventObj.initCustomEvent('input', true, true, { value: $scope.searchText });                                       // 17166
    elements.input.dispatchEvent(eventObj);                                                                            // 17167
                                                                                                                       // 17168
    elements.input.focus();                                                                                            // 17169
  }                                                                                                                    // 17170
                                                                                                                       // 17171
  /**                                                                                                                  // 17172
   * Fetches the results for the provided search text.                                                                 // 17173
   * @param searchText                                                                                                 // 17174
   */                                                                                                                  // 17175
  function fetchResults (searchText) {                                                                                 // 17176
    var items = $scope.$parent.$eval(itemExpr),                                                                        // 17177
        term  = searchText.toLowerCase();                                                                              // 17178
    if (angular.isArray(items)) {                                                                                      // 17179
      handleResults(items);                                                                                            // 17180
    } else if (items) {                                                                                                // 17181
      $mdUtil.nextTick(function () {                                                                                   // 17182
        ctrl.loading = true;                                                                                           // 17183
        if (items.success) items.success(handleResults);                                                               // 17184
        if (items.then)    items.then(handleResults);                                                                  // 17185
        if (items.finally) items.finally(function () { ctrl.loading = false; });                                       // 17186
      },true, $scope);                                                                                                 // 17187
    }                                                                                                                  // 17188
    function handleResults (matches) {                                                                                 // 17189
      cache[ term ] = matches;                                                                                         // 17190
      if (searchText !== $scope.searchText) return; //-- just cache the results if old request                         // 17191
      ctrl.matches = matches;                                                                                          // 17192
      ctrl.hidden  = shouldHide();                                                                                     // 17193
      if ($scope.selectOnMatch) selectItemOnMatch();                                                                   // 17194
      updateMessages();                                                                                                // 17195
      positionDropdown();                                                                                              // 17196
    }                                                                                                                  // 17197
  }                                                                                                                    // 17198
                                                                                                                       // 17199
  /**                                                                                                                  // 17200
   * Updates the ARIA messages                                                                                         // 17201
   */                                                                                                                  // 17202
  function updateMessages () {                                                                                         // 17203
    getCurrentDisplayValue().then(function (msg) {                                                                     // 17204
      ctrl.messages = [ getCountMessage(), msg ];                                                                      // 17205
    });                                                                                                                // 17206
  }                                                                                                                    // 17207
                                                                                                                       // 17208
  /**                                                                                                                  // 17209
   * Returns the ARIA message for how many results match the current query.                                            // 17210
   * @returns {*}                                                                                                      // 17211
   */                                                                                                                  // 17212
  function getCountMessage () {                                                                                        // 17213
    if (lastCount === ctrl.matches.length) return '';                                                                  // 17214
    lastCount = ctrl.matches.length;                                                                                   // 17215
    switch (ctrl.matches.length) {                                                                                     // 17216
      case 0:                                                                                                          // 17217
        return 'There are no matches available.';                                                                      // 17218
      case 1:                                                                                                          // 17219
        return 'There is 1 match available.';                                                                          // 17220
      default:                                                                                                         // 17221
        return 'There are ' + ctrl.matches.length + ' matches available.';                                             // 17222
    }                                                                                                                  // 17223
  }                                                                                                                    // 17224
                                                                                                                       // 17225
  /**                                                                                                                  // 17226
   * Makes sure that the focused element is within view.                                                               // 17227
   */                                                                                                                  // 17228
  function updateScroll () {                                                                                           // 17229
    if (!elements.li[0]) return;                                                                                       // 17230
    var height = elements.li[0].offsetHeight,                                                                          // 17231
        top = height * ctrl.index,                                                                                     // 17232
        bot = top + height,                                                                                            // 17233
        hgt = elements.scroller.clientHeight,                                                                          // 17234
        scrollTop = elements.scroller.scrollTop;                                                                       // 17235
    if (top < scrollTop) {                                                                                             // 17236
      scrollTo(top);                                                                                                   // 17237
    } else if (bot > scrollTop + hgt) {                                                                                // 17238
      scrollTo(bot - hgt);                                                                                             // 17239
    }                                                                                                                  // 17240
  }                                                                                                                    // 17241
                                                                                                                       // 17242
  function scrollTo (offset) {                                                                                         // 17243
    elements.$.scrollContainer.controller('mdVirtualRepeatContainer').scrollTo(offset);                                // 17244
  }                                                                                                                    // 17245
                                                                                                                       // 17246
  function notFoundVisible () {                                                                                        // 17247
    return !ctrl.matches.length && !ctrl.loading && ctrl.scope.searchText && hasFocus && !ctrl.scope.selectedItem;     // 17248
  }                                                                                                                    // 17249
                                                                                                                       // 17250
  /**                                                                                                                  // 17251
   * Starts the query to gather the results for the current searchText.  Attempts to return cached                     // 17252
   * results first, then forwards the process to `fetchResults` if necessary.                                          // 17253
   */                                                                                                                  // 17254
  function handleQuery () {                                                                                            // 17255
    var searchText = $scope.searchText,                                                                                // 17256
        term       = searchText.toLowerCase();                                                                         // 17257
    //-- if results are cached, pull in cached results                                                                 // 17258
    if (!$scope.noCache && cache[ term ]) {                                                                            // 17259
      ctrl.matches = cache[ term ];                                                                                    // 17260
      updateMessages();                                                                                                // 17261
    } else {                                                                                                           // 17262
      fetchResults(searchText);                                                                                        // 17263
    }                                                                                                                  // 17264
    if (hasFocus) ctrl.hidden = shouldHide();                                                                          // 17265
  }                                                                                                                    // 17266
                                                                                                                       // 17267
  /**                                                                                                                  // 17268
   * If there is only one matching item and the search text matches its display value exactly,                         // 17269
   * automatically select that item.  Note: This function is only called if the user uses the                          // 17270
   * `md-select-on-match` flag.                                                                                        // 17271
   */                                                                                                                  // 17272
  function selectItemOnMatch () {                                                                                      // 17273
    var searchText = $scope.searchText,                                                                                // 17274
        matches    = ctrl.matches,                                                                                     // 17275
        item       = matches[ 0 ];                                                                                     // 17276
    if (matches.length === 1) getDisplayValue(item).then(function (displayValue) {                                     // 17277
      if (searchText == displayValue) select(0);                                                                       // 17278
    });                                                                                                                // 17279
  }                                                                                                                    // 17280
                                                                                                                       // 17281
}                                                                                                                      // 17282
MdAutocompleteCtrl.$inject = ["$scope", "$element", "$mdUtil", "$mdConstant", "$mdTheming", "$window", "$animate", "$rootElement", "$attrs", "$q"];
                                                                                                                       // 17284
})();                                                                                                                  // 17285
(function(){                                                                                                           // 17286
"use strict";                                                                                                          // 17287
                                                                                                                       // 17288
angular                                                                                                                // 17289
    .module('material.components.autocomplete')                                                                        // 17290
    .directive('mdAutocomplete', MdAutocomplete);                                                                      // 17291
                                                                                                                       // 17292
/**                                                                                                                    // 17293
 * @ngdoc directive                                                                                                    // 17294
 * @name mdAutocomplete                                                                                                // 17295
 * @module material.components.autocomplete                                                                            // 17296
 *                                                                                                                     // 17297
 * @description                                                                                                        // 17298
 * `<md-autocomplete>` is a special input component with a drop-down of all possible matches to a                      // 17299
 *     custom query. This component allows you to provide real-time suggestions as the user types                      // 17300
 *     in the input area.                                                                                              // 17301
 *                                                                                                                     // 17302
 * To start, you will need to specify the required parameters and provide a template for your                          // 17303
 *     results. The content inside `md-autocomplete` will be treated as a template.                                    // 17304
 *                                                                                                                     // 17305
 * In more complex cases, you may want to include other content such as a message to display when                      // 17306
 *     no matches were found.  You can do this by wrapping your template in `md-item-template` and                     // 17307
 *     adding a tag for `md-not-found`.  An example of this is shown below.                                            // 17308
 *                                                                                                                     // 17309
 * ### Validation                                                                                                      // 17310
 *                                                                                                                     // 17311
 * You can use `ng-messages` to include validation the same way that you would normally validate;                      // 17312
 *     however, if you want to replicate a standard input with a floating label, you will have to                      // 17313
 *     do the following:                                                                                               // 17314
 *                                                                                                                     // 17315
 * - Make sure that your template is wrapped in `md-item-template`                                                     // 17316
 * - Add your `ng-messages` code inside of `md-autocomplete`                                                           // 17317
 * - Add your validation properties to `md-autocomplete` (ie. `required`)                                              // 17318
 * - Add a `name` to `md-autocomplete` (to be used on the generated `input`)                                           // 17319
 *                                                                                                                     // 17320
 * There is an example below of how this should look.                                                                  // 17321
 *                                                                                                                     // 17322
 *                                                                                                                     // 17323
 * @param {expression} md-items An expression in the format of `item in items` to iterate over                         // 17324
 *     matches for your search.                                                                                        // 17325
 * @param {expression=} md-selected-item-change An expression to be run each time a new item is                        // 17326
 *     selected                                                                                                        // 17327
 * @param {expression=} md-search-text-change An expression to be run each time the search text                        // 17328
 *     updates                                                                                                         // 17329
 * @param {string=} md-search-text A model to bind the search query text to                                            // 17330
 * @param {object=} md-selected-item A model to bind the selected item to                                              // 17331
 * @param {string=} md-item-text An expression that will convert your object to a single string.                       // 17332
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                  // 17333
 * @param {boolean=} md-no-cache Disables the internal caching that happens in autocomplete                            // 17334
 * @param {boolean=} ng-disabled Determines whether or not to disable the input field                                  // 17335
 * @param {number=} md-min-length Specifies the minimum length of text before autocomplete will                        // 17336
 *     make suggestions                                                                                                // 17337
 * @param {number=} md-delay Specifies the amount of time (in milliseconds) to wait before looking                     // 17338
 *     for results                                                                                                     // 17339
 * @param {boolean=} md-autofocus If true, will immediately focus the input element                                    // 17340
 * @param {boolean=} md-autoselect If true, the first item will be selected by default                                 // 17341
 * @param {string=} md-menu-class This will be applied to the dropdown menu for styling                                // 17342
 * @param {string=} md-floating-label This will add a floating label to autocomplete and wrap it in                    // 17343
 *     `md-input-container`                                                                                            // 17344
 * @param {string=} md-input-name The name attribute given to the input element to be used with                        // 17345
 *     FormController                                                                                                  // 17346
 * @param {string=} md-input-id An ID to be added to the input element                                                 // 17347
 * @param {number=} md-input-minlength The minimum length for the input's value for validation                         // 17348
 * @param {number=} md-input-maxlength The maximum length for the input's value for validation                         // 17349
 * @param {boolean=} md-select-on-match When set, autocomplete will automatically select exact                         // 17350
 *     the item if the search text is an exact match                                                                   // 17351
 *                                                                                                                     // 17352
 * @usage                                                                                                              // 17353
 * ###Basic Example                                                                                                    // 17354
 * <hljs lang="html">                                                                                                  // 17355
 *   <md-autocomplete                                                                                                  // 17356
 *       md-selected-item="selectedItem"                                                                               // 17357
 *       md-search-text="searchText"                                                                                   // 17358
 *       md-items="item in getMatches(searchText)"                                                                     // 17359
 *       md-item-text="item.display">                                                                                  // 17360
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 17361
 *   </md-autocomplete>                                                                                                // 17362
 * </hljs>                                                                                                             // 17363
 *                                                                                                                     // 17364
 * ###Example with "not found" message                                                                                 // 17365
 * <hljs lang="html">                                                                                                  // 17366
 * <md-autocomplete                                                                                                    // 17367
 *     md-selected-item="selectedItem"                                                                                 // 17368
 *     md-search-text="searchText"                                                                                     // 17369
 *     md-items="item in getMatches(searchText)"                                                                       // 17370
 *     md-item-text="item.display">                                                                                    // 17371
 *   <md-item-template>                                                                                                // 17372
 *     <span md-highlight-text="searchText">{{item.display}}</span>                                                    // 17373
 *   </md-item-template>                                                                                               // 17374
 *   <md-not-found>                                                                                                    // 17375
 *     No matches found.                                                                                               // 17376
 *   </md-not-found>                                                                                                   // 17377
 * </md-autocomplete>                                                                                                  // 17378
 * </hljs>                                                                                                             // 17379
 *                                                                                                                     // 17380
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the                             // 17381
 *     different parts that make up our component.                                                                     // 17382
 *                                                                                                                     // 17383
 * ### Example with validation                                                                                         // 17384
 * <hljs lang="html">                                                                                                  // 17385
 * <form name="autocompleteForm">                                                                                      // 17386
 *   <md-autocomplete                                                                                                  // 17387
 *       required                                                                                                      // 17388
 *       md-input-name="autocomplete"                                                                                  // 17389
 *       md-selected-item="selectedItem"                                                                               // 17390
 *       md-search-text="searchText"                                                                                   // 17391
 *       md-items="item in getMatches(searchText)"                                                                     // 17392
 *       md-item-text="item.display">                                                                                  // 17393
 *     <md-item-template>                                                                                              // 17394
 *       <span md-highlight-text="searchText">{{item.display}}</span>                                                  // 17395
 *     </md-item-template>                                                                                             // 17396
 *     <div ng-messages="autocompleteForm.autocomplete.$error">                                                        // 17397
 *       <div ng-message="required">This field is required</div>                                                       // 17398
 *     </div>                                                                                                          // 17399
 *   </md-autocomplete>                                                                                                // 17400
 * </form>                                                                                                             // 17401
 * </hljs>                                                                                                             // 17402
 *                                                                                                                     // 17403
 * In this example, our code utilizes `md-item-template` and `md-not-found` to specify the                             // 17404
 *     different parts that make up our component.                                                                     // 17405
 */                                                                                                                    // 17406
                                                                                                                       // 17407
function MdAutocomplete () {                                                                                           // 17408
  return {                                                                                                             // 17409
    controller:   'MdAutocompleteCtrl',                                                                                // 17410
    controllerAs: '$mdAutocompleteCtrl',                                                                               // 17411
    scope:        {                                                                                                    // 17412
      inputName:      '@mdInputName',                                                                                  // 17413
      inputMinlength: '@mdInputMinlength',                                                                             // 17414
      inputMaxlength: '@mdInputMaxlength',                                                                             // 17415
      searchText:     '=?mdSearchText',                                                                                // 17416
      selectedItem:   '=?mdSelectedItem',                                                                              // 17417
      itemsExpr:      '@mdItems',                                                                                      // 17418
      itemText:       '&mdItemText',                                                                                   // 17419
      placeholder:    '@placeholder',                                                                                  // 17420
      noCache:        '=?mdNoCache',                                                                                   // 17421
      selectOnMatch:  '=?mdSelectOnMatch',                                                                             // 17422
      itemChange:     '&?mdSelectedItemChange',                                                                        // 17423
      textChange:     '&?mdSearchTextChange',                                                                          // 17424
      minLength:      '=?mdMinLength',                                                                                 // 17425
      delay:          '=?mdDelay',                                                                                     // 17426
      autofocus:      '=?mdAutofocus',                                                                                 // 17427
      floatingLabel:  '@?mdFloatingLabel',                                                                             // 17428
      autoselect:     '=?mdAutoselect',                                                                                // 17429
      menuClass:      '@?mdMenuClass',                                                                                 // 17430
      inputId:        '@?mdInputId'                                                                                    // 17431
    },                                                                                                                 // 17432
    template:     function (element, attr) {                                                                           // 17433
      var noItemsTemplate = getNoItemsTemplate(),                                                                      // 17434
          itemTemplate    = getItemTemplate(),                                                                         // 17435
          leftover        = element.html();                                                                            // 17436
      return '\
        <md-autocomplete-wrap\
            layout="row"\
            ng-class="{ \'md-whiteframe-z1\': !floatingLabel, \'md-menu-showing\': !$mdAutocompleteCtrl.hidden }"\
            role="listbox">\
          ' + getInputElement() + '\
          <md-progress-linear\
              ng-if="$mdAutocompleteCtrl.loading && !$mdAutocompleteCtrl.hidden"\
              md-mode="indeterminate"></md-progress-linear>\
          <md-virtual-repeat-container\
              md-auto-shrink\
              md-auto-shrink-min="1"\
              ng-hide="$mdAutocompleteCtrl.hidden && !$mdAutocompleteCtrl.notFoundVisible()"\
              class="md-autocomplete-suggestions-container md-whiteframe-z1"\
              role="presentation">\
            <ul class="md-autocomplete-suggestions"\
                ng-class="::menuClass"\
                id="ul-{{$mdAutocompleteCtrl.id}}"\
                ng-mouseenter="$mdAutocompleteCtrl.listEnter()"\
                ng-mouseleave="$mdAutocompleteCtrl.listLeave()"\
                ng-mouseup="$mdAutocompleteCtrl.mouseUp()">\
              <li md-virtual-repeat="item in $mdAutocompleteCtrl.matches"\
                  ng-class="{ selected: $index === $mdAutocompleteCtrl.index }"\
                  ng-click="$mdAutocompleteCtrl.select($index)"\
                  md-extra-name="$mdAutocompleteCtrl.itemName">\
                  ' + itemTemplate + '\
                  </li>' + noItemsTemplate + '\
            </ul>\
          </md-virtual-repeat-container>\
        </md-autocomplete-wrap>\
        <aria-status\
            class="md-visually-hidden"\
            role="status"\
            aria-live="assertive">\
          <p ng-repeat="message in $mdAutocompleteCtrl.messages track by $index" ng-if="message">{{message}}</p>\
        </aria-status>';                                                                                               // 17472
                                                                                                                       // 17473
      function getItemTemplate() {                                                                                     // 17474
        var templateTag = element.find('md-item-template').detach(),                                                   // 17475
            html = templateTag.length ? templateTag.html() : element.html();                                           // 17476
        if (!templateTag.length) element.empty();                                                                      // 17477
        return '<md-autocomplete-parent-scope md-autocomplete-replace>' + html + '</md-autocomplete-parent-scope>';    // 17478
      }                                                                                                                // 17479
                                                                                                                       // 17480
      function getNoItemsTemplate() {                                                                                  // 17481
        var templateTag = element.find('md-not-found').detach(),                                                       // 17482
            template = templateTag.length ? templateTag.html() : '';                                                   // 17483
        return template                                                                                                // 17484
            ? '<li ng-if="$mdAutocompleteCtrl.notFoundVisible()"\
                         md-autocomplete-parent-scope>' + template + '</li>'                                           // 17486
            : '';                                                                                                      // 17487
                                                                                                                       // 17488
      }                                                                                                                // 17489
                                                                                                                       // 17490
      function getInputElement () {                                                                                    // 17491
        if (attr.mdFloatingLabel) {                                                                                    // 17492
          return '\
            <md-input-container flex ng-if="floatingLabel">\
              <label>{{floatingLabel}}</label>\
              <input type="search"\
                  id="{{ inputId || \'fl-input-\' + $mdAutocompleteCtrl.id }}"\
                  name="{{inputName}}"\
                  autocomplete="off"\
                  ng-required="$mdAutocompleteCtrl.isRequired"\
                  ng-minlength="inputMinlength"\
                  ng-maxlength="inputMaxlength"\
                  ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                  ng-model="$mdAutocompleteCtrl.scope.searchText"\
                  ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                  ng-blur="$mdAutocompleteCtrl.blur()"\
                  ng-focus="$mdAutocompleteCtrl.focus()"\
                  aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                  aria-label="{{floatingLabel}}"\
                  aria-autocomplete="list"\
                  aria-haspopup="true"\
                  aria-activedescendant=""\
                  aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
              <div md-autocomplete-parent-scope md-autocomplete-replace>' + leftover + '</div>\
            </md-input-container>';                                                                                    // 17515
        } else {                                                                                                       // 17516
          return '\
            <input flex type="search"\
                id="{{ inputId || \'input-\' + $mdAutocompleteCtrl.id }}"\
                name="{{inputName}}"\
                ng-if="!floatingLabel"\
                autocomplete="off"\
                ng-required="$mdAutocompleteCtrl.isRequired"\
                ng-disabled="$mdAutocompleteCtrl.isDisabled"\
                ng-model="$mdAutocompleteCtrl.scope.searchText"\
                ng-keydown="$mdAutocompleteCtrl.keydown($event)"\
                ng-blur="$mdAutocompleteCtrl.blur()"\
                ng-focus="$mdAutocompleteCtrl.focus()"\
                placeholder="{{placeholder}}"\
                aria-owns="ul-{{$mdAutocompleteCtrl.id}}"\
                aria-label="{{placeholder}}"\
                aria-autocomplete="list"\
                aria-haspopup="true"\
                aria-activedescendant=""\
                aria-expanded="{{!$mdAutocompleteCtrl.hidden}}"/>\
            <button\
                type="button"\
                tabindex="-1"\
                ng-if="$mdAutocompleteCtrl.scope.searchText && !$mdAutocompleteCtrl.isDisabled"\
                ng-click="$mdAutocompleteCtrl.clear()">\
              <md-icon md-svg-icon="md-close"></md-icon>\
              <span class="md-visually-hidden">Clear</span>\
            </button>\
                ';                                                                                                     // 17544
        }                                                                                                              // 17545
      }                                                                                                                // 17546
    }                                                                                                                  // 17547
  };                                                                                                                   // 17548
}                                                                                                                      // 17549
                                                                                                                       // 17550
})();                                                                                                                  // 17551
(function(){                                                                                                           // 17552
"use strict";                                                                                                          // 17553
                                                                                                                       // 17554
angular                                                                                                                // 17555
  .module('material.components.autocomplete')                                                                          // 17556
  .directive('mdAutocompleteParentScope', MdAutocompleteItemScopeDirective);                                           // 17557
                                                                                                                       // 17558
function MdAutocompleteItemScopeDirective($compile, $mdUtil) {                                                         // 17559
  return {                                                                                                             // 17560
    restrict: 'AE',                                                                                                    // 17561
    link: postLink,                                                                                                    // 17562
    terminal: true                                                                                                     // 17563
  };                                                                                                                   // 17564
                                                                                                                       // 17565
  function postLink(scope, element, attr) {                                                                            // 17566
    var ctrl = scope.$mdAutocompleteCtrl;                                                                              // 17567
    var newScope = ctrl.parent.$new();                                                                                 // 17568
    var itemName = ctrl.itemName;                                                                                      // 17569
                                                                                                                       // 17570
    // Watch for changes to our scope's variables and copy them to the new scope                                       // 17571
    watchVariable('$index', '$index');                                                                                 // 17572
    watchVariable('item', itemName);                                                                                   // 17573
                                                                                                                       // 17574
    // Recompile the contents with the new/modified scope                                                              // 17575
    $compile(element.contents())(newScope);                                                                            // 17576
                                                                                                                       // 17577
    // Replace it if required                                                                                          // 17578
    if (attr.hasOwnProperty('mdAutocompleteReplace')) {                                                                // 17579
      element.after(element.contents());                                                                               // 17580
      element.remove();                                                                                                // 17581
    }                                                                                                                  // 17582
                                                                                                                       // 17583
    /**                                                                                                                // 17584
     * Creates a watcher for variables that are copied from the parent scope                                           // 17585
     * @param variable                                                                                                 // 17586
     * @param alias                                                                                                    // 17587
     */                                                                                                                // 17588
    function watchVariable(variable, alias) {                                                                          // 17589
      newScope[alias] = scope[variable];                                                                               // 17590
                                                                                                                       // 17591
      scope.$watch(variable, function(value) {                                                                         // 17592
        $mdUtil.nextTick(function() {                                                                                  // 17593
          newScope[alias] = value;                                                                                     // 17594
        });                                                                                                            // 17595
      });                                                                                                              // 17596
    }                                                                                                                  // 17597
  }                                                                                                                    // 17598
}                                                                                                                      // 17599
MdAutocompleteItemScopeDirective.$inject = ["$compile", "$mdUtil"];                                                    // 17600
})();                                                                                                                  // 17601
(function(){                                                                                                           // 17602
"use strict";                                                                                                          // 17603
                                                                                                                       // 17604
angular                                                                                                                // 17605
    .module('material.components.autocomplete')                                                                        // 17606
    .controller('MdHighlightCtrl', MdHighlightCtrl);                                                                   // 17607
                                                                                                                       // 17608
function MdHighlightCtrl ($scope, $element, $attrs) {                                                                  // 17609
  this.init = init;                                                                                                    // 17610
                                                                                                                       // 17611
  function init (termExpr, unsafeTextExpr) {                                                                           // 17612
    var text = null,                                                                                                   // 17613
        regex = null,                                                                                                  // 17614
        flags = $attrs.mdHighlightFlags || '',                                                                         // 17615
        watcher = $scope.$watch(function($scope) {                                                                     // 17616
          return {                                                                                                     // 17617
            term: termExpr($scope),                                                                                    // 17618
            unsafeText: unsafeTextExpr($scope)                                                                         // 17619
          };                                                                                                           // 17620
        }, function (state, prevState) {                                                                               // 17621
          if (text === null || state.unsafeText !== prevState.unsafeText) {                                            // 17622
            text = angular.element('<div>').text(state.unsafeText).html()                                              // 17623
          }                                                                                                            // 17624
          if (regex === null || state.term !== prevState.term) {                                                       // 17625
            regex = getRegExp(state.term, flags);                                                                      // 17626
          }                                                                                                            // 17627
                                                                                                                       // 17628
          $element.html(text.replace(regex, '<span class="highlight">$&</span>'));                                     // 17629
        }, true);                                                                                                      // 17630
    $element.on('$destroy', function () { watcher(); });                                                               // 17631
  }                                                                                                                    // 17632
                                                                                                                       // 17633
  function sanitize (term) {                                                                                           // 17634
    return term && term.replace(/[\\\^\$\*\+\?\.\(\)\|\{}\[\]]/g, '\\$&');                                             // 17635
  }                                                                                                                    // 17636
                                                                                                                       // 17637
  function getRegExp (text, flags) {                                                                                   // 17638
    var str = '';                                                                                                      // 17639
    if (flags.indexOf('^') >= 1) str += '^';                                                                           // 17640
    str += text;                                                                                                       // 17641
    if (flags.indexOf('$') >= 1) str += '$';                                                                           // 17642
    return new RegExp(sanitize(str), flags.replace(/[\$\^]/g, ''));                                                    // 17643
  }                                                                                                                    // 17644
}                                                                                                                      // 17645
MdHighlightCtrl.$inject = ["$scope", "$element", "$attrs"];                                                            // 17646
                                                                                                                       // 17647
})();                                                                                                                  // 17648
(function(){                                                                                                           // 17649
"use strict";                                                                                                          // 17650
                                                                                                                       // 17651
angular                                                                                                                // 17652
    .module('material.components.autocomplete')                                                                        // 17653
    .directive('mdHighlightText', MdHighlight);                                                                        // 17654
                                                                                                                       // 17655
/**                                                                                                                    // 17656
 * @ngdoc directive                                                                                                    // 17657
 * @name mdHighlightText                                                                                               // 17658
 * @module material.components.autocomplete                                                                            // 17659
 *                                                                                                                     // 17660
 * @description                                                                                                        // 17661
 * The `md-highlight-text` directive allows you to specify text that should be highlighted within                      // 17662
 *     an element.  Highlighted text will be wrapped in `<span class="highlight"></span>` which can                    // 17663
 *     be styled through CSS.  Please note that child elements may not be used with this directive.                    // 17664
 *                                                                                                                     // 17665
 * @param {string} md-highlight-text A model to be searched for                                                        // 17666
 * @param {string=} md-highlight-flags A list of flags (loosely based on JavaScript RexExp flags).                     // 17667
 *     #### **Supported flags**:                                                                                       // 17668
 *     - `g`: Find all matches within the provided text                                                                // 17669
 *     - `i`: Ignore case when searching for matches                                                                   // 17670
 *     - `$`: Only match if the text ends with the search term                                                         // 17671
 *     - `^`: Only match if the text begins with the search term                                                       // 17672
 *                                                                                                                     // 17673
 * @usage                                                                                                              // 17674
 * <hljs lang="html">                                                                                                  // 17675
 * <input placeholder="Enter a search term..." ng-model="searchTerm" type="text" />                                    // 17676
 * <ul>                                                                                                                // 17677
 *   <li ng-repeat="result in results" md-highlight-text="searchTerm">                                                 // 17678
 *     {{result.text}}                                                                                                 // 17679
 *   </li>                                                                                                             // 17680
 * </ul>                                                                                                               // 17681
 * </hljs>                                                                                                             // 17682
 */                                                                                                                    // 17683
                                                                                                                       // 17684
function MdHighlight ($interpolate, $parse) {                                                                          // 17685
  return {                                                                                                             // 17686
    terminal: true,                                                                                                    // 17687
    controller: 'MdHighlightCtrl',                                                                                     // 17688
    compile: function mdHighlightCompile(tElement, tAttr) {                                                            // 17689
      var termExpr = $parse(tAttr.mdHighlightText);                                                                    // 17690
      var unsafeTextExpr = $interpolate(tElement.html());                                                              // 17691
                                                                                                                       // 17692
      return function mdHighlightLink(scope, element, attr, ctrl) {                                                    // 17693
        ctrl.init(termExpr, unsafeTextExpr);                                                                           // 17694
      };                                                                                                               // 17695
    }                                                                                                                  // 17696
  };                                                                                                                   // 17697
}                                                                                                                      // 17698
MdHighlight.$inject = ["$interpolate", "$parse"];                                                                      // 17699
                                                                                                                       // 17700
})();                                                                                                                  // 17701
(function(){                                                                                                           // 17702
"use strict";                                                                                                          // 17703
                                                                                                                       // 17704
angular                                                                                                                // 17705
    .module('material.components.chips')                                                                               // 17706
    .directive('mdChip', MdChip);                                                                                      // 17707
                                                                                                                       // 17708
/**                                                                                                                    // 17709
 * @ngdoc directive                                                                                                    // 17710
 * @name mdChip                                                                                                        // 17711
 * @module material.components.chips                                                                                   // 17712
 *                                                                                                                     // 17713
 * @description                                                                                                        // 17714
 * `<md-chip>` is a component used within `<md-chips>` and is responsible for rendering individual                     // 17715
 * chips.                                                                                                              // 17716
 *                                                                                                                     // 17717
 *                                                                                                                     // 17718
 * @usage                                                                                                              // 17719
 * <hljs lang="html">                                                                                                  // 17720
 *   <md-chip>{{$chip}}</md-chip>                                                                                      // 17721
 * </hljs>                                                                                                             // 17722
 *                                                                                                                     // 17723
 */                                                                                                                    // 17724
                                                                                                                       // 17725
// This hint text is hidden within a chip but used by screen readers to                                                // 17726
// inform the user how they can interact with a chip.                                                                  // 17727
var DELETE_HINT_TEMPLATE = '\
    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">\
      {{$mdChipsCtrl.deleteHint}}\
    </span>';                                                                                                          // 17731
                                                                                                                       // 17732
/**                                                                                                                    // 17733
 * MDChip Directive Definition                                                                                         // 17734
 *                                                                                                                     // 17735
 * @param $mdTheming                                                                                                   // 17736
 * @param $mdInkRipple                                                                                                 // 17737
 * @ngInject                                                                                                           // 17738
 */                                                                                                                    // 17739
function MdChip($mdTheming, $mdUtil) {                                                                                 // 17740
  var hintTemplate = $mdUtil.processTemplate(DELETE_HINT_TEMPLATE);                                                    // 17741
                                                                                                                       // 17742
  return {                                                                                                             // 17743
    restrict: 'E',                                                                                                     // 17744
    require: '^?mdChips',                                                                                              // 17745
    compile:  compile                                                                                                  // 17746
  };                                                                                                                   // 17747
                                                                                                                       // 17748
  function compile(element, attr) {                                                                                    // 17749
    // Append the delete template                                                                                      // 17750
    element.append($mdUtil.processTemplate(hintTemplate));                                                             // 17751
                                                                                                                       // 17752
    return function postLink(scope, element, attr, ctrl) {                                                             // 17753
      element.addClass('md-chip');                                                                                     // 17754
      $mdTheming(element);                                                                                             // 17755
                                                                                                                       // 17756
      if (ctrl) angular.element(element[0].querySelector('.md-chip-content'))                                          // 17757
          .on('blur', function () {                                                                                    // 17758
            ctrl.selectedChip = -1;                                                                                    // 17759
          });                                                                                                          // 17760
    };                                                                                                                 // 17761
  }                                                                                                                    // 17762
}                                                                                                                      // 17763
MdChip.$inject = ["$mdTheming", "$mdUtil"];                                                                            // 17764
                                                                                                                       // 17765
})();                                                                                                                  // 17766
(function(){                                                                                                           // 17767
"use strict";                                                                                                          // 17768
                                                                                                                       // 17769
angular                                                                                                                // 17770
    .module('material.components.chips')                                                                               // 17771
    .directive('mdChipRemove', MdChipRemove);                                                                          // 17772
                                                                                                                       // 17773
/**                                                                                                                    // 17774
 * @ngdoc directive                                                                                                    // 17775
 * @name mdChipRemove                                                                                                  // 17776
 * @module material.components.chips                                                                                   // 17777
 *                                                                                                                     // 17778
 * @description                                                                                                        // 17779
 * `<md-chip-remove>`                                                                                                  // 17780
 * Designates an element to be used as the delete button for a chip. This                                              // 17781
 * element is passed as a child of the `md-chips` element.                                                             // 17782
 *                                                                                                                     // 17783
 * @usage                                                                                                              // 17784
 * <hljs lang="html">                                                                                                  // 17785
 *   <md-chips><button md-chip-remove>DEL</button></md-chips>                                                          // 17786
 * </hljs>                                                                                                             // 17787
 */                                                                                                                    // 17788
                                                                                                                       // 17789
                                                                                                                       // 17790
/**                                                                                                                    // 17791
 * MdChipRemove Directive Definition.                                                                                  // 17792
 *                                                                                                                     // 17793
 * @param $compile                                                                                                     // 17794
 * @param $timeout                                                                                                     // 17795
 * @returns {{restrict: string, require: string[], link: Function, scope: boolean}}                                    // 17796
 * @constructor                                                                                                        // 17797
 */                                                                                                                    // 17798
function MdChipRemove ($timeout) {                                                                                     // 17799
  return {                                                                                                             // 17800
    restrict: 'A',                                                                                                     // 17801
    require: '^mdChips',                                                                                               // 17802
    scope: false,                                                                                                      // 17803
    link: postLink                                                                                                     // 17804
  };                                                                                                                   // 17805
                                                                                                                       // 17806
  function postLink(scope, element, attr, ctrl) {                                                                      // 17807
    element.on('click', function(event) {                                                                              // 17808
      scope.$apply(function() {                                                                                        // 17809
        ctrl.removeChip(scope.$$replacedScope.$index);                                                                 // 17810
      });                                                                                                              // 17811
    });                                                                                                                // 17812
                                                                                                                       // 17813
    // Child elements aren't available until after a $timeout tick as they are hidden by an                            // 17814
    // `ng-if`. see http://goo.gl/zIWfuw                                                                               // 17815
    $timeout(function() {                                                                                              // 17816
      element.attr({ tabindex: -1, ariaHidden: true });                                                                // 17817
      element.find('button').attr('tabindex', '-1');                                                                   // 17818
    });                                                                                                                // 17819
  }                                                                                                                    // 17820
}                                                                                                                      // 17821
MdChipRemove.$inject = ["$timeout"];                                                                                   // 17822
                                                                                                                       // 17823
})();                                                                                                                  // 17824
(function(){                                                                                                           // 17825
"use strict";                                                                                                          // 17826
                                                                                                                       // 17827
angular                                                                                                                // 17828
    .module('material.components.chips')                                                                               // 17829
    .directive('mdChipTransclude', MdChipTransclude);                                                                  // 17830
                                                                                                                       // 17831
function MdChipTransclude ($compile) {                                                                                 // 17832
  return {                                                                                                             // 17833
    restrict: 'EA',                                                                                                    // 17834
    terminal: true,                                                                                                    // 17835
    link: link,                                                                                                        // 17836
    scope: false                                                                                                       // 17837
  };                                                                                                                   // 17838
  function link (scope, element, attr) {                                                                               // 17839
    var ctrl = scope.$parent.$mdChipsCtrl,                                                                             // 17840
        newScope = ctrl.parent.$new(false, ctrl.parent);                                                               // 17841
    newScope.$$replacedScope = scope;                                                                                  // 17842
    newScope.$chip = scope.$chip;                                                                                      // 17843
    newScope.$index = scope.$index;                                                                                    // 17844
    newScope.$mdChipsCtrl = ctrl;                                                                                      // 17845
                                                                                                                       // 17846
    var newHtml = ctrl.$scope.$eval(attr.mdChipTransclude);                                                            // 17847
                                                                                                                       // 17848
    element.html(newHtml);                                                                                             // 17849
    $compile(element.contents())(newScope);                                                                            // 17850
  }                                                                                                                    // 17851
}                                                                                                                      // 17852
MdChipTransclude.$inject = ["$compile"];                                                                               // 17853
                                                                                                                       // 17854
})();                                                                                                                  // 17855
(function(){                                                                                                           // 17856
"use strict";                                                                                                          // 17857
                                                                                                                       // 17858
angular                                                                                                                // 17859
    .module('material.components.chips')                                                                               // 17860
    .controller('MdChipsCtrl', MdChipsCtrl);                                                                           // 17861
                                                                                                                       // 17862
/**                                                                                                                    // 17863
 * Controller for the MdChips component. Responsible for adding to and                                                 // 17864
 * removing from the list of chips, marking chips as selected, and binding to                                          // 17865
 * the models of various input components.                                                                             // 17866
 *                                                                                                                     // 17867
 * @param $scope                                                                                                       // 17868
 * @param $mdConstant                                                                                                  // 17869
 * @param $log                                                                                                         // 17870
 * @param $element                                                                                                     // 17871
 * @constructor                                                                                                        // 17872
 */                                                                                                                    // 17873
function MdChipsCtrl ($scope, $mdConstant, $log, $element, $timeout) {                                                 // 17874
  /** @type {$timeout} **/                                                                                             // 17875
  this.$timeout = $timeout;                                                                                            // 17876
                                                                                                                       // 17877
  /** @type {Object} */                                                                                                // 17878
  this.$mdConstant = $mdConstant;                                                                                      // 17879
                                                                                                                       // 17880
  /** @type {angular.$scope} */                                                                                        // 17881
  this.$scope = $scope;                                                                                                // 17882
                                                                                                                       // 17883
  /** @type {angular.$scope} */                                                                                        // 17884
  this.parent = $scope.$parent;                                                                                        // 17885
                                                                                                                       // 17886
  /** @type {$log} */                                                                                                  // 17887
  this.$log = $log;                                                                                                    // 17888
                                                                                                                       // 17889
  /** @type {$element} */                                                                                              // 17890
  this.$element = $element;                                                                                            // 17891
                                                                                                                       // 17892
  /** @type {angular.NgModelController} */                                                                             // 17893
  this.ngModelCtrl = null;                                                                                             // 17894
                                                                                                                       // 17895
  /** @type {angular.NgModelController} */                                                                             // 17896
  this.userInputNgModelCtrl = null;                                                                                    // 17897
                                                                                                                       // 17898
  /** @type {Element} */                                                                                               // 17899
  this.userInputElement = null;                                                                                        // 17900
                                                                                                                       // 17901
  /** @type {Array.<Object>} */                                                                                        // 17902
  this.items = [];                                                                                                     // 17903
                                                                                                                       // 17904
  /** @type {number} */                                                                                                // 17905
  this.selectedChip = -1;                                                                                              // 17906
                                                                                                                       // 17907
  /** @type {boolean} */                                                                                               // 17908
  this.hasAutocomplete = false;                                                                                        // 17909
                                                                                                                       // 17910
                                                                                                                       // 17911
  /**                                                                                                                  // 17912
   * Hidden hint text for how to delete a chip. Used to give context to screen readers.                                // 17913
   * @type {string}                                                                                                    // 17914
   */                                                                                                                  // 17915
  this.deleteHint = 'Press delete to remove this chip.';                                                               // 17916
                                                                                                                       // 17917
  /**                                                                                                                  // 17918
   * Hidden label for the delete button. Used to give context to screen readers.                                       // 17919
   * @type {string}                                                                                                    // 17920
   */                                                                                                                  // 17921
  this.deleteButtonLabel = 'Remove';                                                                                   // 17922
                                                                                                                       // 17923
  /**                                                                                                                  // 17924
   * Model used by the input element.                                                                                  // 17925
   * @type {string}                                                                                                    // 17926
   */                                                                                                                  // 17927
  this.chipBuffer = '';                                                                                                // 17928
                                                                                                                       // 17929
  /**                                                                                                                  // 17930
   * Whether to use the onAppend expression to transform the chip buffer                                               // 17931
   * before appending it to the list.                                                                                  // 17932
   * @type {boolean}                                                                                                   // 17933
   */                                                                                                                  // 17934
  this.useOnAppend = false;                                                                                            // 17935
                                                                                                                       // 17936
  /**                                                                                                                  // 17937
   * Whether to use the onSelect expression to notify the component's user                                             // 17938
   * after selecting a chip from the list.                                                                             // 17939
   * @type {boolean}                                                                                                   // 17940
   */                                                                                                                  // 17941
  this.useOnSelect = false;                                                                                            // 17942
}                                                                                                                      // 17943
MdChipsCtrl.$inject = ["$scope", "$mdConstant", "$log", "$element", "$timeout"];                                       // 17944
                                                                                                                       // 17945
/**                                                                                                                    // 17946
 * Handles the keydown event on the input element: <enter> appends the                                                 // 17947
 * buffer to the chip list, while backspace removes the last chip in the list                                          // 17948
 * if the current buffer is empty.                                                                                     // 17949
 * @param event                                                                                                        // 17950
 */                                                                                                                    // 17951
MdChipsCtrl.prototype.inputKeydown = function(event) {                                                                 // 17952
  var chipBuffer = this.getChipBuffer();                                                                               // 17953
                                                                                                                       // 17954
  switch (event.keyCode) {                                                                                             // 17955
    case this.$mdConstant.KEY_CODE.ENTER:                                                                              // 17956
      if ((this.hasAutocomplete && this.requireMatch) || !chipBuffer) break;                                           // 17957
      event.preventDefault();                                                                                          // 17958
      this.appendChip(chipBuffer);                                                                                     // 17959
      this.resetChipBuffer();                                                                                          // 17960
      break;                                                                                                           // 17961
    case this.$mdConstant.KEY_CODE.BACKSPACE:                                                                          // 17962
      if (chipBuffer) break;                                                                                           // 17963
      event.preventDefault();                                                                                          // 17964
      event.stopPropagation();                                                                                         // 17965
      if (this.items.length) this.selectAndFocusChipSafe(this.items.length - 1);                                       // 17966
      break;                                                                                                           // 17967
  }                                                                                                                    // 17968
};                                                                                                                     // 17969
                                                                                                                       // 17970
/**                                                                                                                    // 17971
 * Handles the keydown event on the chip elements: backspace removes the selected chip, arrow                          // 17972
 * keys switch which chips is active                                                                                   // 17973
 * @param event                                                                                                        // 17974
 */                                                                                                                    // 17975
MdChipsCtrl.prototype.chipKeydown = function (event) {                                                                 // 17976
  if (this.getChipBuffer()) return;                                                                                    // 17977
  switch (event.keyCode) {                                                                                             // 17978
    case this.$mdConstant.KEY_CODE.BACKSPACE:                                                                          // 17979
    case this.$mdConstant.KEY_CODE.DELETE:                                                                             // 17980
      if (this.selectedChip < 0) return;                                                                               // 17981
      event.preventDefault();                                                                                          // 17982
      this.removeAndSelectAdjacentChip(this.selectedChip);                                                             // 17983
      break;                                                                                                           // 17984
    case this.$mdConstant.KEY_CODE.LEFT_ARROW:                                                                         // 17985
      event.preventDefault();                                                                                          // 17986
      if (this.selectedChip < 0) this.selectedChip = this.items.length;                                                // 17987
      if (this.items.length) this.selectAndFocusChipSafe(this.selectedChip - 1);                                       // 17988
      break;                                                                                                           // 17989
    case this.$mdConstant.KEY_CODE.RIGHT_ARROW:                                                                        // 17990
      event.preventDefault();                                                                                          // 17991
      this.selectAndFocusChipSafe(this.selectedChip + 1);                                                              // 17992
      break;                                                                                                           // 17993
    case this.$mdConstant.KEY_CODE.ESCAPE:                                                                             // 17994
    case this.$mdConstant.KEY_CODE.TAB:                                                                                // 17995
      if (this.selectedChip < 0) return;                                                                               // 17996
      event.preventDefault();                                                                                          // 17997
      this.onFocus();                                                                                                  // 17998
      break;                                                                                                           // 17999
  }                                                                                                                    // 18000
};                                                                                                                     // 18001
                                                                                                                       // 18002
/**                                                                                                                    // 18003
 * Get the input's placeholder - uses `placeholder` when list is empty and `secondary-placeholder`                     // 18004
 * when the list is non-empty. If `secondary-placeholder` is not provided, `placeholder` is used                       // 18005
 * always.                                                                                                             // 18006
 */                                                                                                                    // 18007
MdChipsCtrl.prototype.getPlaceholder = function() {                                                                    // 18008
  // Allow `secondary-placeholder` to be blank.                                                                        // 18009
  var useSecondary = (this.items.length &&                                                                             // 18010
      (this.secondaryPlaceholder == '' || this.secondaryPlaceholder));                                                 // 18011
  return useSecondary ? this.placeholder : this.secondaryPlaceholder;                                                  // 18012
};                                                                                                                     // 18013
                                                                                                                       // 18014
/**                                                                                                                    // 18015
 * Removes chip at {@code index} and selects the adjacent chip.                                                        // 18016
 * @param index                                                                                                        // 18017
 */                                                                                                                    // 18018
MdChipsCtrl.prototype.removeAndSelectAdjacentChip = function(index) {                                                  // 18019
  var selIndex = this.getAdjacentChipIndex(index);                                                                     // 18020
  this.removeChip(index);                                                                                              // 18021
  this.$timeout(angular.bind(this, function () {                                                                       // 18022
      this.selectAndFocusChipSafe(selIndex);                                                                           // 18023
  }));                                                                                                                 // 18024
};                                                                                                                     // 18025
                                                                                                                       // 18026
/**                                                                                                                    // 18027
 * Sets the selected chip index to -1.                                                                                 // 18028
 */                                                                                                                    // 18029
MdChipsCtrl.prototype.resetSelectedChip = function() {                                                                 // 18030
  this.selectedChip = -1;                                                                                              // 18031
};                                                                                                                     // 18032
                                                                                                                       // 18033
/**                                                                                                                    // 18034
 * Gets the index of an adjacent chip to select after deletion. Adjacency is                                           // 18035
 * determined as the next chip in the list, unless the target chip is the                                              // 18036
 * last in the list, then it is the chip immediately preceding the target. If                                          // 18037
 * there is only one item in the list, -1 is returned (select none).                                                   // 18038
 * The number returned is the index to select AFTER the target has been                                                // 18039
 * removed.                                                                                                            // 18040
 * If the current chip is not selected, then -1 is returned to select none.                                            // 18041
 */                                                                                                                    // 18042
MdChipsCtrl.prototype.getAdjacentChipIndex = function(index) {                                                         // 18043
  var len = this.items.length - 1;                                                                                     // 18044
  return (len == 0) ? -1 :                                                                                             // 18045
      (index == len) ? index -1 : index;                                                                               // 18046
};                                                                                                                     // 18047
                                                                                                                       // 18048
/**                                                                                                                    // 18049
 * Append the contents of the buffer to the chip list. This method will first                                          // 18050
 * call out to the md-on-append method, if provided                                                                    // 18051
 * @param newChip                                                                                                      // 18052
 */                                                                                                                    // 18053
MdChipsCtrl.prototype.appendChip = function(newChip) {                                                                 // 18054
  if (this.useOnAppend && this.onAppend) {                                                                             // 18055
    newChip = this.onAppend({'$chip': newChip});                                                                       // 18056
  }                                                                                                                    // 18057
  if (this.items.indexOf(newChip) + 1) return;                                                                         // 18058
  this.items.push(newChip);                                                                                            // 18059
};                                                                                                                     // 18060
                                                                                                                       // 18061
/**                                                                                                                    // 18062
 * Sets whether to use the md-on-append expression. This expression is                                                 // 18063
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 18064
 * {@code onAppend}. Due to the nature of directive scope bindings, the                                                // 18065
 * controller cannot know on its own/from the scope whether an expression was                                          // 18066
 * actually provided.                                                                                                  // 18067
 */                                                                                                                    // 18068
MdChipsCtrl.prototype.useOnAppendExpression = function() {                                                             // 18069
  this.useOnAppend = true;                                                                                             // 18070
};                                                                                                                     // 18071
                                                                                                                       // 18072
/**                                                                                                                    // 18073
 * Sets whether to use the md-on-remove expression. This expression is                                                 // 18074
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 18075
 * {@code onRemove}. Due to the nature of directive scope bindings, the                                                // 18076
 * controller cannot know on its own/from the scope whether an expression was                                          // 18077
 * actually provided.                                                                                                  // 18078
 */                                                                                                                    // 18079
MdChipsCtrl.prototype.useOnRemoveExpression = function() {                                                             // 18080
  this.useOnRemove = true;                                                                                             // 18081
};                                                                                                                     // 18082
                                                                                                                       // 18083
/*                                                                                                                     // 18084
 * Sets whether to use the md-on-select expression. This expression is                                                 // 18085
 * bound to scope and controller in {@code MdChipsDirective} as                                                        // 18086
 * {@code onSelect}. Due to the nature of directive scope bindings, the                                                // 18087
 * controller cannot know on its own/from the scope whether an expression was                                          // 18088
 * actually provided.                                                                                                  // 18089
 */                                                                                                                    // 18090
MdChipsCtrl.prototype.useOnSelectExpression = function() {                                                             // 18091
  this.useOnSelect = true;                                                                                             // 18092
};                                                                                                                     // 18093
                                                                                                                       // 18094
/**                                                                                                                    // 18095
 * Gets the input buffer. The input buffer can be the model bound to the                                               // 18096
 * default input item {@code this.chipBuffer}, the {@code selectedItem}                                                // 18097
 * model of an {@code md-autocomplete}, or, through some magic, the model                                              // 18098
 * bound to any inpput or text area element found within a                                                             // 18099
 * {@code md-input-container} element.                                                                                 // 18100
 * @return {Object|string}                                                                                             // 18101
 */                                                                                                                    // 18102
MdChipsCtrl.prototype.getChipBuffer = function() {                                                                     // 18103
  return !this.userInputElement ? this.chipBuffer :                                                                    // 18104
      this.userInputNgModelCtrl ? this.userInputNgModelCtrl.$viewValue :                                               // 18105
          this.userInputElement[0].value;                                                                              // 18106
};                                                                                                                     // 18107
                                                                                                                       // 18108
/**                                                                                                                    // 18109
 * Resets the input buffer for either the internal input or user provided input element.                               // 18110
 */                                                                                                                    // 18111
MdChipsCtrl.prototype.resetChipBuffer = function() {                                                                   // 18112
  if (this.userInputElement) {                                                                                         // 18113
    if (this.userInputNgModelCtrl) {                                                                                   // 18114
      this.userInputNgModelCtrl.$setViewValue('');                                                                     // 18115
      this.userInputNgModelCtrl.$render();                                                                             // 18116
    } else {                                                                                                           // 18117
      this.userInputElement[0].value = '';                                                                             // 18118
    }                                                                                                                  // 18119
  } else {                                                                                                             // 18120
    this.chipBuffer = '';                                                                                              // 18121
  }                                                                                                                    // 18122
};                                                                                                                     // 18123
                                                                                                                       // 18124
/**                                                                                                                    // 18125
 * Removes the chip at the given index.                                                                                // 18126
 * @param index                                                                                                        // 18127
 */                                                                                                                    // 18128
MdChipsCtrl.prototype.removeChip = function(index) {                                                                   // 18129
  var removed = this.items.splice(index, 1);                                                                           // 18130
                                                                                                                       // 18131
  if (removed && removed.length && this.useOnRemove && this.onRemove) {                                                // 18132
    this.onRemove({ '$chip': removed[0], '$index': index });                                                           // 18133
  }                                                                                                                    // 18134
};                                                                                                                     // 18135
                                                                                                                       // 18136
MdChipsCtrl.prototype.removeChipAndFocusInput = function (index) {                                                     // 18137
  this.removeChip(index);                                                                                              // 18138
  this.onFocus();                                                                                                      // 18139
};                                                                                                                     // 18140
/**                                                                                                                    // 18141
 * Selects the chip at `index`,                                                                                        // 18142
 * @param index                                                                                                        // 18143
 */                                                                                                                    // 18144
MdChipsCtrl.prototype.selectAndFocusChipSafe = function(index) {                                                       // 18145
  if (!this.items.length) {                                                                                            // 18146
    this.selectChip(-1);                                                                                               // 18147
    this.onFocus();                                                                                                    // 18148
    return;                                                                                                            // 18149
  }                                                                                                                    // 18150
  if (index === this.items.length) return this.onFocus();                                                              // 18151
  index = Math.max(index, 0);                                                                                          // 18152
  index = Math.min(index, this.items.length - 1);                                                                      // 18153
  this.selectChip(index);                                                                                              // 18154
  this.focusChip(index);                                                                                               // 18155
};                                                                                                                     // 18156
                                                                                                                       // 18157
/**                                                                                                                    // 18158
 * Marks the chip at the given index as selected.                                                                      // 18159
 * @param index                                                                                                        // 18160
 */                                                                                                                    // 18161
MdChipsCtrl.prototype.selectChip = function(index) {                                                                   // 18162
  if (index >= -1 && index <= this.items.length) {                                                                     // 18163
    this.selectedChip = index;                                                                                         // 18164
                                                                                                                       // 18165
    // Fire the onSelect if provided                                                                                   // 18166
    if (this.useOnSelect && this.onSelect) {                                                                           // 18167
      this.onSelect({'$chip': this.items[this.selectedChip] });                                                        // 18168
    }                                                                                                                  // 18169
  } else {                                                                                                             // 18170
    this.$log.warn('Selected Chip index out of bounds; ignoring.');                                                    // 18171
  }                                                                                                                    // 18172
};                                                                                                                     // 18173
                                                                                                                       // 18174
/**                                                                                                                    // 18175
 * Selects the chip at `index` and gives it focus.                                                                     // 18176
 * @param index                                                                                                        // 18177
 */                                                                                                                    // 18178
MdChipsCtrl.prototype.selectAndFocusChip = function(index) {                                                           // 18179
  this.selectChip(index);                                                                                              // 18180
  if (index != -1) {                                                                                                   // 18181
    this.focusChip(index);                                                                                             // 18182
  }                                                                                                                    // 18183
};                                                                                                                     // 18184
                                                                                                                       // 18185
/**                                                                                                                    // 18186
 * Call `focus()` on the chip at `index`                                                                               // 18187
 */                                                                                                                    // 18188
MdChipsCtrl.prototype.focusChip = function(index) {                                                                    // 18189
  this.$element[0].querySelector('md-chip[index="' + index + '"] .md-chip-content').focus();                           // 18190
};                                                                                                                     // 18191
                                                                                                                       // 18192
/**                                                                                                                    // 18193
 * Configures the required interactions with the ngModel Controller.                                                   // 18194
 * Specifically, set {@code this.items} to the {@code NgModelCtrl#$viewVale}.                                          // 18195
 * @param ngModelCtrl                                                                                                  // 18196
 */                                                                                                                    // 18197
MdChipsCtrl.prototype.configureNgModel = function(ngModelCtrl) {                                                       // 18198
  this.ngModelCtrl = ngModelCtrl;                                                                                      // 18199
                                                                                                                       // 18200
  var self = this;                                                                                                     // 18201
  ngModelCtrl.$render = function() {                                                                                   // 18202
    // model is updated. do something.                                                                                 // 18203
    self.items = self.ngModelCtrl.$viewValue;                                                                          // 18204
  };                                                                                                                   // 18205
};                                                                                                                     // 18206
                                                                                                                       // 18207
MdChipsCtrl.prototype.onFocus = function () {                                                                          // 18208
  var input = this.$element[0].querySelector('input');                                                                 // 18209
  input && input.focus();                                                                                              // 18210
  this.resetSelectedChip();                                                                                            // 18211
};                                                                                                                     // 18212
                                                                                                                       // 18213
MdChipsCtrl.prototype.onInputFocus = function () {                                                                     // 18214
  this.inputHasFocus = true;                                                                                           // 18215
  this.resetSelectedChip();                                                                                            // 18216
};                                                                                                                     // 18217
                                                                                                                       // 18218
MdChipsCtrl.prototype.onInputBlur = function () {                                                                      // 18219
  this.inputHasFocus = false;                                                                                          // 18220
};                                                                                                                     // 18221
                                                                                                                       // 18222
/**                                                                                                                    // 18223
 * Configure event bindings on a user-provided input element.                                                          // 18224
 * @param inputElement                                                                                                 // 18225
 */                                                                                                                    // 18226
MdChipsCtrl.prototype.configureUserInput = function(inputElement) {                                                    // 18227
  this.userInputElement = inputElement;                                                                                // 18228
                                                                                                                       // 18229
  // Find the NgModelCtrl for the input element                                                                        // 18230
  var ngModelCtrl = inputElement.controller('ngModel');                                                                // 18231
  // `.controller` will look in the parent as well.                                                                    // 18232
  if (ngModelCtrl != this.ngModelCtrl) {                                                                               // 18233
    this.userInputNgModelCtrl = ngModelCtrl;                                                                           // 18234
  }                                                                                                                    // 18235
                                                                                                                       // 18236
  var scope = this.$scope;                                                                                             // 18237
  var ctrl = this;                                                                                                     // 18238
                                                                                                                       // 18239
  // Run all of the events using evalAsync because a focus may fire a blur in the same digest loop                     // 18240
  var scopeApplyFn = function(event, fn) {                                                                             // 18241
    scope.$evalAsync(angular.bind(ctrl, fn, event));                                                                   // 18242
  };                                                                                                                   // 18243
                                                                                                                       // 18244
  // Bind to keydown and focus events of input                                                                         // 18245
  inputElement                                                                                                         // 18246
      .attr({ tabindex: 0 })                                                                                           // 18247
      .on('keydown', function(event) { scopeApplyFn(event, ctrl.inputKeydown) })                                       // 18248
      .on('focus', function(event) { scopeApplyFn(event, ctrl.onInputFocus) })                                         // 18249
      .on('blur', function(event) { scopeApplyFn(event, ctrl.onInputBlur) })                                           // 18250
};                                                                                                                     // 18251
                                                                                                                       // 18252
MdChipsCtrl.prototype.configureAutocomplete = function(ctrl) {                                                         // 18253
  if ( ctrl ){                                                                                                         // 18254
    this.hasAutocomplete = true;                                                                                       // 18255
    ctrl.registerSelectedItemWatcher(angular.bind(this, function (item) {                                              // 18256
      if (item) {                                                                                                      // 18257
        this.appendChip(item);                                                                                         // 18258
        this.resetChipBuffer();                                                                                        // 18259
      }                                                                                                                // 18260
    }));                                                                                                               // 18261
                                                                                                                       // 18262
    this.$element.find('input')                                                                                        // 18263
        .on('focus',angular.bind(this, this.onInputFocus) )                                                            // 18264
        .on('blur', angular.bind(this, this.onInputBlur) );                                                            // 18265
  }                                                                                                                    // 18266
};                                                                                                                     // 18267
                                                                                                                       // 18268
MdChipsCtrl.prototype.hasFocus = function () {                                                                         // 18269
  return this.inputHasFocus || this.selectedChip >= 0;                                                                 // 18270
};                                                                                                                     // 18271
                                                                                                                       // 18272
})();                                                                                                                  // 18273
(function(){                                                                                                           // 18274
"use strict";                                                                                                          // 18275
                                                                                                                       // 18276
  angular                                                                                                              // 18277
      .module('material.components.chips')                                                                             // 18278
      .directive('mdChips', MdChips);                                                                                  // 18279
                                                                                                                       // 18280
  /**                                                                                                                  // 18281
   * @ngdoc directive                                                                                                  // 18282
   * @name mdChips                                                                                                     // 18283
   * @module material.components.chips                                                                                 // 18284
   *                                                                                                                   // 18285
   * @description                                                                                                      // 18286
   * `<md-chips>` is an input component for building lists of strings or objects. The list items are                   // 18287
   * displayed as 'chips'. This component can make use of an `<input>` element or an                                   // 18288
   * `<md-autocomplete>` element.                                                                                      // 18289
   *                                                                                                                   // 18290
   * <strong>Custom `<md-chip-template>` template</strong>                                                             // 18291
   * A custom template may be provided to render the content of each chip. This is achieved by                         // 18292
   * specifying an `<md-chip-template>` element as a child of `<md-chips>`. Note: Any attributes on                    // 18293
   * `<md-chip-template>` will be dropped as only the innerHTML is used for the chip template. The                     // 18294
   * variables `$chip` and `$index` are available in the scope of `<md-chip-template>`, representing                   // 18295
   * the chip object and its index in the list of chips, respectively.                                                 // 18296
   * To override the chip delete control, include an element (ideally a button) with the attribute                     // 18297
   * `md-chip-remove`. A click listener to remove the chip will be added automatically. The element                    // 18298
   * is also placed as a sibling to the chip content (on which there are also click listeners) to                      // 18299
   * avoid a nested ng-click situation.                                                                                // 18300
   *                                                                                                                   // 18301
   * <h3> Pending Features </h3>                                                                                       // 18302
   * <ul style="padding-left:20px;">                                                                                   // 18303
   *                                                                                                                   // 18304
   *   <ul>Style                                                                                                       // 18305
   *     <li>Colours for hover, press states (ripple?).</li>                                                           // 18306
   *   </ul>                                                                                                           // 18307
   *                                                                                                                   // 18308
   *   <ul>Validation                                                                                                  // 18309
   *     <li>allow a validation callback</li>                                                                          // 18310
   *     <li>hilighting style for invalid chips</li>                                                                   // 18311
   *   </ul>                                                                                                           // 18312
   *                                                                                                                   // 18313
   *   <ul>Item mutation                                                                                               // 18314
   *     <li>Support `                                                                                                 // 18315
   *       <md-chip-edit>` template, show/hide the edit element on tap/click? double tap/double                        // 18316
   *       click?                                                                                                      // 18317
   *     </li>                                                                                                         // 18318
   *   </ul>                                                                                                           // 18319
   *                                                                                                                   // 18320
   *   <ul>Truncation and Disambiguation (?)                                                                           // 18321
   *     <li>Truncate chip text where possible, but do not truncate entries such that two are                          // 18322
   *     indistinguishable.</li>                                                                                       // 18323
   *   </ul>                                                                                                           // 18324
   *                                                                                                                   // 18325
   *   <ul>Drag and Drop                                                                                               // 18326
   *     <li>Drag and drop chips between related `<md-chips>` elements.                                                // 18327
   *     </li>                                                                                                         // 18328
   *   </ul>                                                                                                           // 18329
   * </ul>                                                                                                             // 18330
   *                                                                                                                   // 18331
   *  <span style="font-size:.8em;text-align:center">                                                                  // 18332
   *    Warning: This component is a WORK IN PROGRESS. If you use it now,                                              // 18333
   *    it will probably break on you in the future.                                                                   // 18334
   *  </span>                                                                                                          // 18335
   *                                                                                                                   // 18336
   * @param {string=|object=} ng-model A model to bind the list of items to                                            // 18337
   * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                // 18338
   * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,                      // 18339
   *    displayed when there is at least on item in the list                                                           // 18340
   * @param {boolean=} readonly Disables list manipulation (deleting or adding list items), hiding                     // 18341
   *    the input and delete buttons                                                                                   // 18342
   * @param {expression} md-on-append An expression that when called expects you to return an object                   // 18343
   *    representation of the chip input string.                                                                       // 18344
   * @param {expression=} md-on-remove An expression which will be called when a chip has been                         // 18345
   *    removed.                                                                                                       // 18346
   * @param {expression=} md-on-select An expression which will be called when a chip is selected.                     // 18347
   * @param {string=} delete-hint A string read by screen readers instructing users that pressing                      // 18348
   *    the delete key will remove the chip.                                                                           // 18349
   * @param {string=} delete-button-label A label for the delete button. Also hidden and read by                       // 18350
   *    screen readers.                                                                                                // 18351
   *                                                                                                                   // 18352
   * @usage                                                                                                            // 18353
   * <hljs lang="html">                                                                                                // 18354
   *   <md-chips                                                                                                       // 18355
   *       ng-model="myItems"                                                                                          // 18356
   *       placeholder="Add an item"                                                                                   // 18357
   *       readonly="isReadOnly">                                                                                      // 18358
   *   </md-chips>                                                                                                     // 18359
   * </hljs>                                                                                                           // 18360
   *                                                                                                                   // 18361
   */                                                                                                                  // 18362
                                                                                                                       // 18363
                                                                                                                       // 18364
  var MD_CHIPS_TEMPLATE = '\
      <md-chips-wrap\
          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"\
          ng-keydown="$mdChipsCtrl.chipKeydown($event)"\
          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus(), \'md-readonly\': !$mdChipsCtrl.ngModelCtrl }"\
          class="md-chips">\
        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"\
            index="{{$index}}"\
            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index, \'md-readonly\': $mdChipsCtrl.readonly}">\
          <div class="md-chip-content"\
              tabindex="-1"\
              aria-hidden="true"\
              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"\
              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>\
          <div ng-if="!$mdChipsCtrl.readonly"\
               class="md-chip-remove-container"\
               md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>\
        </md-chip>\
        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"\
            class="md-chip-input-container"\
            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>\
        </div>\
      </md-chips-wrap>';                                                                                               // 18387
                                                                                                                       // 18388
  var CHIP_INPUT_TEMPLATE = '\
        <input\
            tabindex="0"\
            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"\
            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"\
            ng-model="$mdChipsCtrl.chipBuffer"\
            ng-focus="$mdChipsCtrl.onInputFocus()"\
            ng-blur="$mdChipsCtrl.onInputBlur()"\
            ng-keydown="$mdChipsCtrl.inputKeydown($event)">';                                                          // 18397
                                                                                                                       // 18398
  var CHIP_DEFAULT_TEMPLATE = '\
      <span>{{$chip}}</span>';                                                                                         // 18400
                                                                                                                       // 18401
  var CHIP_REMOVE_TEMPLATE = '\
      <button\
          class="md-chip-remove"\
          ng-if="!$mdChipsCtrl.readonly"\
          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"\
          type="button"\
          aria-hidden="true"\
          tabindex="-1">\
        <md-icon md-svg-icon="md-close"></md-icon>\
        <span class="md-visually-hidden">\
          {{$mdChipsCtrl.deleteButtonLabel}}\
        </span>\
      </button>';                                                                                                      // 18414
                                                                                                                       // 18415
  /**                                                                                                                  // 18416
   * MDChips Directive Definition                                                                                      // 18417
   */                                                                                                                  // 18418
  function MdChips ($mdTheming, $mdUtil, $compile, $log, $timeout) {                                                   // 18419
    // Run our templates through $mdUtil.processTemplate() to allow custom start/end symbols                           // 18420
    var templates = getTemplates();                                                                                    // 18421
                                                                                                                       // 18422
    return {                                                                                                           // 18423
      template: function(element, attrs) {                                                                             // 18424
        // Clone the element into an attribute. By prepending the attribute                                            // 18425
        // name with '$', Angular won't write it into the DOM. The cloned                                              // 18426
        // element propagates to the link function via the attrs argument,                                             // 18427
        // where various contained-elements can be consumed.                                                           // 18428
        attrs['$mdUserTemplate'] = element.clone();                                                                    // 18429
        return templates.chips;                                                                                        // 18430
      },                                                                                                               // 18431
      require: ['mdChips'],                                                                                            // 18432
      restrict: 'E',                                                                                                   // 18433
      controller: 'MdChipsCtrl',                                                                                       // 18434
      controllerAs: '$mdChipsCtrl',                                                                                    // 18435
      bindToController: true,                                                                                          // 18436
      compile: compile,                                                                                                // 18437
      scope: {                                                                                                         // 18438
        readonly: '=readonly',                                                                                         // 18439
        placeholder: '@',                                                                                              // 18440
        secondaryPlaceholder: '@',                                                                                     // 18441
        onAppend: '&mdOnAppend',                                                                                       // 18442
        onRemove: '&mdOnRemove',                                                                                       // 18443
        onSelect: '&mdOnSelect',                                                                                       // 18444
        deleteHint: '@',                                                                                               // 18445
        deleteButtonLabel: '@',                                                                                        // 18446
        requireMatch: '=?mdRequireMatch'                                                                               // 18447
      }                                                                                                                // 18448
    };                                                                                                                 // 18449
                                                                                                                       // 18450
    /**                                                                                                                // 18451
     * Builds the final template for `md-chips` and returns the postLink function.                                     // 18452
     *                                                                                                                 // 18453
     * Building the template involves 3 key components:                                                                // 18454
     * static chips                                                                                                    // 18455
     * chip template                                                                                                   // 18456
     * input control                                                                                                   // 18457
     *                                                                                                                 // 18458
     * If no `ng-model` is provided, only the static chip work needs to be done.                                       // 18459
     *                                                                                                                 // 18460
     * If no user-passed `md-chip-template` exists, the default template is used. This resulting                       // 18461
     * template is appended to the chip content element.                                                               // 18462
     *                                                                                                                 // 18463
     * The remove button may be overridden by passing an element with an md-chip-remove attribute.                     // 18464
     *                                                                                                                 // 18465
     * If an `input` or `md-autocomplete` element is provided by the caller, it is set aside for                       // 18466
     * transclusion later. The transclusion happens in `postLink` as the parent scope is required.                     // 18467
     * If no user input is provided, a default one is appended to the input container node in the                      // 18468
     * template.                                                                                                       // 18469
     *                                                                                                                 // 18470
     * Static Chips (i.e. `md-chip` elements passed from the caller) are gathered and set aside for                    // 18471
     * transclusion in the `postLink` function.                                                                        // 18472
     *                                                                                                                 // 18473
     *                                                                                                                 // 18474
     * @param element                                                                                                  // 18475
     * @param attr                                                                                                     // 18476
     * @returns {Function}                                                                                             // 18477
     */                                                                                                                // 18478
    function compile(element, attr) {                                                                                  // 18479
      // Grab the user template from attr and reset the attribute to null.                                             // 18480
      var userTemplate = attr['$mdUserTemplate'];                                                                      // 18481
      attr['$mdUserTemplate'] = null;                                                                                  // 18482
                                                                                                                       // 18483
      // Set the chip remove, chip contents and chip input templates. The link function will put                       // 18484
      // them on the scope for transclusion later.                                                                     // 18485
      var chipRemoveTemplate   = getTemplateByQuery('md-chips>*[md-chip-remove]') || templates.remove,                 // 18486
          chipContentsTemplate = getTemplateByQuery('md-chips>md-chip-template') || templates.default,                 // 18487
          chipInputTemplate    = getTemplateByQuery('md-chips>md-autocomplete')                                        // 18488
              || getTemplateByQuery('md-chips>input')                                                                  // 18489
              || templates.input,                                                                                      // 18490
          staticChips = userTemplate.find('md-chip');                                                                  // 18491
                                                                                                                       // 18492
      // Warn of malformed template. See #2545                                                                         // 18493
      if (userTemplate[0].querySelector('md-chip-template>*[md-chip-remove]')) {                                       // 18494
        $log.warn('invalid placement of md-chip-remove within md-chip-template.');                                     // 18495
      }                                                                                                                // 18496
                                                                                                                       // 18497
      function getTemplateByQuery (query) {                                                                            // 18498
        if (!attr.ngModel) return;                                                                                     // 18499
        var element = userTemplate[0].querySelector(query);                                                            // 18500
        return element && element.outerHTML;                                                                           // 18501
      }                                                                                                                // 18502
                                                                                                                       // 18503
      /**                                                                                                              // 18504
       * Configures controller and transcludes.                                                                        // 18505
       */                                                                                                              // 18506
      return function postLink(scope, element, attrs, controllers) {                                                   // 18507
                                                                                                                       // 18508
        $mdUtil.initOptionalProperties(scope, attr);                                                                   // 18509
                                                                                                                       // 18510
        $mdTheming(element);                                                                                           // 18511
        var mdChipsCtrl = controllers[0];                                                                              // 18512
        mdChipsCtrl.chipContentsTemplate = chipContentsTemplate;                                                       // 18513
        mdChipsCtrl.chipRemoveTemplate   = chipRemoveTemplate;                                                         // 18514
        mdChipsCtrl.chipInputTemplate    = chipInputTemplate;                                                          // 18515
                                                                                                                       // 18516
        element                                                                                                        // 18517
            .attr({ ariaHidden: true, tabindex: -1 })                                                                  // 18518
            .on('focus', function () { mdChipsCtrl.onFocus(); });                                                      // 18519
                                                                                                                       // 18520
        if (attr.ngModel) {                                                                                            // 18521
          mdChipsCtrl.configureNgModel(element.controller('ngModel'));                                                 // 18522
                                                                                                                       // 18523
          // If an `md-on-append` attribute was set, tell the controller to use the expression                         // 18524
          // when appending chips.                                                                                     // 18525
          if (attrs.mdOnAppend) mdChipsCtrl.useOnAppendExpression();                                                   // 18526
                                                                                                                       // 18527
          // If an `md-on-remove` attribute was set, tell the controller to use the expression                         // 18528
          // when removing chips.                                                                                      // 18529
          if (attrs.mdOnRemove) mdChipsCtrl.useOnRemoveExpression();                                                   // 18530
                                                                                                                       // 18531
          // If an `md-on-select` attribute was set, tell the controller to use the expression                         // 18532
          // when selecting chips.                                                                                     // 18533
          if (attrs.mdOnSelect) mdChipsCtrl.useOnSelectExpression();                                                   // 18534
                                                                                                                       // 18535
          // The md-autocomplete and input elements won't be compiled until after this directive                       // 18536
          // is complete (due to their nested nature). Wait a tick before looking for them to                          // 18537
          // configure the controller.                                                                                 // 18538
          if (chipInputTemplate != templates.input) {                                                                  // 18539
            // The autocomplete will not appear until the readonly attribute is not true (i.e.                         // 18540
            // false or undefined), so we have to watch the readonly and then on the next tick                         // 18541
            // after the chip transclusion has run, we can configure the autocomplete and user                         // 18542
            // input.                                                                                                  // 18543
            scope.$watch('$mdChipsCtrl.readonly', function(readonly) {                                                 // 18544
              if (!readonly) {                                                                                         // 18545
                $mdUtil.nextTick(function(){                                                                           // 18546
                  if (chipInputTemplate.indexOf('<md-autocomplete') === 0)                                             // 18547
                    mdChipsCtrl                                                                                        // 18548
                        .configureAutocomplete(element.find('md-autocomplete')                                         // 18549
                            .controller('mdAutocomplete'));                                                            // 18550
                  mdChipsCtrl.configureUserInput(element.find('input'));                                               // 18551
                });                                                                                                    // 18552
              }                                                                                                        // 18553
            });                                                                                                        // 18554
          }                                                                                                            // 18555
        }                                                                                                              // 18556
                                                                                                                       // 18557
        // Compile with the parent's scope and prepend any static chips to the wrapper.                                // 18558
        if (staticChips.length > 0) {                                                                                  // 18559
          var compiledStaticChips = $compile(staticChips.clone())(scope.$parent);                                      // 18560
          $timeout(function() { element.find('md-chips-wrap').prepend(compiledStaticChips); });                        // 18561
        }                                                                                                              // 18562
      };                                                                                                               // 18563
    }                                                                                                                  // 18564
                                                                                                                       // 18565
    function getTemplates() {                                                                                          // 18566
      return {                                                                                                         // 18567
        chips: $mdUtil.processTemplate(MD_CHIPS_TEMPLATE),                                                             // 18568
        input: $mdUtil.processTemplate(CHIP_INPUT_TEMPLATE),                                                           // 18569
        default: $mdUtil.processTemplate(CHIP_DEFAULT_TEMPLATE),                                                       // 18570
        remove: $mdUtil.processTemplate(CHIP_REMOVE_TEMPLATE)                                                          // 18571
      };                                                                                                               // 18572
    }                                                                                                                  // 18573
  }                                                                                                                    // 18574
  MdChips.$inject = ["$mdTheming", "$mdUtil", "$compile", "$log", "$timeout"];                                         // 18575
                                                                                                                       // 18576
})();                                                                                                                  // 18577
(function(){                                                                                                           // 18578
"use strict";                                                                                                          // 18579
                                                                                                                       // 18580
angular                                                                                                                // 18581
    .module('material.components.chips')                                                                               // 18582
    .controller('MdContactChipsCtrl', MdContactChipsCtrl);                                                             // 18583
                                                                                                                       // 18584
                                                                                                                       // 18585
                                                                                                                       // 18586
/**                                                                                                                    // 18587
 * Controller for the MdContactChips component                                                                         // 18588
 * @constructor                                                                                                        // 18589
 */                                                                                                                    // 18590
function MdContactChipsCtrl () {                                                                                       // 18591
  /** @type {Object} */                                                                                                // 18592
  this.selectedItem = null;                                                                                            // 18593
                                                                                                                       // 18594
  /** @type {string} */                                                                                                // 18595
  this.searchText = '';                                                                                                // 18596
}                                                                                                                      // 18597
                                                                                                                       // 18598
                                                                                                                       // 18599
MdContactChipsCtrl.prototype.queryContact = function(searchText) {                                                     // 18600
  var results = this.contactQuery({'$query': searchText});                                                             // 18601
  return this.filterSelected ?                                                                                         // 18602
      results.filter(angular.bind(this, this.filterSelectedContacts)) : results;                                       // 18603
};                                                                                                                     // 18604
                                                                                                                       // 18605
                                                                                                                       // 18606
MdContactChipsCtrl.prototype.itemName = function(item) {                                                               // 18607
  return item[this.contactName];                                                                                       // 18608
};                                                                                                                     // 18609
                                                                                                                       // 18610
                                                                                                                       // 18611
MdContactChipsCtrl.prototype.filterSelectedContacts = function(contact) {                                              // 18612
  return this.contacts.indexOf(contact) == -1;                                                                         // 18613
};                                                                                                                     // 18614
                                                                                                                       // 18615
})();                                                                                                                  // 18616
(function(){                                                                                                           // 18617
"use strict";                                                                                                          // 18618
                                                                                                                       // 18619
angular                                                                                                                // 18620
  .module('material.components.chips')                                                                                 // 18621
  .directive('mdContactChips', MdContactChips);                                                                        // 18622
                                                                                                                       // 18623
/**                                                                                                                    // 18624
 * @ngdoc directive                                                                                                    // 18625
 * @name mdContactChips                                                                                                // 18626
 * @module material.components.chips                                                                                   // 18627
 *                                                                                                                     // 18628
 * @description                                                                                                        // 18629
 * `<md-contact-chips>` is an input component based on `md-chips` and makes use of an                                  // 18630
 * `md-autocomplete` element. The component allows the caller to supply a query expression which                       // 18631
 * returns  a list of possible contacts. The user can select one of these and add it to the list of                    // 18632
 * chips.                                                                                                              // 18633
 *                                                                                                                     // 18634
 * You may also use the `md-highlight-text` directive along with it's parameters to control the                        // 18635
 * appearance of the matched text inside of the contacts' autocomplete popup.                                          // 18636
 *                                                                                                                     // 18637
 * @param {string=|object=} ng-model A model to bind the list of items to                                              // 18638
 * @param {string=} placeholder Placeholder text that will be forwarded to the input.                                  // 18639
 * @param {string=} secondary-placeholder Placeholder text that will be forwarded to the input,                        // 18640
 *    displayed when there is at least on item in the list                                                             // 18641
 * @param {expression} md-contacts An expression expected to return contacts matching the search                       // 18642
 *    test, `$query`.                                                                                                  // 18643
 * @param {string} md-contact-name The field name of the contact object representing the                               // 18644
 *    contact's name.                                                                                                  // 18645
 * @param {string} md-contact-email The field name of the contact object representing the                              // 18646
 *    contact's email address.                                                                                         // 18647
 * @param {string} md-contact-image The field name of the contact object representing the                              // 18648
 *    contact's image.                                                                                                 // 18649
 *                                                                                                                     // 18650
 *                                                                                                                     // 18651
 * // The following attribute has been removed but may come back.                                                      // 18652
 * @param {expression=} filter-selected Whether to filter selected contacts from the list of                           // 18653
 *    suggestions shown in the autocomplete.                                                                           // 18654
 *                                                                                                                     // 18655
 *                                                                                                                     // 18656
 *                                                                                                                     // 18657
 * @usage                                                                                                              // 18658
 * <hljs lang="html">                                                                                                  // 18659
 *   <md-contact-chips                                                                                                 // 18660
 *       ng-model="ctrl.contacts"                                                                                      // 18661
 *       md-contacts="ctrl.querySearch($query)"                                                                        // 18662
 *       md-contact-name="name"                                                                                        // 18663
 *       md-contact-image="image"                                                                                      // 18664
 *       md-contact-email="email"                                                                                      // 18665
 *       placeholder="To">                                                                                             // 18666
 *   </md-contact-chips>                                                                                               // 18667
 * </hljs>                                                                                                             // 18668
 *                                                                                                                     // 18669
 */                                                                                                                    // 18670
                                                                                                                       // 18671
                                                                                                                       // 18672
var MD_CONTACT_CHIPS_TEMPLATE = '\
      <md-chips class="md-contact-chips"\
          ng-model="$mdContactChipsCtrl.contacts"\
          md-require-match="$mdContactChipsCtrl.requireMatch"\
          md-autocomplete-snap>\
          <md-autocomplete\
              md-menu-class="md-contact-chips-suggestions"\
              md-selected-item="$mdContactChipsCtrl.selectedItem"\
              md-search-text="$mdContactChipsCtrl.searchText"\
              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"\
              md-item-text="$mdContactChipsCtrl.itemName(item)"\
              md-no-cache="true"\
              md-autoselect\
              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?\
                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">\
            <div class="md-contact-suggestion">\
              <img \
                  ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />\
              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText"\
                    md-highlight-flags="{{$mdContactChipsCtrl.highlightFlags}}">\
                {{item[$mdContactChipsCtrl.contactName]}}\
              </span>\
              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>\
            </div>\
          </md-autocomplete>\
          <md-chip-template>\
            <div class="md-contact-avatar">\
              <img \
                  ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"\
                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />\
            </div>\
            <div class="md-contact-name">\
              {{$chip[$mdContactChipsCtrl.contactName]}}\
            </div>\
          </md-chip-template>\
      </md-chips>';                                                                                                    // 18709
                                                                                                                       // 18710
                                                                                                                       // 18711
/**                                                                                                                    // 18712
 * MDContactChips Directive Definition                                                                                 // 18713
 *                                                                                                                     // 18714
 * @param $mdTheming                                                                                                   // 18715
 * @returns {*}                                                                                                        // 18716
 * @ngInject                                                                                                           // 18717
 */                                                                                                                    // 18718
function MdContactChips($mdTheming, $mdUtil) {                                                                         // 18719
  return {                                                                                                             // 18720
    template: function(element, attrs) {                                                                               // 18721
      return MD_CONTACT_CHIPS_TEMPLATE;                                                                                // 18722
    },                                                                                                                 // 18723
    restrict: 'E',                                                                                                     // 18724
    controller: 'MdContactChipsCtrl',                                                                                  // 18725
    controllerAs: '$mdContactChipsCtrl',                                                                               // 18726
    bindToController: true,                                                                                            // 18727
    compile: compile,                                                                                                  // 18728
    scope: {                                                                                                           // 18729
      contactQuery: '&mdContacts',                                                                                     // 18730
      placeholder: '@',                                                                                                // 18731
      secondaryPlaceholder: '@',                                                                                       // 18732
      contactName: '@mdContactName',                                                                                   // 18733
      contactImage: '@mdContactImage',                                                                                 // 18734
      contactEmail: '@mdContactEmail',                                                                                 // 18735
      contacts: '=ngModel',                                                                                            // 18736
      requireMatch: '=?mdRequireMatch',                                                                                // 18737
      highlightFlags: '@?mdHighlightFlags'                                                                             // 18738
    }                                                                                                                  // 18739
  };                                                                                                                   // 18740
                                                                                                                       // 18741
  function compile(element, attr) {                                                                                    // 18742
    return function postLink(scope, element, attrs, controllers) {                                                     // 18743
                                                                                                                       // 18744
      $mdUtil.initOptionalProperties(scope, attr);                                                                     // 18745
      $mdTheming(element);                                                                                             // 18746
                                                                                                                       // 18747
      element.attr('tabindex', '-1');                                                                                  // 18748
    };                                                                                                                 // 18749
  }                                                                                                                    // 18750
}                                                                                                                      // 18751
MdContactChips.$inject = ["$mdTheming", "$mdUtil"];                                                                    // 18752
                                                                                                                       // 18753
})();                                                                                                                  // 18754
(function(){                                                                                                           // 18755
"use strict";                                                                                                          // 18756
                                                                                                                       // 18757
angular                                                                                                                // 18758
  .module('material.components.icon')                                                                                  // 18759
  .directive('mdIcon', ['$mdIcon', '$mdTheming', '$mdAria', mdIconDirective]);                                         // 18760
                                                                                                                       // 18761
/**                                                                                                                    // 18762
 * @ngdoc directive                                                                                                    // 18763
 * @name mdIcon                                                                                                        // 18764
 * @module material.components.icon                                                                                    // 18765
 *                                                                                                                     // 18766
 * @restrict E                                                                                                         // 18767
 *                                                                                                                     // 18768
 * @description                                                                                                        // 18769
 * The `md-icon` directive makes it easier to use vector-based icons in your app (as opposed to                        // 18770
 * raster-based icons types like PNG). The directive supports both icon fonts and SVG icons.                           // 18771
 *                                                                                                                     // 18772
 * Icons should be consider view-only elements that should not be used directly as buttons; instead nest a `<md-icon>`
 * inside a `md-button` to add hover and click features.                                                               // 18774
 *                                                                                                                     // 18775
 * ### Icon fonts                                                                                                      // 18776
 * Icon fonts are a technique in which you use a font where the glyphs in the font are                                 // 18777
 * your icons instead of text. Benefits include a straightforward way to bundle everything into a                      // 18778
 * single HTTP request, simple scaling, easy color changing, and more.                                                 // 18779
 *                                                                                                                     // 18780
 * `md-icon` let's you consume an icon font by letting you reference specific icons in that font                       // 18781
 * by name rather than character code.                                                                                 // 18782
 *                                                                                                                     // 18783
 * ### SVG                                                                                                             // 18784
 * For SVGs, the problem with using `<img>` or a CSS `background-image` is that you can't take                         // 18785
 * advantage of some SVG features, such as styling specific parts of the icon with CSS or SVG                          // 18786
 * animation.                                                                                                          // 18787
 *                                                                                                                     // 18788
 * `md-icon` makes it easier to use SVG icons by *inlining* the SVG into an `<svg>` element in the                     // 18789
 * document. The most straightforward way of referencing an SVG icon is via URL, just like a                           // 18790
 * traditional `<img>`. `$mdIconProvider`, as a convenience, let's you _name_ an icon so you can                       // 18791
 * reference it by name instead of URL throughout your templates.                                                      // 18792
 *                                                                                                                     // 18793
 * Additionally, you may not want to make separate HTTP requests for every icon, so you can bundle                     // 18794
 * your SVG icons together and pre-load them with $mdIconProvider as an icon set. An icon set can                      // 18795
 * also be given a name, which acts as a namespace for individual icons, so you can reference them                     // 18796
 * like `"social:cake"`.                                                                                               // 18797
 *                                                                                                                     // 18798
 * When using SVGs, both external SVGs (via URLs) or sets of SVGs [from icon sets] can be                              // 18799
 * easily loaded and used.When use font-icons, developers must following three (3) simple steps:                       // 18800
 *                                                                                                                     // 18801
 * <ol>                                                                                                                // 18802
 * <li>Load the font library. e.g.<br/>                                                                                // 18803
 *    &lt;link href="https://fonts.googleapis.com/icon?family=Material+Icons"                                          // 18804
 *    rel="stylesheet"&gt;                                                                                             // 18805
 * </li>                                                                                                               // 18806
 * <li> Use either (a) font-icon class names or (b) font ligatures to render the font glyph by using its textual name</li>
 * <li> Use &lt;md-icon md-font-icon="classname" /&gt; or <br/>                                                        // 18808
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; textual_name &lt;/md-icon&gt; or <br/>        // 18809
 *     use &lt;md-icon md-font-set="font library classname or alias"&gt; numerical_character_reference &lt;/md-icon&gt;
 * </li>                                                                                                               // 18811
 * </ol>                                                                                                               // 18812
 *                                                                                                                     // 18813
 * Full details for these steps can be found:                                                                          // 18814
 *                                                                                                                     // 18815
 * <ul>                                                                                                                // 18816
 * <li>http://google.github.io/material-design-icons/</li>                                                             // 18817
 * <li>http://google.github.io/material-design-icons/#icon-font-for-the-web</li>                                       // 18818
 * </ul>                                                                                                               // 18819
 *                                                                                                                     // 18820
 * The Material Design icon style <code>.material-icons</code> and the icon font references are published in           // 18821
 * Material Design Icons:                                                                                              // 18822
 *                                                                                                                     // 18823
 * <ul>                                                                                                                // 18824
 * <li>http://www.google.com/design/icons/</li>                                                                        // 18825
 * <li>https://www.google.com/design/icons/#ic_accessibility</li>                                                      // 18826
 * </ul>                                                                                                               // 18827
 *                                                                                                                     // 18828
 * <h2 id="material_design_icons">Material Design Icons</h2>                                                           // 18829
 * Using the Material Design Icon-Selector, developers can easily and quickly search for a Material Design font-icon and
 * determine its textual name and character reference code. Click on any icon to see the slide-up information          // 18831
 * panel with details regarding a SVG download or information on the font-icon usage.                                  // 18832
 *                                                                                                                     // 18833
 * <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank" style="border-bottom:none;">        // 18834
 * <img src="https://cloud.githubusercontent.com/assets/210413/7902490/fe8dd14c-0780-11e5-98fb-c821cc6475e6.png"       // 18835
 *      aria-label="Material Design Icon-Selector" style="max-width:75%;padding-left:10%">                             // 18836
 * </a>                                                                                                                // 18837
 *                                                                                                                     // 18838
 * <span class="image_caption">                                                                                        // 18839
 *  Click on the image above to link to the                                                                            // 18840
 *  <a href="https://www.google.com/design/icons/#ic_accessibility" target="_blank">Material Design Icon-Selector</a>.
 * </span>                                                                                                             // 18842
 *                                                                                                                     // 18843
 * @param {string} md-font-icon String name of CSS icon associated with the font-face will be used                     // 18844
 * to render the icon. Requires the fonts and the named CSS styles to be preloaded.                                    // 18845
 * @param {string} md-font-set CSS style name associated with the font library; which will be assigned as              // 18846
 * the class for the font-icon ligature. This value may also be an alias that is used to lookup the classname;         // 18847
 * internally use `$mdIconProvider.fontSet(<alias>)` to determine the style name.                                      // 18848
 * @param {string} md-svg-src String URL (or expression) used to load, cache, and display an                           // 18849
 *     external SVG.                                                                                                   // 18850
 * @param {string} md-svg-icon md-svg-icon String name used for lookup of the icon from the internal cache;            // 18851
 *     interpolated strings or expressions may also be used. Specific set names can be used with                       // 18852
 *     the syntax `<set name>:<icon name>`.<br/><br/>                                                                  // 18853
 * To use icon sets, developers are required to pre-register the sets using the `$mdIconProvider` service.             // 18854
 * @param {string=} aria-label Labels icon for accessibility. If an empty string is provided, icon                     // 18855
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no aria-label on the icon             // 18856
 * nor a label on the parent element, a warning will be logged to the console.                                         // 18857
 * @param {string=} alt Labels icon for accessibility. If an empty string is provided, icon                            // 18858
 * will be hidden from accessibility layer with `aria-hidden="true"`. If there's no alt on the icon                    // 18859
 * nor a label on the parent element, a warning will be logged to the console. *                                       // 18860
 * @usage                                                                                                              // 18861
 * When using SVGs:                                                                                                    // 18862
 * <hljs lang="html">                                                                                                  // 18863
 *                                                                                                                     // 18864
 *  <!-- Icon ID; may contain optional icon set prefix; icons must registered using $mdIconProvider -->                // 18865
 *  <md-icon md-svg-icon="social:android"    aria-label="android " ></md-icon>                                         // 18866
 *                                                                                                                     // 18867
 *  <!-- Icon urls; may be preloaded in templateCache -->                                                              // 18868
 *  <md-icon md-svg-src="/android.svg"       aria-label="android " ></md-icon>                                         // 18869
 *  <md-icon md-svg-src="{{ getAndroid() }}" aria-label="android " ></md-icon>                                         // 18870
 *                                                                                                                     // 18871
 * </hljs>                                                                                                             // 18872
 *                                                                                                                     // 18873
 * Use the <code>$mdIconProvider</code> to configure your application with                                             // 18874
 * svg iconsets.                                                                                                       // 18875
 *                                                                                                                     // 18876
 * <hljs lang="js">                                                                                                    // 18877
 *  angular.module('appSvgIconSets', ['ngMaterial'])                                                                   // 18878
 *    .controller('DemoCtrl', function($scope) {})                                                                     // 18879
 *    .config(function($mdIconProvider) {                                                                              // 18880
 *      $mdIconProvider                                                                                                // 18881
 *         .iconSet('social', 'img/icons/sets/social-icons.svg', 24)                                                   // 18882
 *         .defaultIconSet('img/icons/sets/core-icons.svg', 24);                                                       // 18883
 *     });                                                                                                             // 18884
 * </hljs>                                                                                                             // 18885
 *                                                                                                                     // 18886
 *                                                                                                                     // 18887
 * When using Font Icons with classnames:                                                                              // 18888
 * <hljs lang="html">                                                                                                  // 18889
 *                                                                                                                     // 18890
 *  <md-icon md-font-icon="android" aria-label="android" ></md-icon>                                                   // 18891
 *  <md-icon class="icon_home"      aria-label="Home"    ></md-icon>                                                   // 18892
 *                                                                                                                     // 18893
 * </hljs>                                                                                                             // 18894
 *                                                                                                                     // 18895
 * When using Material Font Icons with ligatures:                                                                      // 18896
 * <hljs lang="html">                                                                                                  // 18897
 *  <!-- For Material Design Icons -->                                                                                 // 18898
 *  <!-- The class '.material-icons' is auto-added if a style has NOT been specified -->                               // 18899
 *  <md-icon> face </md-icon>                                                                                          // 18900
 *  <md-icon md-font-set="material-icons"> face </md-icon>                                                             // 18901
 *  <md-icon> #xE87C; </md-icon>                                                                                       // 18902
 *  <!-- The class '.material-icons' must be manually added if other styles are also specified-->                      // 18903
 *  <md-icon class="material-icons md-light md-48"> face </md-icon>                                                    // 18904
 * </hljs>                                                                                                             // 18905
 *                                                                                                                     // 18906
 * When using other Font-Icon libraries:                                                                               // 18907
 *                                                                                                                     // 18908
 * <hljs lang="js">                                                                                                    // 18909
 *  // Specify a font-icon style alias                                                                                 // 18910
 *  angular.config(function($mdIconProvider) {                                                                         // 18911
 *    $mdIconProvider.fontSet('fa', 'fontawesome');                                                                    // 18912
 *  });                                                                                                                // 18913
 * </hljs>                                                                                                             // 18914
 *                                                                                                                     // 18915
 * <hljs lang="html">                                                                                                  // 18916
 *  <md-icon md-font-set="fa">email</md-icon>                                                                          // 18917
 * </hljs>                                                                                                             // 18918
 *                                                                                                                     // 18919
 */                                                                                                                    // 18920
function mdIconDirective($mdIcon, $mdTheming, $mdAria ) {                                                              // 18921
                                                                                                                       // 18922
  return {                                                                                                             // 18923
    scope: {                                                                                                           // 18924
      fontSet : '@mdFontSet',                                                                                          // 18925
      fontIcon: '@mdFontIcon',                                                                                         // 18926
      svgIcon : '@mdSvgIcon',                                                                                          // 18927
      svgSrc  : '@mdSvgSrc'                                                                                            // 18928
    },                                                                                                                 // 18929
    restrict: 'E',                                                                                                     // 18930
    link : postLink                                                                                                    // 18931
  };                                                                                                                   // 18932
                                                                                                                       // 18933
                                                                                                                       // 18934
  /**                                                                                                                  // 18935
   * Directive postLink                                                                                                // 18936
   * Supports embedded SVGs, font-icons, & external SVGs                                                               // 18937
   */                                                                                                                  // 18938
  function postLink(scope, element, attr) {                                                                            // 18939
    $mdTheming(element);                                                                                               // 18940
                                                                                                                       // 18941
    prepareForFontIcon();                                                                                              // 18942
                                                                                                                       // 18943
    // If using a font-icon, then the textual name of the icon itself                                                  // 18944
    // provides the aria-label.                                                                                        // 18945
                                                                                                                       // 18946
    var label = attr.alt || scope.fontIcon || scope.svgIcon || element.text();                                         // 18947
    var attrName = attr.$normalize(attr.$attr.mdSvgIcon || attr.$attr.mdSvgSrc || '');                                 // 18948
                                                                                                                       // 18949
    if ( !attr['aria-label'] ) {                                                                                       // 18950
                                                                                                                       // 18951
      if (label != '' && !parentsHaveText() ) {                                                                        // 18952
                                                                                                                       // 18953
        $mdAria.expect(element, 'aria-label', label);                                                                  // 18954
        $mdAria.expect(element, 'role', 'img');                                                                        // 18955
                                                                                                                       // 18956
      } else if ( !element.text() ) {                                                                                  // 18957
        // If not a font-icon with ligature, then                                                                      // 18958
        // hide from the accessibility layer.                                                                          // 18959
                                                                                                                       // 18960
        $mdAria.expect(element, 'aria-hidden', 'true');                                                                // 18961
      }                                                                                                                // 18962
    }                                                                                                                  // 18963
                                                                                                                       // 18964
    if (attrName) {                                                                                                    // 18965
      // Use either pre-configured SVG or URL source, respectively.                                                    // 18966
      attr.$observe(attrName, function(attrVal) {                                                                      // 18967
                                                                                                                       // 18968
        element.empty();                                                                                               // 18969
        if (attrVal) {                                                                                                 // 18970
          $mdIcon(attrVal).then(function(svg) {                                                                        // 18971
            element.append(svg);                                                                                       // 18972
          });                                                                                                          // 18973
        }                                                                                                              // 18974
                                                                                                                       // 18975
      });                                                                                                              // 18976
    }                                                                                                                  // 18977
                                                                                                                       // 18978
    function parentsHaveText() {                                                                                       // 18979
      var parent = element.parent();                                                                                   // 18980
      if (parent.attr('aria-label') || parent.text()) {                                                                // 18981
        return true;                                                                                                   // 18982
      }                                                                                                                // 18983
      else if(parent.parent().attr('aria-label') || parent.parent().text()) {                                          // 18984
        return true;                                                                                                   // 18985
      }                                                                                                                // 18986
      return false;                                                                                                    // 18987
    }                                                                                                                  // 18988
                                                                                                                       // 18989
    function prepareForFontIcon () {                                                                                   // 18990
      if (!scope.svgIcon && !scope.svgSrc) {                                                                           // 18991
                                                                                                                       // 18992
        if (scope.fontIcon) {                                                                                          // 18993
          element.addClass('md-font ' + scope.fontIcon);                                                               // 18994
        }                                                                                                              // 18995
                                                                                                                       // 18996
        if (scope.fontSet) {                                                                                           // 18997
          element.addClass($mdIcon.fontSet(scope.fontSet));                                                            // 18998
        }                                                                                                              // 18999
                                                                                                                       // 19000
        if (shouldUseDefaultFontSet()) {                                                                               // 19001
          element.addClass($mdIcon.fontSet());                                                                         // 19002
        }                                                                                                              // 19003
                                                                                                                       // 19004
      }                                                                                                                // 19005
                                                                                                                       // 19006
      function shouldUseDefaultFontSet() {                                                                             // 19007
        return !scope.fontIcon && !scope.fontSet;                                                                      // 19008
      }                                                                                                                // 19009
    }                                                                                                                  // 19010
  }                                                                                                                    // 19011
}                                                                                                                      // 19012
                                                                                                                       // 19013
})();                                                                                                                  // 19014
(function(){                                                                                                           // 19015
"use strict";                                                                                                          // 19016
                                                                                                                       // 19017
  angular                                                                                                              // 19018
    .module('material.components.icon' )                                                                               // 19019
    .provider('$mdIcon', MdIconProvider);                                                                              // 19020
                                                                                                                       // 19021
  /**                                                                                                                  // 19022
    * @ngdoc service                                                                                                   // 19023
    * @name $mdIconProvider                                                                                            // 19024
    * @module material.components.icon                                                                                 // 19025
    *                                                                                                                  // 19026
    * @description                                                                                                     // 19027
    * `$mdIconProvider` is used only to register icon IDs with URLs. These configuration features allow                // 19028
    * icons and icon sets to be pre-registered and associated with source URLs **before** the `<md-icon />`            // 19029
    * directives are compiled.                                                                                         // 19030
    *                                                                                                                  // 19031
    * If using font-icons, the developer is repsonsible for loading the fonts.                                         // 19032
    *                                                                                                                  // 19033
    * If using SVGs, loading of the actual svg files are deferred to on-demand requests and are loaded                 // 19034
    * internally by the `$mdIcon` service using the `$http` service. When an SVG is requested by name/ID,              // 19035
    * the `$mdIcon` service searches its registry for the associated source URL;                                       // 19036
    * that URL is used to on-demand load and parse the SVG dynamically.                                                // 19037
    *                                                                                                                  // 19038
    * @usage                                                                                                           // 19039
    * <hljs lang="js">                                                                                                 // 19040
    *   app.config(function($mdIconProvider) {                                                                         // 19041
    *                                                                                                                  // 19042
    *     // Configure URLs for icons specified by [set:]id.                                                           // 19043
    *                                                                                                                  // 19044
    *     $mdIconProvider                                                                                              // 19045
    *          .defaultFontSet( 'fontawesome' )                                                                        // 19046
    *          .defaultIconSet('my/app/icons.svg')       // Register a default set of SVG icons                        // 19047
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set of SVGs                          // 19048
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)                         // 19049
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set                            // 19050
    *   });                                                                                                            // 19051
    * </hljs>                                                                                                          // 19052
    *                                                                                                                  // 19053
    * SVG icons and icon sets can be easily pre-loaded and cached using either (a) a build process or (b) a runtime    // 19054
    * **startup** process (shown below):                                                                               // 19055
    *                                                                                                                  // 19056
    * <hljs lang="js">                                                                                                 // 19057
    *   app.config(function($mdIconProvider) {                                                                         // 19058
    *                                                                                                                  // 19059
    *     // Register a default set of SVG icon definitions                                                            // 19060
    *     $mdIconProvider.defaultIconSet('my/app/icons.svg')                                                           // 19061
    *                                                                                                                  // 19062
    *   })                                                                                                             // 19063
    *   .run(function($http, $templateCache){                                                                          // 19064
    *                                                                                                                  // 19065
    *     // Pre-fetch icons sources by URL and cache in the $templateCache...                                         // 19066
    *     // subsequent $http calls will look there first.                                                             // 19067
    *                                                                                                                  // 19068
    *     var urls = [ 'imy/app/icons.svg', 'img/icons/android.svg'];                                                  // 19069
    *                                                                                                                  // 19070
    *     angular.forEach(urls, function(url) {                                                                        // 19071
    *       $http.get(url, {cache: $templateCache});                                                                   // 19072
    *     });                                                                                                          // 19073
    *                                                                                                                  // 19074
    *   });                                                                                                            // 19075
    *                                                                                                                  // 19076
    * </hljs>                                                                                                          // 19077
    *                                                                                                                  // 19078
    * NOTE: the loaded SVG data is subsequently cached internally for future requests.                                 // 19079
    *                                                                                                                  // 19080
    */                                                                                                                 // 19081
                                                                                                                       // 19082
   /**                                                                                                                 // 19083
    * @ngdoc method                                                                                                    // 19084
    * @name $mdIconProvider#icon                                                                                       // 19085
    *                                                                                                                  // 19086
    * @description                                                                                                     // 19087
    * Register a source URL for a specific icon name; the name may include optional 'icon set' name prefix.            // 19088
    * These icons  will later be retrieved from the cache using `$mdIcon( <icon name> )`                               // 19089
    *                                                                                                                  // 19090
    * @param {string} id Icon name/id used to register the icon                                                        // 19091
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 19092
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 19093
    * @param {number=} viewBoxSize Sets the width and height the icon's viewBox.                                       // 19094
    * It is ignored for icons with an existing viewBox. Default size is 24.                                            // 19095
    *                                                                                                                  // 19096
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 19097
    *                                                                                                                  // 19098
    * @usage                                                                                                           // 19099
    * <hljs lang="js">                                                                                                 // 19100
    *   app.config(function($mdIconProvider) {                                                                         // 19101
    *                                                                                                                  // 19102
    *     // Configure URLs for icons specified by [set:]id.                                                           // 19103
    *                                                                                                                  // 19104
    *     $mdIconProvider                                                                                              // 19105
    *          .icon('android', 'my/app/android.svg')    // Register a specific icon (by name)                         // 19106
    *          .icon('work:chair', 'my/app/chair.svg');  // Register icon in a specific set                            // 19107
    *   });                                                                                                            // 19108
    * </hljs>                                                                                                          // 19109
    *                                                                                                                  // 19110
    */                                                                                                                 // 19111
   /**                                                                                                                 // 19112
    * @ngdoc method                                                                                                    // 19113
    * @name $mdIconProvider#iconSet                                                                                    // 19114
    *                                                                                                                  // 19115
    * @description                                                                                                     // 19116
    * Register a source URL for a 'named' set of icons; group of SVG definitions where each definition                 // 19117
    * has an icon id. Individual icons can be subsequently retrieved from this cached set using                        // 19118
    * `$mdIcon(<icon set name>:<icon name>)`                                                                           // 19119
    *                                                                                                                  // 19120
    * @param {string} id Icon name/id used to register the iconset                                                     // 19121
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 19122
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 19123
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set.                   // 19124
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.             // 19125
    * Default value is 24.                                                                                             // 19126
    *                                                                                                                  // 19127
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 19128
    *                                                                                                                  // 19129
    *                                                                                                                  // 19130
    * @usage                                                                                                           // 19131
    * <hljs lang="js">                                                                                                 // 19132
    *   app.config(function($mdIconProvider) {                                                                         // 19133
    *                                                                                                                  // 19134
    *     // Configure URLs for icons specified by [set:]id.                                                           // 19135
    *                                                                                                                  // 19136
    *     $mdIconProvider                                                                                              // 19137
    *          .iconSet('social', 'my/app/social.svg')   // Register a named icon set                                  // 19138
    *   });                                                                                                            // 19139
    * </hljs>                                                                                                          // 19140
    *                                                                                                                  // 19141
    */                                                                                                                 // 19142
   /**                                                                                                                 // 19143
    * @ngdoc method                                                                                                    // 19144
    * @name $mdIconProvider#defaultIconSet                                                                             // 19145
    *                                                                                                                  // 19146
    * @description                                                                                                     // 19147
    * Register a source URL for the default 'named' set of icons. Unless explicitly registered,                        // 19148
    * subsequent lookups of icons will failover to search this 'default' icon set.                                     // 19149
    * Icon can be retrieved from this cached, default set using `$mdIcon(<name>)`                                      // 19150
    *                                                                                                                  // 19151
    * @param {string} url specifies the external location for the data file. Used internally by `$http` to load the    // 19152
    * data or as part of the lookup in `$templateCache` if pre-loading was configured.                                 // 19153
    * @param {number=} viewBoxSize Sets the width and height of the viewBox of all icons in the set.                   // 19154
    * It is ignored for icons with an existing viewBox. All icons in the icon set should be the same size.             // 19155
    * Default value is 24.                                                                                             // 19156
    *                                                                                                                  // 19157
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 19158
    *                                                                                                                  // 19159
    * @usage                                                                                                           // 19160
    * <hljs lang="js">                                                                                                 // 19161
    *   app.config(function($mdIconProvider) {                                                                         // 19162
    *                                                                                                                  // 19163
    *     // Configure URLs for icons specified by [set:]id.                                                           // 19164
    *                                                                                                                  // 19165
    *     $mdIconProvider                                                                                              // 19166
    *          .defaultIconSet( 'my/app/social.svg' )   // Register a default icon set                                 // 19167
    *   });                                                                                                            // 19168
    * </hljs>                                                                                                          // 19169
    *                                                                                                                  // 19170
    */                                                                                                                 // 19171
  /**                                                                                                                  // 19172
   * @ngdoc method                                                                                                     // 19173
   * @name $mdIconProvider#defaultFontSet                                                                              // 19174
   *                                                                                                                   // 19175
   * @description                                                                                                      // 19176
   * When using Font-Icons, Angular Material assumes the the Material Design icons will be used and automatically      // 19177
   * configures the default font-set == 'material-icons'. Note that the font-set references the font-icon library      // 19178
   * class style that should be applied to the `<md-icon>`.                                                            // 19179
   *                                                                                                                   // 19180
   * Configuring the default means that the attributes                                                                 // 19181
   * `md-font-set="material-icons"` or `class="material-icons"` do not need to be explicitly declared on the           // 19182
   * `<md-icon>` markup. For example:                                                                                  // 19183
   *                                                                                                                   // 19184
   *  `<md-icon> face </md-icon>`                                                                                      // 19185
   *  will render as                                                                                                   // 19186
   *  `<span class="material-icons"> face </span>`, and                                                                // 19187
   *                                                                                                                   // 19188
   *  `<md-icon md-font-set="fa"> face </md-icon>`                                                                     // 19189
   *  will render as                                                                                                   // 19190
   *  `<span class="fa"> face </span>`                                                                                 // 19191
   *                                                                                                                   // 19192
   * @param {string} name of the font-library style that should be applied to the md-icon DOM element                  // 19193
   *                                                                                                                   // 19194
   * @usage                                                                                                            // 19195
   * <hljs lang="js">                                                                                                  // 19196
   *   app.config(function($mdIconProvider) {                                                                          // 19197
   *     $mdIconProvider.defaultFontSet( 'fontawesome' );                                                              // 19198
   *   });                                                                                                             // 19199
   * </hljs>                                                                                                           // 19200
   *                                                                                                                   // 19201
   */                                                                                                                  // 19202
                                                                                                                       // 19203
   /**                                                                                                                 // 19204
    * @ngdoc method                                                                                                    // 19205
    * @name $mdIconProvider#defaultViewBoxSize                                                                         // 19206
    *                                                                                                                  // 19207
    * @description                                                                                                     // 19208
    * While `<md-icon />` markup can also be style with sizing CSS, this method configures                             // 19209
    * the default width **and** height used for all icons; unless overridden by specific CSS.                          // 19210
    * The default sizing is (24px, 24px).                                                                              // 19211
    * @param {number=} viewBoxSize Sets the width and height of the viewBox for an icon or an icon set.                // 19212
    * All icons in a set should be the same size. The default value is 24.                                             // 19213
    *                                                                                                                  // 19214
    * @returns {obj} an `$mdIconProvider` reference; used to support method call chains for the API                    // 19215
    *                                                                                                                  // 19216
    * @usage                                                                                                           // 19217
    * <hljs lang="js">                                                                                                 // 19218
    *   app.config(function($mdIconProvider) {                                                                         // 19219
    *                                                                                                                  // 19220
    *     // Configure URLs for icons specified by [set:]id.                                                           // 19221
    *                                                                                                                  // 19222
    *     $mdIconProvider                                                                                              // 19223
    *          .defaultViewBoxSize(36)   // Register a default icon size (width == height)                             // 19224
    *   });                                                                                                            // 19225
    * </hljs>                                                                                                          // 19226
    *                                                                                                                  // 19227
    */                                                                                                                 // 19228
                                                                                                                       // 19229
 var config = {                                                                                                        // 19230
   defaultViewBoxSize: 24,                                                                                             // 19231
   defaultFontSet: 'material-icons',                                                                                   // 19232
   fontSets : [ ]                                                                                                      // 19233
 };                                                                                                                    // 19234
                                                                                                                       // 19235
 function MdIconProvider() { }                                                                                         // 19236
                                                                                                                       // 19237
 MdIconProvider.prototype = {                                                                                          // 19238
   icon : function (id, url, viewBoxSize) {                                                                            // 19239
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;                                                               // 19240
                                                                                                                       // 19241
     config[id] = new ConfigurationItem(url, viewBoxSize );                                                            // 19242
     return this;                                                                                                      // 19243
   },                                                                                                                  // 19244
                                                                                                                       // 19245
   iconSet : function (id, url, viewBoxSize) {                                                                         // 19246
     config[id] = new ConfigurationItem(url, viewBoxSize );                                                            // 19247
     return this;                                                                                                      // 19248
   },                                                                                                                  // 19249
                                                                                                                       // 19250
   defaultIconSet : function (url, viewBoxSize) {                                                                      // 19251
     var setName = '$default';                                                                                         // 19252
                                                                                                                       // 19253
     if ( !config[setName] ) {                                                                                         // 19254
       config[setName] = new ConfigurationItem(url, viewBoxSize );                                                     // 19255
     }                                                                                                                 // 19256
                                                                                                                       // 19257
     config[setName].viewBoxSize = viewBoxSize || config.defaultViewBoxSize;                                           // 19258
                                                                                                                       // 19259
     return this;                                                                                                      // 19260
   },                                                                                                                  // 19261
                                                                                                                       // 19262
   defaultViewBoxSize : function (viewBoxSize) {                                                                       // 19263
     config.defaultViewBoxSize = viewBoxSize;                                                                          // 19264
     return this;                                                                                                      // 19265
   },                                                                                                                  // 19266
                                                                                                                       // 19267
   /**                                                                                                                 // 19268
    * Register an alias name associated with a font-icon library style ;                                               // 19269
    */                                                                                                                 // 19270
   fontSet : function fontSet(alias, className) {                                                                      // 19271
    config.fontSets.push({                                                                                             // 19272
      alias : alias,                                                                                                   // 19273
      fontSet : className || alias                                                                                     // 19274
    });                                                                                                                // 19275
    return this;                                                                                                       // 19276
   },                                                                                                                  // 19277
                                                                                                                       // 19278
   /**                                                                                                                 // 19279
    * Specify a default style name associated with a font-icon library                                                 // 19280
    * fallback to Material Icons.                                                                                      // 19281
    *                                                                                                                  // 19282
    */                                                                                                                 // 19283
   defaultFontSet : function defaultFontSet(className) {                                                               // 19284
    config.defaultFontSet = !className ? '' : className;                                                               // 19285
    return this;                                                                                                       // 19286
   },                                                                                                                  // 19287
                                                                                                                       // 19288
   defaultIconSize : function defaultIconSize(iconSize) {                                                              // 19289
     config.defaultIconSize = iconSize;                                                                                // 19290
     return this;                                                                                                      // 19291
   },                                                                                                                  // 19292
                                                                                                                       // 19293
   preloadIcons: function ($templateCache) {                                                                           // 19294
     var iconProvider = this;                                                                                          // 19295
     var svgRegistry = [                                                                                               // 19296
       {                                                                                                               // 19297
         id : 'md-tabs-arrow',                                                                                         // 19298
         url: 'md-tabs-arrow.svg',                                                                                     // 19299
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><polygon points="15.4,7.4 14,6 8,12 14,18 15.4,16.6 10.8,12 "/></g></svg>'
       },                                                                                                              // 19301
       {                                                                                                               // 19302
         id : 'md-close',                                                                                              // 19303
         url: 'md-close.svg',                                                                                          // 19304
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M19 6.41l-1.41-1.41-5.59 5.59-5.59-5.59-1.41 1.41 5.59 5.59-5.59 5.59 1.41 1.41 5.59-5.59 5.59 5.59 1.41-1.41-5.59-5.59z"/></g></svg>'
       },                                                                                                              // 19306
       {                                                                                                               // 19307
         id:  'md-cancel',                                                                                             // 19308
         url: 'md-cancel.svg',                                                                                         // 19309
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><g><path d="M12 2c-5.53 0-10 4.47-10 10s4.47 10 10 10 10-4.47 10-10-4.47-10-10-10zm5 13.59l-1.41 1.41-3.59-3.59-3.59 3.59-1.41-1.41 3.59-3.59-3.59-3.59 1.41-1.41 3.59 3.59 3.59-3.59 1.41 1.41-3.59 3.59 3.59 3.59z"/></g></svg>'
       },                                                                                                              // 19311
       {                                                                                                               // 19312
         id:  'md-menu',                                                                                               // 19313
         url: 'md-menu.svg',                                                                                           // 19314
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 24 24"><path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z" /></svg>'
       },                                                                                                              // 19316
       {                                                                                                               // 19317
         id:  'md-toggle-arrow',                                                                                       // 19318
         url: 'md-toggle-arrow-svg',                                                                                   // 19319
         svg: '<svg version="1.1" x="0px" y="0px" viewBox="0 0 48 48"><path d="M24 16l-12 12 2.83 2.83 9.17-9.17 9.17 9.17 2.83-2.83z"/><path d="M0 0h48v48h-48z" fill="none"/></svg>'
       },                                                                                                              // 19321
       {                                                                                                               // 19322
         id:  'md-calendar',                                                                                           // 19323
         url: 'md-calendar.svg',                                                                                       // 19324
         svg: '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z"/></svg>'
       }                                                                                                               // 19326
     ];                                                                                                                // 19327
                                                                                                                       // 19328
     svgRegistry.forEach(function(asset){                                                                              // 19329
       iconProvider.icon(asset.id,  asset.url);                                                                        // 19330
       $templateCache.put(asset.url, asset.svg);                                                                       // 19331
     });                                                                                                               // 19332
                                                                                                                       // 19333
   },                                                                                                                  // 19334
                                                                                                                       // 19335
   $get : ['$http', '$q', '$log', '$templateCache', function($http, $q, $log, $templateCache) {                        // 19336
     this.preloadIcons($templateCache);                                                                                // 19337
     return MdIconService(config, $http, $q, $log, $templateCache);                                                    // 19338
   }]                                                                                                                  // 19339
 };                                                                                                                    // 19340
                                                                                                                       // 19341
   /**                                                                                                                 // 19342
    *  Configuration item stored in the Icon registry; used for lookups                                                // 19343
    *  to load if not already cached in the `loaded` cache                                                             // 19344
    */                                                                                                                 // 19345
   function ConfigurationItem(url, viewBoxSize) {                                                                      // 19346
     this.url = url;                                                                                                   // 19347
     this.viewBoxSize = viewBoxSize || config.defaultViewBoxSize;                                                      // 19348
   }                                                                                                                   // 19349
                                                                                                                       // 19350
 /**                                                                                                                   // 19351
  * @ngdoc service                                                                                                     // 19352
  * @name $mdIcon                                                                                                      // 19353
  * @module material.components.icon                                                                                   // 19354
  *                                                                                                                    // 19355
  * @description                                                                                                       // 19356
  * The `$mdIcon` service is a function used to lookup SVG icons.                                                      // 19357
  *                                                                                                                    // 19358
  * @param {string} id Query value for a unique Id or URL. If the argument is a URL, then the service will retrieve the icon element
  * from its internal cache or load the icon and cache it first. If the value is not a URL-type string, then an ID lookup is
  * performed. The Id may be a unique icon ID or may include an iconSet ID prefix.                                     // 19361
  *                                                                                                                    // 19362
  * For the **id** query to work properly, this means that all id-to-URL mappings must have been previously configured
  * using the `$mdIconProvider`.                                                                                       // 19364
  *                                                                                                                    // 19365
  * @returns {obj} Clone of the initial SVG DOM element; which was created from the SVG markup in the SVG data file.   // 19366
  *                                                                                                                    // 19367
  * @usage                                                                                                             // 19368
  * <hljs lang="js">                                                                                                   // 19369
  * function SomeDirective($mdIcon) {                                                                                  // 19370
  *                                                                                                                    // 19371
  *   // See if the icon has already been loaded, if not                                                               // 19372
  *   // then lookup the icon from the registry cache, load and cache                                                  // 19373
  *   // it for future requests.                                                                                       // 19374
  *   // NOTE: ID queries require configuration with $mdIconProvider                                                   // 19375
  *                                                                                                                    // 19376
  *   $mdIcon('android').then(function(iconEl)    { element.append(iconEl); });                                        // 19377
  *   $mdIcon('work:chair').then(function(iconEl) { element.append(iconEl); });                                        // 19378
  *                                                                                                                    // 19379
  *   // Load and cache the external SVG using a URL                                                                   // 19380
  *                                                                                                                    // 19381
  *   $mdIcon('img/icons/android.svg').then(function(iconEl) {                                                         // 19382
  *     element.append(iconEl);                                                                                        // 19383
  *   });                                                                                                              // 19384
  * };                                                                                                                 // 19385
  * </hljs>                                                                                                            // 19386
  *                                                                                                                    // 19387
  * NOTE: The `<md-icon />  ` directive internally uses the `$mdIcon` service to query, loaded, and instantiate        // 19388
  * SVG DOM elements.                                                                                                  // 19389
  */                                                                                                                   // 19390
                                                                                                                       // 19391
  /* @ngInject */                                                                                                      // 19392
 function MdIconService(config, $http, $q, $log, $templateCache) {                                                     // 19393
   var iconCache = {};                                                                                                 // 19394
   var urlRegex = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/i;                  // 19395
                                                                                                                       // 19396
   Icon.prototype = { clone : cloneSVG, prepare: prepareAndStyle };                                                    // 19397
   getIcon.fontSet = findRegisteredFontSet;                                                                            // 19398
                                                                                                                       // 19399
   // Publish service...                                                                                               // 19400
   return getIcon;                                                                                                     // 19401
                                                                                                                       // 19402
   /**                                                                                                                 // 19403
    * Actual $mdIcon service is essentially a lookup function                                                          // 19404
    */                                                                                                                 // 19405
   function getIcon(id) {                                                                                              // 19406
     id = id || '';                                                                                                    // 19407
                                                                                                                       // 19408
     // If already loaded and cached, use a clone of the cached icon.                                                  // 19409
     // Otherwise either load by URL, or lookup in the registry and then load by URL, and cache.                       // 19410
                                                                                                                       // 19411
     if ( iconCache[id]         ) return $q.when( iconCache[id].clone() );                                             // 19412
     if ( urlRegex.test(id)     ) return loadByURL(id).then( cacheIcon(id) );                                          // 19413
     if ( id.indexOf(':') == -1 ) id = '$default:' + id;                                                               // 19414
                                                                                                                       // 19415
     var load = config[id] ? loadByID : loadFromIconSet;                                                               // 19416
     return load(id)                                                                                                   // 19417
         .then( cacheIcon(id) );                                                                                       // 19418
   }                                                                                                                   // 19419
                                                                                                                       // 19420
   /**                                                                                                                 // 19421
    * Lookup registered fontSet style using its alias...                                                               // 19422
    * If not found,                                                                                                    // 19423
    */                                                                                                                 // 19424
   function findRegisteredFontSet(alias) {                                                                             // 19425
      var useDefault = angular.isUndefined(alias) || !(alias && alias.length);                                         // 19426
      if ( useDefault ) return config.defaultFontSet;                                                                  // 19427
                                                                                                                       // 19428
      var result = alias;                                                                                              // 19429
      angular.forEach(config.fontSets, function(it){                                                                   // 19430
        if ( it.alias == alias ) result = it.fontSet || result;                                                        // 19431
      });                                                                                                              // 19432
                                                                                                                       // 19433
      return result;                                                                                                   // 19434
   }                                                                                                                   // 19435
                                                                                                                       // 19436
   /**                                                                                                                 // 19437
    * Prepare and cache the loaded icon for the specified `id`                                                         // 19438
    */                                                                                                                 // 19439
   function cacheIcon( id ) {                                                                                          // 19440
                                                                                                                       // 19441
     return function updateCache( icon ) {                                                                             // 19442
       iconCache[id] = isIcon(icon) ? icon : new Icon(icon, config[id]);                                               // 19443
                                                                                                                       // 19444
       return iconCache[id].clone();                                                                                   // 19445
     };                                                                                                                // 19446
   }                                                                                                                   // 19447
                                                                                                                       // 19448
   /**                                                                                                                 // 19449
    * Lookup the configuration in the registry, if !registered throw an error                                          // 19450
    * otherwise load the icon [on-demand] using the registered URL.                                                    // 19451
    *                                                                                                                  // 19452
    */                                                                                                                 // 19453
   function loadByID(id) {                                                                                             // 19454
    var iconConfig = config[id];                                                                                       // 19455
     return loadByURL(iconConfig.url).then(function(icon) {                                                            // 19456
       return new Icon(icon, iconConfig);                                                                              // 19457
     });                                                                                                               // 19458
   }                                                                                                                   // 19459
                                                                                                                       // 19460
   /**                                                                                                                 // 19461
    *    Loads the file as XML and uses querySelector( <id> ) to find                                                  // 19462
    *    the desired node...                                                                                           // 19463
    */                                                                                                                 // 19464
   function loadFromIconSet(id) {                                                                                      // 19465
     var setName = id.substring(0, id.lastIndexOf(':')) || '$default';                                                 // 19466
     var iconSetConfig = config[setName];                                                                              // 19467
                                                                                                                       // 19468
     return !iconSetConfig ? announceIdNotFound(id) : loadByURL(iconSetConfig.url).then(extractFromSet);               // 19469
                                                                                                                       // 19470
     function extractFromSet(set) {                                                                                    // 19471
       var iconName = id.slice(id.lastIndexOf(':') + 1);                                                               // 19472
       var icon = set.querySelector('#' + iconName);                                                                   // 19473
       return !icon ? announceIdNotFound(id) : new Icon(icon, iconSetConfig);                                          // 19474
     }                                                                                                                 // 19475
                                                                                                                       // 19476
     function announceIdNotFound(id) {                                                                                 // 19477
       var msg = 'icon ' + id + ' not found';                                                                          // 19478
      $log.warn(msg);                                                                                                  // 19479
                                                                                                                       // 19480
       return $q.reject(msg || id);                                                                                    // 19481
     }                                                                                                                 // 19482
   }                                                                                                                   // 19483
                                                                                                                       // 19484
   /**                                                                                                                 // 19485
    * Load the icon by URL (may use the $templateCache).                                                               // 19486
    * Extract the data for later conversion to Icon                                                                    // 19487
    */                                                                                                                 // 19488
   function loadByURL(url) {                                                                                           // 19489
     return $http                                                                                                      // 19490
       .get(url, { cache: $templateCache })                                                                            // 19491
       .then(function(response) {                                                                                      // 19492
         return angular.element('<div>').append(response.data).find('svg')[0];                                         // 19493
       }).catch(announceNotFound);                                                                                     // 19494
   }                                                                                                                   // 19495
                                                                                                                       // 19496
   /**                                                                                                                 // 19497
    * Catch HTTP or generic errors not related to incorrect icon IDs.                                                  // 19498
    */                                                                                                                 // 19499
   function announceNotFound(err) {                                                                                    // 19500
     var msg = angular.isString(err) ? err : (err.message || err.data || err.statusText);                              // 19501
     $log.warn(msg);                                                                                                   // 19502
                                                                                                                       // 19503
     return $q.reject(msg);                                                                                            // 19504
   }                                                                                                                   // 19505
                                                                                                                       // 19506
   /**                                                                                                                 // 19507
    * Check target signature to see if it is an Icon instance.                                                         // 19508
    */                                                                                                                 // 19509
   function isIcon(target) {                                                                                           // 19510
     return angular.isDefined(target.element) && angular.isDefined(target.config);                                     // 19511
   }                                                                                                                   // 19512
                                                                                                                       // 19513
   /**                                                                                                                 // 19514
    *  Define the Icon class                                                                                           // 19515
    */                                                                                                                 // 19516
   function Icon(el, config) {                                                                                         // 19517
     if (el.tagName != 'svg') {                                                                                        // 19518
       el = angular.element('<svg xmlns="http://www.w3.org/2000/svg">').append(el)[0];                                 // 19519
     }                                                                                                                 // 19520
                                                                                                                       // 19521
     // Inject the namespace if not available...                                                                       // 19522
     if ( !el.getAttribute('xmlns') ) {                                                                                // 19523
       el.setAttribute('xmlns', "http://www.w3.org/2000/svg");                                                         // 19524
     }                                                                                                                 // 19525
                                                                                                                       // 19526
     this.element = el;                                                                                                // 19527
     this.config = config;                                                                                             // 19528
     this.prepare();                                                                                                   // 19529
   }                                                                                                                   // 19530
                                                                                                                       // 19531
   /**                                                                                                                 // 19532
    *  Prepare the DOM element that will be cached in the                                                              // 19533
    *  loaded iconCache store.                                                                                         // 19534
    */                                                                                                                 // 19535
   function prepareAndStyle() {                                                                                        // 19536
     var viewBoxSize = this.config ? this.config.viewBoxSize : config.defaultViewBoxSize;                              // 19537
         angular.forEach({                                                                                             // 19538
           'fit'   : '',                                                                                               // 19539
           'height': '100%',                                                                                           // 19540
           'width' : '100%',                                                                                           // 19541
           'preserveAspectRatio': 'xMidYMid meet',                                                                     // 19542
           'viewBox' : this.element.getAttribute('viewBox') || ('0 0 ' + viewBoxSize + ' ' + viewBoxSize)              // 19543
         }, function(val, attr) {                                                                                      // 19544
           this.element.setAttribute(attr, val);                                                                       // 19545
         }, this);                                                                                                     // 19546
                                                                                                                       // 19547
         angular.forEach({                                                                                             // 19548
           'pointer-events' : 'none',                                                                                  // 19549
           'display' : 'block'                                                                                         // 19550
         }, function(val, style) {                                                                                     // 19551
           this.element.style[style] = val;                                                                            // 19552
         }, this);                                                                                                     // 19553
   }                                                                                                                   // 19554
                                                                                                                       // 19555
   /**                                                                                                                 // 19556
    * Clone the Icon DOM element.                                                                                      // 19557
    */                                                                                                                 // 19558
   function cloneSVG(){                                                                                                // 19559
     return this.element.cloneNode(true);                                                                              // 19560
   }                                                                                                                   // 19561
                                                                                                                       // 19562
 }                                                                                                                     // 19563
 MdIconService.$inject = ["config", "$http", "$q", "$log", "$templateCache"];                                          // 19564
                                                                                                                       // 19565
})();                                                                                                                  // 19566
(function(){                                                                                                           // 19567
"use strict";                                                                                                          // 19568
                                                                                                                       // 19569
                                                                                                                       // 19570
                                                                                                                       // 19571
angular                                                                                                                // 19572
    .module('material.components.menu')                                                                                // 19573
    .controller('mdMenuCtrl', MenuController);                                                                         // 19574
                                                                                                                       // 19575
/**                                                                                                                    // 19576
 * @ngInject                                                                                                           // 19577
 */                                                                                                                    // 19578
function MenuController($mdMenu, $attrs, $element, $scope, $mdUtil, $timeout) {                                        // 19579
                                                                                                                       // 19580
  var menuContainer;                                                                                                   // 19581
  var self = this;                                                                                                     // 19582
  var triggerElement;                                                                                                  // 19583
                                                                                                                       // 19584
  this.nestLevel = parseInt($attrs.mdNestLevel, 10) || 0;                                                              // 19585
                                                                                                                       // 19586
  /**                                                                                                                  // 19587
   * Called by our linking fn to provide access to the menu-content                                                    // 19588
   * element removed during link                                                                                       // 19589
   */                                                                                                                  // 19590
  this.init = function init(setMenuContainer, opts) {                                                                  // 19591
    opts = opts || {};                                                                                                 // 19592
    menuContainer = setMenuContainer;                                                                                  // 19593
    // Default element for ARIA attributes has the ngClick or ngMouseenter expression                                  // 19594
    triggerElement = $element[0].querySelector('[ng-click],[ng-mouseenter]');                                          // 19595
                                                                                                                       // 19596
    this.isInMenuBar = opts.isInMenuBar;                                                                               // 19597
    this.nestedMenus = $mdUtil.nodesToArray(menuContainer[0].querySelectorAll('.md-nested-menu'));                     // 19598
    this.enableHoverListener();                                                                                        // 19599
                                                                                                                       // 19600
    menuContainer.on('$mdInterimElementRemove', function() {                                                           // 19601
      self.isOpen = false;                                                                                             // 19602
    });                                                                                                                // 19603
  };                                                                                                                   // 19604
                                                                                                                       // 19605
  this.enableHoverListener = function() {                                                                              // 19606
    $scope.$on('$mdMenuOpen', function(event, el) {                                                                    // 19607
      if (menuContainer[0].contains(el[0])) {                                                                          // 19608
        self.currentlyOpenMenu = el.controller('mdMenu');                                                              // 19609
        self.isAlreadyOpening = false;                                                                                 // 19610
        self.currentlyOpenMenu.registerContainerProxy(self.triggerContainerProxy.bind(self));                          // 19611
      }                                                                                                                // 19612
    });                                                                                                                // 19613
    $scope.$on('$mdMenuClose', function(event, el) {                                                                   // 19614
      if (menuContainer[0].contains(el[0])) {                                                                          // 19615
        self.currentlyOpenMenu = undefined;                                                                            // 19616
      }                                                                                                                // 19617
    });                                                                                                                // 19618
                                                                                                                       // 19619
    var menuItems = angular.element($mdUtil.nodesToArray(menuContainer[0].querySelectorAll('md-menu-item')));          // 19620
                                                                                                                       // 19621
    var openMenuTimeout;                                                                                               // 19622
    menuItems.on('mouseenter', function(event) {                                                                       // 19623
      if (self.isAlreadyOpening) return;                                                                               // 19624
      var nestedMenu = (                                                                                               // 19625
        event.target.querySelector('md-menu')                                                                          // 19626
          || $mdUtil.getClosest(event.target, 'MD-MENU')                                                               // 19627
      );                                                                                                               // 19628
      openMenuTimeout = $timeout(function() {                                                                          // 19629
        if (nestedMenu) {                                                                                              // 19630
          nestedMenu = angular.element(nestedMenu).controller('mdMenu');                                               // 19631
        }                                                                                                              // 19632
                                                                                                                       // 19633
        if (self.currentlyOpenMenu && self.currentlyOpenMenu != nestedMenu) {                                          // 19634
          var closeTo = self.nestLevel + 1;                                                                            // 19635
          self.currentlyOpenMenu.close(true, { closeTo: closeTo });                                                    // 19636
        } else if (nestedMenu && !nestedMenu.isOpen && nestedMenu.open) {                                              // 19637
          self.isAlreadyOpening = true;                                                                                // 19638
          nestedMenu.open();                                                                                           // 19639
        }                                                                                                              // 19640
      }, nestedMenu ? 100 : 250);                                                                                      // 19641
      var focusableTarget = event.currentTarget.querySelector('[tabindex]');                                           // 19642
      focusableTarget && focusableTarget.focus();                                                                      // 19643
    });                                                                                                                // 19644
    menuItems.on('mouseleave', function(event) {                                                                       // 19645
      if (openMenuTimeout) {                                                                                           // 19646
        $timeout.cancel(openMenuTimeout);                                                                              // 19647
        openMenuTimeout = undefined;                                                                                   // 19648
      }                                                                                                                // 19649
    });                                                                                                                // 19650
  };                                                                                                                   // 19651
                                                                                                                       // 19652
  /**                                                                                                                  // 19653
   * Uses the $mdMenu interim element service to open the menu contents                                                // 19654
   */                                                                                                                  // 19655
  this.open = function openMenu(ev) {                                                                                  // 19656
    ev && ev.stopPropagation();                                                                                        // 19657
    ev && ev.preventDefault();                                                                                         // 19658
    if (self.isOpen) return;                                                                                           // 19659
    self.isOpen = true;                                                                                                // 19660
    triggerElement = triggerElement || (ev ? ev.target : $element[0]);                                                 // 19661
    $scope.$emit('$mdMenuOpen', $element);                                                                             // 19662
    $mdMenu.show({                                                                                                     // 19663
      scope: $scope,                                                                                                   // 19664
      mdMenuCtrl: self,                                                                                                // 19665
      nestLevel: self.nestLevel,                                                                                       // 19666
      element: menuContainer,                                                                                          // 19667
      target: triggerElement,                                                                                          // 19668
      preserveElement: self.isInMenuBar || self.nestedMenus.length > 0,                                                // 19669
      parent: self.isInMenuBar ? $element : 'body'                                                                     // 19670
    });                                                                                                                // 19671
  };                                                                                                                   // 19672
                                                                                                                       // 19673
  // Expose a open function to the child scope for html to use                                                         // 19674
  $scope.$mdOpenMenu = this.open;                                                                                      // 19675
                                                                                                                       // 19676
  $scope.$watch(function() { return self.isOpen; }, function(isOpen) {                                                 // 19677
    if (isOpen) {                                                                                                      // 19678
      triggerElement.setAttribute('aria-expanded', 'true');                                                            // 19679
      $element[0].classList.add('md-open');                                                                            // 19680
      angular.forEach(self.nestedMenus, function(el) {                                                                 // 19681
        el.classList.remove('md-open');                                                                                // 19682
      });                                                                                                              // 19683
    } else {                                                                                                           // 19684
      triggerElement && triggerElement.setAttribute('aria-expanded', 'false');                                         // 19685
      $element[0].classList.remove('md-open');                                                                         // 19686
    }                                                                                                                  // 19687
    $scope.$mdMenuIsOpen = self.isOpen;                                                                                // 19688
  });                                                                                                                  // 19689
                                                                                                                       // 19690
  this.focusMenuContainer = function focusMenuContainer() {                                                            // 19691
    var focusTarget = menuContainer[0].querySelector('[md-menu-focus-target]');                                        // 19692
    if (!focusTarget) focusTarget = menuContainer[0].querySelector('.md-button');                                      // 19693
    focusTarget.focus();                                                                                               // 19694
  };                                                                                                                   // 19695
                                                                                                                       // 19696
  this.registerContainerProxy = function registerContainerProxy(handler) {                                             // 19697
    this.containerProxy = handler;                                                                                     // 19698
  };                                                                                                                   // 19699
                                                                                                                       // 19700
  this.triggerContainerProxy = function triggerContainerProxy(ev) {                                                    // 19701
    this.containerProxy && this.containerProxy(ev);                                                                    // 19702
  };                                                                                                                   // 19703
                                                                                                                       // 19704
  this.destroy = function() {                                                                                          // 19705
    return $mdMenu.destroy();                                                                                          // 19706
  };                                                                                                                   // 19707
                                                                                                                       // 19708
  // Use the $mdMenu interim element service to close the menu contents                                                // 19709
  this.close = function closeMenu(skipFocus, closeOpts) {                                                              // 19710
    if ( !self.isOpen ) return;                                                                                        // 19711
    self.isOpen = false;                                                                                               // 19712
                                                                                                                       // 19713
    $scope.$emit('$mdMenuClose', $element);                                                                            // 19714
    $mdMenu.hide(null, closeOpts);                                                                                     // 19715
                                                                                                                       // 19716
    if (!skipFocus) {                                                                                                  // 19717
      var el = self.restoreFocusTo || $element.find('button')[0];                                                      // 19718
      if (el instanceof angular.element) el = el[0];                                                                   // 19719
      if (el) el.focus();                                                                                              // 19720
    }                                                                                                                  // 19721
  };                                                                                                                   // 19722
                                                                                                                       // 19723
  /**                                                                                                                  // 19724
   * Build a nice object out of our string attribute which specifies the                                               // 19725
   * target mode for left and top positioning                                                                          // 19726
   */                                                                                                                  // 19727
  this.positionMode = function positionMode() {                                                                        // 19728
    var attachment = ($attrs.mdPositionMode || 'target').split(' ');                                                   // 19729
                                                                                                                       // 19730
    // If attachment is a single item, duplicate it for our second value.                                              // 19731
    // ie. 'target' -> 'target target'                                                                                 // 19732
    if (attachment.length == 1) {                                                                                      // 19733
      attachment.push(attachment[0]);                                                                                  // 19734
    }                                                                                                                  // 19735
                                                                                                                       // 19736
    return {                                                                                                           // 19737
      left: attachment[0],                                                                                             // 19738
      top: attachment[1]                                                                                               // 19739
    };                                                                                                                 // 19740
  }                                                                                                                    // 19741
                                                                                                                       // 19742
  /**                                                                                                                  // 19743
   * Build a nice object out of our string attribute which specifies                                                   // 19744
   * the offset of top and left in pixels.                                                                             // 19745
   */                                                                                                                  // 19746
  this.offsets = function offsets() {                                                                                  // 19747
    var position = ($attrs.mdOffset || '0 0').split(' ').map(parseFloat);                                              // 19748
    if (position.length == 2) {                                                                                        // 19749
      return {                                                                                                         // 19750
        left: position[0],                                                                                             // 19751
        top: position[1]                                                                                               // 19752
      };                                                                                                               // 19753
    } else if (position.length == 1) {                                                                                 // 19754
      return {                                                                                                         // 19755
        top: position[0],                                                                                              // 19756
        left: position[0]                                                                                              // 19757
      };                                                                                                               // 19758
    } else {                                                                                                           // 19759
      throw Error('Invalid offsets specified. Please follow format <x, y> or <n>');                                    // 19760
    }                                                                                                                  // 19761
  }                                                                                                                    // 19762
}                                                                                                                      // 19763
MenuController.$inject = ["$mdMenu", "$attrs", "$element", "$scope", "$mdUtil", "$timeout"];                           // 19764
                                                                                                                       // 19765
})();                                                                                                                  // 19766
(function(){                                                                                                           // 19767
"use strict";                                                                                                          // 19768
                                                                                                                       // 19769
/**                                                                                                                    // 19770
 * @ngdoc directive                                                                                                    // 19771
 * @name mdMenu                                                                                                        // 19772
 * @module material.components.menu                                                                                    // 19773
 * @restrict E                                                                                                         // 19774
 * @description                                                                                                        // 19775
 *                                                                                                                     // 19776
 * Menus are elements that open when clicked. They are useful for displaying                                           // 19777
 * additional options within the context of an action.                                                                 // 19778
 *                                                                                                                     // 19779
 * Every `md-menu` must specify exactly two child elements. The first element is what is                               // 19780
 * left in the DOM and is used to open the menu. This element is called the trigger element.                           // 19781
 * The trigger element's scope has access to `$mdOpenMenu($event)`                                                     // 19782
 * which it may call to open the menu. By passing $event as argument, the                                              // 19783
 * corresponding event is stopped from propagating up the DOM-tree.                                                    // 19784
 *                                                                                                                     // 19785
 * The second element is the `md-menu-content` element which represents the                                            // 19786
 * contents of the menu when it is open. Typically this will contain `md-menu-item`s,                                  // 19787
 * but you can do custom content as well.                                                                              // 19788
 *                                                                                                                     // 19789
 * <hljs lang="html">                                                                                                  // 19790
 * <md-menu>                                                                                                           // 19791
 *  <!-- Trigger element is a md-button with an icon -->                                                               // 19792
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu">                    // 19793
 *    <md-icon md-svg-icon="call:phone"></md-icon>                                                                     // 19794
 *  </md-button>                                                                                                       // 19795
 *  <md-menu-content>                                                                                                  // 19796
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>                        // 19797
 *  </md-menu-content>                                                                                                 // 19798
 * </md-menu>                                                                                                          // 19799
 * </hljs>                                                                                                             // 19800
                                                                                                                       // 19801
 * ## Sizing Menus                                                                                                     // 19802
 *                                                                                                                     // 19803
 * The width of the menu when it is open may be specified by specifying a `width`                                      // 19804
 * attribute on the `md-menu-content` element.                                                                         // 19805
 * See the [Material Design Spec](http://www.google.com/design/spec/components/menus.html#menus-specs)                 // 19806
 * for more information.                                                                                               // 19807
 *                                                                                                                     // 19808
 *                                                                                                                     // 19809
 * ## Aligning Menus                                                                                                   // 19810
 *                                                                                                                     // 19811
 * When a menu opens, it is important that the content aligns with the trigger element.                                // 19812
 * Failure to align menus can result in jarring experiences for users as content                                       // 19813
 * suddenly shifts. To help with this, `md-menu` provides serveral APIs to help                                        // 19814
 * with alignment.                                                                                                     // 19815
 *                                                                                                                     // 19816
 * ### Target Mode                                                                                                     // 19817
 *                                                                                                                     // 19818
 * By default, `md-menu` will attempt to align the `md-menu-content` by aligning                                       // 19819
 * designated child elements in both the trigger and the menu content.                                                 // 19820
 *                                                                                                                     // 19821
 * To specify the alignment element in the `trigger` you can use the `md-menu-origin`                                  // 19822
 * attribute on a child element. If no `md-menu-origin` is specified, the `md-menu`                                    // 19823
 * will be used as the origin element.                                                                                 // 19824
 *                                                                                                                     // 19825
 * Similarly, the `md-menu-content` may specify a `md-menu-align-target` for a                                         // 19826
 * `md-menu-item` to specify the node that it should try and align with.                                               // 19827
 *                                                                                                                     // 19828
 * In this example code, we specify an icon to be our origin element, and an                                           // 19829
 * icon in our menu content to be our alignment target. This ensures that both                                         // 19830
 * icons are aligned when the menu opens.                                                                              // 19831
 *                                                                                                                     // 19832
 * <hljs lang="html">                                                                                                  // 19833
 * <md-menu>                                                                                                           // 19834
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open some menu">                      // 19835
 *    <md-icon md-menu-origin md-svg-icon="call:phone"></md-icon>                                                      // 19836
 *  </md-button>                                                                                                       // 19837
 *  <md-menu-content>                                                                                                  // 19838
 *    <md-menu-item>                                                                                                   // 19839
 *      <md-button ng-click="doSomething()" aria-label="Do something">                                                 // 19840
 *        <md-icon md-menu-align-target md-svg-icon="call:phone"></md-icon>                                            // 19841
 *        Do Something                                                                                                 // 19842
 *      </md-button>                                                                                                   // 19843
 *    </md-menu-item>                                                                                                  // 19844
 *  </md-menu-content>                                                                                                 // 19845
 * </md-menu>                                                                                                          // 19846
 * </hljs>                                                                                                             // 19847
 *                                                                                                                     // 19848
 * Sometimes we want to specify alignment on the right side of an element, for example                                 // 19849
 * if we have a menu on the right side a toolbar, we want to right align our menu content.                             // 19850
 *                                                                                                                     // 19851
 * We can specify the origin by using the `md-position-mode` attribute on both                                         // 19852
 * the `x` and `y` axis. Right now only the `x-axis` has more than one option.                                         // 19853
 * You may specify the default mode of `target target` or                                                              // 19854
 * `target-right target` to specify a right-oriented alignment target. See the                                         // 19855
 * position section of the demos for more examples.                                                                    // 19856
 *                                                                                                                     // 19857
 * ### Menu Offsets                                                                                                    // 19858
 *                                                                                                                     // 19859
 * It is sometimes unavoidable to need to have a deeper level of control for                                           // 19860
 * the positioning of a menu to ensure perfect alignment. `md-menu` provides                                           // 19861
 * the `md-offset` attribute to allow pixel level specificty of adjusting the                                          // 19862
 * exact positioning.                                                                                                  // 19863
 *                                                                                                                     // 19864
 * This offset is provided in the format of `x y` or `n` where `n` will be used                                        // 19865
 * in both the `x` and `y` axis.                                                                                       // 19866
 *                                                                                                                     // 19867
 * For example, to move a menu by `2px` from the top, we can use:                                                      // 19868
 * <hljs lang="html">                                                                                                  // 19869
 * <md-menu md-offset="2 0">                                                                                           // 19870
 *   <!-- menu-content -->                                                                                             // 19871
 * </md-menu>                                                                                                          // 19872
 * </hljs>                                                                                                             // 19873
 *                                                                                                                     // 19874
 * @usage                                                                                                              // 19875
 * <hljs lang="html">                                                                                                  // 19876
 * <md-menu>                                                                                                           // 19877
 *  <md-button ng-click="$mdOpenMenu($event)" class="md-icon-button">                                                  // 19878
 *    <md-icon md-svg-icon="call:phone"></md-icon>                                                                     // 19879
 *  </md-button>                                                                                                       // 19880
 *  <md-menu-content>                                                                                                  // 19881
 *    <md-menu-item><md-button ng-click="doSomething()">Do Something</md-button></md-menu-item>                        // 19882
 *  </md-menu-content>                                                                                                 // 19883
 * </md-menu>                                                                                                          // 19884
 * </hljs>                                                                                                             // 19885
 *                                                                                                                     // 19886
 * @param {string} md-po*ition-mode The position mode in the form of                                                   // 19887
 *           `x`, `y`. Default value is `target`,`target`. Right now the `x` axis                                      // 19888
 *           also suppports `target-right`.                                                                            // 19889
 * @param {string} md-offset An offset to apply to the dropdown after positioning                                      // 19890
 *           `x`, `y`. Default value is `0`,`0`.                                                                       // 19891
 *                                                                                                                     // 19892
 */                                                                                                                    // 19893
                                                                                                                       // 19894
angular                                                                                                                // 19895
    .module('material.components.menu')                                                                                // 19896
    .directive('mdMenu', MenuDirective);                                                                               // 19897
                                                                                                                       // 19898
/**                                                                                                                    // 19899
 * @ngInject                                                                                                           // 19900
 */                                                                                                                    // 19901
function MenuDirective($mdUtil) {                                                                                      // 19902
  var INVALID_PREFIX = 'Invalid HTML for md-menu: ';                                                                   // 19903
  return {                                                                                                             // 19904
    restrict: 'E',                                                                                                     // 19905
    require: ['mdMenu', '?^mdMenuBar'],                                                                                // 19906
    controller: 'mdMenuCtrl', // empty function to be built by link                                                    // 19907
    scope: true,                                                                                                       // 19908
    compile: compile                                                                                                   // 19909
  };                                                                                                                   // 19910
                                                                                                                       // 19911
  function compile(templateElement) {                                                                                  // 19912
    templateElement.addClass('md-menu');                                                                               // 19913
    var triggerElement = templateElement.children()[0];                                                                // 19914
    if (!triggerElement.hasAttribute('ng-click')) {                                                                    // 19915
      triggerElement = triggerElement.querySelector('[ng-click],[ng-mouseenter]') || triggerElement;                   // 19916
    }                                                                                                                  // 19917
    if (triggerElement && (                                                                                            // 19918
      triggerElement.nodeName == 'MD-BUTTON' ||                                                                        // 19919
      triggerElement.nodeName == 'BUTTON'                                                                              // 19920
    ) && !triggerElement.hasAttribute('type')) {                                                                       // 19921
      triggerElement.setAttribute('type', 'button');                                                                   // 19922
    }                                                                                                                  // 19923
                                                                                                                       // 19924
    if (templateElement.children().length != 2) {                                                                      // 19925
      throw Error(INVALID_PREFIX + 'Expected two children elements.');                                                 // 19926
    }                                                                                                                  // 19927
                                                                                                                       // 19928
    // Default element for ARIA attributes has the ngClick or ngMouseenter expression                                  // 19929
    triggerElement && triggerElement.setAttribute('aria-haspopup', 'true');                                            // 19930
                                                                                                                       // 19931
    var nestedMenus = templateElement[0].querySelectorAll('md-menu');                                                  // 19932
    var nestingDepth = parseInt(templateElement[0].getAttribute('md-nest-level'), 10) || 0;                            // 19933
    if (nestedMenus) {                                                                                                 // 19934
      angular.forEach($mdUtil.nodesToArray(nestedMenus), function(menuEl) {                                            // 19935
        if (!menuEl.hasAttribute('md-position-mode')) {                                                                // 19936
          menuEl.setAttribute('md-position-mode', 'cascade');                                                          // 19937
        }                                                                                                              // 19938
        menuEl.classList.add('md-nested-menu');                                                                        // 19939
        menuEl.setAttribute('md-nest-level', nestingDepth + 1);                                                        // 19940
        menuEl.setAttribute('role', 'menu');                                                                           // 19941
      });                                                                                                              // 19942
    }                                                                                                                  // 19943
    return link;                                                                                                       // 19944
  }                                                                                                                    // 19945
                                                                                                                       // 19946
  function link(scope, element, attrs, ctrls) {                                                                        // 19947
    var mdMenuCtrl = ctrls[0];                                                                                         // 19948
    var isInMenuBar = ctrls[1] != undefined;                                                                           // 19949
    // Move everything into a md-menu-container and pass it to the controller                                          // 19950
    var menuContainer = angular.element(                                                                               // 19951
      '<div class="md-open-menu-container md-whiteframe-z2"></div>'                                                    // 19952
    );                                                                                                                 // 19953
    var menuContents = element.children()[1];                                                                          // 19954
    menuContainer.append(menuContents);                                                                                // 19955
    if (isInMenuBar) {                                                                                                 // 19956
      element.append(menuContainer);                                                                                   // 19957
      menuContainer[0].style.display = 'none';                                                                         // 19958
    }                                                                                                                  // 19959
    mdMenuCtrl.init(menuContainer, { isInMenuBar: isInMenuBar });                                                      // 19960
                                                                                                                       // 19961
    scope.$on('$destroy', function() {                                                                                 // 19962
      mdMenuCtrl                                                                                                       // 19963
        .destroy()                                                                                                     // 19964
        .finally(function(){                                                                                           // 19965
          menuContainer.remove();                                                                                      // 19966
        });                                                                                                            // 19967
    });                                                                                                                // 19968
                                                                                                                       // 19969
  }                                                                                                                    // 19970
}                                                                                                                      // 19971
MenuDirective.$inject = ["$mdUtil"];                                                                                   // 19972
                                                                                                                       // 19973
})();                                                                                                                  // 19974
(function(){                                                                                                           // 19975
"use strict";                                                                                                          // 19976
                                                                                                                       // 19977
angular                                                                                                                // 19978
  .module('material.components.menu')                                                                                  // 19979
  .provider('$mdMenu', MenuProvider);                                                                                  // 19980
                                                                                                                       // 19981
/*                                                                                                                     // 19982
 * Interim element provider for the menu.                                                                              // 19983
 * Handles behavior for a menu while it is open, including:                                                            // 19984
 *    - handling animating the menu opening/closing                                                                    // 19985
 *    - handling key/mouse events on the menu element                                                                  // 19986
 *    - handling enabling/disabling scroll while the menu is open                                                      // 19987
 *    - handling redrawing during resizes and orientation changes                                                      // 19988
 *                                                                                                                     // 19989
 */                                                                                                                    // 19990
                                                                                                                       // 19991
function MenuProvider($$interimElementProvider) {                                                                      // 19992
  var MENU_EDGE_MARGIN = 8;                                                                                            // 19993
                                                                                                                       // 19994
  menuDefaultOptions.$inject = ["$mdUtil", "$mdTheming", "$mdConstant", "$document", "$window", "$q", "$$rAF", "$animateCss", "$animate"];
  return $$interimElementProvider('$mdMenu')                                                                           // 19996
    .setDefaults({                                                                                                     // 19997
      methods: ['target'],                                                                                             // 19998
      options: menuDefaultOptions                                                                                      // 19999
    });                                                                                                                // 20000
                                                                                                                       // 20001
  /* @ngInject */                                                                                                      // 20002
  function menuDefaultOptions($mdUtil, $mdTheming, $mdConstant, $document, $window, $q, $$rAF, $animateCss, $animate) {
    var animator = $mdUtil.dom.animator;                                                                               // 20004
                                                                                                                       // 20005
    return {                                                                                                           // 20006
      parent: 'body',                                                                                                  // 20007
      onShow: onShow,                                                                                                  // 20008
      onRemove: onRemove,                                                                                              // 20009
      hasBackdrop: true,                                                                                               // 20010
      disableParentScroll: true,                                                                                       // 20011
      skipCompile: true,                                                                                               // 20012
      preserveScope: true,                                                                                             // 20013
      skipHide: true,                                                                                                  // 20014
      themable: true                                                                                                   // 20015
    };                                                                                                                 // 20016
                                                                                                                       // 20017
    /**                                                                                                                // 20018
     * Show modal backdrop element...                                                                                  // 20019
     * @returns {function(): void} A function that removes this backdrop                                               // 20020
     */                                                                                                                // 20021
    function showBackdrop(scope, element, options) {                                                                   // 20022
      if (options.nestLevel) return angular.noop;                                                                      // 20023
                                                                                                                       // 20024
      // If we are not within a dialog...                                                                              // 20025
      if (options.disableParentScroll && !$mdUtil.getClosest(options.target, 'MD-DIALOG')) {                           // 20026
        // !! DO this before creating the backdrop; since disableScrollAround()                                        // 20027
        //    configures the scroll offset; which is used by mdBackDrop postLink()                                     // 20028
        options.restoreScroll = $mdUtil.disableScrollAround(options.element, options.parent);                          // 20029
      } else {                                                                                                         // 20030
        options.disableParentScroll = false;                                                                           // 20031
      }                                                                                                                // 20032
                                                                                                                       // 20033
      if (options.hasBackdrop) {                                                                                       // 20034
        options.backdrop = $mdUtil.createBackdrop(scope, "md-menu-backdrop md-click-catcher");                         // 20035
                                                                                                                       // 20036
        $animate.enter(options.backdrop, options.parent);                                                              // 20037
      }                                                                                                                // 20038
                                                                                                                       // 20039
      /**                                                                                                              // 20040
       * Hide and destroys the backdrop created by showBackdrop()                                                      // 20041
       */                                                                                                              // 20042
      return function hideBackdrop() {                                                                                 // 20043
        if (options.backdrop) options.backdrop.remove();                                                               // 20044
        if (options.disableParentScroll) options.restoreScroll();                                                      // 20045
      };                                                                                                               // 20046
    }                                                                                                                  // 20047
                                                                                                                       // 20048
    /**                                                                                                                // 20049
     * Removing the menu element from the DOM and remove all associated evetn listeners                                // 20050
     * and backdrop                                                                                                    // 20051
     */                                                                                                                // 20052
    function onRemove(scope, element, opts) {                                                                          // 20053
      opts.cleanupInteraction();                                                                                       // 20054
      opts.cleanupResizing();                                                                                          // 20055
      opts.hideBackdrop();                                                                                             // 20056
                                                                                                                       // 20057
      // For navigation $destroy events, do a quick, non-animated removal,                                             // 20058
      // but for normal closes (from clicks, etc) animate the removal                                                  // 20059
                                                                                                                       // 20060
      return (opts.$destroy === true) ? detachAndClean() : animateRemoval().then( detachAndClean );                    // 20061
                                                                                                                       // 20062
      /**                                                                                                              // 20063
       * For normal closes, animate the removal.                                                                       // 20064
       * For forced closes (like $destroy events), skip the animations                                                 // 20065
       */                                                                                                              // 20066
      function animateRemoval() {                                                                                      // 20067
        return $animateCss(element, {addClass: 'md-leave'}).start();                                                   // 20068
      }                                                                                                                // 20069
                                                                                                                       // 20070
      /**                                                                                                              // 20071
       * Detach the element                                                                                            // 20072
       */                                                                                                              // 20073
      function detachAndClean() {                                                                                      // 20074
        element.removeClass('md-active');                                                                              // 20075
        detachElement(element, opts);                                                                                  // 20076
        opts.alreadyOpen = false;                                                                                      // 20077
      }                                                                                                                // 20078
                                                                                                                       // 20079
    }                                                                                                                  // 20080
                                                                                                                       // 20081
    /**                                                                                                                // 20082
     * Inserts and configures the staged Menu element into the DOM, positioning it,                                    // 20083
     * and wiring up various interaction events                                                                        // 20084
     */                                                                                                                // 20085
    function onShow(scope, element, opts) {                                                                            // 20086
      sanitizeAndConfigure(opts);                                                                                      // 20087
                                                                                                                       // 20088
      // Wire up theming on our menu element                                                                           // 20089
      $mdTheming.inherit(opts.menuContentEl, opts.target);                                                             // 20090
                                                                                                                       // 20091
      // Register various listeners to move menu on resize/orientation change                                          // 20092
      opts.cleanupResizing = startRepositioningOnResize();                                                             // 20093
      opts.hideBackdrop = showBackdrop(scope, element, opts);                                                          // 20094
                                                                                                                       // 20095
      // Return the promise for when our menu is done animating in                                                     // 20096
      return showMenu()                                                                                                // 20097
        .then(function(response) {                                                                                     // 20098
          opts.alreadyOpen = true;                                                                                     // 20099
          opts.cleanupInteraction = activateInteraction();                                                             // 20100
          return response;                                                                                             // 20101
        });                                                                                                            // 20102
                                                                                                                       // 20103
      /**                                                                                                              // 20104
       * Place the menu into the DOM and call positioning related functions                                            // 20105
       */                                                                                                              // 20106
      function showMenu() {                                                                                            // 20107
        if (!opts.preserveElement) {                                                                                   // 20108
          opts.parent.append(element);                                                                                 // 20109
        } else {                                                                                                       // 20110
          element[0].style.display = '';                                                                               // 20111
        }                                                                                                              // 20112
                                                                                                                       // 20113
        return $q(function(resolve) {                                                                                  // 20114
          var position = calculateMenuPosition(element, opts);                                                         // 20115
                                                                                                                       // 20116
          element.removeClass('md-leave');                                                                             // 20117
                                                                                                                       // 20118
          // Animate the menu scaling, and opacity [from its position origin (default == top-left)]                    // 20119
          // to normal scale.                                                                                          // 20120
          $animateCss(element, {                                                                                       // 20121
            addClass: 'md-active',                                                                                     // 20122
            from: animator.toCss(position),                                                                            // 20123
            to: animator.toCss({transform: ''})                                                                        // 20124
          })                                                                                                           // 20125
          .start()                                                                                                     // 20126
          .then(resolve);                                                                                              // 20127
                                                                                                                       // 20128
        });                                                                                                            // 20129
      }                                                                                                                // 20130
                                                                                                                       // 20131
      /**                                                                                                              // 20132
       * Check for valid opts and set some sane defaults                                                               // 20133
       */                                                                                                              // 20134
      function sanitizeAndConfigure() {                                                                                // 20135
        if (!opts.target) {                                                                                            // 20136
          throw Error(                                                                                                 // 20137
            '$mdMenu.show() expected a target to animate from in options.target'                                       // 20138
          );                                                                                                           // 20139
        }                                                                                                              // 20140
        angular.extend(opts, {                                                                                         // 20141
          alreadyOpen: false,                                                                                          // 20142
          isRemoved: false,                                                                                            // 20143
          target: angular.element(opts.target), //make sure it's not a naked dom node                                  // 20144
          parent: angular.element(opts.parent),                                                                        // 20145
          menuContentEl: angular.element(element[0].querySelector('md-menu-content'))                                  // 20146
        });                                                                                                            // 20147
      }                                                                                                                // 20148
                                                                                                                       // 20149
      /**                                                                                                              // 20150
       * Configure various resize listeners for screen changes                                                         // 20151
       */                                                                                                              // 20152
      function startRepositioningOnResize() {                                                                          // 20153
                                                                                                                       // 20154
        var repositionMenu = (function(target, options) {                                                              // 20155
          return $$rAF.throttle(function() {                                                                           // 20156
            if (opts.isRemoved) return;                                                                                // 20157
            var position = calculateMenuPosition(target, options);                                                     // 20158
                                                                                                                       // 20159
            target.css(animator.toCss(position));                                                                      // 20160
          });                                                                                                          // 20161
        })(element, opts);                                                                                             // 20162
                                                                                                                       // 20163
        $window.addEventListener('resize', repositionMenu);                                                            // 20164
        $window.addEventListener('orientationchange', repositionMenu);                                                 // 20165
                                                                                                                       // 20166
        return function stopRepositioningOnResize() {                                                                  // 20167
                                                                                                                       // 20168
          // Disable resizing handlers                                                                                 // 20169
          $window.removeEventListener('resize', repositionMenu);                                                       // 20170
          $window.removeEventListener('orientationchange', repositionMenu);                                            // 20171
                                                                                                                       // 20172
        }                                                                                                              // 20173
      }                                                                                                                // 20174
                                                                                                                       // 20175
      /**                                                                                                              // 20176
       * Activate interaction on the menu. Wire up keyboard listerns for                                               // 20177
       * clicks, keypresses, backdrop closing, etc.                                                                    // 20178
       */                                                                                                              // 20179
      function activateInteraction() {                                                                                 // 20180
        element.addClass('md-clickable');                                                                              // 20181
                                                                                                                       // 20182
        // close on backdrop click                                                                                     // 20183
        if (opts.backdrop) opts.backdrop.on('click', onBackdropClick);                                                 // 20184
                                                                                                                       // 20185
        // Wire up keyboard listeners.                                                                                 // 20186
        // - Close on escape,                                                                                          // 20187
        // - focus next item on down arrow,                                                                            // 20188
        // - focus prev item on up                                                                                     // 20189
        opts.menuContentEl.on('keydown', onMenuKeyDown);                                                               // 20190
        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);                                   // 20191
                                                                                                                       // 20192
        // kick off initial focus in the menu on the first element                                                     // 20193
        var focusTarget = opts.menuContentEl[0].querySelector('[md-menu-focus-target]');                               // 20194
        if ( !focusTarget && firstChild ) {                                                                            // 20195
          var firstChild = opts.menuContentEl[0].firstElementChild;                                                    // 20196
                                                                                                                       // 20197
          focusTarget = firstChild.querySelector('[tabindex]') || firstChild.firstElementChild;                        // 20198
        }                                                                                                              // 20199
                                                                                                                       // 20200
        focusTarget && focusTarget.focus();                                                                            // 20201
                                                                                                                       // 20202
        return function cleanupInteraction() {                                                                         // 20203
          element.removeClass('md-clickable');                                                                         // 20204
          if (opts.backdrop) opts.backdrop.off('click', onBackdropClick);                                              // 20205
          opts.menuContentEl.off('keydown', onMenuKeyDown);                                                            // 20206
          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);                              // 20207
        };                                                                                                             // 20208
                                                                                                                       // 20209
        // ************************************                                                                        // 20210
        // internal functions                                                                                          // 20211
        // ************************************                                                                        // 20212
                                                                                                                       // 20213
        function onMenuKeyDown(ev) {                                                                                   // 20214
          var handled;                                                                                                 // 20215
          var keyCodes = $mdConstant.KEY_CODE;                                                                         // 20216
          switch (ev.keyCode) {                                                                                        // 20217
            case $mdConstant.KEY_CODE.ESCAPE:                                                                          // 20218
              opts.mdMenuCtrl.close(true, { closeAll: true });                                                         // 20219
              handled = true;                                                                                          // 20220
              break;                                                                                                   // 20221
            case $mdConstant.KEY_CODE.UP_ARROW:                                                                        // 20222
              if (!focusMenuItem(ev, opts.menuContentEl, opts, -1)) {                                                  // 20223
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 20224
              }                                                                                                        // 20225
              handled = true;                                                                                          // 20226
              break;                                                                                                   // 20227
            case $mdConstant.KEY_CODE.DOWN_ARROW:                                                                      // 20228
              if (!focusMenuItem(ev, opts.menuContentEl, opts, 1)) {                                                   // 20229
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 20230
              }                                                                                                        // 20231
              handled = true;                                                                                          // 20232
              break;                                                                                                   // 20233
            case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                      // 20234
              if (opts.nestLevel) {                                                                                    // 20235
                opts.mdMenuCtrl.close();                                                                               // 20236
              } else {                                                                                                 // 20237
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 20238
              }                                                                                                        // 20239
              handled = true;                                                                                          // 20240
              break;                                                                                                   // 20241
            case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                     // 20242
              var parentMenu = $mdUtil.getClosest(ev.target, 'MD-MENU');                                               // 20243
              if (parentMenu && parentMenu != opts.parent[0]) {                                                        // 20244
                ev.target.click();                                                                                     // 20245
              } else {                                                                                                 // 20246
                opts.mdMenuCtrl.triggerContainerProxy(ev);                                                             // 20247
              }                                                                                                        // 20248
              handled = true;                                                                                          // 20249
              break;                                                                                                   // 20250
          }                                                                                                            // 20251
          if (handled) {                                                                                               // 20252
            ev.preventDefault();                                                                                       // 20253
            ev.stopImmediatePropagation();                                                                             // 20254
          }                                                                                                            // 20255
        }                                                                                                              // 20256
                                                                                                                       // 20257
        function onBackdropClick(e) {                                                                                  // 20258
          e.preventDefault();                                                                                          // 20259
          e.stopPropagation();                                                                                         // 20260
          scope.$apply(function() {                                                                                    // 20261
            opts.mdMenuCtrl.close(true, { closeAll: true });                                                           // 20262
          });                                                                                                          // 20263
        }                                                                                                              // 20264
                                                                                                                       // 20265
        // Close menu on menu item click, if said menu-item is not disabled                                            // 20266
        function captureClickListener(e) {                                                                             // 20267
          var target = e.target;                                                                                       // 20268
          // Traverse up the event until we get to the menuContentEl to see if                                         // 20269
          // there is an ng-click and that the ng-click is not disabled                                                // 20270
          do {                                                                                                         // 20271
            if (target == opts.menuContentEl[0]) return;                                                               // 20272
            if (hasAnyAttribute(target, ['ng-click', 'ng-href', 'ui-sref']) ||                                         // 20273
                target.nodeName == 'BUTTON' || target.nodeName == 'MD-BUTTON') {                                       // 20274
              var closestMenu = $mdUtil.getClosest(target, 'MD-MENU');                                                 // 20275
              if (!target.hasAttribute('disabled') && (!closestMenu || closestMenu == opts.parent[0])) {               // 20276
                close();                                                                                               // 20277
              }                                                                                                        // 20278
              break;                                                                                                   // 20279
            }                                                                                                          // 20280
          } while (target = target.parentNode)                                                                         // 20281
                                                                                                                       // 20282
          function close() {                                                                                           // 20283
            scope.$apply(function() {                                                                                  // 20284
              opts.mdMenuCtrl.close(true, { closeAll: true });                                                         // 20285
            });                                                                                                        // 20286
          }                                                                                                            // 20287
                                                                                                                       // 20288
          function hasAnyAttribute(target, attrs) {                                                                    // 20289
            if (!target) return false;                                                                                 // 20290
            for (var i = 0, attr; attr = attrs[i]; ++i) {                                                              // 20291
              var altForms = [attr, 'data-' + attr, 'x-' + attr];                                                      // 20292
              for (var j = 0, rawAttr; rawAttr = altForms[j]; ++j) {                                                   // 20293
                if (target.hasAttribute(rawAttr)) {                                                                    // 20294
                  return true;                                                                                         // 20295
                }                                                                                                      // 20296
              }                                                                                                        // 20297
            }                                                                                                          // 20298
            return false;                                                                                              // 20299
          }                                                                                                            // 20300
        }                                                                                                              // 20301
                                                                                                                       // 20302
        opts.menuContentEl[0].addEventListener('click', captureClickListener, true);                                   // 20303
                                                                                                                       // 20304
        return function cleanupInteraction() {                                                                         // 20305
          element.removeClass('md-clickable');                                                                         // 20306
          opts.menuContentEl.off('keydown');                                                                           // 20307
          opts.menuContentEl[0].removeEventListener('click', captureClickListener, true);                              // 20308
        };                                                                                                             // 20309
      }                                                                                                                // 20310
    }                                                                                                                  // 20311
                                                                                                                       // 20312
    /**                                                                                                                // 20313
     * Takes a keypress event and focuses the next/previous menu                                                       // 20314
     * item from the emitting element                                                                                  // 20315
     * @param {event} e - The origin keypress event                                                                    // 20316
     * @param {angular.element} menuEl - The menu element                                                              // 20317
     * @param {object} opts - The interim element options for the mdMenu                                               // 20318
     * @param {number} direction - The direction to move in (+1 = next, -1 = prev)                                     // 20319
     */                                                                                                                // 20320
    function focusMenuItem(e, menuEl, opts, direction) {                                                               // 20321
      var currentItem = $mdUtil.getClosest(e.target, 'MD-MENU-ITEM');                                                  // 20322
                                                                                                                       // 20323
      var items = $mdUtil.nodesToArray(menuEl[0].children);                                                            // 20324
      var currentIndex = items.indexOf(currentItem);                                                                   // 20325
                                                                                                                       // 20326
      // Traverse through our elements in the specified direction (+/-1) and try to                                    // 20327
      // focus them until we find one that accepts focus                                                               // 20328
      var didFocus;                                                                                                    // 20329
      for (var i = currentIndex + direction; i >= 0 && i < items.length; i = i + direction) {                          // 20330
        var focusTarget = items[i].querySelector('.md-button');                                                        // 20331
        didFocus = attemptFocus(focusTarget);                                                                          // 20332
        if (didFocus) {                                                                                                // 20333
          break;                                                                                                       // 20334
        }                                                                                                              // 20335
      }                                                                                                                // 20336
      return didFocus;                                                                                                 // 20337
    }                                                                                                                  // 20338
                                                                                                                       // 20339
    /**                                                                                                                // 20340
     * Attempts to focus an element. Checks whether that element is the currently                                      // 20341
     * focused element after attempting.                                                                               // 20342
     * @param {HTMLElement} el - the element to attempt focus on                                                       // 20343
     * @returns {bool} - whether the element was successfully focused                                                  // 20344
     */                                                                                                                // 20345
    function attemptFocus(el) {                                                                                        // 20346
      if (el && el.getAttribute('tabindex') != -1) {                                                                   // 20347
        el.focus();                                                                                                    // 20348
        return ($document[0].activeElement == el);                                                                     // 20349
      }                                                                                                                // 20350
    }                                                                                                                  // 20351
                                                                                                                       // 20352
    /**                                                                                                                // 20353
     * Use browser to remove this element without triggering a $destroy event                                          // 20354
     */                                                                                                                // 20355
    function detachElement(element, opts) {                                                                            // 20356
      if (!opts.preserveElement) {                                                                                     // 20357
        if (toNode(element).parentNode === toNode(opts.parent)) {                                                      // 20358
          toNode(opts.parent).removeChild(toNode(element));                                                            // 20359
        }                                                                                                              // 20360
      } else {                                                                                                         // 20361
        toNode(element).style.display = 'none';                                                                        // 20362
      }                                                                                                                // 20363
    }                                                                                                                  // 20364
                                                                                                                       // 20365
    /**                                                                                                                // 20366
     * Computes menu position and sets the style on the menu container                                                 // 20367
     * @param {HTMLElement} el - the menu container element                                                            // 20368
     * @param {object} opts - the interim element options object                                                       // 20369
     */                                                                                                                // 20370
    function calculateMenuPosition(el, opts) {                                                                         // 20371
                                                                                                                       // 20372
      var containerNode = el[0],                                                                                       // 20373
        openMenuNode = el[0].firstElementChild,                                                                        // 20374
        openMenuNodeRect = openMenuNode.getBoundingClientRect(),                                                       // 20375
        boundryNode = $document[0].body,                                                                               // 20376
        boundryNodeRect = boundryNode.getBoundingClientRect();                                                         // 20377
                                                                                                                       // 20378
      var menuStyle = $window.getComputedStyle(openMenuNode);                                                          // 20379
                                                                                                                       // 20380
      var originNode = opts.target[0].querySelector('[md-menu-origin]') || opts.target[0],                             // 20381
        originNodeRect = originNode.getBoundingClientRect();                                                           // 20382
                                                                                                                       // 20383
      var bounds = {                                                                                                   // 20384
        left: boundryNodeRect.left + MENU_EDGE_MARGIN,                                                                 // 20385
        top: Math.max(boundryNodeRect.top, 0) + MENU_EDGE_MARGIN,                                                      // 20386
        bottom: Math.max(boundryNodeRect.bottom, Math.max(boundryNodeRect.top, 0) + boundryNodeRect.height) - MENU_EDGE_MARGIN,
        right: boundryNodeRect.right - MENU_EDGE_MARGIN                                                                // 20388
      };                                                                                                               // 20389
                                                                                                                       // 20390
      var alignTarget, alignTargetRect = { top:0, left : 0, right:0, bottom:0 }, existingOffsets  = { top:0, left : 0, right:0, bottom:0  };
      var positionMode = opts.mdMenuCtrl.positionMode();                                                               // 20392
                                                                                                                       // 20393
      if (positionMode.top == 'target' || positionMode.left == 'target' || positionMode.left == 'target-right') {      // 20394
        alignTarget = firstVisibleChild();                                                                             // 20395
        if ( alignTarget ) {                                                                                           // 20396
          // TODO: Allow centering on an arbitrary node, for now center on first menu-item's child                     // 20397
          alignTarget = alignTarget.firstElementChild || alignTarget;                                                  // 20398
          alignTarget = alignTarget.querySelector('[md-menu-align-target]') || alignTarget;                            // 20399
          alignTargetRect = alignTarget.getBoundingClientRect();                                                       // 20400
                                                                                                                       // 20401
          existingOffsets = {                                                                                          // 20402
            top: parseFloat(containerNode.style.top || 0),                                                             // 20403
            left: parseFloat(containerNode.style.left || 0)                                                            // 20404
          };                                                                                                           // 20405
        }                                                                                                              // 20406
      }                                                                                                                // 20407
                                                                                                                       // 20408
      var position = {};                                                                                               // 20409
      var transformOrigin = 'top ';                                                                                    // 20410
                                                                                                                       // 20411
      switch (positionMode.top) {                                                                                      // 20412
        case 'target':                                                                                                 // 20413
          position.top = existingOffsets.top + originNodeRect.top - alignTargetRect.top;                               // 20414
          break;                                                                                                       // 20415
        case 'cascade':                                                                                                // 20416
          position.top = originNodeRect.top - parseFloat(menuStyle.paddingTop) - originNode.style.top;                 // 20417
          break;                                                                                                       // 20418
        case 'bottom':                                                                                                 // 20419
          position.top = originNodeRect.top + originNodeRect.height;                                                   // 20420
          break;                                                                                                       // 20421
        default:                                                                                                       // 20422
          throw new Error('Invalid target mode "' + positionMode.top + '" specified for md-menu on Y axis.');          // 20423
      }                                                                                                                // 20424
                                                                                                                       // 20425
      switch (positionMode.left) {                                                                                     // 20426
        case 'target':                                                                                                 // 20427
          position.left = existingOffsets.left + originNodeRect.left - alignTargetRect.left;                           // 20428
          transformOrigin += 'left';                                                                                   // 20429
          break;                                                                                                       // 20430
        case 'target-right':                                                                                           // 20431
          position.left = originNodeRect.right - openMenuNodeRect.width + (openMenuNodeRect.right - alignTargetRect.right);
          transformOrigin += 'right';                                                                                  // 20433
          break;                                                                                                       // 20434
        case 'cascade':                                                                                                // 20435
          var willFitRight = (originNodeRect.right + openMenuNodeRect.width) < bounds.right;                           // 20436
          position.left = willFitRight ? originNodeRect.right - originNode.style.left : originNodeRect.left - originNode.style.left - openMenuNodeRect.width;
          transformOrigin += willFitRight ? 'left' : 'right';                                                          // 20438
          break;                                                                                                       // 20439
        case 'left':                                                                                                   // 20440
          position.left = originNodeRect.left;                                                                         // 20441
          transformOrigin += 'left';                                                                                   // 20442
          break;                                                                                                       // 20443
        default:                                                                                                       // 20444
          throw new Error('Invalid target mode "' + positionMode.left + '" specified for md-menu on X axis.');         // 20445
      }                                                                                                                // 20446
                                                                                                                       // 20447
      var offsets = opts.mdMenuCtrl.offsets();                                                                         // 20448
      position.top += offsets.top;                                                                                     // 20449
      position.left += offsets.left;                                                                                   // 20450
                                                                                                                       // 20451
      clamp(position);                                                                                                 // 20452
                                                                                                                       // 20453
      var scaleX = Math.round(100 * Math.min(originNodeRect.width / containerNode.offsetWidth, 1.0)) / 100;            // 20454
      var scaleY = Math.round(100 * Math.min(originNodeRect.height / containerNode.offsetHeight, 1.0)) / 100;          // 20455
                                                                                                                       // 20456
      return {                                                                                                         // 20457
        top: Math.round(position.top),                                                                                 // 20458
        left: Math.round(position.left),                                                                               // 20459
        // Animate a scale out if we aren't just repositioning                                                         // 20460
        transform: !opts.alreadyOpen ? $mdUtil.supplant('scale({0},{1})', [scaleX, scaleY]) : undefined,               // 20461
        transformOrigin: transformOrigin                                                                               // 20462
      };                                                                                                               // 20463
                                                                                                                       // 20464
      /**                                                                                                              // 20465
       * Clamps the repositioning of the menu within the confines of                                                   // 20466
       * bounding element (often the screen/body)                                                                      // 20467
       */                                                                                                              // 20468
      function clamp(pos) {                                                                                            // 20469
        pos.top = Math.max(Math.min(pos.top, bounds.bottom - containerNode.offsetHeight), bounds.top);                 // 20470
        pos.left = Math.max(Math.min(pos.left, bounds.right - containerNode.offsetWidth), bounds.left);                // 20471
      }                                                                                                                // 20472
                                                                                                                       // 20473
      /**                                                                                                              // 20474
       * Gets the first visible child in the openMenuNode                                                              // 20475
       * Necessary incase menu nodes are being dynamically hidden                                                      // 20476
       */                                                                                                              // 20477
      function firstVisibleChild() {                                                                                   // 20478
        for (var i = 0; i < openMenuNode.children.length; ++i) {                                                       // 20479
          if ($window.getComputedStyle(openMenuNode.children[i]).display != 'none') {                                  // 20480
            return openMenuNode.children[i];                                                                           // 20481
          }                                                                                                            // 20482
        }                                                                                                              // 20483
      }                                                                                                                // 20484
    }                                                                                                                  // 20485
  }                                                                                                                    // 20486
  function toNode(el) {                                                                                                // 20487
    if (el instanceof angular.element) {                                                                               // 20488
      el = el[0];                                                                                                      // 20489
    }                                                                                                                  // 20490
    return el;                                                                                                         // 20491
  }                                                                                                                    // 20492
}                                                                                                                      // 20493
MenuProvider.$inject = ["$$interimElementProvider"];                                                                   // 20494
                                                                                                                       // 20495
})();                                                                                                                  // 20496
(function(){                                                                                                           // 20497
"use strict";                                                                                                          // 20498
                                                                                                                       // 20499
                                                                                                                       // 20500
angular                                                                                                                // 20501
  .module('material.components.menuBar')                                                                               // 20502
  .controller('MenuBarController', MenuBarController);                                                                 // 20503
                                                                                                                       // 20504
var BOUND_MENU_METHODS = ['handleKeyDown', 'handleMenuHover', 'scheduleOpenHoveredMenu', 'cancelScheduledOpen'];       // 20505
                                                                                                                       // 20506
/**                                                                                                                    // 20507
 * @ngInject                                                                                                           // 20508
 */                                                                                                                    // 20509
function MenuBarController($scope, $element, $attrs, $mdConstant, $document, $mdUtil, $timeout) {                      // 20510
  this.$element = $element;                                                                                            // 20511
  this.$attrs = $attrs;                                                                                                // 20512
  this.$mdConstant = $mdConstant;                                                                                      // 20513
  this.$mdUtil = $mdUtil;                                                                                              // 20514
  this.$document = $document;                                                                                          // 20515
  this.$scope = $scope;                                                                                                // 20516
  this.$timeout = $timeout;                                                                                            // 20517
                                                                                                                       // 20518
  var self = this;                                                                                                     // 20519
  angular.forEach(BOUND_MENU_METHODS, function(methodName) {                                                           // 20520
    self[methodName] = angular.bind(self, self[methodName]);                                                           // 20521
  });                                                                                                                  // 20522
}                                                                                                                      // 20523
MenuBarController.$inject = ["$scope", "$element", "$attrs", "$mdConstant", "$document", "$mdUtil", "$timeout"];       // 20524
                                                                                                                       // 20525
MenuBarController.prototype.init = function() {                                                                        // 20526
  var $element = this.$element;                                                                                        // 20527
  var $mdUtil = this.$mdUtil;                                                                                          // 20528
  var $scope = this.$scope;                                                                                            // 20529
                                                                                                                       // 20530
  var self = this;                                                                                                     // 20531
  $element.on('keydown', this.handleKeyDown);                                                                          // 20532
  this.parentToolbar = $mdUtil.getClosest($element, 'MD-TOOLBAR');                                                     // 20533
                                                                                                                       // 20534
  $scope.$on('$mdMenuOpen', function(event, el) {                                                                      // 20535
    if (self.getMenus().indexOf(el[0]) != -1) {                                                                        // 20536
      $element[0].classList.add('md-open');                                                                            // 20537
      el[0].classList.add('md-open');                                                                                  // 20538
      self.currentlyOpenMenu = el.controller('mdMenu');                                                                // 20539
      self.currentlyOpenMenu.registerContainerProxy(self.handleKeyDown);                                               // 20540
      self.enableOpenOnHover();                                                                                        // 20541
    }                                                                                                                  // 20542
  });                                                                                                                  // 20543
                                                                                                                       // 20544
  $scope.$on('$mdMenuClose', function(event, el) {                                                                     // 20545
    var rootMenus = self.getMenus();                                                                                   // 20546
    if (rootMenus.indexOf(el[0]) != -1) {                                                                              // 20547
      $element[0].classList.remove('md-open');                                                                         // 20548
      el[0].classList.remove('md-open');                                                                               // 20549
    }                                                                                                                  // 20550
                                                                                                                       // 20551
    if ($element[0].contains(el[0])) {                                                                                 // 20552
      var parentMenu = el[0];                                                                                          // 20553
      while (parentMenu && rootMenus.indexOf(parentMenu) == -1) {                                                      // 20554
        parentMenu = $mdUtil.getClosest(parentMenu, 'MD-MENU', true);                                                  // 20555
      }                                                                                                                // 20556
      if (parentMenu) {                                                                                                // 20557
        parentMenu.querySelector('button').focus();                                                                    // 20558
        self.currentlyOpenMenu = undefined;                                                                            // 20559
        self.disableOpenOnHover();                                                                                     // 20560
        self.setKeyboardMode(true);                                                                                    // 20561
      }                                                                                                                // 20562
    }                                                                                                                  // 20563
  });                                                                                                                  // 20564
                                                                                                                       // 20565
  angular                                                                                                              // 20566
    .element(this.getMenus())                                                                                          // 20567
    .on('mouseenter', this.handleMenuHover);                                                                           // 20568
                                                                                                                       // 20569
  this.setKeyboardMode(true);                                                                                          // 20570
};                                                                                                                     // 20571
                                                                                                                       // 20572
MenuBarController.prototype.setKeyboardMode = function(enabled) {                                                      // 20573
  if (enabled) this.$element[0].classList.add('md-keyboard-mode');                                                     // 20574
  else this.$element[0].classList.remove('md-keyboard-mode');                                                          // 20575
};                                                                                                                     // 20576
                                                                                                                       // 20577
MenuBarController.prototype.enableOpenOnHover = function() {                                                           // 20578
  if (this.openOnHoverEnabled) return;                                                                                 // 20579
  this.openOnHoverEnabled = true;                                                                                      // 20580
                                                                                                                       // 20581
  var $element = this.$element;                                                                                        // 20582
                                                                                                                       // 20583
  var parentToolbar;                                                                                                   // 20584
  if (parentToolbar = this.parentToolbar) {                                                                            // 20585
    parentToolbar.dataset.mdRestoreStyle = parentToolbar.getAttribute('style');                                        // 20586
    parentToolbar.style.position = 'relative';                                                                         // 20587
    parentToolbar.style.zIndex = 100;                                                                                  // 20588
  }                                                                                                                    // 20589
};                                                                                                                     // 20590
                                                                                                                       // 20591
MenuBarController.prototype.handleMenuHover = function(e) {                                                            // 20592
  this.setKeyboardMode(false);                                                                                         // 20593
  if (this.openOnHoverEnabled) {                                                                                       // 20594
    this.scheduleOpenHoveredMenu(e);                                                                                   // 20595
  }                                                                                                                    // 20596
};                                                                                                                     // 20597
                                                                                                                       // 20598
                                                                                                                       // 20599
MenuBarController.prototype.disableOpenOnHover = function() {                                                          // 20600
  if (!this.openOnHoverEnabled) return;                                                                                // 20601
  this.openOnHoverEnabled = false;                                                                                     // 20602
  var parentToolbar;                                                                                                   // 20603
  if (parentToolbar = this.parentToolbar) {                                                                            // 20604
    parentToolbar.setAttribute('style', parentToolbar.dataset.mdRestoreStyle || '');                                   // 20605
  }                                                                                                                    // 20606
};                                                                                                                     // 20607
                                                                                                                       // 20608
MenuBarController.prototype.scheduleOpenHoveredMenu = function(e) {                                                    // 20609
  var menuEl = angular.element(e.currentTarget);                                                                       // 20610
  var menuCtrl = menuEl.controller('mdMenu');                                                                          // 20611
  this.setKeyboardMode(false);                                                                                         // 20612
  this.scheduleOpenMenu(menuCtrl);                                                                                     // 20613
};                                                                                                                     // 20614
                                                                                                                       // 20615
MenuBarController.prototype.scheduleOpenMenu = function(menuCtrl) {                                                    // 20616
  var self = this;                                                                                                     // 20617
  var $timeout = this.$timeout;                                                                                        // 20618
  if (menuCtrl != self.currentlyOpenMenu) {                                                                            // 20619
    $timeout.cancel(self.pendingMenuOpen);                                                                             // 20620
    self.pendingMenuOpen = $timeout(function() {                                                                       // 20621
      self.pendingMenuOpen = undefined;                                                                                // 20622
      if (self.currentlyOpenMenu) {                                                                                    // 20623
        self.currentlyOpenMenu.close(true, { closeAll: true });                                                        // 20624
      }                                                                                                                // 20625
      menuCtrl.open();                                                                                                 // 20626
    }, 200, false);                                                                                                    // 20627
  }                                                                                                                    // 20628
}                                                                                                                      // 20629
                                                                                                                       // 20630
MenuBarController.prototype.handleKeyDown = function(e) {                                                              // 20631
  var keyCodes = this.$mdConstant.KEY_CODE;                                                                            // 20632
  var currentMenu = this.currentlyOpenMenu;                                                                            // 20633
  var wasOpen = currentMenu && currentMenu.isOpen;                                                                     // 20634
  this.setKeyboardMode(true);                                                                                          // 20635
  var handled;                                                                                                         // 20636
  switch (e.keyCode) {                                                                                                 // 20637
    case keyCodes.DOWN_ARROW:                                                                                          // 20638
      if (currentMenu) {                                                                                               // 20639
        currentMenu.focusMenuContainer();                                                                              // 20640
      } else {                                                                                                         // 20641
        this.openFocusedMenu();                                                                                        // 20642
      }                                                                                                                // 20643
      handled = true;                                                                                                  // 20644
      break;                                                                                                           // 20645
    case keyCodes.UP_ARROW:                                                                                            // 20646
      currentMenu && currentMenu.close();                                                                              // 20647
      handled = true;                                                                                                  // 20648
      break;                                                                                                           // 20649
    case keyCodes.LEFT_ARROW:                                                                                          // 20650
      var newMenu = this.focusMenu(-1);                                                                                // 20651
      if (wasOpen) {                                                                                                   // 20652
        var newMenuCtrl = angular.element(newMenu).controller('mdMenu');                                               // 20653
        this.scheduleOpenMenu(newMenuCtrl);                                                                            // 20654
      }                                                                                                                // 20655
      handled = true;                                                                                                  // 20656
      break;                                                                                                           // 20657
    case keyCodes.RIGHT_ARROW:                                                                                         // 20658
      var newMenu = this.focusMenu(+1);                                                                                // 20659
      if (wasOpen) {                                                                                                   // 20660
        var newMenuCtrl = angular.element(newMenu).controller('mdMenu');                                               // 20661
        this.scheduleOpenMenu(newMenuCtrl);                                                                            // 20662
      }                                                                                                                // 20663
      handled = true;                                                                                                  // 20664
      break;                                                                                                           // 20665
  }                                                                                                                    // 20666
  if (handled) {                                                                                                       // 20667
    e && e.preventDefault && e.preventDefault();                                                                       // 20668
    e && e.stopImmediatePropagation && e.stopImmediatePropagation();                                                   // 20669
  }                                                                                                                    // 20670
};                                                                                                                     // 20671
                                                                                                                       // 20672
MenuBarController.prototype.focusMenu = function(direction) {                                                          // 20673
  var menus = this.getMenus();                                                                                         // 20674
  var focusedIndex = this.getFocusedMenuIndex();                                                                       // 20675
                                                                                                                       // 20676
  if (focusedIndex == -1) { focusedIndex = this.getOpenMenuIndex(); }                                                  // 20677
                                                                                                                       // 20678
  var changed = false;                                                                                                 // 20679
                                                                                                                       // 20680
  if (focusedIndex == -1) { focusedIndex = 0; }                                                                        // 20681
  else if (                                                                                                            // 20682
    direction < 0 && focusedIndex > 0 ||                                                                               // 20683
    direction > 0 && focusedIndex < menus.length - direction                                                           // 20684
  ) {                                                                                                                  // 20685
    focusedIndex += direction;                                                                                         // 20686
    changed = true;                                                                                                    // 20687
  }                                                                                                                    // 20688
  if (changed) {                                                                                                       // 20689
    menus[focusedIndex].querySelector('button').focus();                                                               // 20690
    return menus[focusedIndex];                                                                                        // 20691
  }                                                                                                                    // 20692
};                                                                                                                     // 20693
                                                                                                                       // 20694
MenuBarController.prototype.openFocusedMenu = function() {                                                             // 20695
  var menu = this.getFocusedMenu();                                                                                    // 20696
  menu && angular.element(menu).controller('mdMenu').open();                                                           // 20697
};                                                                                                                     // 20698
                                                                                                                       // 20699
MenuBarController.prototype.getMenus = function() {                                                                    // 20700
  var $element = this.$element;                                                                                        // 20701
  return this.$mdUtil.nodesToArray($element[0].children)                                                               // 20702
    .filter(function(el) { return el.nodeName == 'MD-MENU'; });                                                        // 20703
};                                                                                                                     // 20704
                                                                                                                       // 20705
MenuBarController.prototype.getFocusedMenu = function() {                                                              // 20706
  return this.getMenus()[this.getFocusedMenuIndex()];                                                                  // 20707
};                                                                                                                     // 20708
                                                                                                                       // 20709
MenuBarController.prototype.getFocusedMenuIndex = function() {                                                         // 20710
  var $mdUtil = this.$mdUtil;                                                                                          // 20711
  var $element = this.$element;                                                                                        // 20712
  var focusedEl = $mdUtil.getClosest(                                                                                  // 20713
    this.$document[0].activeElement,                                                                                   // 20714
    'MD-MENU'                                                                                                          // 20715
  );                                                                                                                   // 20716
  if (!focusedEl) return -1;                                                                                           // 20717
                                                                                                                       // 20718
  var focusedIndex = this.getMenus().indexOf(focusedEl);                                                               // 20719
  return focusedIndex;                                                                                                 // 20720
                                                                                                                       // 20721
};                                                                                                                     // 20722
                                                                                                                       // 20723
MenuBarController.prototype.getOpenMenuIndex = function() {                                                            // 20724
  var menus = this.getMenus();                                                                                         // 20725
  for (var i = 0; i < menus.length; ++i) {                                                                             // 20726
    if (menus[i].classList.contains('md-open')) return i;                                                              // 20727
  }                                                                                                                    // 20728
  return -1;                                                                                                           // 20729
};                                                                                                                     // 20730
                                                                                                                       // 20731
                                                                                                                       // 20732
                                                                                                                       // 20733
                                                                                                                       // 20734
                                                                                                                       // 20735
                                                                                                                       // 20736
                                                                                                                       // 20737
                                                                                                                       // 20738
                                                                                                                       // 20739
})();                                                                                                                  // 20740
(function(){                                                                                                           // 20741
"use strict";                                                                                                          // 20742
                                                                                                                       // 20743
/**                                                                                                                    // 20744
 * @ngdoc directive                                                                                                    // 20745
 * @name mdMenuBar                                                                                                     // 20746
 * @module material.components.menu-bar                                                                                // 20747
 * @restrict E                                                                                                         // 20748
 * @description                                                                                                        // 20749
 *                                                                                                                     // 20750
 * Menu bars are containers that hold multiple menus. They change the behavior and appearence                          // 20751
 * of the `md-menu` directive to behave similar to an operating system provided menu.                                  // 20752
 *                                                                                                                     // 20753
 * @usage                                                                                                              // 20754
 * <hljs lang="html">                                                                                                  // 20755
 * <md-menu-bar>                                                                                                       // 20756
 *   <md-menu>                                                                                                         // 20757
 *     <button ng-click="$mdOpenMenu()">                                                                               // 20758
 *       File                                                                                                          // 20759
 *     </button>                                                                                                       // 20760
 *     <md-menu-content>                                                                                               // 20761
 *       <md-menu-item>                                                                                                // 20762
 *         <md-button ng-click="ctrl.sampleAction('share', $event)">                                                   // 20763
 *           Share...                                                                                                  // 20764
 *         </md-button>                                                                                                // 20765
 *       </md-menu-item>                                                                                               // 20766
 *       <md-menu-divider></md-menu-divider>                                                                           // 20767
 *       <md-menu-item>                                                                                                // 20768
 *       <md-menu-item>                                                                                                // 20769
 *         <md-menu>                                                                                                   // 20770
 *           <md-button ng-click="$mdOpenMenu()">New</md-button>                                                       // 20771
 *           <md-menu-content>                                                                                         // 20772
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>
 *             <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
 *           </md-menu-content>                                                                                        // 20778
 *         </md-menu>                                                                                                  // 20779
 *       </md-menu-item>                                                                                               // 20780
 *     </md-menu-content>                                                                                              // 20781
 *   </md-menu>                                                                                                        // 20782
 * </md-menu-bar>                                                                                                      // 20783
 * </hljs>                                                                                                             // 20784
 *                                                                                                                     // 20785
 * ## Menu Bar Controls                                                                                                // 20786
 *                                                                                                                     // 20787
 * You may place `md-menu-items` that function as controls within menu bars.                                           // 20788
 * There are two modes that are exposed via the `type` attribute of the `md-menu-item`.                                // 20789
 * `type="checkbox"` will function as a boolean control for the `ng-model` attribute of the                            // 20790
 * `md-menu-item`. `type="radio"` will function like a radio button, setting the `ngModel`                             // 20791
 * to the `string` value of the `value` attribute. If you need non-string values, you can use                          // 20792
 * `ng-value` to provide an expression (this is similar to how angular's native `input[type=radio]` works.             // 20793
 *                                                                                                                     // 20794
 * <hljs lang="html">                                                                                                  // 20795
 * <md-menu-bar>                                                                                                       // 20796
 *  <md-menu>                                                                                                          // 20797
 *    <button ng-click="$mdOpenMenu()">                                                                                // 20798
 *      Sample Menu                                                                                                    // 20799
 *    </button>                                                                                                        // 20800
 *    <md-menu-content>                                                                                                // 20801
 *      <md-menu-item type="checkbox" ng-model="settings.allowChanges">Allow changes</md-menu-item>                    // 20802
 *      <md-menu-divider></md-menu-divider>                                                                            // 20803
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 1</md-menu-item>                         // 20804
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 2</md-menu-item>                         // 20805
 *      <md-menu-item type="radio" ng-model="settings.mode" ng-value="1">Mode 3</md-menu-item>                         // 20806
 *    </md-menu-content>                                                                                               // 20807
 *  </md-menu>                                                                                                         // 20808
 * </md-menu-bar>                                                                                                      // 20809
 * </hljs>                                                                                                             // 20810
 *                                                                                                                     // 20811
 *                                                                                                                     // 20812
 * ### Nesting Menus                                                                                                   // 20813
 *                                                                                                                     // 20814
 * Menus may be nested within menu bars. This is commonly called cascading menus.                                      // 20815
 * To nest a menu place the nested menu inside the content of the `md-menu-item`.                                      // 20816
 * <hljs lang="html">                                                                                                  // 20817
 * <md-menu-item>                                                                                                      // 20818
 *   <md-menu>                                                                                                         // 20819
 *     <button ng-click="$mdOpenMenu()">New</md-button>                                                                // 20820
 *     <md-menu-content>                                                                                               // 20821
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Document', $event)">Document</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Spreadsheet', $event)">Spreadsheet</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Presentation', $event)">Presentation</md-button></md-menu-item>
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Form', $event)">Form</md-button></md-menu-item>     // 20825
 *       <md-menu-item><md-button ng-click="ctrl.sampleAction('New Drawing', $event)">Drawing</md-button></md-menu-item>
 *     </md-menu-content>                                                                                              // 20827
 *   </md-menu>                                                                                                        // 20828
 * </md-menu-item>                                                                                                     // 20829
 * </hljs>                                                                                                             // 20830
 *                                                                                                                     // 20831
 */                                                                                                                    // 20832
                                                                                                                       // 20833
angular                                                                                                                // 20834
  .module('material.components.menuBar')                                                                               // 20835
  .directive('mdMenuBar', MenuBarDirective);                                                                           // 20836
                                                                                                                       // 20837
/**                                                                                                                    // 20838
 *                                                                                                                     // 20839
 * @ngInjdect                                                                                                          // 20840
 */                                                                                                                    // 20841
function MenuBarDirective($mdUtil, $mdTheming) {                                                                       // 20842
  return {                                                                                                             // 20843
    restrict: 'E',                                                                                                     // 20844
    require: 'mdMenuBar',                                                                                              // 20845
    controller: 'MenuBarController',                                                                                   // 20846
                                                                                                                       // 20847
    compile: function compile(templateEl, templateAttrs) {                                                             // 20848
      if (!templateAttrs.ariaRole) {                                                                                   // 20849
        templateEl[0].setAttribute('role', 'menubar');                                                                 // 20850
      }                                                                                                                // 20851
      angular.forEach(templateEl[0].children, function(menuEl) {                                                       // 20852
        if (menuEl.nodeName == 'MD-MENU') {                                                                            // 20853
          if (!menuEl.hasAttribute('md-position-mode')) {                                                              // 20854
            menuEl.setAttribute('md-position-mode', 'left bottom');                                                    // 20855
          }                                                                                                            // 20856
          menuEl.setAttribute('role', 'menu');                                                                         // 20857
          var contentEls = $mdUtil.nodesToArray(menuEl.querySelectorAll('md-menu-content'));                           // 20858
          angular.forEach(contentEls, function(contentEl) {                                                            // 20859
            contentEl.classList.add('md-menu-bar-menu');                                                               // 20860
            contentEl.classList.add('md-dense');                                                                       // 20861
            if (!contentEl.hasAttribute('width')) {                                                                    // 20862
              contentEl.setAttribute('width', 5);                                                                      // 20863
            }                                                                                                          // 20864
          });                                                                                                          // 20865
        }                                                                                                              // 20866
      });                                                                                                              // 20867
                                                                                                                       // 20868
      return function postLink(scope, el, attrs, ctrl) {                                                               // 20869
        $mdTheming(scope, el);                                                                                         // 20870
        ctrl.init();                                                                                                   // 20871
      };                                                                                                               // 20872
    }                                                                                                                  // 20873
  };                                                                                                                   // 20874
                                                                                                                       // 20875
}                                                                                                                      // 20876
MenuBarDirective.$inject = ["$mdUtil", "$mdTheming"];                                                                  // 20877
                                                                                                                       // 20878
})();                                                                                                                  // 20879
(function(){                                                                                                           // 20880
"use strict";                                                                                                          // 20881
                                                                                                                       // 20882
                                                                                                                       // 20883
angular                                                                                                                // 20884
  .module('material.components.menuBar')                                                                               // 20885
  .directive('mdMenuDivider', MenuDividerDirective);                                                                   // 20886
                                                                                                                       // 20887
                                                                                                                       // 20888
function MenuDividerDirective() {                                                                                      // 20889
  return {                                                                                                             // 20890
    restrict: 'E',                                                                                                     // 20891
    compile: function(templateEl, templateAttrs) {                                                                     // 20892
      if (!templateAttrs.role) {                                                                                       // 20893
        templateEl[0].setAttribute('role', 'separator');                                                               // 20894
      }                                                                                                                // 20895
    }                                                                                                                  // 20896
  };                                                                                                                   // 20897
}                                                                                                                      // 20898
                                                                                                                       // 20899
})();                                                                                                                  // 20900
(function(){                                                                                                           // 20901
"use strict";                                                                                                          // 20902
                                                                                                                       // 20903
                                                                                                                       // 20904
angular                                                                                                                // 20905
  .module('material.components.menuBar')                                                                               // 20906
  .controller('MenuItemController', MenuItemController);                                                               // 20907
                                                                                                                       // 20908
                                                                                                                       // 20909
/**                                                                                                                    // 20910
 * @ngInject                                                                                                           // 20911
 */                                                                                                                    // 20912
function MenuItemController($scope, $element, $attrs) {                                                                // 20913
  this.$element = $element;                                                                                            // 20914
  this.$attrs = $attrs;                                                                                                // 20915
  this.$scope = $scope;                                                                                                // 20916
}                                                                                                                      // 20917
MenuItemController.$inject = ["$scope", "$element", "$attrs"];                                                         // 20918
                                                                                                                       // 20919
MenuItemController.prototype.init = function(ngModel) {                                                                // 20920
  var $element = this.$element;                                                                                        // 20921
  var $attrs = this.$attrs;                                                                                            // 20922
                                                                                                                       // 20923
  this.ngModel = ngModel;                                                                                              // 20924
  if ($attrs.type == 'checkbox' || $attrs.type == 'radio') {                                                           // 20925
    this.mode  = $attrs.type;                                                                                          // 20926
    this.iconEl = $element[0].children[0];                                                                             // 20927
    this.buttonEl = $element[0].children[1];                                                                           // 20928
    if (ngModel) this.initClickListeners();                                                                            // 20929
  }                                                                                                                    // 20930
};                                                                                                                     // 20931
                                                                                                                       // 20932
MenuItemController.prototype.initClickListeners = function() {                                                         // 20933
  var ngModel = this.ngModel;                                                                                          // 20934
  var $scope = this.$scope;                                                                                            // 20935
  var $attrs = this.$attrs;                                                                                            // 20936
  var $element = this.$element;                                                                                        // 20937
  var mode = this.mode;                                                                                                // 20938
                                                                                                                       // 20939
  this.handleClick = angular.bind(this, this.handleClick);                                                             // 20940
                                                                                                                       // 20941
  var icon = this.iconEl                                                                                               // 20942
  var button = angular.element(this.buttonEl);                                                                         // 20943
  var handleClick = this.handleClick;                                                                                  // 20944
                                                                                                                       // 20945
  $attrs.$observe('disabled', setDisabled);                                                                            // 20946
  setDisabled($attrs.disabled);                                                                                        // 20947
                                                                                                                       // 20948
  ngModel.$render = function render() {                                                                                // 20949
    if (isSelected()) {                                                                                                // 20950
      icon.style.display = '';                                                                                         // 20951
      $element.attr('aria-checked', 'true');                                                                           // 20952
    } else {                                                                                                           // 20953
      icon.style.display = 'none';                                                                                     // 20954
      $element.attr('aria-checked', 'false');                                                                          // 20955
    }                                                                                                                  // 20956
  };                                                                                                                   // 20957
                                                                                                                       // 20958
  $scope.$$postDigest(ngModel.$render);                                                                                // 20959
                                                                                                                       // 20960
  function isSelected() {                                                                                              // 20961
    if (mode == 'radio') {                                                                                             // 20962
      var val = $attrs.ngValue ? $scope.$eval($attrs.ngValue) : $attrs.value;                                          // 20963
      return ngModel.$modelValue == val;                                                                               // 20964
    } else {                                                                                                           // 20965
      return ngModel.$modelValue;                                                                                      // 20966
    }                                                                                                                  // 20967
  }                                                                                                                    // 20968
                                                                                                                       // 20969
  function setDisabled(disabled) {                                                                                     // 20970
    if (disabled) {                                                                                                    // 20971
      button.off('click', handleClick);                                                                                // 20972
    } else {                                                                                                           // 20973
      button.on('click', handleClick);                                                                                 // 20974
    }                                                                                                                  // 20975
  }                                                                                                                    // 20976
};                                                                                                                     // 20977
                                                                                                                       // 20978
MenuItemController.prototype.handleClick = function(e) {                                                               // 20979
  var mode = this.mode;                                                                                                // 20980
  var ngModel = this.ngModel;                                                                                          // 20981
  var $attrs = this.$attrs;                                                                                            // 20982
  var newVal;                                                                                                          // 20983
  if (mode == 'checkbox') {                                                                                            // 20984
    newVal = !ngModel.$modelValue;                                                                                     // 20985
  } else if (mode == 'radio') {                                                                                        // 20986
    newVal = $attrs.ngValue ? this.$scope.$eval($attrs.ngValue) : $attrs.value;                                        // 20987
  }                                                                                                                    // 20988
  ngModel.$setViewValue(newVal);                                                                                       // 20989
  ngModel.$render();                                                                                                   // 20990
};                                                                                                                     // 20991
                                                                                                                       // 20992
})();                                                                                                                  // 20993
(function(){                                                                                                           // 20994
"use strict";                                                                                                          // 20995
                                                                                                                       // 20996
                                                                                                                       // 20997
angular                                                                                                                // 20998
  .module('material.components.menuBar')                                                                               // 20999
  .directive('mdMenuItem', MenuItemDirective);                                                                         // 21000
                                                                                                                       // 21001
 /**                                                                                                                   // 21002
  *                                                                                                                    // 21003
  * @ngInjdect                                                                                                         // 21004
  */                                                                                                                   // 21005
function MenuItemDirective() {                                                                                         // 21006
  return {                                                                                                             // 21007
    require: ['mdMenuItem', '?ngModel'],                                                                               // 21008
    compile: function(templateEl, templateAttrs) {                                                                     // 21009
      if (templateAttrs.type == 'checkbox' || templateAttrs.type == 'radio') {                                         // 21010
        var text = templateEl[0].textContent;                                                                          // 21011
        var buttonEl = angular.element('<md-button type="button"></md-button>');                                       // 21012
            buttonEl.html(text);                                                                                       // 21013
            buttonEl.attr('tabindex', '0');                                                                            // 21014
                                                                                                                       // 21015
        templateEl.html('');                                                                                           // 21016
        templateEl.append(angular.element('<md-icon md-svg-icon="check"></md-icon>'));                                 // 21017
        templateEl.append(buttonEl);                                                                                   // 21018
        templateEl[0].classList.add('md-indent');                                                                      // 21019
                                                                                                                       // 21020
        setDefault('role', (templateAttrs.type == 'checkbox') ? 'menuitemcheckbox' : 'menuitemradio');                 // 21021
        angular.forEach(['ng-disabled'], moveAttrToButton);                                                            // 21022
                                                                                                                       // 21023
      } else {                                                                                                         // 21024
        setDefault('role', 'menuitem');                                                                                // 21025
      }                                                                                                                // 21026
                                                                                                                       // 21027
                                                                                                                       // 21028
      return function(scope, el, attrs, ctrls) {                                                                       // 21029
        var ctrl = ctrls[0];                                                                                           // 21030
        var ngModel = ctrls[1];                                                                                        // 21031
        ctrl.init(ngModel);                                                                                            // 21032
      };                                                                                                               // 21033
                                                                                                                       // 21034
      function setDefault(attr, val) {                                                                                 // 21035
        if (!templateEl[0].hasAttribute(attr)) {                                                                       // 21036
          templateEl[0].setAttribute(attr, val);                                                                       // 21037
        }                                                                                                              // 21038
      }                                                                                                                // 21039
                                                                                                                       // 21040
      function moveAttrToButton(attr) {                                                                                // 21041
        if (templateEl[0].hasAttribute(attr)) {                                                                        // 21042
          var val = templateEl[0].getAttribute(attr);                                                                  // 21043
          buttonEl[0].setAttribute(attr, val);                                                                         // 21044
          templateEl[0].removeAttribute(attr);                                                                         // 21045
        }                                                                                                              // 21046
      }                                                                                                                // 21047
    },                                                                                                                 // 21048
    controller: 'MenuItemController'                                                                                   // 21049
  };                                                                                                                   // 21050
}                                                                                                                      // 21051
                                                                                                                       // 21052
})();                                                                                                                  // 21053
(function(){                                                                                                           // 21054
"use strict";                                                                                                          // 21055
                                                                                                                       // 21056
/**                                                                                                                    // 21057
 * @ngdoc directive                                                                                                    // 21058
 * @name mdTab                                                                                                         // 21059
 * @module material.components.tabs                                                                                    // 21060
 *                                                                                                                     // 21061
 * @restrict E                                                                                                         // 21062
 *                                                                                                                     // 21063
 * @description                                                                                                        // 21064
 * Use the `<md-tab>` a nested directive used within `<md-tabs>` to specify a tab with a **label** and optional *view content*.
 *                                                                                                                     // 21066
 * If the `label` attribute is not specified, then an optional `<md-tab-label>` tag can be used to specify more        // 21067
 * complex tab header markup. If neither the **label** nor the **md-tab-label** are specified, then the nested         // 21068
 * markup of the `<md-tab>` is used as the tab header markup.                                                          // 21069
 *                                                                                                                     // 21070
 * Please note that if you use `<md-tab-label>`, your content **MUST** be wrapped in the `<md-tab-body>` tag.  This    // 21071
 * is to define a clear separation between the tab content and the tab label.                                          // 21072
 *                                                                                                                     // 21073
 * If a tab **label** has been identified, then any **non-**`<md-tab-label>` markup                                    // 21074
 * will be considered tab content and will be transcluded to the internal `<div class="md-tabs-content">` container.   // 21075
 *                                                                                                                     // 21076
 * This container is used by the TabsController to show/hide the active tab's content view. This synchronization is    // 21077
 * automatically managed by the internal TabsController whenever the tab selection changes. Selection changes can      // 21078
 * be initiated via data binding changes, programmatic invocation, or user gestures.                                   // 21079
 *                                                                                                                     // 21080
 * @param {string=} label Optional attribute to specify a simple string as the tab label                               // 21081
 * @param {boolean=} disabled If present, disabled tab selection.                                                      // 21082
 * @param {expression=} md-on-deselect Expression to be evaluated after the tab has been de-selected.                  // 21083
 * @param {expression=} md-on-select Expression to be evaluated after the tab has been selected.                       // 21084
 *                                                                                                                     // 21085
 *                                                                                                                     // 21086
 * @usage                                                                                                              // 21087
 *                                                                                                                     // 21088
 * <hljs lang="html">                                                                                                  // 21089
 * <md-tab label="" disabled="" md-on-select="" md-on-deselect="" >                                                    // 21090
 *   <h3>My Tab content</h3>                                                                                           // 21091
 * </md-tab>                                                                                                           // 21092
 *                                                                                                                     // 21093
 * <md-tab >                                                                                                           // 21094
 *   <md-tab-label>                                                                                                    // 21095
 *     <h3>My Tab content</h3>                                                                                         // 21096
 *   </md-tab-label>                                                                                                   // 21097
 *   <md-tab-body>                                                                                                     // 21098
 *     <p>                                                                                                             // 21099
 *       Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium,             // 21100
 *       totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae               // 21101
 *       dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit,             // 21102
 *       sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.                                // 21103
 *     </p>                                                                                                            // 21104
 *   </md-tab-body>                                                                                                    // 21105
 * </md-tab>                                                                                                           // 21106
 * </hljs>                                                                                                             // 21107
 *                                                                                                                     // 21108
 */                                                                                                                    // 21109
angular                                                                                                                // 21110
    .module('material.components.tabs')                                                                                // 21111
    .directive('mdTab', MdTab);                                                                                        // 21112
                                                                                                                       // 21113
function MdTab () {                                                                                                    // 21114
  return {                                                                                                             // 21115
    require:  '^?mdTabs',                                                                                              // 21116
    terminal: true,                                                                                                    // 21117
    compile:  function (element, attr) {                                                                               // 21118
      var label = element.find('md-tab-label'),                                                                        // 21119
          body  = element.find('md-tab-body');                                                                         // 21120
                                                                                                                       // 21121
      if (label.length == 0) {                                                                                         // 21122
        label = angular.element('<md-tab-label></md-tab-label>');                                                      // 21123
        if (attr.label) label.text(attr.label);                                                                        // 21124
        else label.append(element.contents());                                                                         // 21125
      }                                                                                                                // 21126
                                                                                                                       // 21127
      if (body.length == 0) {                                                                                          // 21128
        var contents = element.contents().detach();                                                                    // 21129
        body         = angular.element('<md-tab-body></md-tab-body>');                                                 // 21130
        body.append(contents);                                                                                         // 21131
      }                                                                                                                // 21132
                                                                                                                       // 21133
      element.append(label);                                                                                           // 21134
      if (body.html()) element.append(body);                                                                           // 21135
                                                                                                                       // 21136
      return postLink;                                                                                                 // 21137
    },                                                                                                                 // 21138
    scope:    {                                                                                                        // 21139
      active:   '=?mdActive',                                                                                          // 21140
      disabled: '=?ngDisabled',                                                                                        // 21141
      select:   '&?mdOnSelect',                                                                                        // 21142
      deselect: '&?mdOnDeselect'                                                                                       // 21143
    }                                                                                                                  // 21144
  };                                                                                                                   // 21145
                                                                                                                       // 21146
  function postLink (scope, element, attr, ctrl) {                                                                     // 21147
    if (!ctrl) return;                                                                                                 // 21148
    var index = ctrl.getTabElementIndex(element),                                                                      // 21149
        body  = element.find('md-tab-body').eq(0).remove(),                                                            // 21150
        label = element.find('md-tab-label').eq(0).remove(),                                                           // 21151
        data  = ctrl.insertTab({                                                                                       // 21152
          scope:    scope,                                                                                             // 21153
          parent:   scope.$parent,                                                                                     // 21154
          index:    index,                                                                                             // 21155
          element:  element,                                                                                           // 21156
          template: body.html(),                                                                                       // 21157
          label:    label.html()                                                                                       // 21158
        }, index);                                                                                                     // 21159
                                                                                                                       // 21160
    scope.select   = scope.select || angular.noop;                                                                     // 21161
    scope.deselect = scope.deselect || angular.noop;                                                                   // 21162
                                                                                                                       // 21163
    scope.$watch('active', function (active) { if (active) ctrl.select(data.getIndex()); });                           // 21164
    scope.$watch('disabled', function () { ctrl.refreshIndex(); });                                                    // 21165
    scope.$watch(                                                                                                      // 21166
        function () {                                                                                                  // 21167
          return ctrl.getTabElementIndex(element);                                                                     // 21168
        },                                                                                                             // 21169
        function (newIndex) {                                                                                          // 21170
          data.index = newIndex;                                                                                       // 21171
          ctrl.updateTabOrder();                                                                                       // 21172
        }                                                                                                              // 21173
    );                                                                                                                 // 21174
    scope.$on('$destroy', function () { ctrl.removeTab(data); });                                                      // 21175
                                                                                                                       // 21176
  }                                                                                                                    // 21177
}                                                                                                                      // 21178
                                                                                                                       // 21179
})();                                                                                                                  // 21180
(function(){                                                                                                           // 21181
"use strict";                                                                                                          // 21182
                                                                                                                       // 21183
angular                                                                                                                // 21184
    .module('material.components.tabs')                                                                                // 21185
    .directive('mdTabItem', MdTabItem);                                                                                // 21186
                                                                                                                       // 21187
function MdTabItem () {                                                                                                // 21188
  return {                                                                                                             // 21189
    require: '^?mdTabs',                                                                                               // 21190
    link:    function link (scope, element, attr, ctrl) {                                                              // 21191
      if (!ctrl) return;                                                                                               // 21192
      ctrl.attachRipple(scope, element);                                                                               // 21193
    }                                                                                                                  // 21194
  };                                                                                                                   // 21195
}                                                                                                                      // 21196
                                                                                                                       // 21197
})();                                                                                                                  // 21198
(function(){                                                                                                           // 21199
"use strict";                                                                                                          // 21200
                                                                                                                       // 21201
angular                                                                                                                // 21202
    .module('material.components.tabs')                                                                                // 21203
    .directive('mdTabLabel', MdTabLabel);                                                                              // 21204
                                                                                                                       // 21205
function MdTabLabel () {                                                                                               // 21206
  return { terminal: true };                                                                                           // 21207
}                                                                                                                      // 21208
                                                                                                                       // 21209
                                                                                                                       // 21210
})();                                                                                                                  // 21211
(function(){                                                                                                           // 21212
"use strict";                                                                                                          // 21213
                                                                                                                       // 21214
angular.module('material.components.tabs')                                                                             // 21215
    .directive('mdTabScroll', MdTabScroll);                                                                            // 21216
                                                                                                                       // 21217
function MdTabScroll ($parse) {                                                                                        // 21218
  return {                                                                                                             // 21219
    restrict: 'A',                                                                                                     // 21220
    compile: function ($element, attr) {                                                                               // 21221
      var fn = $parse(attr.mdTabScroll, null, true);                                                                   // 21222
      return function ngEventHandler (scope, element) {                                                                // 21223
        element.on('mousewheel', function (event) {                                                                    // 21224
          scope.$apply(function () { fn(scope, { $event: event }); });                                                 // 21225
        });                                                                                                            // 21226
      };                                                                                                               // 21227
    }                                                                                                                  // 21228
  }                                                                                                                    // 21229
}                                                                                                                      // 21230
MdTabScroll.$inject = ["$parse"];                                                                                      // 21231
                                                                                                                       // 21232
})();                                                                                                                  // 21233
(function(){                                                                                                           // 21234
"use strict";                                                                                                          // 21235
                                                                                                                       // 21236
angular                                                                                                                // 21237
    .module('material.components.tabs')                                                                                // 21238
    .controller('MdTabsController', MdTabsController);                                                                 // 21239
                                                                                                                       // 21240
/**                                                                                                                    // 21241
 * @ngInject                                                                                                           // 21242
 */                                                                                                                    // 21243
function MdTabsController ($scope, $element, $window, $mdConstant, $mdTabInkRipple,                                    // 21244
                           $mdUtil, $animateCss, $attrs, $compile, $mdTheming) {                                       // 21245
  // define private properties                                                                                         // 21246
  var ctrl      = this,                                                                                                // 21247
      locked    = false,                                                                                               // 21248
      elements  = getElements(),                                                                                       // 21249
      queue     = [],                                                                                                  // 21250
      destroyed = false,                                                                                               // 21251
      loaded    = false;                                                                                               // 21252
                                                                                                                       // 21253
  // define one-way bindings                                                                                           // 21254
  defineOneWayBinding('stretchTabs', handleStretchTabs);                                                               // 21255
                                                                                                                       // 21256
  // define public properties with change handlers                                                                     // 21257
  defineProperty('focusIndex', handleFocusIndexChange, ctrl.selectedIndex || 0);                                       // 21258
  defineProperty('offsetLeft', handleOffsetChange, 0);                                                                 // 21259
  defineProperty('hasContent', handleHasContent, false);                                                               // 21260
  defineProperty('maxTabWidth', handleMaxTabWidth, getMaxTabWidth());                                                  // 21261
  defineProperty('shouldPaginate', handleShouldPaginate, false);                                                       // 21262
                                                                                                                       // 21263
  // define boolean attributes                                                                                         // 21264
  defineBooleanAttribute('noInkBar', handleInkBar);                                                                    // 21265
  defineBooleanAttribute('dynamicHeight', handleDynamicHeight);                                                        // 21266
  defineBooleanAttribute('noPagination');                                                                              // 21267
  defineBooleanAttribute('swipeContent');                                                                              // 21268
  defineBooleanAttribute('noDisconnect');                                                                              // 21269
  defineBooleanAttribute('autoselect');                                                                                // 21270
  defineBooleanAttribute('centerTabs', handleCenterTabs);                                                              // 21271
  defineBooleanAttribute('enableDisconnect');                                                                          // 21272
                                                                                                                       // 21273
  // define public properties                                                                                          // 21274
  ctrl.scope             = $scope;                                                                                     // 21275
  ctrl.parent            = $scope.$parent;                                                                             // 21276
  ctrl.tabs              = [];                                                                                         // 21277
  ctrl.lastSelectedIndex = null;                                                                                       // 21278
  ctrl.hasFocus          = false;                                                                                      // 21279
  ctrl.lastClick         = true;                                                                                       // 21280
  ctrl.shouldCenterTabs  = shouldCenterTabs();                                                                         // 21281
                                                                                                                       // 21282
  // define public methods                                                                                             // 21283
  ctrl.updatePagination   = $mdUtil.debounce(updatePagination, 100);                                                   // 21284
  ctrl.redirectFocus      = redirectFocus;                                                                             // 21285
  ctrl.attachRipple       = attachRipple;                                                                              // 21286
  ctrl.insertTab          = insertTab;                                                                                 // 21287
  ctrl.removeTab          = removeTab;                                                                                 // 21288
  ctrl.select             = select;                                                                                    // 21289
  ctrl.scroll             = scroll;                                                                                    // 21290
  ctrl.nextPage           = nextPage;                                                                                  // 21291
  ctrl.previousPage       = previousPage;                                                                              // 21292
  ctrl.keydown            = keydown;                                                                                   // 21293
  ctrl.canPageForward     = canPageForward;                                                                            // 21294
  ctrl.canPageBack        = canPageBack;                                                                               // 21295
  ctrl.refreshIndex       = refreshIndex;                                                                              // 21296
  ctrl.incrementIndex     = incrementIndex;                                                                            // 21297
  ctrl.getTabElementIndex = getTabElementIndex;                                                                        // 21298
  ctrl.updateInkBarStyles = $mdUtil.debounce(updateInkBarStyles, 100);                                                 // 21299
  ctrl.updateTabOrder     = $mdUtil.debounce(updateTabOrder, 100);                                                     // 21300
                                                                                                                       // 21301
  init();                                                                                                              // 21302
                                                                                                                       // 21303
  /**                                                                                                                  // 21304
   * Perform initialization for the controller, setup events and watcher(s)                                            // 21305
   */                                                                                                                  // 21306
  function init () {                                                                                                   // 21307
    ctrl.selectedIndex = ctrl.selectedIndex || 0;                                                                      // 21308
    compileTemplate();                                                                                                 // 21309
    configureWatchers();                                                                                               // 21310
    bindEvents();                                                                                                      // 21311
    $mdTheming($element);                                                                                              // 21312
    $mdUtil.nextTick(function () {                                                                                     // 21313
      updateHeightFromContent();                                                                                       // 21314
      adjustOffset();                                                                                                  // 21315
      updateInkBarStyles();                                                                                            // 21316
      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();                               // 21317
      loaded = true;                                                                                                   // 21318
      updatePagination();                                                                                              // 21319
    });                                                                                                                // 21320
  }                                                                                                                    // 21321
                                                                                                                       // 21322
  /**                                                                                                                  // 21323
   * Compiles the template provided by the user.  This is passed as an attribute from the tabs                         // 21324
   * directive's template function.                                                                                    // 21325
   */                                                                                                                  // 21326
  function compileTemplate () {                                                                                        // 21327
    var template = $attrs.$mdTabsTemplate,                                                                             // 21328
        element  = angular.element(elements.data);                                                                     // 21329
    element.html(template);                                                                                            // 21330
    $compile(element.contents())(ctrl.parent);                                                                         // 21331
    delete $attrs.$mdTabsTemplate;                                                                                     // 21332
  }                                                                                                                    // 21333
                                                                                                                       // 21334
  /**                                                                                                                  // 21335
   * Binds events used by the tabs component.                                                                          // 21336
   */                                                                                                                  // 21337
  function bindEvents () {                                                                                             // 21338
    angular.element($window).on('resize', handleWindowResize);                                                         // 21339
    $scope.$on('$destroy', cleanup);                                                                                   // 21340
  }                                                                                                                    // 21341
                                                                                                                       // 21342
  /**                                                                                                                  // 21343
   * Configure watcher(s) used by Tabs                                                                                 // 21344
   */                                                                                                                  // 21345
  function configureWatchers () {                                                                                      // 21346
    $scope.$watch('$mdTabsCtrl.selectedIndex', handleSelectedIndexChange);                                             // 21347
  }                                                                                                                    // 21348
                                                                                                                       // 21349
  /**                                                                                                                  // 21350
   * Creates a one-way binding manually rather than relying on Angular's isolated scope                                // 21351
   * @param key                                                                                                        // 21352
   * @param handler                                                                                                    // 21353
   */                                                                                                                  // 21354
  function defineOneWayBinding (key, handler) {                                                                        // 21355
    var attr = $attrs.$normalize('md-' + key);                                                                         // 21356
    if (handler) defineProperty(key, handler);                                                                         // 21357
    $attrs.$observe(attr, function (newValue) { ctrl[ key ] = newValue; });                                            // 21358
  }                                                                                                                    // 21359
                                                                                                                       // 21360
  /**                                                                                                                  // 21361
   * Defines boolean attributes with default value set to true.  (ie. md-stretch-tabs with no value                    // 21362
   * will be treated as being truthy)                                                                                  // 21363
   * @param key                                                                                                        // 21364
   * @param handler                                                                                                    // 21365
   */                                                                                                                  // 21366
  function defineBooleanAttribute (key, handler) {                                                                     // 21367
    var attr = $attrs.$normalize('md-' + key);                                                                         // 21368
    if (handler) defineProperty(key, handler);                                                                         // 21369
    if ($attrs.hasOwnProperty(attr)) updateValue($attrs[attr]);                                                        // 21370
    $attrs.$observe(attr, updateValue);                                                                                // 21371
    function updateValue (newValue) {                                                                                  // 21372
      ctrl[ key ] = newValue !== 'false';                                                                              // 21373
    }                                                                                                                  // 21374
  }                                                                                                                    // 21375
                                                                                                                       // 21376
  /**                                                                                                                  // 21377
   * Remove any events defined by this controller                                                                      // 21378
   */                                                                                                                  // 21379
  function cleanup () {                                                                                                // 21380
    destroyed = true;                                                                                                  // 21381
    angular.element($window).off('resize', handleWindowResize);                                                        // 21382
  }                                                                                                                    // 21383
                                                                                                                       // 21384
  // Change handlers                                                                                                   // 21385
                                                                                                                       // 21386
  /**                                                                                                                  // 21387
   * Toggles stretch tabs class and updates inkbar when tab stretching changes                                         // 21388
   * @param stretchTabs                                                                                                // 21389
   */                                                                                                                  // 21390
  function handleStretchTabs (stretchTabs) {                                                                           // 21391
    angular.element(elements.wrapper).toggleClass('md-stretch-tabs', shouldStretchTabs());                             // 21392
    updateInkBarStyles();                                                                                              // 21393
  }                                                                                                                    // 21394
                                                                                                                       // 21395
  function handleCenterTabs (newValue) {                                                                               // 21396
    ctrl.shouldCenterTabs = shouldCenterTabs();                                                                        // 21397
  }                                                                                                                    // 21398
                                                                                                                       // 21399
  function handleMaxTabWidth (newWidth, oldWidth) {                                                                    // 21400
    if (newWidth !== oldWidth) {                                                                                       // 21401
      $mdUtil.nextTick(ctrl.updateInkBarStyles);                                                                       // 21402
    }                                                                                                                  // 21403
  }                                                                                                                    // 21404
                                                                                                                       // 21405
  function handleShouldPaginate (newValue, oldValue) {                                                                 // 21406
    if (newValue !== oldValue) {                                                                                       // 21407
      ctrl.maxTabWidth      = getMaxTabWidth();                                                                        // 21408
      ctrl.shouldCenterTabs = shouldCenterTabs();                                                                      // 21409
      $mdUtil.nextTick(function () {                                                                                   // 21410
        ctrl.maxTabWidth = getMaxTabWidth();                                                                           // 21411
        adjustOffset(ctrl.selectedIndex);                                                                              // 21412
      });                                                                                                              // 21413
    }                                                                                                                  // 21414
  }                                                                                                                    // 21415
                                                                                                                       // 21416
  /**                                                                                                                  // 21417
   * Add/remove the `md-no-tab-content` class depending on `ctrl.hasContent`                                           // 21418
   * @param hasContent                                                                                                 // 21419
   */                                                                                                                  // 21420
  function handleHasContent (hasContent) {                                                                             // 21421
    $element[ hasContent ? 'removeClass' : 'addClass' ]('md-no-tab-content');                                          // 21422
  }                                                                                                                    // 21423
                                                                                                                       // 21424
  /**                                                                                                                  // 21425
   * Apply ctrl.offsetLeft to the paging element when it changes                                                       // 21426
   * @param left                                                                                                       // 21427
   */                                                                                                                  // 21428
  function handleOffsetChange (left) {                                                                                 // 21429
    var newValue = ctrl.shouldCenterTabs ? '' : '-' + left + 'px';                                                     // 21430
    angular.element(elements.paging).css($mdConstant.CSS.TRANSFORM, 'translate3d(' + newValue + ', 0, 0)');            // 21431
    $scope.$broadcast('$mdTabsPaginationChanged');                                                                     // 21432
  }                                                                                                                    // 21433
                                                                                                                       // 21434
  /**                                                                                                                  // 21435
   * Update the UI whenever `ctrl.focusIndex` is updated                                                               // 21436
   * @param newIndex                                                                                                   // 21437
   * @param oldIndex                                                                                                   // 21438
   */                                                                                                                  // 21439
  function handleFocusIndexChange (newIndex, oldIndex) {                                                               // 21440
    if (newIndex === oldIndex) return;                                                                                 // 21441
    if (!elements.tabs[ newIndex ]) return;                                                                            // 21442
    adjustOffset();                                                                                                    // 21443
    redirectFocus();                                                                                                   // 21444
  }                                                                                                                    // 21445
                                                                                                                       // 21446
  /**                                                                                                                  // 21447
   * Update the UI whenever the selected index changes. Calls user-defined select/deselect methods.                    // 21448
   * @param newValue                                                                                                   // 21449
   * @param oldValue                                                                                                   // 21450
   */                                                                                                                  // 21451
  function handleSelectedIndexChange (newValue, oldValue) {                                                            // 21452
    if (newValue === oldValue) return;                                                                                 // 21453
                                                                                                                       // 21454
    ctrl.selectedIndex     = getNearestSafeIndex(newValue);                                                            // 21455
    ctrl.lastSelectedIndex = oldValue;                                                                                 // 21456
    ctrl.updateInkBarStyles();                                                                                         // 21457
    updateHeightFromContent();                                                                                         // 21458
    adjustOffset(newValue);                                                                                            // 21459
    $scope.$broadcast('$mdTabsChanged');                                                                               // 21460
    ctrl.tabs[ oldValue ] && ctrl.tabs[ oldValue ].scope.deselect();                                                   // 21461
    ctrl.tabs[ newValue ] && ctrl.tabs[ newValue ].scope.select();                                                     // 21462
  }                                                                                                                    // 21463
                                                                                                                       // 21464
  function getTabElementIndex(tabEl){                                                                                  // 21465
    var tabs = $element[0].getElementsByTagName('md-tab');                                                             // 21466
    return Array.prototype.indexOf.call(tabs, tabEl[0]);                                                               // 21467
  }                                                                                                                    // 21468
                                                                                                                       // 21469
  /**                                                                                                                  // 21470
   * Queues up a call to `handleWindowResize` when a resize occurs while the tabs component is                         // 21471
   * hidden.                                                                                                           // 21472
   */                                                                                                                  // 21473
  function handleResizeWhenVisible () {                                                                                // 21474
    // if there is already a watcher waiting for resize, do nothing                                                    // 21475
    if (handleResizeWhenVisible.watcher) return;                                                                       // 21476
    // otherwise, we will abuse the $watch function to check for visible                                               // 21477
    handleResizeWhenVisible.watcher = $scope.$watch(function () {                                                      // 21478
      // since we are checking for DOM size, we use $mdUtil.nextTick() to wait for after the DOM updates               // 21479
      $mdUtil.nextTick(function () {                                                                                   // 21480
        // if the watcher has already run (ie. multiple digests in one cycle), do nothing                              // 21481
        if (!handleResizeWhenVisible.watcher) return;                                                                  // 21482
                                                                                                                       // 21483
        if ($element.prop('offsetParent')) {                                                                           // 21484
          handleResizeWhenVisible.watcher();                                                                           // 21485
          handleResizeWhenVisible.watcher = null;                                                                      // 21486
                                                                                                                       // 21487
          handleWindowResize();                                                                                        // 21488
        }                                                                                                              // 21489
      }, false);                                                                                                       // 21490
    });                                                                                                                // 21491
  }                                                                                                                    // 21492
                                                                                                                       // 21493
  // Event handlers / actions                                                                                          // 21494
                                                                                                                       // 21495
  /**                                                                                                                  // 21496
   * Handle user keyboard interactions                                                                                 // 21497
   * @param event                                                                                                      // 21498
   */                                                                                                                  // 21499
  function keydown (event) {                                                                                           // 21500
    switch (event.keyCode) {                                                                                           // 21501
      case $mdConstant.KEY_CODE.LEFT_ARROW:                                                                            // 21502
        event.preventDefault();                                                                                        // 21503
        incrementIndex(-1, true);                                                                                      // 21504
        break;                                                                                                         // 21505
      case $mdConstant.KEY_CODE.RIGHT_ARROW:                                                                           // 21506
        event.preventDefault();                                                                                        // 21507
        incrementIndex(1, true);                                                                                       // 21508
        break;                                                                                                         // 21509
      case $mdConstant.KEY_CODE.SPACE:                                                                                 // 21510
      case $mdConstant.KEY_CODE.ENTER:                                                                                 // 21511
        event.preventDefault();                                                                                        // 21512
        if (!locked) ctrl.selectedIndex = ctrl.focusIndex;                                                             // 21513
        break;                                                                                                         // 21514
    }                                                                                                                  // 21515
    ctrl.lastClick = false;                                                                                            // 21516
  }                                                                                                                    // 21517
                                                                                                                       // 21518
  /**                                                                                                                  // 21519
   * Update the selected index and trigger a click event on the original `md-tab` element in order                     // 21520
   * to fire user-added click events.                                                                                  // 21521
   * @param index                                                                                                      // 21522
   */                                                                                                                  // 21523
  function select (index) {                                                                                            // 21524
    if (!locked) ctrl.focusIndex = ctrl.selectedIndex = index;                                                         // 21525
    ctrl.lastClick = true;                                                                                             // 21526
    // nextTick is required to prevent errors in user-defined click events                                             // 21527
    $mdUtil.nextTick(function () {                                                                                     // 21528
      ctrl.tabs[ index ].element.triggerHandler('click');                                                              // 21529
    }, false);                                                                                                         // 21530
  }                                                                                                                    // 21531
                                                                                                                       // 21532
  /**                                                                                                                  // 21533
   * When pagination is on, this makes sure the selected index is in view.                                             // 21534
   * @param event                                                                                                      // 21535
   */                                                                                                                  // 21536
  function scroll (event) {                                                                                            // 21537
    if (!ctrl.shouldPaginate) return;                                                                                  // 21538
    event.preventDefault();                                                                                            // 21539
    ctrl.offsetLeft = fixOffset(ctrl.offsetLeft - event.wheelDelta);                                                   // 21540
  }                                                                                                                    // 21541
                                                                                                                       // 21542
  /**                                                                                                                  // 21543
   * Slides the tabs over approximately one page forward.                                                              // 21544
   */                                                                                                                  // 21545
  function nextPage () {                                                                                               // 21546
    var viewportWidth = elements.canvas.clientWidth,                                                                   // 21547
        totalWidth    = viewportWidth + ctrl.offsetLeft,                                                               // 21548
        i, tab;                                                                                                        // 21549
    for (i = 0; i < elements.tabs.length; i++) {                                                                       // 21550
      tab = elements.tabs[ i ];                                                                                        // 21551
      if (tab.offsetLeft + tab.offsetWidth > totalWidth) break;                                                        // 21552
    }                                                                                                                  // 21553
    ctrl.offsetLeft = fixOffset(tab.offsetLeft);                                                                       // 21554
  }                                                                                                                    // 21555
                                                                                                                       // 21556
  /**                                                                                                                  // 21557
   * Slides the tabs over approximately one page backward.                                                             // 21558
   */                                                                                                                  // 21559
  function previousPage () {                                                                                           // 21560
    var i, tab;                                                                                                        // 21561
    for (i = 0; i < elements.tabs.length; i++) {                                                                       // 21562
      tab = elements.tabs[ i ];                                                                                        // 21563
      if (tab.offsetLeft + tab.offsetWidth >= ctrl.offsetLeft) break;                                                  // 21564
    }                                                                                                                  // 21565
    ctrl.offsetLeft = fixOffset(tab.offsetLeft + tab.offsetWidth - elements.canvas.clientWidth);                       // 21566
  }                                                                                                                    // 21567
                                                                                                                       // 21568
  /**                                                                                                                  // 21569
   * Update size calculations when the window is resized.                                                              // 21570
   */                                                                                                                  // 21571
  function handleWindowResize () {                                                                                     // 21572
    ctrl.lastSelectedIndex = ctrl.selectedIndex;                                                                       // 21573
    ctrl.offsetLeft        = fixOffset(ctrl.offsetLeft);                                                               // 21574
    $mdUtil.nextTick(function () {                                                                                     // 21575
      ctrl.updateInkBarStyles();                                                                                       // 21576
      updatePagination();                                                                                              // 21577
    });                                                                                                                // 21578
  }                                                                                                                    // 21579
                                                                                                                       // 21580
  function handleInkBar (hide) {                                                                                       // 21581
    angular.element(elements.inkBar).toggleClass('ng-hide', hide);                                                     // 21582
  }                                                                                                                    // 21583
                                                                                                                       // 21584
  /**                                                                                                                  // 21585
   * Toggle dynamic height class when value changes                                                                    // 21586
   * @param value                                                                                                      // 21587
   */                                                                                                                  // 21588
  function handleDynamicHeight (value) {                                                                               // 21589
    $element.toggleClass('md-dynamic-height', value);                                                                  // 21590
  }                                                                                                                    // 21591
                                                                                                                       // 21592
  /**                                                                                                                  // 21593
   * Remove a tab from the data and select the nearest valid tab.                                                      // 21594
   * @param tabData                                                                                                    // 21595
   */                                                                                                                  // 21596
  function removeTab (tabData) {                                                                                       // 21597
    if (destroyed) return;                                                                                             // 21598
    var selectedIndex = ctrl.selectedIndex,                                                                            // 21599
        tab           = ctrl.tabs.splice(tabData.getIndex(), 1)[ 0 ];                                                  // 21600
    refreshIndex();                                                                                                    // 21601
    // when removing a tab, if the selected index did not change, we have to manually trigger the                      // 21602
    //   tab select/deselect events                                                                                    // 21603
    if (ctrl.selectedIndex === selectedIndex) {                                                                        // 21604
      tab.scope.deselect();                                                                                            // 21605
      ctrl.tabs[ ctrl.selectedIndex ] && ctrl.tabs[ ctrl.selectedIndex ].scope.select();                               // 21606
    }                                                                                                                  // 21607
    $mdUtil.nextTick(function () {                                                                                     // 21608
      updatePagination();                                                                                              // 21609
      ctrl.offsetLeft = fixOffset(ctrl.offsetLeft);                                                                    // 21610
    });                                                                                                                // 21611
  }                                                                                                                    // 21612
                                                                                                                       // 21613
  /**                                                                                                                  // 21614
   * Create an entry in the tabs array for a new tab at the specified index.                                           // 21615
   * @param tabData                                                                                                    // 21616
   * @param index                                                                                                      // 21617
   * @returns {*}                                                                                                      // 21618
   */                                                                                                                  // 21619
  function insertTab (tabData, index) {                                                                                // 21620
    var hasLoaded = loaded;                                                                                            // 21621
    var proto     = {                                                                                                  // 21622
          getIndex:     function () { return ctrl.tabs.indexOf(tab); },                                                // 21623
          isActive:     function () { return this.getIndex() === ctrl.selectedIndex; },                                // 21624
          isLeft:       function () { return this.getIndex() < ctrl.selectedIndex; },                                  // 21625
          isRight:      function () { return this.getIndex() > ctrl.selectedIndex; },                                  // 21626
          shouldRender: function () { return !ctrl.noDisconnect || this.isActive(); },                                 // 21627
          hasFocus:     function () {                                                                                  // 21628
            return !ctrl.lastClick                                                                                     // 21629
                && ctrl.hasFocus && this.getIndex() === ctrl.focusIndex;                                               // 21630
          },                                                                                                           // 21631
          id:           $mdUtil.nextUid()                                                                              // 21632
        },                                                                                                             // 21633
        tab       = angular.extend(proto, tabData);                                                                    // 21634
    if (angular.isDefined(index)) {                                                                                    // 21635
      ctrl.tabs.splice(index, 0, tab);                                                                                 // 21636
    } else {                                                                                                           // 21637
      ctrl.tabs.push(tab);                                                                                             // 21638
    }                                                                                                                  // 21639
    processQueue();                                                                                                    // 21640
    updateHasContent();                                                                                                // 21641
    $mdUtil.nextTick(function () {                                                                                     // 21642
      updatePagination();                                                                                              // 21643
      // if autoselect is enabled, select the newly added tab                                                          // 21644
      if (hasLoaded && ctrl.autoselect) $mdUtil.nextTick(function () {                                                 // 21645
        $mdUtil.nextTick(function () { select(ctrl.tabs.indexOf(tab)); });                                             // 21646
      });                                                                                                              // 21647
    });                                                                                                                // 21648
    return tab;                                                                                                        // 21649
  }                                                                                                                    // 21650
                                                                                                                       // 21651
  // Getter methods                                                                                                    // 21652
                                                                                                                       // 21653
  /**                                                                                                                  // 21654
   * Gathers references to all of the DOM elements used by this controller.                                            // 21655
   * @returns {{}}                                                                                                     // 21656
   */                                                                                                                  // 21657
  function getElements () {                                                                                            // 21658
    var elements = {};                                                                                                 // 21659
                                                                                                                       // 21660
    // gather tab bar elements                                                                                         // 21661
    elements.wrapper = $element[ 0 ].getElementsByTagName('md-tabs-wrapper')[ 0 ];                                     // 21662
    elements.data    = $element[ 0 ].getElementsByTagName('md-tab-data')[ 0 ];                                         // 21663
    elements.canvas  = elements.wrapper.getElementsByTagName('md-tabs-canvas')[ 0 ];                                   // 21664
    elements.paging  = elements.canvas.getElementsByTagName('md-pagination-wrapper')[ 0 ];                             // 21665
    elements.tabs    = elements.paging.getElementsByTagName('md-tab-item');                                            // 21666
    elements.dummies = elements.canvas.getElementsByTagName('md-dummy-tab');                                           // 21667
    elements.inkBar  = elements.paging.getElementsByTagName('md-ink-bar')[ 0 ];                                        // 21668
                                                                                                                       // 21669
    // gather tab content elements                                                                                     // 21670
    elements.contentsWrapper = $element[ 0 ].getElementsByTagName('md-tabs-content-wrapper')[ 0 ];                     // 21671
    elements.contents        = elements.contentsWrapper.getElementsByTagName('md-tab-content');                        // 21672
                                                                                                                       // 21673
    return elements;                                                                                                   // 21674
  }                                                                                                                    // 21675
                                                                                                                       // 21676
  /**                                                                                                                  // 21677
   * Determines whether or not the left pagination arrow should be enabled.                                            // 21678
   * @returns {boolean}                                                                                                // 21679
   */                                                                                                                  // 21680
  function canPageBack () {                                                                                            // 21681
    return ctrl.offsetLeft > 0;                                                                                        // 21682
  }                                                                                                                    // 21683
                                                                                                                       // 21684
  /**                                                                                                                  // 21685
   * Determines whether or not the right pagination arrow should be enabled.                                           // 21686
   * @returns {*|boolean}                                                                                              // 21687
   */                                                                                                                  // 21688
  function canPageForward () {                                                                                         // 21689
    var lastTab = elements.tabs[ elements.tabs.length - 1 ];                                                           // 21690
    return lastTab && lastTab.offsetLeft + lastTab.offsetWidth > elements.canvas.clientWidth +                         // 21691
        ctrl.offsetLeft;                                                                                               // 21692
  }                                                                                                                    // 21693
                                                                                                                       // 21694
  /**                                                                                                                  // 21695
   * Determines if the UI should stretch the tabs to fill the available space.                                         // 21696
   * @returns {*}                                                                                                      // 21697
   */                                                                                                                  // 21698
  function shouldStretchTabs () {                                                                                      // 21699
    switch (ctrl.stretchTabs) {                                                                                        // 21700
      case 'always':                                                                                                   // 21701
        return true;                                                                                                   // 21702
      case 'never':                                                                                                    // 21703
        return false;                                                                                                  // 21704
      default:                                                                                                         // 21705
        return !ctrl.shouldPaginate                                                                                    // 21706
            && $window.matchMedia('(max-width: 600px)').matches;                                                       // 21707
    }                                                                                                                  // 21708
  }                                                                                                                    // 21709
                                                                                                                       // 21710
  /**                                                                                                                  // 21711
   * Determines if the tabs should appear centered.                                                                    // 21712
   * @returns {string|boolean}                                                                                         // 21713
   */                                                                                                                  // 21714
  function shouldCenterTabs () {                                                                                       // 21715
    return ctrl.centerTabs && !ctrl.shouldPaginate;                                                                    // 21716
  }                                                                                                                    // 21717
                                                                                                                       // 21718
  /**                                                                                                                  // 21719
   * Determines if pagination is necessary to display the tabs within the available space.                             // 21720
   * @returns {boolean}                                                                                                // 21721
   */                                                                                                                  // 21722
  function shouldPaginate () {                                                                                         // 21723
    if (ctrl.noPagination || !loaded) return false;                                                                    // 21724
    var canvasWidth = $element.prop('clientWidth');                                                                    // 21725
    angular.forEach(elements.dummies, function (tab) { canvasWidth -= tab.offsetWidth; });                             // 21726
    return canvasWidth < 0;                                                                                            // 21727
  }                                                                                                                    // 21728
                                                                                                                       // 21729
  /**                                                                                                                  // 21730
   * Finds the nearest tab index that is available.  This is primarily used for when the active                        // 21731
   * tab is removed.                                                                                                   // 21732
   * @param newIndex                                                                                                   // 21733
   * @returns {*}                                                                                                      // 21734
   */                                                                                                                  // 21735
  function getNearestSafeIndex (newIndex) {                                                                            // 21736
    if (newIndex === -1) return -1;                                                                                    // 21737
    var maxOffset = Math.max(ctrl.tabs.length - newIndex, newIndex),                                                   // 21738
        i, tab;                                                                                                        // 21739
    for (i = 0; i <= maxOffset; i++) {                                                                                 // 21740
      tab = ctrl.tabs[ newIndex + i ];                                                                                 // 21741
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();                                                 // 21742
      tab = ctrl.tabs[ newIndex - i ];                                                                                 // 21743
      if (tab && (tab.scope.disabled !== true)) return tab.getIndex();                                                 // 21744
    }                                                                                                                  // 21745
    return newIndex;                                                                                                   // 21746
  }                                                                                                                    // 21747
                                                                                                                       // 21748
  // Utility methods                                                                                                   // 21749
                                                                                                                       // 21750
  /**                                                                                                                  // 21751
   * Defines a property using a getter and setter in order to trigger a change handler without                         // 21752
   * using `$watch` to observe changes.                                                                                // 21753
   * @param key                                                                                                        // 21754
   * @param handler                                                                                                    // 21755
   * @param value                                                                                                      // 21756
   */                                                                                                                  // 21757
  function defineProperty (key, handler, value) {                                                                      // 21758
    Object.defineProperty(ctrl, key, {                                                                                 // 21759
      get: function () { return value; },                                                                              // 21760
      set: function (newValue) {                                                                                       // 21761
        var oldValue = value;                                                                                          // 21762
        value        = newValue;                                                                                       // 21763
        handler && handler(newValue, oldValue);                                                                        // 21764
      }                                                                                                                // 21765
    });                                                                                                                // 21766
  }                                                                                                                    // 21767
                                                                                                                       // 21768
  /**                                                                                                                  // 21769
   * Updates whether or not pagination should be displayed.                                                            // 21770
   */                                                                                                                  // 21771
  function updatePagination () {                                                                                       // 21772
    ctrl.shouldPaginate = shouldPaginate();                                                                            // 21773
  }                                                                                                                    // 21774
                                                                                                                       // 21775
  function getMaxTabWidth () {                                                                                         // 21776
    return $element.prop('clientWidth');                                                                               // 21777
  }                                                                                                                    // 21778
                                                                                                                       // 21779
  /**                                                                                                                  // 21780
   * Re-orders the tabs and updates the selected and focus indexes to their new positions.                             // 21781
   * This is triggered by `tabDirective.js` when the user's tabs have been re-ordered.                                 // 21782
   */                                                                                                                  // 21783
  function updateTabOrder () {                                                                                         // 21784
    var selectedItem   = ctrl.tabs[ ctrl.selectedIndex ],                                                              // 21785
        focusItem      = ctrl.tabs[ ctrl.focusIndex ];                                                                 // 21786
    ctrl.tabs          = ctrl.tabs.sort(function (a, b) {                                                              // 21787
      return a.index - b.index;                                                                                        // 21788
    });                                                                                                                // 21789
    ctrl.selectedIndex = ctrl.tabs.indexOf(selectedItem);                                                              // 21790
    ctrl.focusIndex    = ctrl.tabs.indexOf(focusItem);                                                                 // 21791
  }                                                                                                                    // 21792
                                                                                                                       // 21793
  /**                                                                                                                  // 21794
   * This moves the selected or focus index left or right.  This is used by the keydown handler.                       // 21795
   * @param inc                                                                                                        // 21796
   */                                                                                                                  // 21797
  function incrementIndex (inc, focus) {                                                                               // 21798
    var newIndex,                                                                                                      // 21799
        key   = focus ? 'focusIndex' : 'selectedIndex',                                                                // 21800
        index = ctrl[ key ];                                                                                           // 21801
    for (newIndex = index + inc;                                                                                       // 21802
         ctrl.tabs[ newIndex ] && ctrl.tabs[ newIndex ].scope.disabled;                                                // 21803
         newIndex += inc) {}                                                                                           // 21804
    if (ctrl.tabs[ newIndex ]) {                                                                                       // 21805
      ctrl[ key ] = newIndex;                                                                                          // 21806
    }                                                                                                                  // 21807
  }                                                                                                                    // 21808
                                                                                                                       // 21809
  /**                                                                                                                  // 21810
   * This is used to forward focus to dummy elements.  This method is necessary to avoid aniation                      // 21811
   * issues when attempting to focus an item that is out of view.                                                      // 21812
   */                                                                                                                  // 21813
  function redirectFocus () {                                                                                          // 21814
    elements.dummies[ ctrl.focusIndex ].focus();                                                                       // 21815
  }                                                                                                                    // 21816
                                                                                                                       // 21817
  /**                                                                                                                  // 21818
   * Forces the pagination to move the focused tab into view.                                                          // 21819
   */                                                                                                                  // 21820
  function adjustOffset (index) {                                                                                      // 21821
    if (index == null) index = ctrl.focusIndex;                                                                        // 21822
    if (!elements.tabs[ index ]) return;                                                                               // 21823
    if (ctrl.shouldCenterTabs) return;                                                                                 // 21824
    var tab         = elements.tabs[ index ],                                                                          // 21825
        left        = tab.offsetLeft,                                                                                  // 21826
        right       = tab.offsetWidth + left;                                                                          // 21827
    ctrl.offsetLeft = Math.max(ctrl.offsetLeft, fixOffset(right - elements.canvas.clientWidth + 32 * 2));              // 21828
    ctrl.offsetLeft = Math.min(ctrl.offsetLeft, fixOffset(left));                                                      // 21829
  }                                                                                                                    // 21830
                                                                                                                       // 21831
  /**                                                                                                                  // 21832
   * Iterates through all queued functions and clears the queue.  This is used for functions that                      // 21833
   * are called before the UI is ready, such as size calculations.                                                     // 21834
   */                                                                                                                  // 21835
  function processQueue () {                                                                                           // 21836
    queue.forEach(function (func) { $mdUtil.nextTick(func); });                                                        // 21837
    queue = [];                                                                                                        // 21838
  }                                                                                                                    // 21839
                                                                                                                       // 21840
  /**                                                                                                                  // 21841
   * Determines if the tab content area is needed.                                                                     // 21842
   */                                                                                                                  // 21843
  function updateHasContent () {                                                                                       // 21844
    var hasContent  = false;                                                                                           // 21845
    angular.forEach(ctrl.tabs, function (tab) {                                                                        // 21846
      if (tab.template) hasContent = true;                                                                             // 21847
    });                                                                                                                // 21848
    ctrl.hasContent = hasContent;                                                                                      // 21849
  }                                                                                                                    // 21850
                                                                                                                       // 21851
  /**                                                                                                                  // 21852
   * Moves the indexes to their nearest valid values.                                                                  // 21853
   */                                                                                                                  // 21854
  function refreshIndex () {                                                                                           // 21855
    ctrl.selectedIndex = getNearestSafeIndex(ctrl.selectedIndex);                                                      // 21856
    ctrl.focusIndex    = getNearestSafeIndex(ctrl.focusIndex);                                                         // 21857
  }                                                                                                                    // 21858
                                                                                                                       // 21859
  /**                                                                                                                  // 21860
   * Calculates the content height of the current tab.                                                                 // 21861
   * @returns {*}                                                                                                      // 21862
   */                                                                                                                  // 21863
  function updateHeightFromContent () {                                                                                // 21864
    if (!ctrl.dynamicHeight) return $element.css('height', '');                                                        // 21865
    if (!ctrl.tabs.length) return queue.push(updateHeightFromContent);                                                 // 21866
    var tabContent    = elements.contents[ ctrl.selectedIndex ],                                                       // 21867
        contentHeight = tabContent ? tabContent.offsetHeight : 0,                                                      // 21868
        tabsHeight    = elements.wrapper.offsetHeight,                                                                 // 21869
        newHeight     = contentHeight + tabsHeight,                                                                    // 21870
        currentHeight = $element.prop('clientHeight');                                                                 // 21871
    if (currentHeight === newHeight) return;                                                                           // 21872
                                                                                                                       // 21873
    // Lock during animation so the user can't change tabs                                                             // 21874
    locked = true;                                                                                                     // 21875
                                                                                                                       // 21876
    var fromHeight = { height: currentHeight + 'px'},                                                                  // 21877
        toHeight = { height: newHeight + 'px' };                                                                       // 21878
                                                                                                                       // 21879
    // Set the height to the current, specific pixel height to fix a bug on iOS where the height                       // 21880
    // first animates to 0, then back to the proper height causing a visual glitch                                     // 21881
    $element.css(fromHeight);                                                                                          // 21882
                                                                                                                       // 21883
    // Animate the height from the old to the new                                                                      // 21884
    $animateCss($element, {                                                                                            // 21885
      from: fromHeight,                                                                                                // 21886
      to: toHeight,                                                                                                    // 21887
      easing: 'cubic-bezier(0.35, 0, 0.25, 1)',                                                                        // 21888
      duration: 0.5                                                                                                    // 21889
    }).start().done(function () {                                                                                      // 21890
      // Then (to fix the same iOS issue as above), disable transitions and remove the specific                        // 21891
      // pixel height so the height can size with browser width/content changes, etc.                                  // 21892
      $element.css({                                                                                                   // 21893
        transition: 'none',                                                                                            // 21894
        height: ''                                                                                                     // 21895
      });                                                                                                              // 21896
                                                                                                                       // 21897
      // In the next tick, re-allow transitions (if we do it all at once, $element.css is "smart"                      // 21898
      // enough to batch it for us instead of doing it immediately, which undoes the original                          // 21899
      // transition: none)                                                                                             // 21900
      $mdUtil.nextTick(function() {                                                                                    // 21901
        $element.css('transition', '');                                                                                // 21902
      });                                                                                                              // 21903
                                                                                                                       // 21904
      // And unlock so tab changes can occur                                                                           // 21905
      locked = false;                                                                                                  // 21906
    });                                                                                                                // 21907
  }                                                                                                                    // 21908
                                                                                                                       // 21909
  /**                                                                                                                  // 21910
   * Repositions the ink bar to the selected tab.                                                                      // 21911
   * @returns {*}                                                                                                      // 21912
   */                                                                                                                  // 21913
  function updateInkBarStyles () {                                                                                     // 21914
    if (!elements.tabs[ ctrl.selectedIndex ]) {                                                                        // 21915
      angular.element(elements.inkBar).css({ left: 'auto', right: 'auto' });                                           // 21916
      return;                                                                                                          // 21917
    }                                                                                                                  // 21918
    if (!ctrl.tabs.length) return queue.push(ctrl.updateInkBarStyles);                                                 // 21919
    // if the element is not visible, we will not be able to calculate sizes until it is                               // 21920
    // we should treat that as a resize event rather than just updating the ink bar                                    // 21921
    if (!$element.prop('offsetParent')) return handleResizeWhenVisible();                                              // 21922
    var index      = ctrl.selectedIndex,                                                                               // 21923
        totalWidth = elements.paging.offsetWidth,                                                                      // 21924
        tab        = elements.tabs[ index ],                                                                           // 21925
        left       = tab.offsetLeft,                                                                                   // 21926
        right      = totalWidth - left - tab.offsetWidth,                                                              // 21927
        tabWidth;                                                                                                      // 21928
    if (ctrl.shouldCenterTabs) {                                                                                       // 21929
      tabWidth = Array.prototype.slice.call(elements.tabs).reduce(function (value, element) {                          // 21930
        return value + element.offsetWidth;                                                                            // 21931
      }, 0);                                                                                                           // 21932
      if (totalWidth > tabWidth) $mdUtil.nextTick(updateInkBarStyles, false);                                          // 21933
    }                                                                                                                  // 21934
    updateInkBarClassName();                                                                                           // 21935
    angular.element(elements.inkBar).css({ left: left + 'px', right: right + 'px' });                                  // 21936
  }                                                                                                                    // 21937
                                                                                                                       // 21938
  /**                                                                                                                  // 21939
   * Adds left/right classes so that the ink bar will animate properly.                                                // 21940
   */                                                                                                                  // 21941
  function updateInkBarClassName () {                                                                                  // 21942
    var newIndex = ctrl.selectedIndex,                                                                                 // 21943
        oldIndex = ctrl.lastSelectedIndex,                                                                             // 21944
        ink      = angular.element(elements.inkBar);                                                                   // 21945
    if (!angular.isNumber(oldIndex)) return;                                                                           // 21946
    ink                                                                                                                // 21947
        .toggleClass('md-left', newIndex < oldIndex)                                                                   // 21948
        .toggleClass('md-right', newIndex > oldIndex);                                                                 // 21949
  }                                                                                                                    // 21950
                                                                                                                       // 21951
  /**                                                                                                                  // 21952
   * Takes an offset value and makes sure that it is within the min/max allowed values.                                // 21953
   * @param value                                                                                                      // 21954
   * @returns {*}                                                                                                      // 21955
   */                                                                                                                  // 21956
  function fixOffset (value) {                                                                                         // 21957
    if (!elements.tabs.length || !ctrl.shouldPaginate) return 0;                                                       // 21958
    var lastTab    = elements.tabs[ elements.tabs.length - 1 ],                                                        // 21959
        totalWidth = lastTab.offsetLeft + lastTab.offsetWidth;                                                         // 21960
    value          = Math.max(0, value);                                                                               // 21961
    value          = Math.min(totalWidth - elements.canvas.clientWidth, value);                                        // 21962
    return value;                                                                                                      // 21963
  }                                                                                                                    // 21964
                                                                                                                       // 21965
  /**                                                                                                                  // 21966
   * Attaches a ripple to the tab item element.                                                                        // 21967
   * @param scope                                                                                                      // 21968
   * @param element                                                                                                    // 21969
   */                                                                                                                  // 21970
  function attachRipple (scope, element) {                                                                             // 21971
    var options = { colorElement: angular.element(elements.inkBar) };                                                  // 21972
    $mdTabInkRipple.attach(scope, element, options);                                                                   // 21973
  }                                                                                                                    // 21974
}                                                                                                                      // 21975
MdTabsController.$inject = ["$scope", "$element", "$window", "$mdConstant", "$mdTabInkRipple", "$mdUtil", "$animateCss", "$attrs", "$compile", "$mdTheming"];
                                                                                                                       // 21977
})();                                                                                                                  // 21978
(function(){                                                                                                           // 21979
"use strict";                                                                                                          // 21980
                                                                                                                       // 21981
/**                                                                                                                    // 21982
 * @ngdoc directive                                                                                                    // 21983
 * @name mdTabs                                                                                                        // 21984
 * @module material.components.tabs                                                                                    // 21985
 *                                                                                                                     // 21986
 * @restrict E                                                                                                         // 21987
 *                                                                                                                     // 21988
 * @description                                                                                                        // 21989
 * The `<md-tabs>` directive serves as the container for 1..n `<md-tab>` child directives to produces a Tabs components.
 * In turn, the nested `<md-tab>` directive is used to specify a tab label for the **header button** and a [optional] tab view
 * content that will be associated with each tab button.                                                               // 21992
 *                                                                                                                     // 21993
 * Below is the markup for its simplest usage:                                                                         // 21994
 *                                                                                                                     // 21995
 *  <hljs lang="html">                                                                                                 // 21996
 *  <md-tabs>                                                                                                          // 21997
 *    <md-tab label="Tab #1"></md-tab>                                                                                 // 21998
 *    <md-tab label="Tab #2"></md-tab>                                                                                 // 21999
 *    <md-tab label="Tab #3"></md-tab>                                                                                 // 22000
 *  </md-tabs>                                                                                                         // 22001
 *  </hljs>                                                                                                            // 22002
 *                                                                                                                     // 22003
 * Tabs supports three (3) usage scenarios:                                                                            // 22004
 *                                                                                                                     // 22005
 *  1. Tabs (buttons only)                                                                                             // 22006
 *  2. Tabs with internal view content                                                                                 // 22007
 *  3. Tabs with external view content                                                                                 // 22008
 *                                                                                                                     // 22009
 * **Tab-only** support is useful when tab buttons are used for custom navigation regardless of any other components, content, or views.
 * **Tabs with internal views** are the traditional usages where each tab has associated view content and the view switching is managed internally by the Tabs component.
 * **Tabs with external view content** is often useful when content associated with each tab is independently managed and data-binding notifications announce tab selection changes.
 *                                                                                                                     // 22013
 * Additional features also include:                                                                                   // 22014
 *                                                                                                                     // 22015
 * *  Content can include any markup.                                                                                  // 22016
 * *  If a tab is disabled while active/selected, then the next tab will be auto-selected.                             // 22017
 *                                                                                                                     // 22018
 * ### Explanation of tab stretching                                                                                   // 22019
 *                                                                                                                     // 22020
 * Initially, tabs will have an inherent size.  This size will either be defined by how much space is needed to accommodate their text or set by the user through CSS.  Calculations will be based on this size.
 *                                                                                                                     // 22022
 * On mobile devices, tabs will be expanded to fill the available horizontal space.  When this happens, all tabs will become the same size.
 *                                                                                                                     // 22024
 * On desktops, by default, stretching will never occur.                                                               // 22025
 *                                                                                                                     // 22026
 * This default behavior can be overridden through the `md-stretch-tabs` attribute.  Here is a table showing when stretching will occur:
 *                                                                                                                     // 22028
 * `md-stretch-tabs` | mobile    | desktop                                                                             // 22029
 * ------------------|-----------|--------                                                                             // 22030
 * `auto`            | stretched | ---                                                                                 // 22031
 * `always`          | stretched | stretched                                                                           // 22032
 * `never`           | ---       | ---                                                                                 // 22033
 *                                                                                                                     // 22034
 * @param {integer=} md-selected Index of the active/selected tab                                                      // 22035
 * @param {boolean=} md-no-ink If present, disables ink ripple effects.                                                // 22036
 * @param {boolean=} md-no-bar If present, disables the selection ink bar.                                             // 22037
 * @param {string=}  md-align-tabs Attribute to indicate position of tab buttons: `bottom` or `top`; default is `top`  // 22038
 * @param {string=} md-stretch-tabs Attribute to indicate whether or not to stretch tabs: `auto`, `always`, or `never`; default is `auto`
 * @param {boolean=} md-dynamic-height When enabled, the tab wrapper will resize based on the contents of the selected tab
 * @param {boolean=} md-center-tabs When enabled, tabs will be centered provided there is no need for pagination       // 22041
 * @param {boolean=} md-no-pagination When enabled, pagination will remain off                                         // 22042
 * @param {boolean=} md-swipe-content When enabled, swipe gestures will be enabled for the content area to jump between tabs
 * @param {boolean=} md-no-disconnect If your tab content has background tasks (ie. event listeners), you will want to include this to prevent the scope from being disconnected
 * @param {boolean=} md-autoselect When present, any tabs added after the initial load will be automatically selected  // 22045
 *                                                                                                                     // 22046
 * @usage                                                                                                              // 22047
 * <hljs lang="html">                                                                                                  // 22048
 * <md-tabs md-selected="selectedIndex" >                                                                              // 22049
 *   <img ng-src="img/angular.png" class="centered">                                                                   // 22050
 *   <md-tab                                                                                                           // 22051
 *       ng-repeat="tab in tabs | orderBy:predicate:reversed"                                                          // 22052
 *       md-on-select="onTabSelected(tab)"                                                                             // 22053
 *       md-on-deselect="announceDeselected(tab)"                                                                      // 22054
 *       ng-disabled="tab.disabled">                                                                                   // 22055
 *     <md-tab-label>                                                                                                  // 22056
 *       {{tab.title}}                                                                                                 // 22057
 *       <img src="img/removeTab.png" ng-click="removeTab(tab)" class="delete">                                        // 22058
 *     </md-tab-label>                                                                                                 // 22059
 *     <md-tab-body>                                                                                                   // 22060
 *       {{tab.content}}                                                                                               // 22061
 *     </md-tab-body>                                                                                                  // 22062
 *   </md-tab>                                                                                                         // 22063
 * </md-tabs>                                                                                                          // 22064
 * </hljs>                                                                                                             // 22065
 *                                                                                                                     // 22066
 */                                                                                                                    // 22067
angular                                                                                                                // 22068
    .module('material.components.tabs')                                                                                // 22069
    .directive('mdTabs', MdTabs);                                                                                      // 22070
                                                                                                                       // 22071
function MdTabs () {                                                                                                   // 22072
  return {                                                                                                             // 22073
    scope:            {                                                                                                // 22074
      selectedIndex: '=?mdSelected'                                                                                    // 22075
    },                                                                                                                 // 22076
    template:         function (element, attr) {                                                                       // 22077
      attr[ "$mdTabsTemplate" ] = element.html();                                                                      // 22078
      return '' +                                                                                                      // 22079
        '<md-tabs-wrapper> ' +                                                                                         // 22080
          '<md-tab-data></md-tab-data> ' +                                                                             // 22081
          '<md-prev-button ' +                                                                                         // 22082
              'tabindex="-1" ' +                                                                                       // 22083
              'role="button" ' +                                                                                       // 22084
              'aria-label="Previous Page" ' +                                                                          // 22085
              'aria-disabled="{{!$mdTabsCtrl.canPageBack()}}" ' +                                                      // 22086
              'ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageBack() }" ' +                                          // 22087
              'ng-if="$mdTabsCtrl.shouldPaginate" ' +                                                                  // 22088
              'ng-click="$mdTabsCtrl.previousPage()"> ' +                                                              // 22089
            '<md-icon md-svg-icon="md-tabs-arrow"></md-icon> ' +                                                       // 22090
          '</md-prev-button> ' +                                                                                       // 22091
          '<md-next-button ' +                                                                                         // 22092
              'tabindex="-1" ' +                                                                                       // 22093
              'role="button" ' +                                                                                       // 22094
              'aria-label="Next Page" ' +                                                                              // 22095
              'aria-disabled="{{!$mdTabsCtrl.canPageForward()}}" ' +                                                   // 22096
              'ng-class="{ \'md-disabled\': !$mdTabsCtrl.canPageForward() }" ' +                                       // 22097
              'ng-if="$mdTabsCtrl.shouldPaginate" ' +                                                                  // 22098
              'ng-click="$mdTabsCtrl.nextPage()"> ' +                                                                  // 22099
            '<md-icon md-svg-icon="md-tabs-arrow"></md-icon> ' +                                                       // 22100
          '</md-next-button> ' +                                                                                       // 22101
          '<md-tabs-canvas ' +                                                                                         // 22102
              'tabindex="0" ' +                                                                                        // 22103
              'aria-activedescendant="tab-item-{{$mdTabsCtrl.tabs[$mdTabsCtrl.focusIndex].id}}" ' +                    // 22104
              'ng-focus="$mdTabsCtrl.redirectFocus()" ' +                                                              // 22105
              'ng-class="{ ' +                                                                                         // 22106
                  '\'md-paginated\': $mdTabsCtrl.shouldPaginate, ' +                                                   // 22107
                  '\'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs ' +                                                // 22108
              '}" ' +                                                                                                  // 22109
              'ng-keydown="$mdTabsCtrl.keydown($event)" ' +                                                            // 22110
              'role="tablist"> ' +                                                                                     // 22111
            '<md-pagination-wrapper ' +                                                                                // 22112
                'ng-class="{ \'md-center-tabs\': $mdTabsCtrl.shouldCenterTabs }" ' +                                   // 22113
                'md-tab-scroll="$mdTabsCtrl.scroll($event)"> ' +                                                       // 22114
              '<md-tab-item ' +                                                                                        // 22115
                  'tabindex="-1" ' +                                                                                   // 22116
                  'class="md-tab" ' +                                                                                  // 22117
                  'style="max-width: {{ $mdTabsCtrl.maxTabWidth + \'px\' }}" ' +                                       // 22118
                  'ng-repeat="tab in $mdTabsCtrl.tabs" ' +                                                             // 22119
                  'role="tab" ' +                                                                                      // 22120
                  'aria-controls="tab-content-{{::tab.id}}" ' +                                                        // 22121
                  'aria-selected="{{tab.isActive()}}" ' +                                                              // 22122
                  'aria-disabled="{{tab.scope.disabled || \'false\'}}" ' +                                             // 22123
                  'ng-click="$mdTabsCtrl.select(tab.getIndex())" ' +                                                   // 22124
                  'ng-class="{ ' +                                                                                     // 22125
                      '\'md-active\':    tab.isActive(), ' +                                                           // 22126
                      '\'md-focused\':   tab.hasFocus(), ' +                                                           // 22127
                      '\'md-disabled\':  tab.scope.disabled ' +                                                        // 22128
                  '}" ' +                                                                                              // 22129
                  'ng-disabled="tab.scope.disabled" ' +                                                                // 22130
                  'md-swipe-left="$mdTabsCtrl.nextPage()" ' +                                                          // 22131
                  'md-swipe-right="$mdTabsCtrl.previousPage()" ' +                                                     // 22132
                  'md-tabs-template="::tab.label" ' +                                                                  // 22133
                  'md-scope="::tab.parent"></md-tab-item> ' +                                                          // 22134
              '<md-ink-bar></md-ink-bar> ' +                                                                           // 22135
            '</md-pagination-wrapper> ' +                                                                              // 22136
            '<div class="md-visually-hidden md-dummy-wrapper"> ' +                                                     // 22137
              '<md-dummy-tab ' +                                                                                       // 22138
                  'class="md-tab" ' +                                                                                  // 22139
                  'tabindex="-1" ' +                                                                                   // 22140
                  'id="tab-item-{{::tab.id}}" ' +                                                                      // 22141
                  'role="tab" ' +                                                                                      // 22142
                  'aria-controls="tab-content-{{::tab.id}}" ' +                                                        // 22143
                  'aria-selected="{{tab.isActive()}}" ' +                                                              // 22144
                  'aria-disabled="{{tab.scope.disabled || \'false\'}}" ' +                                             // 22145
                  'ng-focus="$mdTabsCtrl.hasFocus = true" ' +                                                          // 22146
                  'ng-blur="$mdTabsCtrl.hasFocus = false" ' +                                                          // 22147
                  'ng-repeat="tab in $mdTabsCtrl.tabs" ' +                                                             // 22148
                  'md-tabs-template="::tab.label" ' +                                                                  // 22149
                  'md-scope="::tab.parent"></md-dummy-tab> ' +                                                         // 22150
            '</div> ' +                                                                                                // 22151
          '</md-tabs-canvas> ' +                                                                                       // 22152
        '</md-tabs-wrapper> ' +                                                                                        // 22153
        '<md-tabs-content-wrapper ng-show="$mdTabsCtrl.hasContent && $mdTabsCtrl.selectedIndex >= 0"> ' +              // 22154
          '<md-tab-content ' +                                                                                         // 22155
              'id="tab-content-{{::tab.id}}" ' +                                                                       // 22156
              'role="tabpanel" ' +                                                                                     // 22157
              'aria-labelledby="tab-item-{{::tab.id}}" ' +                                                             // 22158
              'md-swipe-left="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(1)" ' +                           // 22159
              'md-swipe-right="$mdTabsCtrl.swipeContent && $mdTabsCtrl.incrementIndex(-1)" ' +                         // 22160
              'ng-if="$mdTabsCtrl.hasContent" ' +                                                                      // 22161
              'ng-repeat="(index, tab) in $mdTabsCtrl.tabs" ' +                                                        // 22162
              'ng-class="{ ' +                                                                                         // 22163
                '\'md-no-transition\': $mdTabsCtrl.lastSelectedIndex == null, ' +                                      // 22164
                '\'md-active\':        tab.isActive(), ' +                                                             // 22165
                '\'md-left\':          tab.isLeft(), ' +                                                               // 22166
                '\'md-right\':         tab.isRight(), ' +                                                              // 22167
                '\'md-no-scroll\':     $mdTabsCtrl.dynamicHeight ' +                                                   // 22168
              '}"> ' +                                                                                                 // 22169
            '<div ' +                                                                                                  // 22170
                'md-tabs-template="::tab.template" ' +                                                                 // 22171
                'md-connected-if="tab.isActive()" ' +                                                                  // 22172
                'md-scope="::tab.parent" ' +                                                                           // 22173
                'ng-if="$mdTabsCtrl.enableDisconnect || tab.shouldRender()"></div> ' +                                 // 22174
          '</md-tab-content> ' +                                                                                       // 22175
        '</md-tabs-content-wrapper>';                                                                                  // 22176
    },                                                                                                                 // 22177
    controller:       'MdTabsController',                                                                              // 22178
    controllerAs:     '$mdTabsCtrl',                                                                                   // 22179
    bindToController: true                                                                                             // 22180
  };                                                                                                                   // 22181
}                                                                                                                      // 22182
                                                                                                                       // 22183
})();                                                                                                                  // 22184
(function(){                                                                                                           // 22185
"use strict";                                                                                                          // 22186
                                                                                                                       // 22187
angular                                                                                                                // 22188
    .module('material.components.tabs')                                                                                // 22189
    .directive('mdTabsTemplate', MdTabsTemplate);                                                                      // 22190
                                                                                                                       // 22191
function MdTabsTemplate ($compile, $mdUtil) {                                                                          // 22192
  return {                                                                                                             // 22193
    restrict: 'A',                                                                                                     // 22194
    link:     link,                                                                                                    // 22195
    scope:    {                                                                                                        // 22196
      template:     '=mdTabsTemplate',                                                                                 // 22197
      connected:    '=?mdConnectedIf',                                                                                 // 22198
      compileScope: '=mdScope'                                                                                         // 22199
    },                                                                                                                 // 22200
    require:  '^?mdTabs'                                                                                               // 22201
  };                                                                                                                   // 22202
  function link (scope, element, attr, ctrl) {                                                                         // 22203
    if (!ctrl) return;                                                                                                 // 22204
    var compileScope = ctrl.enableDisconnect ? scope.compileScope.$new() : scope.compileScope;                         // 22205
    element.html(scope.template);                                                                                      // 22206
    $compile(element.contents())(compileScope);                                                                        // 22207
    element.on('DOMSubtreeModified', function () {                                                                     // 22208
      ctrl.updatePagination();                                                                                         // 22209
      ctrl.updateInkBarStyles();                                                                                       // 22210
    });                                                                                                                // 22211
    return $mdUtil.nextTick(handleScope);                                                                              // 22212
                                                                                                                       // 22213
    function handleScope () {                                                                                          // 22214
      scope.$watch('connected', function (value) { value === false ? disconnect() : reconnect(); });                   // 22215
      scope.$on('$destroy', reconnect);                                                                                // 22216
    }                                                                                                                  // 22217
                                                                                                                       // 22218
    function disconnect () {                                                                                           // 22219
      if (ctrl.enableDisconnect) $mdUtil.disconnectScope(compileScope);                                                // 22220
    }                                                                                                                  // 22221
                                                                                                                       // 22222
    function reconnect () {                                                                                            // 22223
      if (ctrl.enableDisconnect) $mdUtil.reconnectScope(compileScope);                                                 // 22224
    }                                                                                                                  // 22225
  }                                                                                                                    // 22226
}                                                                                                                      // 22227
MdTabsTemplate.$inject = ["$compile", "$mdUtil"];                                                                      // 22228
                                                                                                                       // 22229
})();                                                                                                                  // 22230
(function(){                                                                                                           // 22231
angular.module("material.core").constant("$MD_THEME_CSS", "md-autocomplete.md-THEME_NAME-theme {  background: '{{background-50}}'; }  md-autocomplete.md-THEME_NAME-theme[disabled] {    background: '{{background-100}}'; }  md-autocomplete.md-THEME_NAME-theme button md-icon path {    fill: '{{background-600}}'; }  md-autocomplete.md-THEME_NAME-theme button:after {    background: '{{background-600-0.3}}'; }.md-autocomplete-suggestions-container.md-THEME_NAME-theme {  background: '{{background-50}}'; }  .md-autocomplete-suggestions-container.md-THEME_NAME-theme li {    color: '{{background-900}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li .highlight {      color: '{{background-600}}'; }    .md-autocomplete-suggestions-container.md-THEME_NAME-theme li:hover, .md-autocomplete-suggestions-container.md-THEME_NAME-theme li.selected {      background: '{{background-200}}'; }md-backdrop {  background-color: '{{background-900-0.0}}'; }  md-backdrop.md-opaque.md-THEME_NAME-theme {    background-color: '{{background-900-1.0}}'; }md-bottom-sheet.md-THEME_NAME-theme {  background-color: '{{background-50}}';  border-top-color: '{{background-300}}'; }  md-bottom-sheet.md-THEME_NAME-theme.md-list md-list-item {    color: '{{foreground-1}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    background-color: '{{background-50}}'; }  md-bottom-sheet.md-THEME_NAME-theme .md-subheader {    color: '{{foreground-1}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]):hover, .md-button.md-THEME_NAME-theme:not([disabled]):hover {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme:not([disabled]).md-focused {  background-color: '{{background-500-0.2}}'; }a.md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover, .md-button.md-THEME_NAME-theme:not([disabled]).md-icon-button:hover {  background-color: transparent; }a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab md-icon, .md-button.md-THEME_NAME-theme.md-fab md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-primary, .md-button.md-THEME_NAME-theme.md-primary {  color: '{{primary-color}}'; }  a.md-button.md-THEME_NAME-theme.md-primary.md-raised, a.md-button.md-THEME_NAME-theme.md-primary.md-fab, .md-button.md-THEME_NAME-theme.md-primary.md-raised, .md-button.md-THEME_NAME-theme.md-primary.md-fab {    color: '{{primary-contrast}}';    background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]) md-icon {      color: '{{primary-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]):hover {      background-color: '{{primary-color}}'; }    a.md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-primary.md-fab:not([disabled]).md-focused {      background-color: '{{primary-600}}'; }  a.md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-primary:not([disabled]) md-icon {    color: '{{primary-color}}'; }a.md-button.md-THEME_NAME-theme.md-fab, .md-button.md-THEME_NAME-theme.md-fab {  background-color: '{{accent-color}}';  color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]) .md-icon {    color: '{{accent-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]):hover {    background-color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-fab:not([disabled]).md-focused {    background-color: '{{accent-A700}}'; }a.md-button.md-THEME_NAME-theme.md-raised, .md-button.md-THEME_NAME-theme.md-raised {  color: '{{background-contrast}}';  background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]) .md-icon {    color: '{{background-contrast}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]):hover {    background-color: '{{background-50}}'; }  a.md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-raised:not([disabled]).md-focused {    background-color: '{{background-200}}'; }a.md-button.md-THEME_NAME-theme.md-warn, .md-button.md-THEME_NAME-theme.md-warn {  color: '{{warn-color}}'; }  a.md-button.md-THEME_NAME-theme.md-warn.md-raised, a.md-button.md-THEME_NAME-theme.md-warn.md-fab, .md-button.md-THEME_NAME-theme.md-warn.md-raised, .md-button.md-THEME_NAME-theme.md-warn.md-fab {    color: '{{warn-contrast}}';    background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]) md-icon {      color: '{{warn-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]):hover {      background-color: '{{warn-color}}'; }    a.md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-warn.md-fab:not([disabled]).md-focused {      background-color: '{{warn-700}}'; }  a.md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-warn:not([disabled]) md-icon {    color: '{{warn-color}}'; }a.md-button.md-THEME_NAME-theme.md-accent, .md-button.md-THEME_NAME-theme.md-accent {  color: '{{accent-color}}'; }  a.md-button.md-THEME_NAME-theme.md-accent.md-raised, a.md-button.md-THEME_NAME-theme.md-accent.md-fab, .md-button.md-THEME_NAME-theme.md-accent.md-raised, .md-button.md-THEME_NAME-theme.md-accent.md-fab {    color: '{{accent-contrast}}';    background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]) md-icon {      color: '{{accent-contrast}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]):hover, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]):hover {      background-color: '{{accent-color}}'; }    a.md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, a.md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-raised:not([disabled]).md-focused, .md-button.md-THEME_NAME-theme.md-accent.md-fab:not([disabled]).md-focused {      background-color: '{{accent-700}}'; }  a.md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon, .md-button.md-THEME_NAME-theme.md-accent:not([disabled]) md-icon {    color: '{{accent-color}}'; }a.md-button.md-THEME_NAME-theme[disabled], a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], a.md-button.md-THEME_NAME-theme.md-accent[disabled], a.md-button.md-THEME_NAME-theme.md-warn[disabled], .md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-accent[disabled], .md-button.md-THEME_NAME-theme.md-warn[disabled] {  color: '{{foreground-3}}';  cursor: not-allowed; }  a.md-button.md-THEME_NAME-theme[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, a.md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon, .md-button.md-THEME_NAME-theme[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-raised[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-fab[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-accent[disabled] md-icon, .md-button.md-THEME_NAME-theme.md-warn[disabled] md-icon {    color: '{{foreground-3}}'; }a.md-button.md-THEME_NAME-theme.md-raised[disabled], a.md-button.md-THEME_NAME-theme.md-fab[disabled], .md-button.md-THEME_NAME-theme.md-raised[disabled], .md-button.md-THEME_NAME-theme.md-fab[disabled] {  background-color: '{{foreground-4}}'; }a.md-button.md-THEME_NAME-theme[disabled], .md-button.md-THEME_NAME-theme[disabled] {  background-color: transparent; }md-card.md-THEME_NAME-theme {  background-color: '{{background-color}}';  border-radius: 2px; }  md-card.md-THEME_NAME-theme .md-card-image {    border-radius: 2px 2px 0 0; }md-checkbox.md-THEME_NAME-theme .md-ripple {  color: '{{accent-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme.md-checked.md-focused .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon {  background-color: '{{accent-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-ripple {  color: '{{primary-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ripple {  color: '{{background-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon {  background-color: '{{primary-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked.md-focused .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-ripple {  color: '{{warn-600}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn .md-icon {  border-color: '{{foreground-2}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon {  background-color: '{{warn-color-0.87}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked.md-focused:not([disabled]) .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-checkbox.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-icon:after {  border-color: '{{background-200}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-icon {  border-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled].md-checked .md-icon {  background-color: '{{foreground-3}}'; }md-checkbox.md-THEME_NAME-theme[disabled] .md-label {  color: '{{foreground-3}}'; }md-chips.md-THEME_NAME-theme .md-chips {  box-shadow: 0 1px '{{background-300}}'; }  md-chips.md-THEME_NAME-theme .md-chips.md-focused {    box-shadow: 0 2px '{{primary-color}}'; }md-chips.md-THEME_NAME-theme .md-chip {  background: '{{background-300}}';  color: '{{background-800}}'; }  md-chips.md-THEME_NAME-theme .md-chip.md-focused {    background: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-chips.md-THEME_NAME-theme .md-chip.md-focused md-icon {      color: '{{primary-contrast}}'; }md-chips.md-THEME_NAME-theme md-chip-remove .md-button md-icon path {  fill: '{{background-500}}'; }.md-contact-suggestion span.md-contact-email {  color: '{{background-400}}'; }md-content.md-THEME_NAME-theme {  color: '{{foreground-1}}';  background-color: '{{background-color}}'; }/** Theme styles for mdCalendar. */.md-calendar.md-THEME_NAME-theme {  color: '{{foreground-1}}'; }  .md-calendar.md-THEME_NAME-theme tr:last-child td {    border-bottom-color: '{{background-200}}'; }.md-THEME_NAME-theme .md-calendar-day-header {  background: '{{background-hue-1}}';  color: '{{foreground-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today .md-calendar-date-selection-indicator {  border: 1px solid '{{primary-500}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-date-today.md-calendar-date-disabled {  color: '{{primary-500-0.6}}'; }.md-THEME_NAME-theme .md-calendar-date.md-focus .md-calendar-date-selection-indicator {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date-selection-indicator:hover {  background: '{{background-hue-1}}'; }.md-THEME_NAME-theme .md-calendar-date.md-calendar-selected-date .md-calendar-date-selection-indicator, .md-THEME_NAME-theme .md-calendar-date.md-focus.md-calendar-selected-date .md-calendar-date-selection-indicator {  background: '{{primary-500}}';  color: '{{primary-500-contrast}}';  border-color: transparent; }.md-THEME_NAME-theme .md-calendar-date-disabled, .md-THEME_NAME-theme .md-calendar-month-label-disabled {  color: '{{foreground-3}}'; }/** Theme styles for mdDatepicker. */md-datepicker.md-THEME_NAME-theme {  background: '{{background-color}}'; }.md-THEME_NAME-theme .md-datepicker-input {  color: '{{background-contrast}}';  background: '{{background-color}}'; }  .md-THEME_NAME-theme .md-datepicker-input::-webkit-input-placeholder, .md-THEME_NAME-theme .md-datepicker-input::-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-moz-placeholder, .md-THEME_NAME-theme .md-datepicker-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-input-container {  border-bottom-color: '{{background-300}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-focused {    border-bottom-color: '{{primary-500}}'; }  .md-THEME_NAME-theme .md-datepicker-input-container.md-datepicker-invalid {    border-bottom-color: '{{warn-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar-pane {  border-color: '{{background-300}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button .md-datepicker-expand-triangle {  border-top-color: '{{foreground-3}}'; }.md-THEME_NAME-theme .md-datepicker-triangle-button:hover .md-datepicker-expand-triangle {  border-top-color: '{{foreground-2}}'; }.md-THEME_NAME-theme .md-datepicker-open .md-datepicker-calendar-icon {  fill: '{{primary-500}}'; }.md-THEME_NAME-theme .md-datepicker-calendar, .md-THEME_NAME-theme .md-datepicker-input-mask-opaque {  background: '{{background-color}}'; }md-dialog.md-THEME_NAME-theme {  border-radius: 4px;  background-color: '{{background-color}}'; }  md-dialog.md-THEME_NAME-theme.md-content-overflow .md-actions {    border-top-color: '{{foreground-4}}'; }md-divider.md-THEME_NAME-theme {  border-top-color: '{{foreground-4}}'; }md-icon.md-THEME_NAME-theme {  color: '{{foreground-2}}'; }  md-icon.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  md-icon.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  md-icon.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-input-container.md-THEME_NAME-theme .md-input {  color: '{{foreground-1}}';  border-color: '{{foreground-4}}';  text-shadow: '{{foreground-shadow}}'; }  md-input-container.md-THEME_NAME-theme .md-input::-webkit-input-placeholder, md-input-container.md-THEME_NAME-theme .md-input::-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-moz-placeholder, md-input-container.md-THEME_NAME-theme .md-input:-ms-input-placeholder {    color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme > md-icon {  color: '{{foreground-1}}'; }md-input-container.md-THEME_NAME-theme label, md-input-container.md-THEME_NAME-theme .md-placeholder {  text-shadow: '{{foreground-shadow}}';  color: '{{foreground-3}}'; }md-input-container.md-THEME_NAME-theme ng-messages :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-messages] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme data-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme x-ng-message :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [data-ng-message-exp] :not(.md-char-counter), md-input-container.md-THEME_NAME-theme [x-ng-message-exp] :not(.md-char-counter) {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-has-value label {  color: '{{foreground-2}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused .md-input {  border-color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused label {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused md-icon {  color: '{{primary-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent .md-input {  border-color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-accent label {  color: '{{accent-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme:not(.md-input-invalid).md-input-focused.md-warn label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid .md-input {  border-color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid.md-input-focused label {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme.md-input-invalid ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid data-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid x-ng-message, md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message], md-input-container.md-THEME_NAME-theme.md-input-invalid [ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [data-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid [x-ng-message-exp], md-input-container.md-THEME_NAME-theme.md-input-invalid .md-char-counter {  color: '{{warn-500}}'; }md-input-container.md-THEME_NAME-theme .md-input[disabled], [disabled] md-input-container.md-THEME_NAME-theme .md-input {  border-bottom-color: transparent;  color: '{{foreground-3}}';  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-menu-content.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }  md-menu-content.md-THEME_NAME-theme md-menu-divider {    background-color: '{{foreground-4}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text h4, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h3, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text h4 {  color: '{{foreground-1}}'; }md-list.md-THEME_NAME-theme md-list-item.md-2-line .md-list-item-text p, md-list.md-THEME_NAME-theme md-list-item.md-3-line .md-list-item-text p {  color: '{{foreground-2}}'; }md-list.md-THEME_NAME-theme .md-proxy-focus.md-focused div.md-no-style {  background-color: '{{background-100}}'; }md-list.md-THEME_NAME-theme md-list-item > md-icon {  color: '{{foreground-2}}'; }  md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight {    color: '{{primary-color}}'; }    md-list.md-THEME_NAME-theme md-list-item > md-icon.md-highlight.md-accent {      color: '{{accent-color}}'; }md-list.md-THEME_NAME-theme md-list-item button {  background-color: '{{background-color}}'; }  md-list.md-THEME_NAME-theme md-list-item button.md-button:not([disabled]):hover {    background-color: '{{background-color}}'; }md-menu-bar.md-THEME_NAME-theme > button.md-button {  color: '{{foreground-2}}';  border-radius: 2px; }md-menu-bar.md-THEME_NAME-theme md-menu.md-open > button, md-menu-bar.md-THEME_NAME-theme md-menu > button:focus {  outline: none;  background: '{{background-200}}'; }md-menu-bar.md-THEME_NAME-theme.md-open:not(.md-keyboard-mode) md-menu:hover > button {  background-color: '{{ background-500-0.2}}'; }md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:hover, md-menu-bar.md-THEME_NAME-theme:not(.md-keyboard-mode):not(.md-open) md-menu button:focus {  background: transparent; }md-menu-content.md-THEME_NAME-theme .md-menu > .md-button:after {  color: '{{foreground-2}}'; }md-menu-content.md-THEME_NAME-theme .md-menu.md-open > .md-button {  background-color: '{{ background-500-0.2}}'; }md-toolbar.md-THEME_NAME-theme.md-menu-toolbar {  background-color: '{{background-color}}';  color: '{{foreground-1}}'; }  md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler {    background-color: '{{primary-color}}';    color: '{{primary-contrast}}'; }    md-toolbar.md-THEME_NAME-theme.md-menu-toolbar md-toolbar-filler md-icon {      color: '{{primary-contrast}}'; }md-progress-circular.md-THEME_NAME-theme {  background-color: transparent; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-gap {    border-top-color: '{{primary-color}}';    border-bottom-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-top-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-right .md-half-circle {    border-right-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme .md-inner .md-left .md-half-circle {    border-left-color: '{{primary-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-gap {    border-top-color: '{{warn-color}}';    border-bottom-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-top-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-right .md-half-circle {    border-right-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-warn .md-inner .md-left .md-half-circle {    border-left-color: '{{warn-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-gap {    border-top-color: '{{accent-color}}';    border-bottom-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle, md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-top-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-right .md-half-circle {    border-right-color: '{{accent-color}}'; }  md-progress-circular.md-THEME_NAME-theme.md-accent .md-inner .md-left .md-half-circle {    border-left-color: '{{accent-color}}'; }md-radio-button.md-THEME_NAME-theme .md-off {  border-color: '{{foreground-2}}'; }md-radio-button.md-THEME_NAME-theme .md-on {  background-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-off {  border-color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme.md-checked .md-ink-ripple {  color: '{{accent-color-0.87}}'; }md-radio-button.md-THEME_NAME-theme .md-container .md-ripple {  color: '{{accent-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-on {  background-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-off {  border-color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary.md-checked .md-ink-ripple {  color: '{{primary-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-primary .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-primary .md-container .md-ripple {  color: '{{primary-600}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-on, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-on {  background-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-off, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-off {  border-color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn.md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-checked .md-ink-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn.md-checked .md-ink-ripple {  color: '{{warn-color-0.87}}'; }md-radio-group.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-group.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]) .md-warn .md-container .md-ripple, md-radio-button.md-THEME_NAME-theme:not([disabled]).md-warn .md-container .md-ripple {  color: '{{warn-600}}'; }md-radio-group.md-THEME_NAME-theme[disabled], md-radio-button.md-THEME_NAME-theme[disabled] {  color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-off, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-off {    border-color: '{{foreground-3}}'; }  md-radio-group.md-THEME_NAME-theme[disabled] .md-container .md-on, md-radio-button.md-THEME_NAME-theme[disabled] .md-container .md-on {    border-color: '{{foreground-3}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked .md-container:before {  background-color: '{{accent-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked:not([disabled]).md-primary .md-container:before {  background-color: '{{primary-color-0.26}}'; }md-radio-group.md-THEME_NAME-theme.md-focused:not(:empty) .md-checked.md-primary .md-container:before {  background-color: '{{warn-color-0.26}}'; }md-progress-linear.md-THEME_NAME-theme .md-container {  background-color: '{{primary-100}}'; }md-progress-linear.md-THEME_NAME-theme .md-bar {  background-color: '{{primary-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-container {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-warn .md-bar {  background-color: '{{warn-color}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-container {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme.md-accent .md-bar {  background-color: '{{accent-color}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-bar1 {  background-color: '{{warn-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-warn .md-dashed:before {  background: radial-gradient('{{warn-100}}' 0%, '{{warn-100}}' 16%, transparent 42%); }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-bar1 {  background-color: '{{accent-100}}'; }md-progress-linear.md-THEME_NAME-theme[md-mode=buffer].md-accent .md-dashed:before {  background: radial-gradient('{{accent-100}}' 0%, '{{accent-100}}' 16%, transparent 42%); }md-sidenav.md-THEME_NAME-theme {  background-color: '{{background-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  border-bottom-color: transparent;  background-image: linear-gradient(to right, '{{foreground-3}}' 0%, '{{foreground-3}}' 33%, transparent 0%);  background-image: -ms-linear-gradient(left, transparent 0%, '{{foreground-3}}' 100%); }md-select.md-THEME_NAME-theme .md-select-value {  border-bottom-color: '{{foreground-4}}'; }  md-select.md-THEME_NAME-theme .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select.md-THEME_NAME-theme.ng-invalid.ng-dirty .md-select-value {  color: '{{warn-500}}' !important;  border-bottom-color: '{{warn-500}}' !important; }md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value {  border-bottom-color: '{{primary-color}}';  color: '{{ foreground-1 }}'; }  md-select.md-THEME_NAME-theme:not([disabled]):focus .md-select-value.md-select-placeholder {    color: '{{ foreground-1 }}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-accent .md-select-value {  border-bottom-color: '{{accent-color}}'; }md-select.md-THEME_NAME-theme:not([disabled]):focus.md-warn .md-select-value {  border-bottom-color: '{{warn-color}}'; }md-select.md-THEME_NAME-theme[disabled] .md-select-value {  color: '{{foreground-3}}'; }  md-select.md-THEME_NAME-theme[disabled] .md-select-value.md-select-placeholder {    color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-option[disabled] {  color: '{{foreground-3}}'; }md-select-menu.md-THEME_NAME-theme md-optgroup {  color: '{{foreground-2}}'; }  md-select-menu.md-THEME_NAME-theme md-optgroup md-option {    color: '{{foreground-1}}'; }md-select-menu.md-THEME_NAME-theme md-option[selected] {  color: '{{primary-500}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected]:focus {    color: '{{primary-600}}'; }  md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent {    color: '{{accent-500}}'; }    md-select-menu.md-THEME_NAME-theme md-option[selected].md-accent:focus {      color: '{{accent-600}}'; }md-select-menu.md-THEME_NAME-theme md-option:focus:not([selected]) {  background: '{{background-200}}'; }md-slider.md-THEME_NAME-theme .md-track {  background-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme .md-track-ticks {  background-color: '{{foreground-4}}'; }md-slider.md-THEME_NAME-theme .md-focus-thumb {  background-color: '{{foreground-2}}'; }md-slider.md-THEME_NAME-theme .md-focus-ring {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-disabled-thumb {  border-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme.md-min .md-thumb:after {  background-color: '{{background-color}}'; }md-slider.md-THEME_NAME-theme .md-track.md-track-fill {  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb:after {  border-color: '{{accent-color}}';  background-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-sign {  background-color: '{{accent-color}}'; }  md-slider.md-THEME_NAME-theme .md-sign:after {    border-top-color: '{{accent-color}}'; }md-slider.md-THEME_NAME-theme .md-thumb-text {  color: '{{accent-contrast}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-focus-ring {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-track.md-track-fill {  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb:after {  border-color: '{{warn-color}}';  background-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-sign {  background-color: '{{warn-color}}'; }  md-slider.md-THEME_NAME-theme.md-warn .md-sign:after {    border-top-color: '{{warn-color}}'; }md-slider.md-THEME_NAME-theme.md-warn .md-thumb-text {  color: '{{warn-contrast}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-focus-ring {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-track.md-track-fill {  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb:after {  border-color: '{{primary-color}}';  background-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-sign {  background-color: '{{primary-color}}'; }  md-slider.md-THEME_NAME-theme.md-primary .md-sign:after {    border-top-color: '{{primary-color}}'; }md-slider.md-THEME_NAME-theme.md-primary .md-thumb-text {  color: '{{primary-contrast}}'; }md-slider.md-THEME_NAME-theme[disabled] .md-thumb:after {  border-color: '{{foreground-3}}'; }md-slider.md-THEME_NAME-theme[disabled]:not(.md-min) .md-thumb:after {  background-color: '{{foreground-3}}'; }.md-subheader.md-THEME_NAME-theme {  color: '{{ foreground-2-0.23 }}';  background-color: '{{background-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-primary {    color: '{{primary-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-accent {    color: '{{accent-color}}'; }  .md-subheader.md-THEME_NAME-theme.md-warn {    color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme .md-thumb {  background-color: '{{background-50}}'; }md-switch.md-THEME_NAME-theme .md-bar {  background-color: '{{background-500}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-thumb {  background-color: '{{accent-color}}'; }md-switch.md-THEME_NAME-theme.md-checked .md-bar {  background-color: '{{accent-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-focused .md-thumb:before {  background-color: '{{accent-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-thumb {  background-color: '{{primary-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary .md-bar {  background-color: '{{primary-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-primary.md-focused .md-thumb:before {  background-color: '{{primary-color-0.26}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-thumb {  background-color: '{{warn-color}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn .md-bar {  background-color: '{{warn-color-0.5}}'; }md-switch.md-THEME_NAME-theme.md-checked.md-warn.md-focused .md-thumb:before {  background-color: '{{warn-color-0.26}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-thumb {  background-color: '{{background-400}}'; }md-switch.md-THEME_NAME-theme[disabled] .md-bar {  background-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme md-tabs-wrapper {  background-color: transparent;  border-color: '{{foreground-4}}'; }md-tabs.md-THEME_NAME-theme .md-paginator md-icon {  color: '{{primary-color}}'; }md-tabs.md-THEME_NAME-theme md-ink-bar {  color: '{{accent-color}}';  background: '{{accent-color}}'; }md-tabs.md-THEME_NAME-theme .md-tab {  color: '{{foreground-2}}'; }  md-tabs.md-THEME_NAME-theme .md-tab[disabled] {    color: '{{foreground-3}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-active, md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme .md-tab.md-focused {    background: '{{primary-color-0.1}}'; }  md-tabs.md-THEME_NAME-theme .md-tab .md-ripple-container {    color: '{{accent-100}}'; }md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-tabs.md-THEME_NAME-theme.md-accent > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-primary > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-tabs.md-THEME_NAME-theme.md-warn > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{primary-color}}'; }  md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{primary-100}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{primary-contrast}}'; }    md-toolbar > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{primary-contrast-0.1}}'; }md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{accent-color}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{accent-100}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{accent-contrast}}'; }    md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{accent-contrast-0.1}}'; }  md-toolbar.md-accent > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-ink-bar {    color: '{{primary-600-1}}';    background: '{{primary-600-1}}'; }md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper {  background-color: '{{warn-color}}'; }  md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]) {    color: '{{warn-100}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-active, md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      color: '{{warn-contrast}}'; }    md-toolbar.md-warn > md-tabs.md-THEME_NAME-theme > md-tabs-wrapper > md-tabs-canvas > md-pagination-wrapper > md-tab-item:not([disabled]).md-focused {      background: '{{warn-contrast-0.1}}'; }md-toast.md-THEME_NAME-theme {  background-color: #323232;  color: '{{background-50}}'; }  md-toast.md-THEME_NAME-theme .md-button {    color: '{{background-50}}'; }    md-toast.md-THEME_NAME-theme .md-button.md-highlight {      color: '{{primary-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-accent {        color: '{{accent-A200}}'; }      md-toast.md-THEME_NAME-theme .md-button.md-highlight.md-warn {        color: '{{warn-A200}}'; }md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) {  background-color: '{{primary-color}}';  color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) md-icon {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar) .md-button {    color: '{{primary-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-accent {    background-color: '{{accent-color}}';    color: '{{accent-contrast}}'; }  md-toolbar.md-THEME_NAME-theme:not(.md-menu-toolbar).md-warn {    background-color: '{{warn-color}}';    color: '{{warn-contrast}}'; }md-tooltip.md-THEME_NAME-theme {  color: '{{background-A100}}'; }  md-tooltip.md-THEME_NAME-theme .md-background {    background-color: '{{foreground-2}}'; }"); 
})();                                                                                                                  // 22233
                                                                                                                       // 22234
                                                                                                                       // 22235
})(window, window.angular);                                                                                            // 22236
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular-material'] = {};

})();
