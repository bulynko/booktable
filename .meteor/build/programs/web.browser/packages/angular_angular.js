//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
//                                                                      //
// If you are using Chrome, open the Developer Tools and click the gear //
// icon in its lower right corner. In the General Settings panel, turn  //
// on 'Enable source maps'.                                             //
//                                                                      //
// If you are using Firefox 23, go to `about:config` and set the        //
// `devtools.debugger.source-maps-enabled` preference to true.          //
// (The preference should be on by default in Firefox 24; versions      //
// older than 23 do not support source maps.)                           //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;

(function () {

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/angular:angular/angular.js                                                                                 //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @license AngularJS v1.4.5                                                                                           // 2
 * (c) 2010-2015 Google, Inc. http://angularjs.org                                                                     // 3
 * License: MIT                                                                                                        // 4
 */                                                                                                                    // 5
(function(window, document, undefined) {'use strict';                                                                  // 6
                                                                                                                       // 7
/**                                                                                                                    // 8
 * @description                                                                                                        // 9
 *                                                                                                                     // 10
 * This object provides a utility for producing rich Error messages within                                             // 11
 * Angular. It can be called as follows:                                                                               // 12
 *                                                                                                                     // 13
 * var exampleMinErr = minErr('example');                                                                              // 14
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);                                                            // 15
 *                                                                                                                     // 16
 * The above creates an instance of minErr in the example namespace. The                                               // 17
 * resulting error will have a namespaced error code of example.one.  The                                              // 18
 * resulting error will replace {0} with the value of foo, and {1} with the                                            // 19
 * value of bar. The object is not restricted in the number of arguments it can                                        // 20
 * take.                                                                                                               // 21
 *                                                                                                                     // 22
 * If fewer arguments are specified than necessary for interpolation, the extra                                        // 23
 * interpolation markers will be preserved in the final string.                                                        // 24
 *                                                                                                                     // 25
 * Since data will be parsed statically during a build step, some restrictions                                         // 26
 * are applied with respect to how minErr instances are created and called.                                            // 27
 * Instances should have names of the form namespaceMinErr for a minErr created                                        // 28
 * using minErr('namespace') . Error codes, namespaces and template strings                                            // 29
 * should all be static strings, not variables or general expressions.                                                 // 30
 *                                                                                                                     // 31
 * @param {string} module The namespace to use for the new minErr instance.                                            // 32
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning                       // 33
 *   error from returned function, for cases when a particular type of error is useful.                                // 34
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance                           // 35
 */                                                                                                                    // 36
                                                                                                                       // 37
function minErr(module, ErrorConstructor) {                                                                            // 38
  ErrorConstructor = ErrorConstructor || Error;                                                                        // 39
  return function() {                                                                                                  // 40
    var SKIP_INDEXES = 2;                                                                                              // 41
                                                                                                                       // 42
    var templateArgs = arguments,                                                                                      // 43
      code = templateArgs[0],                                                                                          // 44
      message = '[' + (module ? module + ':' : '') + code + '] ',                                                      // 45
      template = templateArgs[1],                                                                                      // 46
      paramPrefix, i;                                                                                                  // 47
                                                                                                                       // 48
    message += template.replace(/\{\d+\}/g, function(match) {                                                          // 49
      var index = +match.slice(1, -1),                                                                                 // 50
        shiftedIndex = index + SKIP_INDEXES;                                                                           // 51
                                                                                                                       // 52
      if (shiftedIndex < templateArgs.length) {                                                                        // 53
        return toDebugString(templateArgs[shiftedIndex]);                                                              // 54
      }                                                                                                                // 55
                                                                                                                       // 56
      return match;                                                                                                    // 57
    });                                                                                                                // 58
                                                                                                                       // 59
    message += '\nhttp://errors.angularjs.org/1.4.5/' +                                                                // 60
      (module ? module + '/' : '') + code;                                                                             // 61
                                                                                                                       // 62
    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {                       // 63
      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +                                                        // 64
        encodeURIComponent(toDebugString(templateArgs[i]));                                                            // 65
    }                                                                                                                  // 66
                                                                                                                       // 67
    return new ErrorConstructor(message);                                                                              // 68
  };                                                                                                                   // 69
}                                                                                                                      // 70
                                                                                                                       // 71
/* We need to tell jshint what variables are being exported */                                                         // 72
/* global angular: true,                                                                                               // 73
  msie: true,                                                                                                          // 74
  jqLite: true,                                                                                                        // 75
  jQuery: true,                                                                                                        // 76
  slice: true,                                                                                                         // 77
  splice: true,                                                                                                        // 78
  push: true,                                                                                                          // 79
  toString: true,                                                                                                      // 80
  ngMinErr: true,                                                                                                      // 81
  angularModule: true,                                                                                                 // 82
  uid: true,                                                                                                           // 83
  REGEX_STRING_REGEXP: true,                                                                                           // 84
  VALIDITY_STATE_PROPERTY: true,                                                                                       // 85
                                                                                                                       // 86
  lowercase: true,                                                                                                     // 87
  uppercase: true,                                                                                                     // 88
  manualLowercase: true,                                                                                               // 89
  manualUppercase: true,                                                                                               // 90
  nodeName_: true,                                                                                                     // 91
  isArrayLike: true,                                                                                                   // 92
  forEach: true,                                                                                                       // 93
  forEachSorted: true,                                                                                                 // 94
  reverseParams: true,                                                                                                 // 95
  nextUid: true,                                                                                                       // 96
  setHashKey: true,                                                                                                    // 97
  extend: true,                                                                                                        // 98
  toInt: true,                                                                                                         // 99
  inherit: true,                                                                                                       // 100
  merge: true,                                                                                                         // 101
  noop: true,                                                                                                          // 102
  identity: true,                                                                                                      // 103
  valueFn: true,                                                                                                       // 104
  isUndefined: true,                                                                                                   // 105
  isDefined: true,                                                                                                     // 106
  isObject: true,                                                                                                      // 107
  isBlankObject: true,                                                                                                 // 108
  isString: true,                                                                                                      // 109
  isNumber: true,                                                                                                      // 110
  isDate: true,                                                                                                        // 111
  isArray: true,                                                                                                       // 112
  isFunction: true,                                                                                                    // 113
  isRegExp: true,                                                                                                      // 114
  isWindow: true,                                                                                                      // 115
  isScope: true,                                                                                                       // 116
  isFile: true,                                                                                                        // 117
  isFormData: true,                                                                                                    // 118
  isBlob: true,                                                                                                        // 119
  isBoolean: true,                                                                                                     // 120
  isPromiseLike: true,                                                                                                 // 121
  trim: true,                                                                                                          // 122
  escapeForRegexp: true,                                                                                               // 123
  isElement: true,                                                                                                     // 124
  makeMap: true,                                                                                                       // 125
  includes: true,                                                                                                      // 126
  arrayRemove: true,                                                                                                   // 127
  copy: true,                                                                                                          // 128
  shallowCopy: true,                                                                                                   // 129
  equals: true,                                                                                                        // 130
  csp: true,                                                                                                           // 131
  jq: true,                                                                                                            // 132
  concat: true,                                                                                                        // 133
  sliceArgs: true,                                                                                                     // 134
  bind: true,                                                                                                          // 135
  toJsonReplacer: true,                                                                                                // 136
  toJson: true,                                                                                                        // 137
  fromJson: true,                                                                                                      // 138
  convertTimezoneToLocal: true,                                                                                        // 139
  timezoneToOffset: true,                                                                                              // 140
  startingTag: true,                                                                                                   // 141
  tryDecodeURIComponent: true,                                                                                         // 142
  parseKeyValue: true,                                                                                                 // 143
  toKeyValue: true,                                                                                                    // 144
  encodeUriSegment: true,                                                                                              // 145
  encodeUriQuery: true,                                                                                                // 146
  angularInit: true,                                                                                                   // 147
  bootstrap: true,                                                                                                     // 148
  getTestability: true,                                                                                                // 149
  snake_case: true,                                                                                                    // 150
  bindJQuery: true,                                                                                                    // 151
  assertArg: true,                                                                                                     // 152
  assertArgFn: true,                                                                                                   // 153
  assertNotHasOwnProperty: true,                                                                                       // 154
  getter: true,                                                                                                        // 155
  getBlockNodes: true,                                                                                                 // 156
  hasOwnProperty: true,                                                                                                // 157
  createMap: true,                                                                                                     // 158
                                                                                                                       // 159
  NODE_TYPE_ELEMENT: true,                                                                                             // 160
  NODE_TYPE_ATTRIBUTE: true,                                                                                           // 161
  NODE_TYPE_TEXT: true,                                                                                                // 162
  NODE_TYPE_COMMENT: true,                                                                                             // 163
  NODE_TYPE_DOCUMENT: true,                                                                                            // 164
  NODE_TYPE_DOCUMENT_FRAGMENT: true,                                                                                   // 165
*/                                                                                                                     // 166
                                                                                                                       // 167
////////////////////////////////////                                                                                   // 168
                                                                                                                       // 169
/**                                                                                                                    // 170
 * @ngdoc module                                                                                                       // 171
 * @name ng                                                                                                            // 172
 * @module ng                                                                                                          // 173
 * @description                                                                                                        // 174
 *                                                                                                                     // 175
 * # ng (core module)                                                                                                  // 176
 * The ng module is loaded by default when an AngularJS application is started. The module itself                      // 177
 * contains the essential components for an AngularJS application to function. The table below                         // 178
 * lists a high level breakdown of each of the services/factories, filters, directives and testing                     // 179
 * components available within this core module.                                                                       // 180
 *                                                                                                                     // 181
 * <div doc-module-components="ng"></div>                                                                              // 182
 */                                                                                                                    // 183
                                                                                                                       // 184
var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;                                                                        // 185
                                                                                                                       // 186
// The name of a form control's ValidityState property.                                                                // 187
// This is used so that it's possible for internal tests to create mock ValidityStates.                                // 188
var VALIDITY_STATE_PROPERTY = 'validity';                                                                              // 189
                                                                                                                       // 190
/**                                                                                                                    // 191
 * @ngdoc function                                                                                                     // 192
 * @name angular.lowercase                                                                                             // 193
 * @module ng                                                                                                          // 194
 * @kind function                                                                                                      // 195
 *                                                                                                                     // 196
 * @description Converts the specified string to lowercase.                                                            // 197
 * @param {string} string String to be converted to lowercase.                                                         // 198
 * @returns {string} Lowercased string.                                                                                // 199
 */                                                                                                                    // 200
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};                           // 201
var hasOwnProperty = Object.prototype.hasOwnProperty;                                                                  // 202
                                                                                                                       // 203
/**                                                                                                                    // 204
 * @ngdoc function                                                                                                     // 205
 * @name angular.uppercase                                                                                             // 206
 * @module ng                                                                                                          // 207
 * @kind function                                                                                                      // 208
 *                                                                                                                     // 209
 * @description Converts the specified string to uppercase.                                                            // 210
 * @param {string} string String to be converted to uppercase.                                                         // 211
 * @returns {string} Uppercased string.                                                                                // 212
 */                                                                                                                    // 213
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};                           // 214
                                                                                                                       // 215
                                                                                                                       // 216
var manualLowercase = function(s) {                                                                                    // 217
  /* jshint bitwise: false */                                                                                          // 218
  return isString(s)                                                                                                   // 219
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})                         // 220
      : s;                                                                                                             // 221
};                                                                                                                     // 222
var manualUppercase = function(s) {                                                                                    // 223
  /* jshint bitwise: false */                                                                                          // 224
  return isString(s)                                                                                                   // 225
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})                        // 226
      : s;                                                                                                             // 227
};                                                                                                                     // 228
                                                                                                                       // 229
                                                                                                                       // 230
// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish                    // 231
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods                        // 232
// with correct but slower alternatives.                                                                               // 233
if ('i' !== 'I'.toLowerCase()) {                                                                                       // 234
  lowercase = manualLowercase;                                                                                         // 235
  uppercase = manualUppercase;                                                                                         // 236
}                                                                                                                      // 237
                                                                                                                       // 238
                                                                                                                       // 239
var                                                                                                                    // 240
    msie,             // holds major version number for IE, or NaN if UA is not IE.                                    // 241
    jqLite,           // delay binding since jQuery could be loaded after us.                                          // 242
    jQuery,           // delay binding                                                                                 // 243
    slice             = [].slice,                                                                                      // 244
    splice            = [].splice,                                                                                     // 245
    push              = [].push,                                                                                       // 246
    toString          = Object.prototype.toString,                                                                     // 247
    getPrototypeOf    = Object.getPrototypeOf,                                                                         // 248
    ngMinErr          = minErr('ng'),                                                                                  // 249
                                                                                                                       // 250
    /** @name angular */                                                                                               // 251
    angular           = window.angular || (window.angular = {}),                                                       // 252
    angularModule,                                                                                                     // 253
    uid               = 0;                                                                                             // 254
                                                                                                                       // 255
/**                                                                                                                    // 256
 * documentMode is an IE-only property                                                                                 // 257
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx                                                   // 258
 */                                                                                                                    // 259
msie = document.documentMode;                                                                                          // 260
                                                                                                                       // 261
                                                                                                                       // 262
/**                                                                                                                    // 263
 * @private                                                                                                            // 264
 * @param {*} obj                                                                                                      // 265
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,                      // 266
 *                   String ...)                                                                                       // 267
 */                                                                                                                    // 268
function isArrayLike(obj) {                                                                                            // 269
  if (obj == null || isWindow(obj)) {                                                                                  // 270
    return false;                                                                                                      // 271
  }                                                                                                                    // 272
                                                                                                                       // 273
  // Support: iOS 8.2 (not reproducible in simulator)                                                                  // 274
  // "length" in obj used to prevent JIT error (gh-11508)                                                              // 275
  var length = "length" in Object(obj) && obj.length;                                                                  // 276
                                                                                                                       // 277
  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {                                                                  // 278
    return true;                                                                                                       // 279
  }                                                                                                                    // 280
                                                                                                                       // 281
  return isString(obj) || isArray(obj) || length === 0 ||                                                              // 282
         typeof length === 'number' && length > 0 && (length - 1) in obj;                                              // 283
}                                                                                                                      // 284
                                                                                                                       // 285
/**                                                                                                                    // 286
 * @ngdoc function                                                                                                     // 287
 * @name angular.forEach                                                                                               // 288
 * @module ng                                                                                                          // 289
 * @kind function                                                                                                      // 290
 *                                                                                                                     // 291
 * @description                                                                                                        // 292
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an                      // 293
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`              // 294
 * is the value of an object property or an array element, `key` is the object property key or                         // 295
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.               // 296
 *                                                                                                                     // 297
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters                    // 298
 * using the `hasOwnProperty` method.                                                                                  // 299
 *                                                                                                                     // 300
 * Unlike ES262's                                                                                                      // 301
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),                           // 302
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just                        // 303
 * return the value provided.                                                                                          // 304
 *                                                                                                                     // 305
   ```js                                                                                                               // 306
     var values = {name: 'misko', gender: 'male'};                                                                     // 307
     var log = [];                                                                                                     // 308
     angular.forEach(values, function(value, key) {                                                                    // 309
       this.push(key + ': ' + value);                                                                                  // 310
     }, log);                                                                                                          // 311
     expect(log).toEqual(['name: misko', 'gender: male']);                                                             // 312
   ```                                                                                                                 // 313
 *                                                                                                                     // 314
 * @param {Object|Array} obj Object to iterate over.                                                                   // 315
 * @param {Function} iterator Iterator function.                                                                       // 316
 * @param {Object=} context Object to become context (`this`) for the iterator function.                               // 317
 * @returns {Object|Array} Reference to `obj`.                                                                         // 318
 */                                                                                                                    // 319
                                                                                                                       // 320
function forEach(obj, iterator, context) {                                                                             // 321
  var key, length;                                                                                                     // 322
  if (obj) {                                                                                                           // 323
    if (isFunction(obj)) {                                                                                             // 324
      for (key in obj) {                                                                                               // 325
        // Need to check if hasOwnProperty exists,                                                                     // 326
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function                     // 327
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);                                                                  // 329
        }                                                                                                              // 330
      }                                                                                                                // 331
    } else if (isArray(obj) || isArrayLike(obj)) {                                                                     // 332
      var isPrimitive = typeof obj !== 'object';                                                                       // 333
      for (key = 0, length = obj.length; key < length; key++) {                                                        // 334
        if (isPrimitive || key in obj) {                                                                               // 335
          iterator.call(context, obj[key], key, obj);                                                                  // 336
        }                                                                                                              // 337
      }                                                                                                                // 338
    } else if (obj.forEach && obj.forEach !== forEach) {                                                               // 339
        obj.forEach(iterator, context, obj);                                                                           // 340
    } else if (isBlankObject(obj)) {                                                                                   // 341
      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty                 // 342
      for (key in obj) {                                                                                               // 343
        iterator.call(context, obj[key], key, obj);                                                                    // 344
      }                                                                                                                // 345
    } else if (typeof obj.hasOwnProperty === 'function') {                                                             // 346
      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed                                // 347
      for (key in obj) {                                                                                               // 348
        if (obj.hasOwnProperty(key)) {                                                                                 // 349
          iterator.call(context, obj[key], key, obj);                                                                  // 350
        }                                                                                                              // 351
      }                                                                                                                // 352
    } else {                                                                                                           // 353
      // Slow path for objects which do not have a method `hasOwnProperty`                                             // 354
      for (key in obj) {                                                                                               // 355
        if (hasOwnProperty.call(obj, key)) {                                                                           // 356
          iterator.call(context, obj[key], key, obj);                                                                  // 357
        }                                                                                                              // 358
      }                                                                                                                // 359
    }                                                                                                                  // 360
  }                                                                                                                    // 361
  return obj;                                                                                                          // 362
}                                                                                                                      // 363
                                                                                                                       // 364
function forEachSorted(obj, iterator, context) {                                                                       // 365
  var keys = Object.keys(obj).sort();                                                                                  // 366
  for (var i = 0; i < keys.length; i++) {                                                                              // 367
    iterator.call(context, obj[keys[i]], keys[i]);                                                                     // 368
  }                                                                                                                    // 369
  return keys;                                                                                                         // 370
}                                                                                                                      // 371
                                                                                                                       // 372
                                                                                                                       // 373
/**                                                                                                                    // 374
 * when using forEach the params are value, key, but it is often useful to have key, value.                            // 375
 * @param {function(string, *)} iteratorFn                                                                             // 376
 * @returns {function(*, string)}                                                                                      // 377
 */                                                                                                                    // 378
function reverseParams(iteratorFn) {                                                                                   // 379
  return function(value, key) { iteratorFn(key, value); };                                                             // 380
}                                                                                                                      // 381
                                                                                                                       // 382
/**                                                                                                                    // 383
 * A consistent way of creating unique IDs in angular.                                                                 // 384
 *                                                                                                                     // 385
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before                   // 386
 * we hit number precision issues in JavaScript.                                                                       // 387
 *                                                                                                                     // 388
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M                                                                    // 389
 *                                                                                                                     // 390
 * @returns {number} an unique alpha-numeric string                                                                    // 391
 */                                                                                                                    // 392
function nextUid() {                                                                                                   // 393
  return ++uid;                                                                                                        // 394
}                                                                                                                      // 395
                                                                                                                       // 396
                                                                                                                       // 397
/**                                                                                                                    // 398
 * Set or clear the hashkey for an object.                                                                             // 399
 * @param obj object                                                                                                   // 400
 * @param h the hashkey (!truthy to delete the hashkey)                                                                // 401
 */                                                                                                                    // 402
function setHashKey(obj, h) {                                                                                          // 403
  if (h) {                                                                                                             // 404
    obj.$$hashKey = h;                                                                                                 // 405
  } else {                                                                                                             // 406
    delete obj.$$hashKey;                                                                                              // 407
  }                                                                                                                    // 408
}                                                                                                                      // 409
                                                                                                                       // 410
                                                                                                                       // 411
function baseExtend(dst, objs, deep) {                                                                                 // 412
  var h = dst.$$hashKey;                                                                                               // 413
                                                                                                                       // 414
  for (var i = 0, ii = objs.length; i < ii; ++i) {                                                                     // 415
    var obj = objs[i];                                                                                                 // 416
    if (!isObject(obj) && !isFunction(obj)) continue;                                                                  // 417
    var keys = Object.keys(obj);                                                                                       // 418
    for (var j = 0, jj = keys.length; j < jj; j++) {                                                                   // 419
      var key = keys[j];                                                                                               // 420
      var src = obj[key];                                                                                              // 421
                                                                                                                       // 422
      if (deep && isObject(src)) {                                                                                     // 423
        if (isDate(src)) {                                                                                             // 424
          dst[key] = new Date(src.valueOf());                                                                          // 425
        } else if (isRegExp(src)) {                                                                                    // 426
          dst[key] = new RegExp(src);                                                                                  // 427
        } else {                                                                                                       // 428
          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};                                                  // 429
          baseExtend(dst[key], [src], true);                                                                           // 430
        }                                                                                                              // 431
      } else {                                                                                                         // 432
        dst[key] = src;                                                                                                // 433
      }                                                                                                                // 434
    }                                                                                                                  // 435
  }                                                                                                                    // 436
                                                                                                                       // 437
  setHashKey(dst, h);                                                                                                  // 438
  return dst;                                                                                                          // 439
}                                                                                                                      // 440
                                                                                                                       // 441
/**                                                                                                                    // 442
 * @ngdoc function                                                                                                     // 443
 * @name angular.extend                                                                                                // 444
 * @module ng                                                                                                          // 445
 * @kind function                                                                                                      // 446
 *                                                                                                                     // 447
 * @description                                                                                                        // 448
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)                  // 449
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so           // 450
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.                      // 451
 *                                                                                                                     // 452
 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use                      // 453
 * {@link angular.merge} for this.                                                                                     // 454
 *                                                                                                                     // 455
 * @param {Object} dst Destination object.                                                                             // 456
 * @param {...Object} src Source object(s).                                                                            // 457
 * @returns {Object} Reference to `dst`.                                                                               // 458
 */                                                                                                                    // 459
function extend(dst) {                                                                                                 // 460
  return baseExtend(dst, slice.call(arguments, 1), false);                                                             // 461
}                                                                                                                      // 462
                                                                                                                       // 463
                                                                                                                       // 464
/**                                                                                                                    // 465
* @ngdoc function                                                                                                      // 466
* @name angular.merge                                                                                                  // 467
* @module ng                                                                                                           // 468
* @kind function                                                                                                       // 469
*                                                                                                                      // 470
* @description                                                                                                         // 471
* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)            // 472
* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so            // 473
* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.                        // 474
*                                                                                                                      // 475
* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source              // 476
* objects, performing a deep copy.                                                                                     // 477
*                                                                                                                      // 478
* @param {Object} dst Destination object.                                                                              // 479
* @param {...Object} src Source object(s).                                                                             // 480
* @returns {Object} Reference to `dst`.                                                                                // 481
*/                                                                                                                     // 482
function merge(dst) {                                                                                                  // 483
  return baseExtend(dst, slice.call(arguments, 1), true);                                                              // 484
}                                                                                                                      // 485
                                                                                                                       // 486
                                                                                                                       // 487
                                                                                                                       // 488
function toInt(str) {                                                                                                  // 489
  return parseInt(str, 10);                                                                                            // 490
}                                                                                                                      // 491
                                                                                                                       // 492
                                                                                                                       // 493
function inherit(parent, extra) {                                                                                      // 494
  return extend(Object.create(parent), extra);                                                                         // 495
}                                                                                                                      // 496
                                                                                                                       // 497
/**                                                                                                                    // 498
 * @ngdoc function                                                                                                     // 499
 * @name angular.noop                                                                                                  // 500
 * @module ng                                                                                                          // 501
 * @kind function                                                                                                      // 502
 *                                                                                                                     // 503
 * @description                                                                                                        // 504
 * A function that performs no operations. This function can be useful when writing code in the                        // 505
 * functional style.                                                                                                   // 506
   ```js                                                                                                               // 507
     function foo(callback) {                                                                                          // 508
       var result = calculateResult();                                                                                 // 509
       (callback || angular.noop)(result);                                                                             // 510
     }                                                                                                                 // 511
   ```                                                                                                                 // 512
 */                                                                                                                    // 513
function noop() {}                                                                                                     // 514
noop.$inject = [];                                                                                                     // 515
                                                                                                                       // 516
                                                                                                                       // 517
/**                                                                                                                    // 518
 * @ngdoc function                                                                                                     // 519
 * @name angular.identity                                                                                              // 520
 * @module ng                                                                                                          // 521
 * @kind function                                                                                                      // 522
 *                                                                                                                     // 523
 * @description                                                                                                        // 524
 * A function that returns its first argument. This function is useful when writing code in the                        // 525
 * functional style.                                                                                                   // 526
 *                                                                                                                     // 527
   ```js                                                                                                               // 528
     function transformer(transformationFn, value) {                                                                   // 529
       return (transformationFn || angular.identity)(value);                                                           // 530
     };                                                                                                                // 531
   ```                                                                                                                 // 532
  * @param {*} value to be returned.                                                                                   // 533
  * @returns {*} the value passed in.                                                                                  // 534
 */                                                                                                                    // 535
function identity($) {return $;}                                                                                       // 536
identity.$inject = [];                                                                                                 // 537
                                                                                                                       // 538
                                                                                                                       // 539
function valueFn(value) {return function() {return value;};}                                                           // 540
                                                                                                                       // 541
function hasCustomToString(obj) {                                                                                      // 542
  return isFunction(obj.toString) && obj.toString !== Object.prototype.toString;                                       // 543
}                                                                                                                      // 544
                                                                                                                       // 545
                                                                                                                       // 546
/**                                                                                                                    // 547
 * @ngdoc function                                                                                                     // 548
 * @name angular.isUndefined                                                                                           // 549
 * @module ng                                                                                                          // 550
 * @kind function                                                                                                      // 551
 *                                                                                                                     // 552
 * @description                                                                                                        // 553
 * Determines if a reference is undefined.                                                                             // 554
 *                                                                                                                     // 555
 * @param {*} value Reference to check.                                                                                // 556
 * @returns {boolean} True if `value` is undefined.                                                                    // 557
 */                                                                                                                    // 558
function isUndefined(value) {return typeof value === 'undefined';}                                                     // 559
                                                                                                                       // 560
                                                                                                                       // 561
/**                                                                                                                    // 562
 * @ngdoc function                                                                                                     // 563
 * @name angular.isDefined                                                                                             // 564
 * @module ng                                                                                                          // 565
 * @kind function                                                                                                      // 566
 *                                                                                                                     // 567
 * @description                                                                                                        // 568
 * Determines if a reference is defined.                                                                               // 569
 *                                                                                                                     // 570
 * @param {*} value Reference to check.                                                                                // 571
 * @returns {boolean} True if `value` is defined.                                                                      // 572
 */                                                                                                                    // 573
function isDefined(value) {return typeof value !== 'undefined';}                                                       // 574
                                                                                                                       // 575
                                                                                                                       // 576
/**                                                                                                                    // 577
 * @ngdoc function                                                                                                     // 578
 * @name angular.isObject                                                                                              // 579
 * @module ng                                                                                                          // 580
 * @kind function                                                                                                      // 581
 *                                                                                                                     // 582
 * @description                                                                                                        // 583
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not                            // 584
 * considered to be objects. Note that JavaScript arrays are objects.                                                  // 585
 *                                                                                                                     // 586
 * @param {*} value Reference to check.                                                                                // 587
 * @returns {boolean} True if `value` is an `Object` but not `null`.                                                   // 588
 */                                                                                                                    // 589
function isObject(value) {                                                                                             // 590
  // http://jsperf.com/isobject4                                                                                       // 591
  return value !== null && typeof value === 'object';                                                                  // 592
}                                                                                                                      // 593
                                                                                                                       // 594
                                                                                                                       // 595
/**                                                                                                                    // 596
 * Determine if a value is an object with a null prototype                                                             // 597
 *                                                                                                                     // 598
 * @returns {boolean} True if `value` is an `Object` with a null prototype                                             // 599
 */                                                                                                                    // 600
function isBlankObject(value) {                                                                                        // 601
  return value !== null && typeof value === 'object' && !getPrototypeOf(value);                                        // 602
}                                                                                                                      // 603
                                                                                                                       // 604
                                                                                                                       // 605
/**                                                                                                                    // 606
 * @ngdoc function                                                                                                     // 607
 * @name angular.isString                                                                                              // 608
 * @module ng                                                                                                          // 609
 * @kind function                                                                                                      // 610
 *                                                                                                                     // 611
 * @description                                                                                                        // 612
 * Determines if a reference is a `String`.                                                                            // 613
 *                                                                                                                     // 614
 * @param {*} value Reference to check.                                                                                // 615
 * @returns {boolean} True if `value` is a `String`.                                                                   // 616
 */                                                                                                                    // 617
function isString(value) {return typeof value === 'string';}                                                           // 618
                                                                                                                       // 619
                                                                                                                       // 620
/**                                                                                                                    // 621
 * @ngdoc function                                                                                                     // 622
 * @name angular.isNumber                                                                                              // 623
 * @module ng                                                                                                          // 624
 * @kind function                                                                                                      // 625
 *                                                                                                                     // 626
 * @description                                                                                                        // 627
 * Determines if a reference is a `Number`.                                                                            // 628
 *                                                                                                                     // 629
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.                                             // 630
 *                                                                                                                     // 631
 * If you wish to exclude these then you can use the native                                                            // 632
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)             // 633
 * method.                                                                                                             // 634
 *                                                                                                                     // 635
 * @param {*} value Reference to check.                                                                                // 636
 * @returns {boolean} True if `value` is a `Number`.                                                                   // 637
 */                                                                                                                    // 638
function isNumber(value) {return typeof value === 'number';}                                                           // 639
                                                                                                                       // 640
                                                                                                                       // 641
/**                                                                                                                    // 642
 * @ngdoc function                                                                                                     // 643
 * @name angular.isDate                                                                                                // 644
 * @module ng                                                                                                          // 645
 * @kind function                                                                                                      // 646
 *                                                                                                                     // 647
 * @description                                                                                                        // 648
 * Determines if a value is a date.                                                                                    // 649
 *                                                                                                                     // 650
 * @param {*} value Reference to check.                                                                                // 651
 * @returns {boolean} True if `value` is a `Date`.                                                                     // 652
 */                                                                                                                    // 653
function isDate(value) {                                                                                               // 654
  return toString.call(value) === '[object Date]';                                                                     // 655
}                                                                                                                      // 656
                                                                                                                       // 657
                                                                                                                       // 658
/**                                                                                                                    // 659
 * @ngdoc function                                                                                                     // 660
 * @name angular.isArray                                                                                               // 661
 * @module ng                                                                                                          // 662
 * @kind function                                                                                                      // 663
 *                                                                                                                     // 664
 * @description                                                                                                        // 665
 * Determines if a reference is an `Array`.                                                                            // 666
 *                                                                                                                     // 667
 * @param {*} value Reference to check.                                                                                // 668
 * @returns {boolean} True if `value` is an `Array`.                                                                   // 669
 */                                                                                                                    // 670
var isArray = Array.isArray;                                                                                           // 671
                                                                                                                       // 672
/**                                                                                                                    // 673
 * @ngdoc function                                                                                                     // 674
 * @name angular.isFunction                                                                                            // 675
 * @module ng                                                                                                          // 676
 * @kind function                                                                                                      // 677
 *                                                                                                                     // 678
 * @description                                                                                                        // 679
 * Determines if a reference is a `Function`.                                                                          // 680
 *                                                                                                                     // 681
 * @param {*} value Reference to check.                                                                                // 682
 * @returns {boolean} True if `value` is a `Function`.                                                                 // 683
 */                                                                                                                    // 684
function isFunction(value) {return typeof value === 'function';}                                                       // 685
                                                                                                                       // 686
                                                                                                                       // 687
/**                                                                                                                    // 688
 * Determines if a value is a regular expression object.                                                               // 689
 *                                                                                                                     // 690
 * @private                                                                                                            // 691
 * @param {*} value Reference to check.                                                                                // 692
 * @returns {boolean} True if `value` is a `RegExp`.                                                                   // 693
 */                                                                                                                    // 694
function isRegExp(value) {                                                                                             // 695
  return toString.call(value) === '[object RegExp]';                                                                   // 696
}                                                                                                                      // 697
                                                                                                                       // 698
                                                                                                                       // 699
/**                                                                                                                    // 700
 * Checks if `obj` is a window object.                                                                                 // 701
 *                                                                                                                     // 702
 * @private                                                                                                            // 703
 * @param {*} obj Object to check                                                                                      // 704
 * @returns {boolean} True if `obj` is a window obj.                                                                   // 705
 */                                                                                                                    // 706
function isWindow(obj) {                                                                                               // 707
  return obj && obj.window === obj;                                                                                    // 708
}                                                                                                                      // 709
                                                                                                                       // 710
                                                                                                                       // 711
function isScope(obj) {                                                                                                // 712
  return obj && obj.$evalAsync && obj.$watch;                                                                          // 713
}                                                                                                                      // 714
                                                                                                                       // 715
                                                                                                                       // 716
function isFile(obj) {                                                                                                 // 717
  return toString.call(obj) === '[object File]';                                                                       // 718
}                                                                                                                      // 719
                                                                                                                       // 720
                                                                                                                       // 721
function isFormData(obj) {                                                                                             // 722
  return toString.call(obj) === '[object FormData]';                                                                   // 723
}                                                                                                                      // 724
                                                                                                                       // 725
                                                                                                                       // 726
function isBlob(obj) {                                                                                                 // 727
  return toString.call(obj) === '[object Blob]';                                                                       // 728
}                                                                                                                      // 729
                                                                                                                       // 730
                                                                                                                       // 731
function isBoolean(value) {                                                                                            // 732
  return typeof value === 'boolean';                                                                                   // 733
}                                                                                                                      // 734
                                                                                                                       // 735
                                                                                                                       // 736
function isPromiseLike(obj) {                                                                                          // 737
  return obj && isFunction(obj.then);                                                                                  // 738
}                                                                                                                      // 739
                                                                                                                       // 740
                                                                                                                       // 741
var TYPED_ARRAY_REGEXP = /^\[object (Uint8(Clamped)?)|(Uint16)|(Uint32)|(Int8)|(Int16)|(Int32)|(Float(32)|(64))Array\]$/;
function isTypedArray(value) {                                                                                         // 743
  return TYPED_ARRAY_REGEXP.test(toString.call(value));                                                                // 744
}                                                                                                                      // 745
                                                                                                                       // 746
                                                                                                                       // 747
var trim = function(value) {                                                                                           // 748
  return isString(value) ? value.trim() : value;                                                                       // 749
};                                                                                                                     // 750
                                                                                                                       // 751
// Copied from:                                                                                                        // 752
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021             // 753
// Prereq: s is a string.                                                                                              // 754
var escapeForRegexp = function(s) {                                                                                    // 755
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').                                                           // 756
           replace(/\x08/g, '\\x08');                                                                                  // 757
};                                                                                                                     // 758
                                                                                                                       // 759
                                                                                                                       // 760
/**                                                                                                                    // 761
 * @ngdoc function                                                                                                     // 762
 * @name angular.isElement                                                                                             // 763
 * @module ng                                                                                                          // 764
 * @kind function                                                                                                      // 765
 *                                                                                                                     // 766
 * @description                                                                                                        // 767
 * Determines if a reference is a DOM element (or wrapped jQuery element).                                             // 768
 *                                                                                                                     // 769
 * @param {*} value Reference to check.                                                                                // 770
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).                                    // 771
 */                                                                                                                    // 772
function isElement(node) {                                                                                             // 773
  return !!(node &&                                                                                                    // 774
    (node.nodeName  // we are a direct element                                                                         // 775
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API                   // 776
}                                                                                                                      // 777
                                                                                                                       // 778
/**                                                                                                                    // 779
 * @param str 'key1,key2,...'                                                                                          // 780
 * @returns {object} in the form of {key1:true, key2:true, ...}                                                        // 781
 */                                                                                                                    // 782
function makeMap(str) {                                                                                                // 783
  var obj = {}, items = str.split(","), i;                                                                             // 784
  for (i = 0; i < items.length; i++) {                                                                                 // 785
    obj[items[i]] = true;                                                                                              // 786
  }                                                                                                                    // 787
  return obj;                                                                                                          // 788
}                                                                                                                      // 789
                                                                                                                       // 790
                                                                                                                       // 791
function nodeName_(element) {                                                                                          // 792
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));                                           // 793
}                                                                                                                      // 794
                                                                                                                       // 795
function includes(array, obj) {                                                                                        // 796
  return Array.prototype.indexOf.call(array, obj) != -1;                                                               // 797
}                                                                                                                      // 798
                                                                                                                       // 799
function arrayRemove(array, value) {                                                                                   // 800
  var index = array.indexOf(value);                                                                                    // 801
  if (index >= 0) {                                                                                                    // 802
    array.splice(index, 1);                                                                                            // 803
  }                                                                                                                    // 804
  return index;                                                                                                        // 805
}                                                                                                                      // 806
                                                                                                                       // 807
/**                                                                                                                    // 808
 * @ngdoc function                                                                                                     // 809
 * @name angular.copy                                                                                                  // 810
 * @module ng                                                                                                          // 811
 * @kind function                                                                                                      // 812
 *                                                                                                                     // 813
 * @description                                                                                                        // 814
 * Creates a deep copy of `source`, which should be an object or an array.                                             // 815
 *                                                                                                                     // 816
 * * If no destination is supplied, a copy of the object or array is created.                                          // 817
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)                        // 818
 *   are deleted and then all elements/properties from the source are copied to it.                                    // 819
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.                        // 820
 * * If `source` is identical to 'destination' an exception will be thrown.                                            // 821
 *                                                                                                                     // 822
 * @param {*} source The source that will be used to make a copy.                                                      // 823
 *                   Can be any type, including primitives, `null`, and `undefined`.                                   // 824
 * @param {(Object|Array)=} destination Destination into which the source is copied. If                                // 825
 *     provided, must be of the same type as `source`.                                                                 // 826
 * @returns {*} The copy or updated `destination`, if `destination` was specified.                                     // 827
 *                                                                                                                     // 828
 * @example                                                                                                            // 829
 <example module="copyExample">                                                                                        // 830
 <file name="index.html">                                                                                              // 831
 <div ng-controller="ExampleController">                                                                               // 832
 <form novalidate class="simple-form">                                                                                 // 833
 Name: <input type="text" ng-model="user.name" /><br />                                                                // 834
 E-mail: <input type="email" ng-model="user.email" /><br />                                                            // 835
 Gender: <input type="radio" ng-model="user.gender" value="male" />male                                                // 836
 <input type="radio" ng-model="user.gender" value="female" />female<br />                                              // 837
 <button ng-click="reset()">RESET</button>                                                                             // 838
 <button ng-click="update(user)">SAVE</button>                                                                         // 839
 </form>                                                                                                               // 840
 <pre>form = {{user | json}}</pre>                                                                                     // 841
 <pre>master = {{master | json}}</pre>                                                                                 // 842
 </div>                                                                                                                // 843
                                                                                                                       // 844
 <script>                                                                                                              // 845
  angular.module('copyExample', [])                                                                                    // 846
    .controller('ExampleController', ['$scope', function($scope) {                                                     // 847
      $scope.master= {};                                                                                               // 848
                                                                                                                       // 849
      $scope.update = function(user) {                                                                                 // 850
        // Example with 1 argument                                                                                     // 851
        $scope.master= angular.copy(user);                                                                             // 852
      };                                                                                                               // 853
                                                                                                                       // 854
      $scope.reset = function() {                                                                                      // 855
        // Example with 2 arguments                                                                                    // 856
        angular.copy($scope.master, $scope.user);                                                                      // 857
      };                                                                                                               // 858
                                                                                                                       // 859
      $scope.reset();                                                                                                  // 860
    }]);                                                                                                               // 861
 </script>                                                                                                             // 862
 </file>                                                                                                               // 863
 </example>                                                                                                            // 864
 */                                                                                                                    // 865
function copy(source, destination, stackSource, stackDest) {                                                           // 866
  if (isWindow(source) || isScope(source)) {                                                                           // 867
    throw ngMinErr('cpws',                                                                                             // 868
      "Can't copy! Making copies of Window or Scope instances is not supported.");                                     // 869
  }                                                                                                                    // 870
  if (isTypedArray(destination)) {                                                                                     // 871
    throw ngMinErr('cpta',                                                                                             // 872
      "Can't copy! TypedArray destination cannot be mutated.");                                                        // 873
  }                                                                                                                    // 874
                                                                                                                       // 875
  if (!destination) {                                                                                                  // 876
    destination = source;                                                                                              // 877
    if (isObject(source)) {                                                                                            // 878
      var index;                                                                                                       // 879
      if (stackSource && (index = stackSource.indexOf(source)) !== -1) {                                               // 880
        return stackDest[index];                                                                                       // 881
      }                                                                                                                // 882
                                                                                                                       // 883
      // TypedArray, Date and RegExp have specific copy functionality and must be                                      // 884
      // pushed onto the stack before returning.                                                                       // 885
      // Array and other objects create the base object and recurse to copy child                                      // 886
      // objects. The array/object will be pushed onto the stack when recursed.                                        // 887
      if (isArray(source)) {                                                                                           // 888
        return copy(source, [], stackSource, stackDest);                                                               // 889
      } else if (isTypedArray(source)) {                                                                               // 890
        destination = new source.constructor(source);                                                                  // 891
      } else if (isDate(source)) {                                                                                     // 892
        destination = new Date(source.getTime());                                                                      // 893
      } else if (isRegExp(source)) {                                                                                   // 894
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);                                // 895
        destination.lastIndex = source.lastIndex;                                                                      // 896
      } else {                                                                                                         // 897
        var emptyObject = Object.create(getPrototypeOf(source));                                                       // 898
        return copy(source, emptyObject, stackSource, stackDest);                                                      // 899
      }                                                                                                                // 900
                                                                                                                       // 901
      if (stackDest) {                                                                                                 // 902
        stackSource.push(source);                                                                                      // 903
        stackDest.push(destination);                                                                                   // 904
      }                                                                                                                // 905
    }                                                                                                                  // 906
  } else {                                                                                                             // 907
    if (source === destination) throw ngMinErr('cpi',                                                                  // 908
      "Can't copy! Source and destination are identical.");                                                            // 909
                                                                                                                       // 910
    stackSource = stackSource || [];                                                                                   // 911
    stackDest = stackDest || [];                                                                                       // 912
                                                                                                                       // 913
    if (isObject(source)) {                                                                                            // 914
      stackSource.push(source);                                                                                        // 915
      stackDest.push(destination);                                                                                     // 916
    }                                                                                                                  // 917
                                                                                                                       // 918
    var result, key;                                                                                                   // 919
    if (isArray(source)) {                                                                                             // 920
      destination.length = 0;                                                                                          // 921
      for (var i = 0; i < source.length; i++) {                                                                        // 922
        destination.push(copy(source[i], null, stackSource, stackDest));                                               // 923
      }                                                                                                                // 924
    } else {                                                                                                           // 925
      var h = destination.$$hashKey;                                                                                   // 926
      if (isArray(destination)) {                                                                                      // 927
        destination.length = 0;                                                                                        // 928
      } else {                                                                                                         // 929
        forEach(destination, function(value, key) {                                                                    // 930
          delete destination[key];                                                                                     // 931
        });                                                                                                            // 932
      }                                                                                                                // 933
      if (isBlankObject(source)) {                                                                                     // 934
        // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty               // 935
        for (key in source) {                                                                                          // 936
          destination[key] = copy(source[key], null, stackSource, stackDest);                                          // 937
        }                                                                                                              // 938
      } else if (source && typeof source.hasOwnProperty === 'function') {                                              // 939
        // Slow path, which must rely on hasOwnProperty                                                                // 940
        for (key in source) {                                                                                          // 941
          if (source.hasOwnProperty(key)) {                                                                            // 942
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 943
          }                                                                                                            // 944
        }                                                                                                              // 945
      } else {                                                                                                         // 946
        // Slowest path --- hasOwnProperty can't be called as a method                                                 // 947
        for (key in source) {                                                                                          // 948
          if (hasOwnProperty.call(source, key)) {                                                                      // 949
            destination[key] = copy(source[key], null, stackSource, stackDest);                                        // 950
          }                                                                                                            // 951
        }                                                                                                              // 952
      }                                                                                                                // 953
      setHashKey(destination,h);                                                                                       // 954
    }                                                                                                                  // 955
  }                                                                                                                    // 956
  return destination;                                                                                                  // 957
}                                                                                                                      // 958
                                                                                                                       // 959
/**                                                                                                                    // 960
 * Creates a shallow copy of an object, an array or a primitive.                                                       // 961
 *                                                                                                                     // 962
 * Assumes that there are no proto properties for objects.                                                             // 963
 */                                                                                                                    // 964
function shallowCopy(src, dst) {                                                                                       // 965
  if (isArray(src)) {                                                                                                  // 966
    dst = dst || [];                                                                                                   // 967
                                                                                                                       // 968
    for (var i = 0, ii = src.length; i < ii; i++) {                                                                    // 969
      dst[i] = src[i];                                                                                                 // 970
    }                                                                                                                  // 971
  } else if (isObject(src)) {                                                                                          // 972
    dst = dst || {};                                                                                                   // 973
                                                                                                                       // 974
    for (var key in src) {                                                                                             // 975
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {                                                         // 976
        dst[key] = src[key];                                                                                           // 977
      }                                                                                                                // 978
    }                                                                                                                  // 979
  }                                                                                                                    // 980
                                                                                                                       // 981
  return dst || src;                                                                                                   // 982
}                                                                                                                      // 983
                                                                                                                       // 984
                                                                                                                       // 985
/**                                                                                                                    // 986
 * @ngdoc function                                                                                                     // 987
 * @name angular.equals                                                                                                // 988
 * @module ng                                                                                                          // 989
 * @kind function                                                                                                      // 990
 *                                                                                                                     // 991
 * @description                                                                                                        // 992
 * Determines if two objects or two values are equivalent. Supports value types, regular                               // 993
 * expressions, arrays and objects.                                                                                    // 994
 *                                                                                                                     // 995
 * Two objects or values are considered equivalent if at least one of the following is true:                           // 996
 *                                                                                                                     // 997
 * * Both objects or values pass `===` comparison.                                                                     // 998
 * * Both objects or values are of the same type and all of their properties are equal by                              // 999
 *   comparing them with `angular.equals`.                                                                             // 1000
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)                       // 1001
 * * Both values represent the same regular expression (In JavaScript,                                                 // 1002
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual                      // 1003
 *   representation matches).                                                                                          // 1004
 *                                                                                                                     // 1005
 * During a property comparison, properties of `function` type and properties with names                               // 1006
 * that begin with `$` are ignored.                                                                                    // 1007
 *                                                                                                                     // 1008
 * Scope and DOMWindow objects are being compared only by identify (`===`).                                            // 1009
 *                                                                                                                     // 1010
 * @param {*} o1 Object or value to compare.                                                                           // 1011
 * @param {*} o2 Object or value to compare.                                                                           // 1012
 * @returns {boolean} True if arguments are equal.                                                                     // 1013
 */                                                                                                                    // 1014
function equals(o1, o2) {                                                                                              // 1015
  if (o1 === o2) return true;                                                                                          // 1016
  if (o1 === null || o2 === null) return false;                                                                        // 1017
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN                                                              // 1018
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;                                                             // 1019
  if (t1 == t2) {                                                                                                      // 1020
    if (t1 == 'object') {                                                                                              // 1021
      if (isArray(o1)) {                                                                                               // 1022
        if (!isArray(o2)) return false;                                                                                // 1023
        if ((length = o1.length) == o2.length) {                                                                       // 1024
          for (key = 0; key < length; key++) {                                                                         // 1025
            if (!equals(o1[key], o2[key])) return false;                                                               // 1026
          }                                                                                                            // 1027
          return true;                                                                                                 // 1028
        }                                                                                                              // 1029
      } else if (isDate(o1)) {                                                                                         // 1030
        if (!isDate(o2)) return false;                                                                                 // 1031
        return equals(o1.getTime(), o2.getTime());                                                                     // 1032
      } else if (isRegExp(o1)) {                                                                                       // 1033
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;                                                  // 1034
      } else {                                                                                                         // 1035
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||                                              // 1036
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;                                                     // 1037
        keySet = createMap();                                                                                          // 1038
        for (key in o1) {                                                                                              // 1039
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;                                                  // 1040
          if (!equals(o1[key], o2[key])) return false;                                                                 // 1041
          keySet[key] = true;                                                                                          // 1042
        }                                                                                                              // 1043
        for (key in o2) {                                                                                              // 1044
          if (!(key in keySet) &&                                                                                      // 1045
              key.charAt(0) !== '$' &&                                                                                 // 1046
              o2[key] !== undefined &&                                                                                 // 1047
              !isFunction(o2[key])) return false;                                                                      // 1048
        }                                                                                                              // 1049
        return true;                                                                                                   // 1050
      }                                                                                                                // 1051
    }                                                                                                                  // 1052
  }                                                                                                                    // 1053
  return false;                                                                                                        // 1054
}                                                                                                                      // 1055
                                                                                                                       // 1056
var csp = function() {                                                                                                 // 1057
  if (!isDefined(csp.rules)) {                                                                                         // 1058
                                                                                                                       // 1059
                                                                                                                       // 1060
    var ngCspElement = (document.querySelector('[ng-csp]') ||                                                          // 1061
                    document.querySelector('[data-ng-csp]'));                                                          // 1062
                                                                                                                       // 1063
    if (ngCspElement) {                                                                                                // 1064
      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||                                                      // 1065
                    ngCspElement.getAttribute('data-ng-csp');                                                          // 1066
      csp.rules = {                                                                                                    // 1067
        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),                            // 1068
        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)                           // 1069
      };                                                                                                               // 1070
    } else {                                                                                                           // 1071
      csp.rules = {                                                                                                    // 1072
        noUnsafeEval: noUnsafeEval(),                                                                                  // 1073
        noInlineStyle: false                                                                                           // 1074
      };                                                                                                               // 1075
    }                                                                                                                  // 1076
  }                                                                                                                    // 1077
                                                                                                                       // 1078
  return csp.rules;                                                                                                    // 1079
                                                                                                                       // 1080
  function noUnsafeEval() {                                                                                            // 1081
    try {                                                                                                              // 1082
      /* jshint -W031, -W054 */                                                                                        // 1083
      new Function('');                                                                                                // 1084
      /* jshint +W031, +W054 */                                                                                        // 1085
      return false;                                                                                                    // 1086
    } catch (e) {                                                                                                      // 1087
      return true;                                                                                                     // 1088
    }                                                                                                                  // 1089
  }                                                                                                                    // 1090
};                                                                                                                     // 1091
                                                                                                                       // 1092
/**                                                                                                                    // 1093
 * @ngdoc directive                                                                                                    // 1094
 * @module ng                                                                                                          // 1095
 * @name ngJq                                                                                                          // 1096
 *                                                                                                                     // 1097
 * @element ANY                                                                                                        // 1098
 * @param {string=} ngJq the name of the library available under `window`                                              // 1099
 * to be used for angular.element                                                                                      // 1100
 * @description                                                                                                        // 1101
 * Use this directive to force the angular.element library.  This should be                                            // 1102
 * used to force either jqLite by leaving ng-jq blank or setting the name of                                           // 1103
 * the jquery variable under window (eg. jQuery).                                                                      // 1104
 *                                                                                                                     // 1105
 * Since angular looks for this directive when it is loaded (doesn't wait for the                                      // 1106
 * DOMContentLoaded event), it must be placed on an element that comes before the script                               // 1107
 * which loads angular. Also, only the first instance of `ng-jq` will be used and all                                  // 1108
 * others ignored.                                                                                                     // 1109
 *                                                                                                                     // 1110
 * @example                                                                                                            // 1111
 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.                                // 1112
 ```html                                                                                                               // 1113
 <!doctype html>                                                                                                       // 1114
 <html ng-app ng-jq>                                                                                                   // 1115
 ...                                                                                                                   // 1116
 ...                                                                                                                   // 1117
 </html>                                                                                                               // 1118
 ```                                                                                                                   // 1119
 * @example                                                                                                            // 1120
 * This example shows how to use a jQuery based library of a different name.                                           // 1121
 * The library name must be available at the top most 'window'.                                                        // 1122
 ```html                                                                                                               // 1123
 <!doctype html>                                                                                                       // 1124
 <html ng-app ng-jq="jQueryLib">                                                                                       // 1125
 ...                                                                                                                   // 1126
 ...                                                                                                                   // 1127
 </html>                                                                                                               // 1128
 ```                                                                                                                   // 1129
 */                                                                                                                    // 1130
var jq = function() {                                                                                                  // 1131
  if (isDefined(jq.name_)) return jq.name_;                                                                            // 1132
  var el;                                                                                                              // 1133
  var i, ii = ngAttrPrefixes.length, prefix, name;                                                                     // 1134
  for (i = 0; i < ii; ++i) {                                                                                           // 1135
    prefix = ngAttrPrefixes[i];                                                                                        // 1136
    if (el = document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]')) {                                       // 1137
      name = el.getAttribute(prefix + 'jq');                                                                           // 1138
      break;                                                                                                           // 1139
    }                                                                                                                  // 1140
  }                                                                                                                    // 1141
                                                                                                                       // 1142
  return (jq.name_ = name);                                                                                            // 1143
};                                                                                                                     // 1144
                                                                                                                       // 1145
function concat(array1, array2, index) {                                                                               // 1146
  return array1.concat(slice.call(array2, index));                                                                     // 1147
}                                                                                                                      // 1148
                                                                                                                       // 1149
function sliceArgs(args, startIndex) {                                                                                 // 1150
  return slice.call(args, startIndex || 0);                                                                            // 1151
}                                                                                                                      // 1152
                                                                                                                       // 1153
                                                                                                                       // 1154
/* jshint -W101 */                                                                                                     // 1155
/**                                                                                                                    // 1156
 * @ngdoc function                                                                                                     // 1157
 * @name angular.bind                                                                                                  // 1158
 * @module ng                                                                                                          // 1159
 * @kind function                                                                                                      // 1160
 *                                                                                                                     // 1161
 * @description                                                                                                        // 1162
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for                         // 1163
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also                       // 1164
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as                                // 1165
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *                                                                                                                     // 1167
 * @param {Object} self Context which `fn` should be evaluated in.                                                     // 1168
 * @param {function()} fn Function to be bound.                                                                        // 1169
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.                                     // 1170
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.                                 // 1171
 */                                                                                                                    // 1172
/* jshint +W101 */                                                                                                     // 1173
function bind(self, fn) {                                                                                              // 1174
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];                                                 // 1175
  if (isFunction(fn) && !(fn instanceof RegExp)) {                                                                     // 1176
    return curryArgs.length                                                                                            // 1177
      ? function() {                                                                                                   // 1178
          return arguments.length                                                                                      // 1179
            ? fn.apply(self, concat(curryArgs, arguments, 0))                                                          // 1180
            : fn.apply(self, curryArgs);                                                                               // 1181
        }                                                                                                              // 1182
      : function() {                                                                                                   // 1183
          return arguments.length                                                                                      // 1184
            ? fn.apply(self, arguments)                                                                                // 1185
            : fn.call(self);                                                                                           // 1186
        };                                                                                                             // 1187
  } else {                                                                                                             // 1188
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)                   // 1189
    return fn;                                                                                                         // 1190
  }                                                                                                                    // 1191
}                                                                                                                      // 1192
                                                                                                                       // 1193
                                                                                                                       // 1194
function toJsonReplacer(key, value) {                                                                                  // 1195
  var val = value;                                                                                                     // 1196
                                                                                                                       // 1197
  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {                                     // 1198
    val = undefined;                                                                                                   // 1199
  } else if (isWindow(value)) {                                                                                        // 1200
    val = '$WINDOW';                                                                                                   // 1201
  } else if (value &&  document === value) {                                                                           // 1202
    val = '$DOCUMENT';                                                                                                 // 1203
  } else if (isScope(value)) {                                                                                         // 1204
    val = '$SCOPE';                                                                                                    // 1205
  }                                                                                                                    // 1206
                                                                                                                       // 1207
  return val;                                                                                                          // 1208
}                                                                                                                      // 1209
                                                                                                                       // 1210
                                                                                                                       // 1211
/**                                                                                                                    // 1212
 * @ngdoc function                                                                                                     // 1213
 * @name angular.toJson                                                                                                // 1214
 * @module ng                                                                                                          // 1215
 * @kind function                                                                                                      // 1216
 *                                                                                                                     // 1217
 * @description                                                                                                        // 1218
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be                        // 1219
 * stripped since angular uses this notation internally.                                                               // 1220
 *                                                                                                                     // 1221
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.                                      // 1222
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.            // 1223
 *    If set to an integer, the JSON output will contain that many spaces per indentation.                             // 1224
 * @returns {string|undefined} JSON-ified string representing `obj`.                                                   // 1225
 */                                                                                                                    // 1226
function toJson(obj, pretty) {                                                                                         // 1227
  if (typeof obj === 'undefined') return undefined;                                                                    // 1228
  if (!isNumber(pretty)) {                                                                                             // 1229
    pretty = pretty ? 2 : null;                                                                                        // 1230
  }                                                                                                                    // 1231
  return JSON.stringify(obj, toJsonReplacer, pretty);                                                                  // 1232
}                                                                                                                      // 1233
                                                                                                                       // 1234
                                                                                                                       // 1235
/**                                                                                                                    // 1236
 * @ngdoc function                                                                                                     // 1237
 * @name angular.fromJson                                                                                              // 1238
 * @module ng                                                                                                          // 1239
 * @kind function                                                                                                      // 1240
 *                                                                                                                     // 1241
 * @description                                                                                                        // 1242
 * Deserializes a JSON string.                                                                                         // 1243
 *                                                                                                                     // 1244
 * @param {string} json JSON string to deserialize.                                                                    // 1245
 * @returns {Object|Array|string|number} Deserialized JSON string.                                                     // 1246
 */                                                                                                                    // 1247
function fromJson(json) {                                                                                              // 1248
  return isString(json)                                                                                                // 1249
      ? JSON.parse(json)                                                                                               // 1250
      : json;                                                                                                          // 1251
}                                                                                                                      // 1252
                                                                                                                       // 1253
                                                                                                                       // 1254
function timezoneToOffset(timezone, fallback) {                                                                        // 1255
  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;                               // 1256
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;                                          // 1257
}                                                                                                                      // 1258
                                                                                                                       // 1259
                                                                                                                       // 1260
function addDateMinutes(date, minutes) {                                                                               // 1261
  date = new Date(date.getTime());                                                                                     // 1262
  date.setMinutes(date.getMinutes() + minutes);                                                                        // 1263
  return date;                                                                                                         // 1264
}                                                                                                                      // 1265
                                                                                                                       // 1266
                                                                                                                       // 1267
function convertTimezoneToLocal(date, timezone, reverse) {                                                             // 1268
  reverse = reverse ? -1 : 1;                                                                                          // 1269
  var timezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                           // 1270
  return addDateMinutes(date, reverse * (timezoneOffset - date.getTimezoneOffset()));                                  // 1271
}                                                                                                                      // 1272
                                                                                                                       // 1273
                                                                                                                       // 1274
/**                                                                                                                    // 1275
 * @returns {string} Returns the string representation of the element.                                                 // 1276
 */                                                                                                                    // 1277
function startingTag(element) {                                                                                        // 1278
  element = jqLite(element).clone();                                                                                   // 1279
  try {                                                                                                                // 1280
    // turns out IE does not let you set .html() on elements which                                                     // 1281
    // are not allowed to have children. So we just ignore it.                                                         // 1282
    element.empty();                                                                                                   // 1283
  } catch (e) {}                                                                                                       // 1284
  var elemHtml = jqLite('<div>').append(element).html();                                                               // 1285
  try {                                                                                                                // 1286
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :                                              // 1287
        elemHtml.                                                                                                      // 1288
          match(/^(<[^>]+>)/)[1].                                                                                      // 1289
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });                     // 1290
  } catch (e) {                                                                                                        // 1291
    return lowercase(elemHtml);                                                                                        // 1292
  }                                                                                                                    // 1293
                                                                                                                       // 1294
}                                                                                                                      // 1295
                                                                                                                       // 1296
                                                                                                                       // 1297
/////////////////////////////////////////////////                                                                      // 1298
                                                                                                                       // 1299
/**                                                                                                                    // 1300
 * Tries to decode the URI component without throwing an exception.                                                    // 1301
 *                                                                                                                     // 1302
 * @private                                                                                                            // 1303
 * @param str value potential URI component to check.                                                                  // 1304
 * @returns {boolean} True if `value` can be decoded                                                                   // 1305
 * with the decodeURIComponent function.                                                                               // 1306
 */                                                                                                                    // 1307
function tryDecodeURIComponent(value) {                                                                                // 1308
  try {                                                                                                                // 1309
    return decodeURIComponent(value);                                                                                  // 1310
  } catch (e) {                                                                                                        // 1311
    // Ignore any invalid uri component                                                                                // 1312
  }                                                                                                                    // 1313
}                                                                                                                      // 1314
                                                                                                                       // 1315
                                                                                                                       // 1316
/**                                                                                                                    // 1317
 * Parses an escaped url query string into key-value pairs.                                                            // 1318
 * @returns {Object.<string,boolean|Array>}                                                                            // 1319
 */                                                                                                                    // 1320
function parseKeyValue(/**string*/keyValue) {                                                                          // 1321
  var obj = {};                                                                                                        // 1322
  forEach((keyValue || "").split('&'), function(keyValue) {                                                            // 1323
    var splitPoint, key, val;                                                                                          // 1324
    if (keyValue) {                                                                                                    // 1325
      key = keyValue = keyValue.replace(/\+/g,'%20');                                                                  // 1326
      splitPoint = keyValue.indexOf('=');                                                                              // 1327
      if (splitPoint !== -1) {                                                                                         // 1328
        key = keyValue.substring(0, splitPoint);                                                                       // 1329
        val = keyValue.substring(splitPoint + 1);                                                                      // 1330
      }                                                                                                                // 1331
      key = tryDecodeURIComponent(key);                                                                                // 1332
      if (isDefined(key)) {                                                                                            // 1333
        val = isDefined(val) ? tryDecodeURIComponent(val) : true;                                                      // 1334
        if (!hasOwnProperty.call(obj, key)) {                                                                          // 1335
          obj[key] = val;                                                                                              // 1336
        } else if (isArray(obj[key])) {                                                                                // 1337
          obj[key].push(val);                                                                                          // 1338
        } else {                                                                                                       // 1339
          obj[key] = [obj[key],val];                                                                                   // 1340
        }                                                                                                              // 1341
      }                                                                                                                // 1342
    }                                                                                                                  // 1343
  });                                                                                                                  // 1344
  return obj;                                                                                                          // 1345
}                                                                                                                      // 1346
                                                                                                                       // 1347
function toKeyValue(obj) {                                                                                             // 1348
  var parts = [];                                                                                                      // 1349
  forEach(obj, function(value, key) {                                                                                  // 1350
    if (isArray(value)) {                                                                                              // 1351
      forEach(value, function(arrayValue) {                                                                            // 1352
        parts.push(encodeUriQuery(key, true) +                                                                         // 1353
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));                               // 1354
      });                                                                                                              // 1355
    } else {                                                                                                           // 1356
    parts.push(encodeUriQuery(key, true) +                                                                             // 1357
               (value === true ? '' : '=' + encodeUriQuery(value, true)));                                             // 1358
    }                                                                                                                  // 1359
  });                                                                                                                  // 1360
  return parts.length ? parts.join('&') : '';                                                                          // 1361
}                                                                                                                      // 1362
                                                                                                                       // 1363
                                                                                                                       // 1364
/**                                                                                                                    // 1365
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow                           // 1366
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path                       // 1367
 * segments:                                                                                                           // 1368
 *    segment       = *pchar                                                                                           // 1369
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1370
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1371
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1372
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1373
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1374
 */                                                                                                                    // 1375
function encodeUriSegment(val) {                                                                                       // 1376
  return encodeUriQuery(val, true).                                                                                    // 1377
             replace(/%26/gi, '&').                                                                                    // 1378
             replace(/%3D/gi, '=').                                                                                    // 1379
             replace(/%2B/gi, '+');                                                                                    // 1380
}                                                                                                                      // 1381
                                                                                                                       // 1382
                                                                                                                       // 1383
/**                                                                                                                    // 1384
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom                    // 1385
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be                       // 1386
 * encoded per http://tools.ietf.org/html/rfc3986:                                                                     // 1387
 *    query       = *( pchar / "/" / "?" )                                                                             // 1388
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"                                                // 1389
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"                                                            // 1390
 *    pct-encoded   = "%" HEXDIG HEXDIG                                                                                // 1391
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"                                                                // 1392
 *                     / "*" / "+" / "," / ";" / "="                                                                   // 1393
 */                                                                                                                    // 1394
function encodeUriQuery(val, pctEncodeSpaces) {                                                                        // 1395
  return encodeURIComponent(val).                                                                                      // 1396
             replace(/%40/gi, '@').                                                                                    // 1397
             replace(/%3A/gi, ':').                                                                                    // 1398
             replace(/%24/g, '$').                                                                                     // 1399
             replace(/%2C/gi, ',').                                                                                    // 1400
             replace(/%3B/gi, ';').                                                                                    // 1401
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));                                                         // 1402
}                                                                                                                      // 1403
                                                                                                                       // 1404
var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];                                                              // 1405
                                                                                                                       // 1406
function getNgAttribute(element, ngAttr) {                                                                             // 1407
  var attr, i, ii = ngAttrPrefixes.length;                                                                             // 1408
  for (i = 0; i < ii; ++i) {                                                                                           // 1409
    attr = ngAttrPrefixes[i] + ngAttr;                                                                                 // 1410
    if (isString(attr = element.getAttribute(attr))) {                                                                 // 1411
      return attr;                                                                                                     // 1412
    }                                                                                                                  // 1413
  }                                                                                                                    // 1414
  return null;                                                                                                         // 1415
}                                                                                                                      // 1416
                                                                                                                       // 1417
/**                                                                                                                    // 1418
 * @ngdoc directive                                                                                                    // 1419
 * @name ngApp                                                                                                         // 1420
 * @module ng                                                                                                          // 1421
 *                                                                                                                     // 1422
 * @element ANY                                                                                                        // 1423
 * @param {angular.Module} ngApp an optional application                                                               // 1424
 *   {@link angular.module module} name to load.                                                                       // 1425
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be                  // 1426
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which                  // 1427
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described                  // 1428
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in                      // 1429
 *   tracking down the root of these bugs.                                                                             // 1430
 *                                                                                                                     // 1431
 * @description                                                                                                        // 1432
 *                                                                                                                     // 1433
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive                            // 1434
 * designates the **root element** of the application and is typically placed near the root element                    // 1435
 * of the page - e.g. on the `<body>` or `<html>` tags.                                                                // 1436
 *                                                                                                                     // 1437
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`                        // 1438
 * found in the document will be used to define the root element to auto-bootstrap as an                               // 1439
 * application. To run multiple applications in an HTML document you must manually bootstrap them using                // 1440
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.                       // 1441
 *                                                                                                                     // 1442
 * You can specify an **AngularJS module** to be used as the root module for the application.  This                    // 1443
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It                      // 1444
 * should contain the application code needed or have dependencies on other modules that will                          // 1445
 * contain the code. See {@link angular.module} for more information.                                                  // 1446
 *                                                                                                                     // 1447
 * In the example below if the `ngApp` directive were not placed on the `html` element then the                        // 1448
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`                   // 1449
 * would not be resolved to `3`.                                                                                       // 1450
 *                                                                                                                     // 1451
 * `ngApp` is the easiest, and most common way to bootstrap an application.                                            // 1452
 *                                                                                                                     // 1453
 <example module="ngAppDemo">                                                                                          // 1454
   <file name="index.html">                                                                                            // 1455
   <div ng-controller="ngAppDemoController">                                                                           // 1456
     I can add: {{a}} + {{b}} =  {{ a+b }}                                                                             // 1457
   </div>                                                                                                              // 1458
   </file>                                                                                                             // 1459
   <file name="script.js">                                                                                             // 1460
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {                                // 1461
     $scope.a = 1;                                                                                                     // 1462
     $scope.b = 2;                                                                                                     // 1463
   });                                                                                                                 // 1464
   </file>                                                                                                             // 1465
 </example>                                                                                                            // 1466
 *                                                                                                                     // 1467
 * Using `ngStrictDi`, you would see something like this:                                                              // 1468
 *                                                                                                                     // 1469
 <example ng-app-included="true">                                                                                      // 1470
   <file name="index.html">                                                                                            // 1471
   <div ng-app="ngAppStrictDemo" ng-strict-di>                                                                         // 1472
       <div ng-controller="GoodController1">                                                                           // 1473
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1474
                                                                                                                       // 1475
           <p>This renders because the controller does not fail to                                                     // 1476
              instantiate, by using explicit annotation style (see                                                     // 1477
              script.js for details)                                                                                   // 1478
           </p>                                                                                                        // 1479
       </div>                                                                                                          // 1480
                                                                                                                       // 1481
       <div ng-controller="GoodController2">                                                                           // 1482
           Name: <input ng-model="name"><br />                                                                         // 1483
           Hello, {{name}}!                                                                                            // 1484
                                                                                                                       // 1485
           <p>This renders because the controller does not fail to                                                     // 1486
              instantiate, by using explicit annotation style                                                          // 1487
              (see script.js for details)                                                                              // 1488
           </p>                                                                                                        // 1489
       </div>                                                                                                          // 1490
                                                                                                                       // 1491
       <div ng-controller="BadController">                                                                             // 1492
           I can add: {{a}} + {{b}} =  {{ a+b }}                                                                       // 1493
                                                                                                                       // 1494
           <p>The controller could not be instantiated, due to relying                                                 // 1495
              on automatic function annotations (which are disabled in                                                 // 1496
              strict mode). As such, the content of this section is not                                                // 1497
              interpolated, and there should be an error in your web console.                                          // 1498
           </p>                                                                                                        // 1499
       </div>                                                                                                          // 1500
   </div>                                                                                                              // 1501
   </file>                                                                                                             // 1502
   <file name="script.js">                                                                                             // 1503
   angular.module('ngAppStrictDemo', [])                                                                               // 1504
     // BadController will fail to instantiate, due to relying on automatic function annotation,                       // 1505
     // rather than an explicit annotation                                                                             // 1506
     .controller('BadController', function($scope) {                                                                   // 1507
       $scope.a = 1;                                                                                                   // 1508
       $scope.b = 2;                                                                                                   // 1509
     })                                                                                                                // 1510
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,                    // 1511
     // due to using explicit annotations using the array style and $inject property, respectively.                    // 1512
     .controller('GoodController1', ['$scope', function($scope) {                                                      // 1513
       $scope.a = 1;                                                                                                   // 1514
       $scope.b = 2;                                                                                                   // 1515
     }])                                                                                                               // 1516
     .controller('GoodController2', GoodController2);                                                                  // 1517
     function GoodController2($scope) {                                                                                // 1518
       $scope.name = "World";                                                                                          // 1519
     }                                                                                                                 // 1520
     GoodController2.$inject = ['$scope'];                                                                             // 1521
   </file>                                                                                                             // 1522
   <file name="style.css">                                                                                             // 1523
   div[ng-controller] {                                                                                                // 1524
       margin-bottom: 1em;                                                                                             // 1525
       -webkit-border-radius: 4px;                                                                                     // 1526
       border-radius: 4px;                                                                                             // 1527
       border: 1px solid;                                                                                              // 1528
       padding: .5em;                                                                                                  // 1529
   }                                                                                                                   // 1530
   div[ng-controller^=Good] {                                                                                          // 1531
       border-color: #d6e9c6;                                                                                          // 1532
       background-color: #dff0d8;                                                                                      // 1533
       color: #3c763d;                                                                                                 // 1534
   }                                                                                                                   // 1535
   div[ng-controller^=Bad] {                                                                                           // 1536
       border-color: #ebccd1;                                                                                          // 1537
       background-color: #f2dede;                                                                                      // 1538
       color: #a94442;                                                                                                 // 1539
       margin-bottom: 0;                                                                                               // 1540
   }                                                                                                                   // 1541
   </file>                                                                                                             // 1542
 </example>                                                                                                            // 1543
 */                                                                                                                    // 1544
function angularInit(element, bootstrap) {                                                                             // 1545
  var appElement,                                                                                                      // 1546
      module,                                                                                                          // 1547
      config = {};                                                                                                     // 1548
                                                                                                                       // 1549
  // The element `element` has priority over any other element                                                         // 1550
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1551
    var name = prefix + 'app';                                                                                         // 1552
                                                                                                                       // 1553
    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {                                           // 1554
      appElement = element;                                                                                            // 1555
      module = element.getAttribute(name);                                                                             // 1556
    }                                                                                                                  // 1557
  });                                                                                                                  // 1558
  forEach(ngAttrPrefixes, function(prefix) {                                                                           // 1559
    var name = prefix + 'app';                                                                                         // 1560
    var candidate;                                                                                                     // 1561
                                                                                                                       // 1562
    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {                    // 1563
      appElement = candidate;                                                                                          // 1564
      module = candidate.getAttribute(name);                                                                           // 1565
    }                                                                                                                  // 1566
  });                                                                                                                  // 1567
  if (appElement) {                                                                                                    // 1568
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;                                                // 1569
    bootstrap(appElement, module ? [module] : [], config);                                                             // 1570
  }                                                                                                                    // 1571
}                                                                                                                      // 1572
                                                                                                                       // 1573
/**                                                                                                                    // 1574
 * @ngdoc function                                                                                                     // 1575
 * @name angular.bootstrap                                                                                             // 1576
 * @module ng                                                                                                          // 1577
 * @description                                                                                                        // 1578
 * Use this function to manually start up angular application.                                                         // 1579
 *                                                                                                                     // 1580
 * See: {@link guide/bootstrap Bootstrap}                                                                              // 1581
 *                                                                                                                     // 1582
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.                         // 1583
 * They must use {@link ng.directive:ngApp ngApp}.                                                                     // 1584
 *                                                                                                                     // 1585
 * Angular will detect if it has been loaded into the browser more than once and only allow the                        // 1586
 * first loaded script to be bootstrapped and will report a warning to the browser console for                         // 1587
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise                      // 1588
 * multiple instances of Angular try to work on the DOM.                                                               // 1589
 *                                                                                                                     // 1590
 * ```html                                                                                                             // 1591
 * <!doctype html>                                                                                                     // 1592
 * <html>                                                                                                              // 1593
 * <body>                                                                                                              // 1594
 * <div ng-controller="WelcomeController">                                                                             // 1595
 *   {{greeting}}                                                                                                      // 1596
 * </div>                                                                                                              // 1597
 *                                                                                                                     // 1598
 * <script src="angular.js"></script>                                                                                  // 1599
 * <script>                                                                                                            // 1600
 *   var app = angular.module('demo', [])                                                                              // 1601
 *   .controller('WelcomeController', function($scope) {                                                               // 1602
 *       $scope.greeting = 'Welcome!';                                                                                 // 1603
 *   });                                                                                                               // 1604
 *   angular.bootstrap(document, ['demo']);                                                                            // 1605
 * </script>                                                                                                           // 1606
 * </body>                                                                                                             // 1607
 * </html>                                                                                                             // 1608
 * ```                                                                                                                 // 1609
 *                                                                                                                     // 1610
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1611
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.                    // 1612
 *     Each item in the array should be the name of a predefined module or a (DI annotated)                            // 1613
 *     function that will be invoked by the injector as a `config` block.                                              // 1614
 *     See: {@link angular.module modules}                                                                             // 1615
 * @param {Object=} config an object for defining configuration options for the application. The                       // 1616
 *     following keys are supported:                                                                                   // 1617
 *                                                                                                                     // 1618
 * * `strictDi` - disable automatic function annotation for the application. This is meant to                          // 1619
 *   assist in finding bugs which break minified code. Defaults to `false`.                                            // 1620
 *                                                                                                                     // 1621
 * @returns {auto.$injector} Returns the newly created injector for this app.                                          // 1622
 */                                                                                                                    // 1623
function bootstrap(element, modules, config) {                                                                         // 1624
  if (!isObject(config)) config = {};                                                                                  // 1625
  var defaultConfig = {                                                                                                // 1626
    strictDi: false                                                                                                    // 1627
  };                                                                                                                   // 1628
  config = extend(defaultConfig, config);                                                                              // 1629
  var doBootstrap = function() {                                                                                       // 1630
    element = jqLite(element);                                                                                         // 1631
                                                                                                                       // 1632
    if (element.injector()) {                                                                                          // 1633
      var tag = (element[0] === document) ? 'document' : startingTag(element);                                         // 1634
      //Encode angle brackets to prevent input from being sanitized to empty string #8683                              // 1635
      throw ngMinErr(                                                                                                  // 1636
          'btstrpd',                                                                                                   // 1637
          "App Already Bootstrapped with this Element '{0}'",                                                          // 1638
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));                                                                // 1639
    }                                                                                                                  // 1640
                                                                                                                       // 1641
    modules = modules || [];                                                                                           // 1642
    modules.unshift(['$provide', function($provide) {                                                                  // 1643
      $provide.value('$rootElement', element);                                                                         // 1644
    }]);                                                                                                               // 1645
                                                                                                                       // 1646
    if (config.debugInfoEnabled) {                                                                                     // 1647
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.                        // 1648
      modules.push(['$compileProvider', function($compileProvider) {                                                   // 1649
        $compileProvider.debugInfoEnabled(true);                                                                       // 1650
      }]);                                                                                                             // 1651
    }                                                                                                                  // 1652
                                                                                                                       // 1653
    modules.unshift('ng');                                                                                             // 1654
    var injector = createInjector(modules, config.strictDi);                                                           // 1655
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',                                            // 1656
       function bootstrapApply(scope, element, compile, injector) {                                                    // 1657
        scope.$apply(function() {                                                                                      // 1658
          element.data('$injector', injector);                                                                         // 1659
          compile(element)(scope);                                                                                     // 1660
        });                                                                                                            // 1661
      }]                                                                                                               // 1662
    );                                                                                                                 // 1663
    return injector;                                                                                                   // 1664
  };                                                                                                                   // 1665
                                                                                                                       // 1666
  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;                                                                 // 1667
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;                                                                     // 1668
                                                                                                                       // 1669
  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {                                                              // 1670
    config.debugInfoEnabled = true;                                                                                    // 1671
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');                                                       // 1672
  }                                                                                                                    // 1673
                                                                                                                       // 1674
  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {                                                               // 1675
    return doBootstrap();                                                                                              // 1676
  }                                                                                                                    // 1677
                                                                                                                       // 1678
  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');                                                           // 1679
  angular.resumeBootstrap = function(extraModules) {                                                                   // 1680
    forEach(extraModules, function(module) {                                                                           // 1681
      modules.push(module);                                                                                            // 1682
    });                                                                                                                // 1683
    return doBootstrap();                                                                                              // 1684
  };                                                                                                                   // 1685
                                                                                                                       // 1686
  if (isFunction(angular.resumeDeferredBootstrap)) {                                                                   // 1687
    angular.resumeDeferredBootstrap();                                                                                 // 1688
  }                                                                                                                    // 1689
}                                                                                                                      // 1690
                                                                                                                       // 1691
/**                                                                                                                    // 1692
 * @ngdoc function                                                                                                     // 1693
 * @name angular.reloadWithDebugInfo                                                                                   // 1694
 * @module ng                                                                                                          // 1695
 * @description                                                                                                        // 1696
 * Use this function to reload the current application with debug information turned on.                               // 1697
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.                                    // 1698
 *                                                                                                                     // 1699
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.                                                          // 1700
 */                                                                                                                    // 1701
function reloadWithDebugInfo() {                                                                                       // 1702
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;                                                                 // 1703
  window.location.reload();                                                                                            // 1704
}                                                                                                                      // 1705
                                                                                                                       // 1706
/**                                                                                                                    // 1707
 * @name angular.getTestability                                                                                        // 1708
 * @module ng                                                                                                          // 1709
 * @description                                                                                                        // 1710
 * Get the testability service for the instance of Angular on the given                                                // 1711
 * element.                                                                                                            // 1712
 * @param {DOMElement} element DOM element which is the root of angular application.                                   // 1713
 */                                                                                                                    // 1714
function getTestability(rootElement) {                                                                                 // 1715
  var injector = angular.element(rootElement).injector();                                                              // 1716
  if (!injector) {                                                                                                     // 1717
    throw ngMinErr('test',                                                                                             // 1718
      'no injector found for element argument to getTestability');                                                     // 1719
  }                                                                                                                    // 1720
  return injector.get('$$testability');                                                                                // 1721
}                                                                                                                      // 1722
                                                                                                                       // 1723
var SNAKE_CASE_REGEXP = /[A-Z]/g;                                                                                      // 1724
function snake_case(name, separator) {                                                                                 // 1725
  separator = separator || '_';                                                                                        // 1726
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {                                                       // 1727
    return (pos ? separator : '') + letter.toLowerCase();                                                              // 1728
  });                                                                                                                  // 1729
}                                                                                                                      // 1730
                                                                                                                       // 1731
var bindJQueryFired = false;                                                                                           // 1732
var skipDestroyOnNextJQueryCleanData;                                                                                  // 1733
function bindJQuery() {                                                                                                // 1734
  var originalCleanData;                                                                                               // 1735
                                                                                                                       // 1736
  if (bindJQueryFired) {                                                                                               // 1737
    return;                                                                                                            // 1738
  }                                                                                                                    // 1739
                                                                                                                       // 1740
  // bind to jQuery if present;                                                                                        // 1741
  var jqName = jq();                                                                                                   // 1742
  jQuery = window.jQuery; // use default jQuery.                                                                       // 1743
  if (isDefined(jqName)) { // `ngJq` present                                                                           // 1744
    jQuery = jqName === null ? undefined : window[jqName]; // if empty; use jqLite. if not empty, use jQuery specified by `ngJq`.
  }                                                                                                                    // 1746
                                                                                                                       // 1747
  // Use jQuery if it exists with proper functionality, otherwise default to us.                                       // 1748
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.                                                         // 1749
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older                                 // 1750
  // versions. It will not work for sure with jQuery <1.7, though.                                                     // 1751
  if (jQuery && jQuery.fn.on) {                                                                                        // 1752
    jqLite = jQuery;                                                                                                   // 1753
    extend(jQuery.fn, {                                                                                                // 1754
      scope: JQLitePrototype.scope,                                                                                    // 1755
      isolateScope: JQLitePrototype.isolateScope,                                                                      // 1756
      controller: JQLitePrototype.controller,                                                                          // 1757
      injector: JQLitePrototype.injector,                                                                              // 1758
      inheritedData: JQLitePrototype.inheritedData                                                                     // 1759
    });                                                                                                                // 1760
                                                                                                                       // 1761
    // All nodes removed from the DOM via various jQuery APIs like .remove()                                           // 1762
    // are passed through jQuery.cleanData. Monkey-patch this method to fire                                           // 1763
    // the $destroy event on all removed nodes.                                                                        // 1764
    originalCleanData = jQuery.cleanData;                                                                              // 1765
    jQuery.cleanData = function(elems) {                                                                               // 1766
      var events;                                                                                                      // 1767
      if (!skipDestroyOnNextJQueryCleanData) {                                                                         // 1768
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {                                                        // 1769
          events = jQuery._data(elem, "events");                                                                       // 1770
          if (events && events.$destroy) {                                                                             // 1771
            jQuery(elem).triggerHandler('$destroy');                                                                   // 1772
          }                                                                                                            // 1773
        }                                                                                                              // 1774
      } else {                                                                                                         // 1775
        skipDestroyOnNextJQueryCleanData = false;                                                                      // 1776
      }                                                                                                                // 1777
      originalCleanData(elems);                                                                                        // 1778
    };                                                                                                                 // 1779
  } else {                                                                                                             // 1780
    jqLite = JQLite;                                                                                                   // 1781
  }                                                                                                                    // 1782
                                                                                                                       // 1783
  angular.element = jqLite;                                                                                            // 1784
                                                                                                                       // 1785
  // Prevent double-proxying.                                                                                          // 1786
  bindJQueryFired = true;                                                                                              // 1787
}                                                                                                                      // 1788
                                                                                                                       // 1789
/**                                                                                                                    // 1790
 * throw error if the argument is falsy.                                                                               // 1791
 */                                                                                                                    // 1792
function assertArg(arg, name, reason) {                                                                                // 1793
  if (!arg) {                                                                                                          // 1794
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));                            // 1795
  }                                                                                                                    // 1796
  return arg;                                                                                                          // 1797
}                                                                                                                      // 1798
                                                                                                                       // 1799
function assertArgFn(arg, name, acceptArrayAnnotation) {                                                               // 1800
  if (acceptArrayAnnotation && isArray(arg)) {                                                                         // 1801
      arg = arg[arg.length - 1];                                                                                       // 1802
  }                                                                                                                    // 1803
                                                                                                                       // 1804
  assertArg(isFunction(arg), name, 'not a function, got ' +                                                            // 1805
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));                               // 1806
  return arg;                                                                                                          // 1807
}                                                                                                                      // 1808
                                                                                                                       // 1809
/**                                                                                                                    // 1810
 * throw error if the name given is hasOwnProperty                                                                     // 1811
 * @param  {String} name    the name to test                                                                           // 1812
 * @param  {String} context the context in which the name is used, such as module or directive                         // 1813
 */                                                                                                                    // 1814
function assertNotHasOwnProperty(name, context) {                                                                      // 1815
  if (name === 'hasOwnProperty') {                                                                                     // 1816
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);                                      // 1817
  }                                                                                                                    // 1818
}                                                                                                                      // 1819
                                                                                                                       // 1820
/**                                                                                                                    // 1821
 * Return the value accessible from the object by path. Any undefined traversals are ignored                           // 1822
 * @param {Object} obj starting object                                                                                 // 1823
 * @param {String} path path to traverse                                                                               // 1824
 * @param {boolean} [bindFnToScope=true]                                                                               // 1825
 * @returns {Object} value as accessible by path                                                                       // 1826
 */                                                                                                                    // 1827
//TODO(misko): this function needs to be removed                                                                       // 1828
function getter(obj, path, bindFnToScope) {                                                                            // 1829
  if (!path) return obj;                                                                                               // 1830
  var keys = path.split('.');                                                                                          // 1831
  var key;                                                                                                             // 1832
  var lastInstance = obj;                                                                                              // 1833
  var len = keys.length;                                                                                               // 1834
                                                                                                                       // 1835
  for (var i = 0; i < len; i++) {                                                                                      // 1836
    key = keys[i];                                                                                                     // 1837
    if (obj) {                                                                                                         // 1838
      obj = (lastInstance = obj)[key];                                                                                 // 1839
    }                                                                                                                  // 1840
  }                                                                                                                    // 1841
  if (!bindFnToScope && isFunction(obj)) {                                                                             // 1842
    return bind(lastInstance, obj);                                                                                    // 1843
  }                                                                                                                    // 1844
  return obj;                                                                                                          // 1845
}                                                                                                                      // 1846
                                                                                                                       // 1847
/**                                                                                                                    // 1848
 * Return the DOM siblings between the first and last node in the given array.                                         // 1849
 * @param {Array} array like object                                                                                    // 1850
 * @returns {jqLite} jqLite collection containing the nodes                                                            // 1851
 */                                                                                                                    // 1852
function getBlockNodes(nodes) {                                                                                        // 1853
  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original                   // 1854
  //             collection, otherwise update the original collection.                                                 // 1855
  var node = nodes[0];                                                                                                 // 1856
  var endNode = nodes[nodes.length - 1];                                                                               // 1857
  var blockNodes = [node];                                                                                             // 1858
                                                                                                                       // 1859
  do {                                                                                                                 // 1860
    node = node.nextSibling;                                                                                           // 1861
    if (!node) break;                                                                                                  // 1862
    blockNodes.push(node);                                                                                             // 1863
  } while (node !== endNode);                                                                                          // 1864
                                                                                                                       // 1865
  return jqLite(blockNodes);                                                                                           // 1866
}                                                                                                                      // 1867
                                                                                                                       // 1868
                                                                                                                       // 1869
/**                                                                                                                    // 1870
 * Creates a new object without a prototype. This object is useful for lookup without having to                        // 1871
 * guard against prototypically inherited properties via hasOwnProperty.                                               // 1872
 *                                                                                                                     // 1873
 * Related micro-benchmarks:                                                                                           // 1874
 * - http://jsperf.com/object-create2                                                                                  // 1875
 * - http://jsperf.com/proto-map-lookup/2                                                                              // 1876
 * - http://jsperf.com/for-in-vs-object-keys2                                                                          // 1877
 *                                                                                                                     // 1878
 * @returns {Object}                                                                                                   // 1879
 */                                                                                                                    // 1880
function createMap() {                                                                                                 // 1881
  return Object.create(null);                                                                                          // 1882
}                                                                                                                      // 1883
                                                                                                                       // 1884
var NODE_TYPE_ELEMENT = 1;                                                                                             // 1885
var NODE_TYPE_ATTRIBUTE = 2;                                                                                           // 1886
var NODE_TYPE_TEXT = 3;                                                                                                // 1887
var NODE_TYPE_COMMENT = 8;                                                                                             // 1888
var NODE_TYPE_DOCUMENT = 9;                                                                                            // 1889
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;                                                                                  // 1890
                                                                                                                       // 1891
/**                                                                                                                    // 1892
 * @ngdoc type                                                                                                         // 1893
 * @name angular.Module                                                                                                // 1894
 * @module ng                                                                                                          // 1895
 * @description                                                                                                        // 1896
 *                                                                                                                     // 1897
 * Interface for configuring angular {@link angular.module modules}.                                                   // 1898
 */                                                                                                                    // 1899
                                                                                                                       // 1900
function setupModuleLoader(window) {                                                                                   // 1901
                                                                                                                       // 1902
  var $injectorMinErr = minErr('$injector');                                                                           // 1903
  var ngMinErr = minErr('ng');                                                                                         // 1904
                                                                                                                       // 1905
  function ensure(obj, name, factory) {                                                                                // 1906
    return obj[name] || (obj[name] = factory());                                                                       // 1907
  }                                                                                                                    // 1908
                                                                                                                       // 1909
  var angular = ensure(window, 'angular', Object);                                                                     // 1910
                                                                                                                       // 1911
  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap           // 1912
  angular.$$minErr = angular.$$minErr || minErr;                                                                       // 1913
                                                                                                                       // 1914
  return ensure(angular, 'module', function() {                                                                        // 1915
    /** @type {Object.<string, angular.Module>} */                                                                     // 1916
    var modules = {};                                                                                                  // 1917
                                                                                                                       // 1918
    /**                                                                                                                // 1919
     * @ngdoc function                                                                                                 // 1920
     * @name angular.module                                                                                            // 1921
     * @module ng                                                                                                      // 1922
     * @description                                                                                                    // 1923
     *                                                                                                                 // 1924
     * The `angular.module` is a global place for creating, registering and retrieving Angular                         // 1925
     * modules.                                                                                                        // 1926
     * All modules (angular core or 3rd party) that should be available to an application must be                      // 1927
     * registered using this mechanism.                                                                                // 1928
     *                                                                                                                 // 1929
     * Passing one argument retrieves an existing {@link angular.Module},                                              // 1930
     * whereas passing more than one argument creates a new {@link angular.Module}                                     // 1931
     *                                                                                                                 // 1932
     *                                                                                                                 // 1933
     * # Module                                                                                                        // 1934
     *                                                                                                                 // 1935
     * A module is a collection of services, directives, controllers, filters, and configuration information.          // 1936
     * `angular.module` is used to configure the {@link auto.$injector $injector}.                                     // 1937
     *                                                                                                                 // 1938
     * ```js                                                                                                           // 1939
     * // Create a new module                                                                                          // 1940
     * var myModule = angular.module('myModule', []);                                                                  // 1941
     *                                                                                                                 // 1942
     * // register a new service                                                                                       // 1943
     * myModule.value('appName', 'MyCoolApp');                                                                         // 1944
     *                                                                                                                 // 1945
     * // configure existing services inside initialization blocks.                                                    // 1946
     * myModule.config(['$locationProvider', function($locationProvider) {                                             // 1947
     *   // Configure existing providers                                                                               // 1948
     *   $locationProvider.hashPrefix('!');                                                                            // 1949
     * }]);                                                                                                            // 1950
     * ```                                                                                                             // 1951
     *                                                                                                                 // 1952
     * Then you can create an injector and load your modules like this:                                                // 1953
     *                                                                                                                 // 1954
     * ```js                                                                                                           // 1955
     * var injector = angular.injector(['ng', 'myModule'])                                                             // 1956
     * ```                                                                                                             // 1957
     *                                                                                                                 // 1958
     * However it's more likely that you'll just use                                                                   // 1959
     * {@link ng.directive:ngApp ngApp} or                                                                             // 1960
     * {@link angular.bootstrap} to simplify this process for you.                                                     // 1961
     *                                                                                                                 // 1962
     * @param {!string} name The name of the module to create or retrieve.                                             // 1963
     * @param {!Array.<string>=} requires If specified then new module is being created. If                            // 1964
     *        unspecified then the module is being retrieved for further configuration.                                // 1965
     * @param {Function=} configFn Optional configuration function for the module. Same as                             // 1966
     *        {@link angular.Module#config Module#config()}.                                                           // 1967
     * @returns {module} new module with the {@link angular.Module} api.                                               // 1968
     */                                                                                                                // 1969
    return function module(name, requires, configFn) {                                                                 // 1970
      var assertNotHasOwnProperty = function(name, context) {                                                          // 1971
        if (name === 'hasOwnProperty') {                                                                               // 1972
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);                                // 1973
        }                                                                                                              // 1974
      };                                                                                                               // 1975
                                                                                                                       // 1976
      assertNotHasOwnProperty(name, 'module');                                                                         // 1977
      if (requires && modules.hasOwnProperty(name)) {                                                                  // 1978
        modules[name] = null;                                                                                          // 1979
      }                                                                                                                // 1980
      return ensure(modules, name, function() {                                                                        // 1981
        if (!requires) {                                                                                               // 1982
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +                     // 1983
             "the module name or forgot to load it. If registering a module ensure that you " +                        // 1984
             "specify the dependencies as the second argument.", name);                                                // 1985
        }                                                                                                              // 1986
                                                                                                                       // 1987
        /** @type {!Array.<Array.<*>>} */                                                                              // 1988
        var invokeQueue = [];                                                                                          // 1989
                                                                                                                       // 1990
        /** @type {!Array.<Function>} */                                                                               // 1991
        var configBlocks = [];                                                                                         // 1992
                                                                                                                       // 1993
        /** @type {!Array.<Function>} */                                                                               // 1994
        var runBlocks = [];                                                                                            // 1995
                                                                                                                       // 1996
        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);                                         // 1997
                                                                                                                       // 1998
        /** @type {angular.Module} */                                                                                  // 1999
        var moduleInstance = {                                                                                         // 2000
          // Private state                                                                                             // 2001
          _invokeQueue: invokeQueue,                                                                                   // 2002
          _configBlocks: configBlocks,                                                                                 // 2003
          _runBlocks: runBlocks,                                                                                       // 2004
                                                                                                                       // 2005
          /**                                                                                                          // 2006
           * @ngdoc property                                                                                           // 2007
           * @name angular.Module#requires                                                                             // 2008
           * @module ng                                                                                                // 2009
           *                                                                                                           // 2010
           * @description                                                                                              // 2011
           * Holds the list of modules which the injector will load before the current module is                       // 2012
           * loaded.                                                                                                   // 2013
           */                                                                                                          // 2014
          requires: requires,                                                                                          // 2015
                                                                                                                       // 2016
          /**                                                                                                          // 2017
           * @ngdoc property                                                                                           // 2018
           * @name angular.Module#name                                                                                 // 2019
           * @module ng                                                                                                // 2020
           *                                                                                                           // 2021
           * @description                                                                                              // 2022
           * Name of the module.                                                                                       // 2023
           */                                                                                                          // 2024
          name: name,                                                                                                  // 2025
                                                                                                                       // 2026
                                                                                                                       // 2027
          /**                                                                                                          // 2028
           * @ngdoc method                                                                                             // 2029
           * @name angular.Module#provider                                                                             // 2030
           * @module ng                                                                                                // 2031
           * @param {string} name service name                                                                         // 2032
           * @param {Function} providerType Construction function for creating new instance of the                     // 2033
           *                                service.                                                                   // 2034
           * @description                                                                                              // 2035
           * See {@link auto.$provide#provider $provide.provider()}.                                                   // 2036
           */                                                                                                          // 2037
          provider: invokeLaterAndSetModuleName('$provide', 'provider'),                                               // 2038
                                                                                                                       // 2039
          /**                                                                                                          // 2040
           * @ngdoc method                                                                                             // 2041
           * @name angular.Module#factory                                                                              // 2042
           * @module ng                                                                                                // 2043
           * @param {string} name service name                                                                         // 2044
           * @param {Function} providerFunction Function for creating new instance of the service.                     // 2045
           * @description                                                                                              // 2046
           * See {@link auto.$provide#factory $provide.factory()}.                                                     // 2047
           */                                                                                                          // 2048
          factory: invokeLaterAndSetModuleName('$provide', 'factory'),                                                 // 2049
                                                                                                                       // 2050
          /**                                                                                                          // 2051
           * @ngdoc method                                                                                             // 2052
           * @name angular.Module#service                                                                              // 2053
           * @module ng                                                                                                // 2054
           * @param {string} name service name                                                                         // 2055
           * @param {Function} constructor A constructor function that will be instantiated.                           // 2056
           * @description                                                                                              // 2057
           * See {@link auto.$provide#service $provide.service()}.                                                     // 2058
           */                                                                                                          // 2059
          service: invokeLaterAndSetModuleName('$provide', 'service'),                                                 // 2060
                                                                                                                       // 2061
          /**                                                                                                          // 2062
           * @ngdoc method                                                                                             // 2063
           * @name angular.Module#value                                                                                // 2064
           * @module ng                                                                                                // 2065
           * @param {string} name service name                                                                         // 2066
           * @param {*} object Service instance object.                                                                // 2067
           * @description                                                                                              // 2068
           * See {@link auto.$provide#value $provide.value()}.                                                         // 2069
           */                                                                                                          // 2070
          value: invokeLater('$provide', 'value'),                                                                     // 2071
                                                                                                                       // 2072
          /**                                                                                                          // 2073
           * @ngdoc method                                                                                             // 2074
           * @name angular.Module#constant                                                                             // 2075
           * @module ng                                                                                                // 2076
           * @param {string} name constant name                                                                        // 2077
           * @param {*} object Constant value.                                                                         // 2078
           * @description                                                                                              // 2079
           * Because the constant are fixed, they get applied before other provide methods.                            // 2080
           * See {@link auto.$provide#constant $provide.constant()}.                                                   // 2081
           */                                                                                                          // 2082
          constant: invokeLater('$provide', 'constant', 'unshift'),                                                    // 2083
                                                                                                                       // 2084
           /**                                                                                                         // 2085
           * @ngdoc method                                                                                             // 2086
           * @name angular.Module#decorator                                                                            // 2087
           * @module ng                                                                                                // 2088
           * @param {string} The name of the service to decorate.                                                      // 2089
           * @param {Function} This function will be invoked when the service needs to be                              // 2090
           *                                    instantiated and should return the decorated service instance.         // 2091
           * @description                                                                                              // 2092
           * See {@link auto.$provide#decorator $provide.decorator()}.                                                 // 2093
           */                                                                                                          // 2094
          decorator: invokeLaterAndSetModuleName('$provide', 'decorator'),                                             // 2095
                                                                                                                       // 2096
          /**                                                                                                          // 2097
           * @ngdoc method                                                                                             // 2098
           * @name angular.Module#animation                                                                            // 2099
           * @module ng                                                                                                // 2100
           * @param {string} name animation name                                                                       // 2101
           * @param {Function} animationFactory Factory function for creating new instance of an                       // 2102
           *                                    animation.                                                             // 2103
           * @description                                                                                              // 2104
           *                                                                                                           // 2105
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.                              // 2106
           *                                                                                                           // 2107
           *                                                                                                           // 2108
           * Defines an animation hook that can be later used with                                                     // 2109
           * {@link $animate $animate} service and directives that use this service.                                   // 2110
           *                                                                                                           // 2111
           * ```js                                                                                                     // 2112
           * module.animation('.animation-name', function($inject1, $inject2) {                                        // 2113
           *   return {                                                                                                // 2114
           *     eventName : function(element, done) {                                                                 // 2115
           *       //code to run the animation                                                                         // 2116
           *       //once complete, then run done()                                                                    // 2117
           *       return function cancellationFunction(element) {                                                     // 2118
           *         //code to cancel the animation                                                                    // 2119
           *       }                                                                                                   // 2120
           *     }                                                                                                     // 2121
           *   }                                                                                                       // 2122
           * })                                                                                                        // 2123
           * ```                                                                                                       // 2124
           *                                                                                                           // 2125
           * See {@link ng.$animateProvider#register $animateProvider.register()} and                                  // 2126
           * {@link ngAnimate ngAnimate module} for more information.                                                  // 2127
           */                                                                                                          // 2128
          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),                                      // 2129
                                                                                                                       // 2130
          /**                                                                                                          // 2131
           * @ngdoc method                                                                                             // 2132
           * @name angular.Module#filter                                                                               // 2133
           * @module ng                                                                                                // 2134
           * @param {string} name Filter name - this must be a valid angular expression identifier                     // 2135
           * @param {Function} filterFactory Factory function for creating new instance of filter.                     // 2136
           * @description                                                                                              // 2137
           * See {@link ng.$filterProvider#register $filterProvider.register()}.                                       // 2138
           *                                                                                                           // 2139
           * <div class="alert alert-warning">                                                                         // 2140
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace        // 2142
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                   // 2143
           * (`myapp_subsection_filterx`).                                                                             // 2144
           * </div>                                                                                                    // 2145
           */                                                                                                          // 2146
          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),                                          // 2147
                                                                                                                       // 2148
          /**                                                                                                          // 2149
           * @ngdoc method                                                                                             // 2150
           * @name angular.Module#controller                                                                           // 2151
           * @module ng                                                                                                // 2152
           * @param {string|Object} name Controller name, or an object map of controllers where the                    // 2153
           *    keys are the names and the values are the constructors.                                                // 2154
           * @param {Function} constructor Controller constructor function.                                            // 2155
           * @description                                                                                              // 2156
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.                               // 2157
           */                                                                                                          // 2158
          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),                                  // 2159
                                                                                                                       // 2160
          /**                                                                                                          // 2161
           * @ngdoc method                                                                                             // 2162
           * @name angular.Module#directive                                                                            // 2163
           * @module ng                                                                                                // 2164
           * @param {string|Object} name Directive name, or an object map of directives where the                      // 2165
           *    keys are the names and the values are the factories.                                                   // 2166
           * @param {Function} directiveFactory Factory function for creating new instance of                          // 2167
           * directives.                                                                                               // 2168
           * @description                                                                                              // 2169
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.                                   // 2170
           */                                                                                                          // 2171
          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),                                     // 2172
                                                                                                                       // 2173
          /**                                                                                                          // 2174
           * @ngdoc method                                                                                             // 2175
           * @name angular.Module#config                                                                               // 2176
           * @module ng                                                                                                // 2177
           * @param {Function} configFn Execute this function on module load. Useful for service                       // 2178
           *    configuration.                                                                                         // 2179
           * @description                                                                                              // 2180
           * Use this method to register work which needs to be performed on module loading.                           // 2181
           * For more about how to configure services, see                                                             // 2182
           * {@link providers#provider-recipe Provider Recipe}.                                                        // 2183
           */                                                                                                          // 2184
          config: config,                                                                                              // 2185
                                                                                                                       // 2186
          /**                                                                                                          // 2187
           * @ngdoc method                                                                                             // 2188
           * @name angular.Module#run                                                                                  // 2189
           * @module ng                                                                                                // 2190
           * @param {Function} initializationFn Execute this function after injector creation.                         // 2191
           *    Useful for application initialization.                                                                 // 2192
           * @description                                                                                              // 2193
           * Use this method to register work which should be performed when the injector is done                      // 2194
           * loading all modules.                                                                                      // 2195
           */                                                                                                          // 2196
          run: function(block) {                                                                                       // 2197
            runBlocks.push(block);                                                                                     // 2198
            return this;                                                                                               // 2199
          }                                                                                                            // 2200
        };                                                                                                             // 2201
                                                                                                                       // 2202
        if (configFn) {                                                                                                // 2203
          config(configFn);                                                                                            // 2204
        }                                                                                                              // 2205
                                                                                                                       // 2206
        return moduleInstance;                                                                                         // 2207
                                                                                                                       // 2208
        /**                                                                                                            // 2209
         * @param {string} provider                                                                                    // 2210
         * @param {string} method                                                                                      // 2211
         * @param {String=} insertMethod                                                                               // 2212
         * @returns {angular.Module}                                                                                   // 2213
         */                                                                                                            // 2214
        function invokeLater(provider, method, insertMethod, queue) {                                                  // 2215
          if (!queue) queue = invokeQueue;                                                                             // 2216
          return function() {                                                                                          // 2217
            queue[insertMethod || 'push']([provider, method, arguments]);                                              // 2218
            return moduleInstance;                                                                                     // 2219
          };                                                                                                           // 2220
        }                                                                                                              // 2221
                                                                                                                       // 2222
        /**                                                                                                            // 2223
         * @param {string} provider                                                                                    // 2224
         * @param {string} method                                                                                      // 2225
         * @returns {angular.Module}                                                                                   // 2226
         */                                                                                                            // 2227
        function invokeLaterAndSetModuleName(provider, method) {                                                       // 2228
          return function(recipeName, factoryFunction) {                                                               // 2229
            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;                   // 2230
            invokeQueue.push([provider, method, arguments]);                                                           // 2231
            return moduleInstance;                                                                                     // 2232
          };                                                                                                           // 2233
        }                                                                                                              // 2234
      });                                                                                                              // 2235
    };                                                                                                                 // 2236
  });                                                                                                                  // 2237
                                                                                                                       // 2238
}                                                                                                                      // 2239
                                                                                                                       // 2240
/* global: toDebugString: true */                                                                                      // 2241
                                                                                                                       // 2242
function serializeObject(obj) {                                                                                        // 2243
  var seen = [];                                                                                                       // 2244
                                                                                                                       // 2245
  return JSON.stringify(obj, function(key, val) {                                                                      // 2246
    val = toJsonReplacer(key, val);                                                                                    // 2247
    if (isObject(val)) {                                                                                               // 2248
                                                                                                                       // 2249
      if (seen.indexOf(val) >= 0) return '<<already seen>>';                                                           // 2250
                                                                                                                       // 2251
      seen.push(val);                                                                                                  // 2252
    }                                                                                                                  // 2253
    return val;                                                                                                        // 2254
  });                                                                                                                  // 2255
}                                                                                                                      // 2256
                                                                                                                       // 2257
function toDebugString(obj) {                                                                                          // 2258
  if (typeof obj === 'function') {                                                                                     // 2259
    return obj.toString().replace(/ \{[\s\S]*$/, '');                                                                  // 2260
  } else if (typeof obj === 'undefined') {                                                                             // 2261
    return 'undefined';                                                                                                // 2262
  } else if (typeof obj !== 'string') {                                                                                // 2263
    return serializeObject(obj);                                                                                       // 2264
  }                                                                                                                    // 2265
  return obj;                                                                                                          // 2266
}                                                                                                                      // 2267
                                                                                                                       // 2268
/* global angularModule: true,                                                                                         // 2269
  version: true,                                                                                                       // 2270
                                                                                                                       // 2271
  $CompileProvider,                                                                                                    // 2272
                                                                                                                       // 2273
  htmlAnchorDirective,                                                                                                 // 2274
  inputDirective,                                                                                                      // 2275
  inputDirective,                                                                                                      // 2276
  formDirective,                                                                                                       // 2277
  scriptDirective,                                                                                                     // 2278
  selectDirective,                                                                                                     // 2279
  styleDirective,                                                                                                      // 2280
  optionDirective,                                                                                                     // 2281
  ngBindDirective,                                                                                                     // 2282
  ngBindHtmlDirective,                                                                                                 // 2283
  ngBindTemplateDirective,                                                                                             // 2284
  ngClassDirective,                                                                                                    // 2285
  ngClassEvenDirective,                                                                                                // 2286
  ngClassOddDirective,                                                                                                 // 2287
  ngCloakDirective,                                                                                                    // 2288
  ngControllerDirective,                                                                                               // 2289
  ngFormDirective,                                                                                                     // 2290
  ngHideDirective,                                                                                                     // 2291
  ngIfDirective,                                                                                                       // 2292
  ngIncludeDirective,                                                                                                  // 2293
  ngIncludeFillContentDirective,                                                                                       // 2294
  ngInitDirective,                                                                                                     // 2295
  ngNonBindableDirective,                                                                                              // 2296
  ngPluralizeDirective,                                                                                                // 2297
  ngRepeatDirective,                                                                                                   // 2298
  ngShowDirective,                                                                                                     // 2299
  ngStyleDirective,                                                                                                    // 2300
  ngSwitchDirective,                                                                                                   // 2301
  ngSwitchWhenDirective,                                                                                               // 2302
  ngSwitchDefaultDirective,                                                                                            // 2303
  ngOptionsDirective,                                                                                                  // 2304
  ngTranscludeDirective,                                                                                               // 2305
  ngModelDirective,                                                                                                    // 2306
  ngListDirective,                                                                                                     // 2307
  ngChangeDirective,                                                                                                   // 2308
  patternDirective,                                                                                                    // 2309
  patternDirective,                                                                                                    // 2310
  requiredDirective,                                                                                                   // 2311
  requiredDirective,                                                                                                   // 2312
  minlengthDirective,                                                                                                  // 2313
  minlengthDirective,                                                                                                  // 2314
  maxlengthDirective,                                                                                                  // 2315
  maxlengthDirective,                                                                                                  // 2316
  ngValueDirective,                                                                                                    // 2317
  ngModelOptionsDirective,                                                                                             // 2318
  ngAttributeAliasDirectives,                                                                                          // 2319
  ngEventDirectives,                                                                                                   // 2320
                                                                                                                       // 2321
  $AnchorScrollProvider,                                                                                               // 2322
  $AnimateProvider,                                                                                                    // 2323
  $CoreAnimateCssProvider,                                                                                             // 2324
  $$CoreAnimateQueueProvider,                                                                                          // 2325
  $$CoreAnimateRunnerProvider,                                                                                         // 2326
  $BrowserProvider,                                                                                                    // 2327
  $CacheFactoryProvider,                                                                                               // 2328
  $ControllerProvider,                                                                                                 // 2329
  $DocumentProvider,                                                                                                   // 2330
  $ExceptionHandlerProvider,                                                                                           // 2331
  $FilterProvider,                                                                                                     // 2332
  $$ForceReflowProvider,                                                                                               // 2333
  $InterpolateProvider,                                                                                                // 2334
  $IntervalProvider,                                                                                                   // 2335
  $$HashMapProvider,                                                                                                   // 2336
  $HttpProvider,                                                                                                       // 2337
  $HttpParamSerializerProvider,                                                                                        // 2338
  $HttpParamSerializerJQLikeProvider,                                                                                  // 2339
  $HttpBackendProvider,                                                                                                // 2340
  $LocationProvider,                                                                                                   // 2341
  $LogProvider,                                                                                                        // 2342
  $ParseProvider,                                                                                                      // 2343
  $RootScopeProvider,                                                                                                  // 2344
  $QProvider,                                                                                                          // 2345
  $$QProvider,                                                                                                         // 2346
  $$SanitizeUriProvider,                                                                                               // 2347
  $SceProvider,                                                                                                        // 2348
  $SceDelegateProvider,                                                                                                // 2349
  $SnifferProvider,                                                                                                    // 2350
  $TemplateCacheProvider,                                                                                              // 2351
  $TemplateRequestProvider,                                                                                            // 2352
  $$TestabilityProvider,                                                                                               // 2353
  $TimeoutProvider,                                                                                                    // 2354
  $$RAFProvider,                                                                                                       // 2355
  $WindowProvider,                                                                                                     // 2356
  $$jqLiteProvider,                                                                                                    // 2357
  $$CookieReaderProvider                                                                                               // 2358
*/                                                                                                                     // 2359
                                                                                                                       // 2360
                                                                                                                       // 2361
/**                                                                                                                    // 2362
 * @ngdoc object                                                                                                       // 2363
 * @name angular.version                                                                                               // 2364
 * @module ng                                                                                                          // 2365
 * @description                                                                                                        // 2366
 * An object that contains information about the current AngularJS version. This object has the                        // 2367
 * following properties:                                                                                               // 2368
 *                                                                                                                     // 2369
 * - `full` – `{string}` – Full version string, such as "0.9.18".                                                      // 2370
 * - `major` – `{number}` – Major version number, such as "0".                                                         // 2371
 * - `minor` – `{number}` – Minor version number, such as "9".                                                         // 2372
 * - `dot` – `{number}` – Dot version number, such as "18".                                                            // 2373
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".                                    // 2374
 */                                                                                                                    // 2375
var version = {                                                                                                        // 2376
  full: '1.4.5',    // all of these placeholder strings will be replaced by grunt's                                    // 2377
  major: 1,    // package task                                                                                         // 2378
  minor: 4,                                                                                                            // 2379
  dot: 5,                                                                                                              // 2380
  codeName: 'permanent-internship'                                                                                     // 2381
};                                                                                                                     // 2382
                                                                                                                       // 2383
                                                                                                                       // 2384
function publishExternalAPI(angular) {                                                                                 // 2385
  extend(angular, {                                                                                                    // 2386
    'bootstrap': bootstrap,                                                                                            // 2387
    'copy': copy,                                                                                                      // 2388
    'extend': extend,                                                                                                  // 2389
    'merge': merge,                                                                                                    // 2390
    'equals': equals,                                                                                                  // 2391
    'element': jqLite,                                                                                                 // 2392
    'forEach': forEach,                                                                                                // 2393
    'injector': createInjector,                                                                                        // 2394
    'noop': noop,                                                                                                      // 2395
    'bind': bind,                                                                                                      // 2396
    'toJson': toJson,                                                                                                  // 2397
    'fromJson': fromJson,                                                                                              // 2398
    'identity': identity,                                                                                              // 2399
    'isUndefined': isUndefined,                                                                                        // 2400
    'isDefined': isDefined,                                                                                            // 2401
    'isString': isString,                                                                                              // 2402
    'isFunction': isFunction,                                                                                          // 2403
    'isObject': isObject,                                                                                              // 2404
    'isNumber': isNumber,                                                                                              // 2405
    'isElement': isElement,                                                                                            // 2406
    'isArray': isArray,                                                                                                // 2407
    'version': version,                                                                                                // 2408
    'isDate': isDate,                                                                                                  // 2409
    'lowercase': lowercase,                                                                                            // 2410
    'uppercase': uppercase,                                                                                            // 2411
    'callbacks': {counter: 0},                                                                                         // 2412
    'getTestability': getTestability,                                                                                  // 2413
    '$$minErr': minErr,                                                                                                // 2414
    '$$csp': csp,                                                                                                      // 2415
    'reloadWithDebugInfo': reloadWithDebugInfo                                                                         // 2416
  });                                                                                                                  // 2417
                                                                                                                       // 2418
  angularModule = setupModuleLoader(window);                                                                           // 2419
                                                                                                                       // 2420
  angularModule('ng', ['ngLocale'], ['$provide',                                                                       // 2421
    function ngModule($provide) {                                                                                      // 2422
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.                                // 2423
      $provide.provider({                                                                                              // 2424
        $$sanitizeUri: $$SanitizeUriProvider                                                                           // 2425
      });                                                                                                              // 2426
      $provide.provider('$compile', $CompileProvider).                                                                 // 2427
        directive({                                                                                                    // 2428
            a: htmlAnchorDirective,                                                                                    // 2429
            input: inputDirective,                                                                                     // 2430
            textarea: inputDirective,                                                                                  // 2431
            form: formDirective,                                                                                       // 2432
            script: scriptDirective,                                                                                   // 2433
            select: selectDirective,                                                                                   // 2434
            style: styleDirective,                                                                                     // 2435
            option: optionDirective,                                                                                   // 2436
            ngBind: ngBindDirective,                                                                                   // 2437
            ngBindHtml: ngBindHtmlDirective,                                                                           // 2438
            ngBindTemplate: ngBindTemplateDirective,                                                                   // 2439
            ngClass: ngClassDirective,                                                                                 // 2440
            ngClassEven: ngClassEvenDirective,                                                                         // 2441
            ngClassOdd: ngClassOddDirective,                                                                           // 2442
            ngCloak: ngCloakDirective,                                                                                 // 2443
            ngController: ngControllerDirective,                                                                       // 2444
            ngForm: ngFormDirective,                                                                                   // 2445
            ngHide: ngHideDirective,                                                                                   // 2446
            ngIf: ngIfDirective,                                                                                       // 2447
            ngInclude: ngIncludeDirective,                                                                             // 2448
            ngInit: ngInitDirective,                                                                                   // 2449
            ngNonBindable: ngNonBindableDirective,                                                                     // 2450
            ngPluralize: ngPluralizeDirective,                                                                         // 2451
            ngRepeat: ngRepeatDirective,                                                                               // 2452
            ngShow: ngShowDirective,                                                                                   // 2453
            ngStyle: ngStyleDirective,                                                                                 // 2454
            ngSwitch: ngSwitchDirective,                                                                               // 2455
            ngSwitchWhen: ngSwitchWhenDirective,                                                                       // 2456
            ngSwitchDefault: ngSwitchDefaultDirective,                                                                 // 2457
            ngOptions: ngOptionsDirective,                                                                             // 2458
            ngTransclude: ngTranscludeDirective,                                                                       // 2459
            ngModel: ngModelDirective,                                                                                 // 2460
            ngList: ngListDirective,                                                                                   // 2461
            ngChange: ngChangeDirective,                                                                               // 2462
            pattern: patternDirective,                                                                                 // 2463
            ngPattern: patternDirective,                                                                               // 2464
            required: requiredDirective,                                                                               // 2465
            ngRequired: requiredDirective,                                                                             // 2466
            minlength: minlengthDirective,                                                                             // 2467
            ngMinlength: minlengthDirective,                                                                           // 2468
            maxlength: maxlengthDirective,                                                                             // 2469
            ngMaxlength: maxlengthDirective,                                                                           // 2470
            ngValue: ngValueDirective,                                                                                 // 2471
            ngModelOptions: ngModelOptionsDirective                                                                    // 2472
        }).                                                                                                            // 2473
        directive({                                                                                                    // 2474
          ngInclude: ngIncludeFillContentDirective                                                                     // 2475
        }).                                                                                                            // 2476
        directive(ngAttributeAliasDirectives).                                                                         // 2477
        directive(ngEventDirectives);                                                                                  // 2478
      $provide.provider({                                                                                              // 2479
        $anchorScroll: $AnchorScrollProvider,                                                                          // 2480
        $animate: $AnimateProvider,                                                                                    // 2481
        $animateCss: $CoreAnimateCssProvider,                                                                          // 2482
        $$animateQueue: $$CoreAnimateQueueProvider,                                                                    // 2483
        $$AnimateRunner: $$CoreAnimateRunnerProvider,                                                                  // 2484
        $browser: $BrowserProvider,                                                                                    // 2485
        $cacheFactory: $CacheFactoryProvider,                                                                          // 2486
        $controller: $ControllerProvider,                                                                              // 2487
        $document: $DocumentProvider,                                                                                  // 2488
        $exceptionHandler: $ExceptionHandlerProvider,                                                                  // 2489
        $filter: $FilterProvider,                                                                                      // 2490
        $$forceReflow: $$ForceReflowProvider,                                                                          // 2491
        $interpolate: $InterpolateProvider,                                                                            // 2492
        $interval: $IntervalProvider,                                                                                  // 2493
        $http: $HttpProvider,                                                                                          // 2494
        $httpParamSerializer: $HttpParamSerializerProvider,                                                            // 2495
        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,                                                // 2496
        $httpBackend: $HttpBackendProvider,                                                                            // 2497
        $location: $LocationProvider,                                                                                  // 2498
        $log: $LogProvider,                                                                                            // 2499
        $parse: $ParseProvider,                                                                                        // 2500
        $rootScope: $RootScopeProvider,                                                                                // 2501
        $q: $QProvider,                                                                                                // 2502
        $$q: $$QProvider,                                                                                              // 2503
        $sce: $SceProvider,                                                                                            // 2504
        $sceDelegate: $SceDelegateProvider,                                                                            // 2505
        $sniffer: $SnifferProvider,                                                                                    // 2506
        $templateCache: $TemplateCacheProvider,                                                                        // 2507
        $templateRequest: $TemplateRequestProvider,                                                                    // 2508
        $$testability: $$TestabilityProvider,                                                                          // 2509
        $timeout: $TimeoutProvider,                                                                                    // 2510
        $window: $WindowProvider,                                                                                      // 2511
        $$rAF: $$RAFProvider,                                                                                          // 2512
        $$jqLite: $$jqLiteProvider,                                                                                    // 2513
        $$HashMap: $$HashMapProvider,                                                                                  // 2514
        $$cookieReader: $$CookieReaderProvider                                                                         // 2515
      });                                                                                                              // 2516
    }                                                                                                                  // 2517
  ]);                                                                                                                  // 2518
}                                                                                                                      // 2519
                                                                                                                       // 2520
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 2521
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 2522
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 2523
 *          An approval from 2 Core members with history of modifying      *                                           // 2524
 *                         this file is required.                          *                                           // 2525
 *                                                                         *                                           // 2526
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 2527
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 2528
 *     Or gives undesired access to variables likes document or window?    *                                           // 2529
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 2530
                                                                                                                       // 2531
/* global JQLitePrototype: true,                                                                                       // 2532
  addEventListenerFn: true,                                                                                            // 2533
  removeEventListenerFn: true,                                                                                         // 2534
  BOOLEAN_ATTR: true,                                                                                                  // 2535
  ALIASED_ATTR: true,                                                                                                  // 2536
*/                                                                                                                     // 2537
                                                                                                                       // 2538
//////////////////////////////////                                                                                     // 2539
//JQLite                                                                                                               // 2540
//////////////////////////////////                                                                                     // 2541
                                                                                                                       // 2542
/**                                                                                                                    // 2543
 * @ngdoc function                                                                                                     // 2544
 * @name angular.element                                                                                               // 2545
 * @module ng                                                                                                          // 2546
 * @kind function                                                                                                      // 2547
 *                                                                                                                     // 2548
 * @description                                                                                                        // 2549
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.                                    // 2550
 *                                                                                                                     // 2551
 * If jQuery is available, `angular.element` is an alias for the                                                       // 2552
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`                     // 2553
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."                                 // 2554
 *                                                                                                                     // 2555
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows                      // 2556
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most                // 2557
 * commonly needed functionality with the goal of having a very small footprint.</div>                                 // 2558
 *                                                                                                                     // 2559
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.                                           // 2560
 *                                                                                                                     // 2561
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or                    // 2562
 * jqLite; they are never raw DOM references.</div>                                                                    // 2563
 *                                                                                                                     // 2564
 * ## Angular's jqLite                                                                                                 // 2565
 * jqLite provides only the following jQuery methods:                                                                  // 2566
 *                                                                                                                     // 2567
 * - [`addClass()`](http://api.jquery.com/addClass/)                                                                   // 2568
 * - [`after()`](http://api.jquery.com/after/)                                                                         // 2569
 * - [`append()`](http://api.jquery.com/append/)                                                                       // 2570
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters                                // 2571
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData                     // 2572
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors                                      // 2573
 * - [`clone()`](http://api.jquery.com/clone/)                                                                         // 2574
 * - [`contents()`](http://api.jquery.com/contents/)                                                                   // 2575
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)                                                                           // 2577
 * - [`detach()`](http://api.jquery.com/detach/)                                                                       // 2578
 * - [`empty()`](http://api.jquery.com/empty/)                                                                         // 2579
 * - [`eq()`](http://api.jquery.com/eq/)                                                                               // 2580
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name                                          // 2581
 * - [`hasClass()`](http://api.jquery.com/hasClass/)                                                                   // 2582
 * - [`html()`](http://api.jquery.com/html/)                                                                           // 2583
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors                                              // 2584
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData                         // 2585
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter       // 2586
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors                                  // 2587
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors                                          // 2588
 * - [`prepend()`](http://api.jquery.com/prepend/)                                                                     // 2589
 * - [`prop()`](http://api.jquery.com/prop/)                                                                           // 2590
 * - [`ready()`](http://api.jquery.com/ready/)                                                                         // 2591
 * - [`remove()`](http://api.jquery.com/remove/)                                                                       // 2592
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)                                                               // 2593
 * - [`removeClass()`](http://api.jquery.com/removeClass/)                                                             // 2594
 * - [`removeData()`](http://api.jquery.com/removeData/)                                                               // 2595
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)                                                             // 2596
 * - [`text()`](http://api.jquery.com/text/)                                                                           // 2597
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)                                                             // 2598
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.            // 2599
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces or event object as parameter            // 2600
 * - [`val()`](http://api.jquery.com/val/)                                                                             // 2601
 * - [`wrap()`](http://api.jquery.com/wrap/)                                                                           // 2602
 *                                                                                                                     // 2603
 * ## jQuery/jqLite Extras                                                                                             // 2604
 * Angular also provides the following additional methods and events to both jQuery and jqLite:                        // 2605
 *                                                                                                                     // 2606
 * ### Events                                                                                                          // 2607
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event                   // 2608
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM                  // 2609
 *    element before it is removed.                                                                                    // 2610
 *                                                                                                                     // 2611
 * ### Methods                                                                                                         // 2612
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default                    // 2613
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as                       // 2614
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.                          // 2615
 *   `'ngModel'`).                                                                                                     // 2616
 * - `injector()` - retrieves the injector of the current element or its parent.                                       // 2617
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current                                        // 2618
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to                       // 2619
 *   be enabled.                                                                                                       // 2620
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the      // 2621
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate  // 2622
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.                           // 2623
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.                                  // 2624
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top                      // 2625
 *   parent element is reached.                                                                                        // 2626
 *                                                                                                                     // 2627
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.                             // 2628
 * @returns {Object} jQuery object.                                                                                    // 2629
 */                                                                                                                    // 2630
                                                                                                                       // 2631
JQLite.expando = 'ng339';                                                                                              // 2632
                                                                                                                       // 2633
var jqCache = JQLite.cache = {},                                                                                       // 2634
    jqId = 1,                                                                                                          // 2635
    addEventListenerFn = function(element, type, fn) {                                                                 // 2636
      element.addEventListener(type, fn, false);                                                                       // 2637
    },                                                                                                                 // 2638
    removeEventListenerFn = function(element, type, fn) {                                                              // 2639
      element.removeEventListener(type, fn, false);                                                                    // 2640
    };                                                                                                                 // 2641
                                                                                                                       // 2642
/*                                                                                                                     // 2643
 * !!! This is an undocumented "private" function !!!                                                                  // 2644
 */                                                                                                                    // 2645
JQLite._data = function(node) {                                                                                        // 2646
  //jQuery always returns an object on cache miss                                                                      // 2647
  return this.cache[node[this.expando]] || {};                                                                         // 2648
};                                                                                                                     // 2649
                                                                                                                       // 2650
function jqNextId() { return ++jqId; }                                                                                 // 2651
                                                                                                                       // 2652
                                                                                                                       // 2653
var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;                                                                          // 2654
var MOZ_HACK_REGEXP = /^moz([A-Z])/;                                                                                   // 2655
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};                                               // 2656
var jqLiteMinErr = minErr('jqLite');                                                                                   // 2657
                                                                                                                       // 2658
/**                                                                                                                    // 2659
 * Converts snake_case to camelCase.                                                                                   // 2660
 * Also there is special case for Moz prefix starting with upper case letter.                                          // 2661
 * @param name Name to normalize                                                                                       // 2662
 */                                                                                                                    // 2663
function camelCase(name) {                                                                                             // 2664
  return name.                                                                                                         // 2665
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {                                             // 2666
      return offset ? letter.toUpperCase() : letter;                                                                   // 2667
    }).                                                                                                                // 2668
    replace(MOZ_HACK_REGEXP, 'Moz$1');                                                                                 // 2669
}                                                                                                                      // 2670
                                                                                                                       // 2671
var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;                                                                  // 2672
var HTML_REGEXP = /<|&#?\w+;/;                                                                                         // 2673
var TAG_NAME_REGEXP = /<([\w:]+)/;                                                                                     // 2674
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;                      // 2675
                                                                                                                       // 2676
var wrapMap = {                                                                                                        // 2677
  'option': [1, '<select multiple="multiple">', '</select>'],                                                          // 2678
                                                                                                                       // 2679
  'thead': [1, '<table>', '</table>'],                                                                                 // 2680
  'col': [2, '<table><colgroup>', '</colgroup></table>'],                                                              // 2681
  'tr': [2, '<table><tbody>', '</tbody></table>'],                                                                     // 2682
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],                                                            // 2683
  '_default': [0, "", ""]                                                                                              // 2684
};                                                                                                                     // 2685
                                                                                                                       // 2686
wrapMap.optgroup = wrapMap.option;                                                                                     // 2687
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                    // 2688
wrapMap.th = wrapMap.td;                                                                                               // 2689
                                                                                                                       // 2690
                                                                                                                       // 2691
function jqLiteIsTextNode(html) {                                                                                      // 2692
  return !HTML_REGEXP.test(html);                                                                                      // 2693
}                                                                                                                      // 2694
                                                                                                                       // 2695
function jqLiteAcceptsData(node) {                                                                                     // 2696
  // The window object can accept data but has no nodeType                                                             // 2697
  // Otherwise we are only interested in elements (1) and documents (9)                                                // 2698
  var nodeType = node.nodeType;                                                                                        // 2699
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;                               // 2700
}                                                                                                                      // 2701
                                                                                                                       // 2702
function jqLiteHasData(node) {                                                                                         // 2703
  for (var key in jqCache[node.ng339]) {                                                                               // 2704
    return true;                                                                                                       // 2705
  }                                                                                                                    // 2706
  return false;                                                                                                        // 2707
}                                                                                                                      // 2708
                                                                                                                       // 2709
function jqLiteBuildFragment(html, context) {                                                                          // 2710
  var tmp, tag, wrap,                                                                                                  // 2711
      fragment = context.createDocumentFragment(),                                                                     // 2712
      nodes = [], i;                                                                                                   // 2713
                                                                                                                       // 2714
  if (jqLiteIsTextNode(html)) {                                                                                        // 2715
    // Convert non-html into a text node                                                                               // 2716
    nodes.push(context.createTextNode(html));                                                                          // 2717
  } else {                                                                                                             // 2718
    // Convert html into DOM nodes                                                                                     // 2719
    tmp = tmp || fragment.appendChild(context.createElement("div"));                                                   // 2720
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();                                                   // 2721
    wrap = wrapMap[tag] || wrapMap._default;                                                                           // 2722
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];                                   // 2723
                                                                                                                       // 2724
    // Descend through wrappers to the right content                                                                   // 2725
    i = wrap[0];                                                                                                       // 2726
    while (i--) {                                                                                                      // 2727
      tmp = tmp.lastChild;                                                                                             // 2728
    }                                                                                                                  // 2729
                                                                                                                       // 2730
    nodes = concat(nodes, tmp.childNodes);                                                                             // 2731
                                                                                                                       // 2732
    tmp = fragment.firstChild;                                                                                         // 2733
    tmp.textContent = "";                                                                                              // 2734
  }                                                                                                                    // 2735
                                                                                                                       // 2736
  // Remove wrapper from fragment                                                                                      // 2737
  fragment.textContent = "";                                                                                           // 2738
  fragment.innerHTML = ""; // Clear inner HTML                                                                         // 2739
  forEach(nodes, function(node) {                                                                                      // 2740
    fragment.appendChild(node);                                                                                        // 2741
  });                                                                                                                  // 2742
                                                                                                                       // 2743
  return fragment;                                                                                                     // 2744
}                                                                                                                      // 2745
                                                                                                                       // 2746
function jqLiteParseHTML(html, context) {                                                                              // 2747
  context = context || document;                                                                                       // 2748
  var parsed;                                                                                                          // 2749
                                                                                                                       // 2750
  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {                                                                       // 2751
    return [context.createElement(parsed[1])];                                                                         // 2752
  }                                                                                                                    // 2753
                                                                                                                       // 2754
  if ((parsed = jqLiteBuildFragment(html, context))) {                                                                 // 2755
    return parsed.childNodes;                                                                                          // 2756
  }                                                                                                                    // 2757
                                                                                                                       // 2758
  return [];                                                                                                           // 2759
}                                                                                                                      // 2760
                                                                                                                       // 2761
/////////////////////////////////////////////                                                                          // 2762
function JQLite(element) {                                                                                             // 2763
  if (element instanceof JQLite) {                                                                                     // 2764
    return element;                                                                                                    // 2765
  }                                                                                                                    // 2766
                                                                                                                       // 2767
  var argIsString;                                                                                                     // 2768
                                                                                                                       // 2769
  if (isString(element)) {                                                                                             // 2770
    element = trim(element);                                                                                           // 2771
    argIsString = true;                                                                                                // 2772
  }                                                                                                                    // 2773
  if (!(this instanceof JQLite)) {                                                                                     // 2774
    if (argIsString && element.charAt(0) != '<') {                                                                     // 2775
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }                                                                                                                  // 2777
    return new JQLite(element);                                                                                        // 2778
  }                                                                                                                    // 2779
                                                                                                                       // 2780
  if (argIsString) {                                                                                                   // 2781
    jqLiteAddNodes(this, jqLiteParseHTML(element));                                                                    // 2782
  } else {                                                                                                             // 2783
    jqLiteAddNodes(this, element);                                                                                     // 2784
  }                                                                                                                    // 2785
}                                                                                                                      // 2786
                                                                                                                       // 2787
function jqLiteClone(element) {                                                                                        // 2788
  return element.cloneNode(true);                                                                                      // 2789
}                                                                                                                      // 2790
                                                                                                                       // 2791
function jqLiteDealoc(element, onlyDescendants) {                                                                      // 2792
  if (!onlyDescendants) jqLiteRemoveData(element);                                                                     // 2793
                                                                                                                       // 2794
  if (element.querySelectorAll) {                                                                                      // 2795
    var descendants = element.querySelectorAll('*');                                                                   // 2796
    for (var i = 0, l = descendants.length; i < l; i++) {                                                              // 2797
      jqLiteRemoveData(descendants[i]);                                                                                // 2798
    }                                                                                                                  // 2799
  }                                                                                                                    // 2800
}                                                                                                                      // 2801
                                                                                                                       // 2802
function jqLiteOff(element, type, fn, unsupported) {                                                                   // 2803
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');  // 2804
                                                                                                                       // 2805
  var expandoStore = jqLiteExpandoStore(element);                                                                      // 2806
  var events = expandoStore && expandoStore.events;                                                                    // 2807
  var handle = expandoStore && expandoStore.handle;                                                                    // 2808
                                                                                                                       // 2809
  if (!handle) return; //no listeners registered                                                                       // 2810
                                                                                                                       // 2811
  if (!type) {                                                                                                         // 2812
    for (type in events) {                                                                                             // 2813
      if (type !== '$destroy') {                                                                                       // 2814
        removeEventListenerFn(element, type, handle);                                                                  // 2815
      }                                                                                                                // 2816
      delete events[type];                                                                                             // 2817
    }                                                                                                                  // 2818
  } else {                                                                                                             // 2819
    forEach(type.split(' '), function(type) {                                                                          // 2820
      if (isDefined(fn)) {                                                                                             // 2821
        var listenerFns = events[type];                                                                                // 2822
        arrayRemove(listenerFns || [], fn);                                                                            // 2823
        if (listenerFns && listenerFns.length > 0) {                                                                   // 2824
          return;                                                                                                      // 2825
        }                                                                                                              // 2826
      }                                                                                                                // 2827
                                                                                                                       // 2828
      removeEventListenerFn(element, type, handle);                                                                    // 2829
      delete events[type];                                                                                             // 2830
    });                                                                                                                // 2831
  }                                                                                                                    // 2832
}                                                                                                                      // 2833
                                                                                                                       // 2834
function jqLiteRemoveData(element, name) {                                                                             // 2835
  var expandoId = element.ng339;                                                                                       // 2836
  var expandoStore = expandoId && jqCache[expandoId];                                                                  // 2837
                                                                                                                       // 2838
  if (expandoStore) {                                                                                                  // 2839
    if (name) {                                                                                                        // 2840
      delete expandoStore.data[name];                                                                                  // 2841
      return;                                                                                                          // 2842
    }                                                                                                                  // 2843
                                                                                                                       // 2844
    if (expandoStore.handle) {                                                                                         // 2845
      if (expandoStore.events.$destroy) {                                                                              // 2846
        expandoStore.handle({}, '$destroy');                                                                           // 2847
      }                                                                                                                // 2848
      jqLiteOff(element);                                                                                              // 2849
    }                                                                                                                  // 2850
    delete jqCache[expandoId];                                                                                         // 2851
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it                               // 2852
  }                                                                                                                    // 2853
}                                                                                                                      // 2854
                                                                                                                       // 2855
                                                                                                                       // 2856
function jqLiteExpandoStore(element, createIfNecessary) {                                                              // 2857
  var expandoId = element.ng339,                                                                                       // 2858
      expandoStore = expandoId && jqCache[expandoId];                                                                  // 2859
                                                                                                                       // 2860
  if (createIfNecessary && !expandoStore) {                                                                            // 2861
    element.ng339 = expandoId = jqNextId();                                                                            // 2862
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};                                     // 2863
  }                                                                                                                    // 2864
                                                                                                                       // 2865
  return expandoStore;                                                                                                 // 2866
}                                                                                                                      // 2867
                                                                                                                       // 2868
                                                                                                                       // 2869
function jqLiteData(element, key, value) {                                                                             // 2870
  if (jqLiteAcceptsData(element)) {                                                                                    // 2871
                                                                                                                       // 2872
    var isSimpleSetter = isDefined(value);                                                                             // 2873
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);                                                     // 2874
    var massGetter = !key;                                                                                             // 2875
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);                                                   // 2876
    var data = expandoStore && expandoStore.data;                                                                      // 2877
                                                                                                                       // 2878
    if (isSimpleSetter) { // data('key', value)                                                                        // 2879
      data[key] = value;                                                                                               // 2880
    } else {                                                                                                           // 2881
      if (massGetter) {  // data()                                                                                     // 2882
        return data;                                                                                                   // 2883
      } else {                                                                                                         // 2884
        if (isSimpleGetter) { // data('key')                                                                           // 2885
          // don't force creation of expandoStore if it doesn't exist yet                                              // 2886
          return data && data[key];                                                                                    // 2887
        } else { // mass-setter: data({key1: val1, key2: val2})                                                        // 2888
          extend(data, key);                                                                                           // 2889
        }                                                                                                              // 2890
      }                                                                                                                // 2891
    }                                                                                                                  // 2892
  }                                                                                                                    // 2893
}                                                                                                                      // 2894
                                                                                                                       // 2895
function jqLiteHasClass(element, selector) {                                                                           // 2896
  if (!element.getAttribute) return false;                                                                             // 2897
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").                                 // 2898
      indexOf(" " + selector + " ") > -1);                                                                             // 2899
}                                                                                                                      // 2900
                                                                                                                       // 2901
function jqLiteRemoveClass(element, cssClasses) {                                                                      // 2902
  if (cssClasses && element.setAttribute) {                                                                            // 2903
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2904
      element.setAttribute('class', trim(                                                                              // 2905
          (" " + (element.getAttribute('class') || '') + " ")                                                          // 2906
          .replace(/[\n\t]/g, " ")                                                                                     // 2907
          .replace(" " + trim(cssClass) + " ", " "))                                                                   // 2908
      );                                                                                                               // 2909
    });                                                                                                                // 2910
  }                                                                                                                    // 2911
}                                                                                                                      // 2912
                                                                                                                       // 2913
function jqLiteAddClass(element, cssClasses) {                                                                         // 2914
  if (cssClasses && element.setAttribute) {                                                                            // 2915
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')                                          // 2916
                            .replace(/[\n\t]/g, " ");                                                                  // 2917
                                                                                                                       // 2918
    forEach(cssClasses.split(' '), function(cssClass) {                                                                // 2919
      cssClass = trim(cssClass);                                                                                       // 2920
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {                                                      // 2921
        existingClasses += cssClass + ' ';                                                                             // 2922
      }                                                                                                                // 2923
    });                                                                                                                // 2924
                                                                                                                       // 2925
    element.setAttribute('class', trim(existingClasses));                                                              // 2926
  }                                                                                                                    // 2927
}                                                                                                                      // 2928
                                                                                                                       // 2929
                                                                                                                       // 2930
function jqLiteAddNodes(root, elements) {                                                                              // 2931
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.                                                   // 2932
                                                                                                                       // 2933
  if (elements) {                                                                                                      // 2934
                                                                                                                       // 2935
    // if a Node (the most common case)                                                                                // 2936
    if (elements.nodeType) {                                                                                           // 2937
      root[root.length++] = elements;                                                                                  // 2938
    } else {                                                                                                           // 2939
      var length = elements.length;                                                                                    // 2940
                                                                                                                       // 2941
      // if an Array or NodeList and not a Window                                                                      // 2942
      if (typeof length === 'number' && elements.window !== elements) {                                                // 2943
        if (length) {                                                                                                  // 2944
          for (var i = 0; i < length; i++) {                                                                           // 2945
            root[root.length++] = elements[i];                                                                         // 2946
          }                                                                                                            // 2947
        }                                                                                                              // 2948
      } else {                                                                                                         // 2949
        root[root.length++] = elements;                                                                                // 2950
      }                                                                                                                // 2951
    }                                                                                                                  // 2952
  }                                                                                                                    // 2953
}                                                                                                                      // 2954
                                                                                                                       // 2955
                                                                                                                       // 2956
function jqLiteController(element, name) {                                                                             // 2957
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');                                  // 2958
}                                                                                                                      // 2959
                                                                                                                       // 2960
function jqLiteInheritedData(element, name, value) {                                                                   // 2961
  // if element is the document object work with the html element instead                                              // 2962
  // this makes $(document).scope() possible                                                                           // 2963
  if (element.nodeType == NODE_TYPE_DOCUMENT) {                                                                        // 2964
    element = element.documentElement;                                                                                 // 2965
  }                                                                                                                    // 2966
  var names = isArray(name) ? name : [name];                                                                           // 2967
                                                                                                                       // 2968
  while (element) {                                                                                                    // 2969
    for (var i = 0, ii = names.length; i < ii; i++) {                                                                  // 2970
      if ((value = jqLite.data(element, names[i])) !== undefined) return value;                                        // 2971
    }                                                                                                                  // 2972
                                                                                                                       // 2973
    // If dealing with a document fragment node with a host element, and no parent, use the host                       // 2974
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM                     // 2975
    // to lookup parent controllers.                                                                                   // 2976
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);                // 2977
  }                                                                                                                    // 2978
}                                                                                                                      // 2979
                                                                                                                       // 2980
function jqLiteEmpty(element) {                                                                                        // 2981
  jqLiteDealoc(element, true);                                                                                         // 2982
  while (element.firstChild) {                                                                                         // 2983
    element.removeChild(element.firstChild);                                                                           // 2984
  }                                                                                                                    // 2985
}                                                                                                                      // 2986
                                                                                                                       // 2987
function jqLiteRemove(element, keepData) {                                                                             // 2988
  if (!keepData) jqLiteDealoc(element);                                                                                // 2989
  var parent = element.parentNode;                                                                                     // 2990
  if (parent) parent.removeChild(element);                                                                             // 2991
}                                                                                                                      // 2992
                                                                                                                       // 2993
                                                                                                                       // 2994
function jqLiteDocumentLoaded(action, win) {                                                                           // 2995
  win = win || window;                                                                                                 // 2996
  if (win.document.readyState === 'complete') {                                                                        // 2997
    // Force the action to be run async for consistent behaviour                                                       // 2998
    // from the action's point of view                                                                                 // 2999
    // i.e. it will definitely not be in a $apply                                                                      // 3000
    win.setTimeout(action);                                                                                            // 3001
  } else {                                                                                                             // 3002
    // No need to unbind this handler as load is only ever called once                                                 // 3003
    jqLite(win).on('load', action);                                                                                    // 3004
  }                                                                                                                    // 3005
}                                                                                                                      // 3006
                                                                                                                       // 3007
//////////////////////////////////////////                                                                             // 3008
// Functions which are declared directly.                                                                              // 3009
//////////////////////////////////////////                                                                             // 3010
var JQLitePrototype = JQLite.prototype = {                                                                             // 3011
  ready: function(fn) {                                                                                                // 3012
    var fired = false;                                                                                                 // 3013
                                                                                                                       // 3014
    function trigger() {                                                                                               // 3015
      if (fired) return;                                                                                               // 3016
      fired = true;                                                                                                    // 3017
      fn();                                                                                                            // 3018
    }                                                                                                                  // 3019
                                                                                                                       // 3020
    // check if document is already loaded                                                                             // 3021
    if (document.readyState === 'complete') {                                                                          // 3022
      setTimeout(trigger);                                                                                             // 3023
    } else {                                                                                                           // 3024
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9                                       // 3025
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.                         // 3026
      // jshint -W064                                                                                                  // 3027
      JQLite(window).on('load', trigger); // fallback to window.onload for others                                      // 3028
      // jshint +W064                                                                                                  // 3029
    }                                                                                                                  // 3030
  },                                                                                                                   // 3031
  toString: function() {                                                                                               // 3032
    var value = [];                                                                                                    // 3033
    forEach(this, function(e) { value.push('' + e);});                                                                 // 3034
    return '[' + value.join(', ') + ']';                                                                               // 3035
  },                                                                                                                   // 3036
                                                                                                                       // 3037
  eq: function(index) {                                                                                                // 3038
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);                                   // 3039
  },                                                                                                                   // 3040
                                                                                                                       // 3041
  length: 0,                                                                                                           // 3042
  push: push,                                                                                                          // 3043
  sort: [].sort,                                                                                                       // 3044
  splice: [].splice                                                                                                    // 3045
};                                                                                                                     // 3046
                                                                                                                       // 3047
//////////////////////////////////////////                                                                             // 3048
// Functions iterating getter/setters.                                                                                 // 3049
// these functions return self on setter and                                                                           // 3050
// value on get.                                                                                                       // 3051
//////////////////////////////////////////                                                                             // 3052
var BOOLEAN_ATTR = {};                                                                                                 // 3053
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {                      // 3054
  BOOLEAN_ATTR[lowercase(value)] = value;                                                                              // 3055
});                                                                                                                    // 3056
var BOOLEAN_ELEMENTS = {};                                                                                             // 3057
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {                               // 3058
  BOOLEAN_ELEMENTS[value] = true;                                                                                      // 3059
});                                                                                                                    // 3060
var ALIASED_ATTR = {                                                                                                   // 3061
  'ngMinlength': 'minlength',                                                                                          // 3062
  'ngMaxlength': 'maxlength',                                                                                          // 3063
  'ngMin': 'min',                                                                                                      // 3064
  'ngMax': 'max',                                                                                                      // 3065
  'ngPattern': 'pattern'                                                                                               // 3066
};                                                                                                                     // 3067
                                                                                                                       // 3068
function getBooleanAttrName(element, name) {                                                                           // 3069
  // check dom last since we will most likely fail on name                                                             // 3070
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];                                                                  // 3071
                                                                                                                       // 3072
  // booleanAttr is here twice to minimize DOM access                                                                  // 3073
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;                                           // 3074
}                                                                                                                      // 3075
                                                                                                                       // 3076
function getAliasedAttrName(element, name) {                                                                           // 3077
  var nodeName = element.nodeName;                                                                                     // 3078
  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];                                      // 3079
}                                                                                                                      // 3080
                                                                                                                       // 3081
forEach({                                                                                                              // 3082
  data: jqLiteData,                                                                                                    // 3083
  removeData: jqLiteRemoveData,                                                                                        // 3084
  hasData: jqLiteHasData                                                                                               // 3085
}, function(fn, name) {                                                                                                // 3086
  JQLite[name] = fn;                                                                                                   // 3087
});                                                                                                                    // 3088
                                                                                                                       // 3089
forEach({                                                                                                              // 3090
  data: jqLiteData,                                                                                                    // 3091
  inheritedData: jqLiteInheritedData,                                                                                  // 3092
                                                                                                                       // 3093
  scope: function(element) {                                                                                           // 3094
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3095
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },                                                                                                                   // 3097
                                                                                                                       // 3098
  isolateScope: function(element) {                                                                                    // 3099
    // Can't use jqLiteData here directly so we stay compatible with jQuery!                                           // 3100
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');                   // 3101
  },                                                                                                                   // 3102
                                                                                                                       // 3103
  controller: jqLiteController,                                                                                        // 3104
                                                                                                                       // 3105
  injector: function(element) {                                                                                        // 3106
    return jqLiteInheritedData(element, '$injector');                                                                  // 3107
  },                                                                                                                   // 3108
                                                                                                                       // 3109
  removeAttr: function(element, name) {                                                                                // 3110
    element.removeAttribute(name);                                                                                     // 3111
  },                                                                                                                   // 3112
                                                                                                                       // 3113
  hasClass: jqLiteHasClass,                                                                                            // 3114
                                                                                                                       // 3115
  css: function(element, name, value) {                                                                                // 3116
    name = camelCase(name);                                                                                            // 3117
                                                                                                                       // 3118
    if (isDefined(value)) {                                                                                            // 3119
      element.style[name] = value;                                                                                     // 3120
    } else {                                                                                                           // 3121
      return element.style[name];                                                                                      // 3122
    }                                                                                                                  // 3123
  },                                                                                                                   // 3124
                                                                                                                       // 3125
  attr: function(element, name, value) {                                                                               // 3126
    var nodeType = element.nodeType;                                                                                   // 3127
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {           // 3128
      return;                                                                                                          // 3129
    }                                                                                                                  // 3130
    var lowercasedName = lowercase(name);                                                                              // 3131
    if (BOOLEAN_ATTR[lowercasedName]) {                                                                                // 3132
      if (isDefined(value)) {                                                                                          // 3133
        if (!!value) {                                                                                                 // 3134
          element[name] = true;                                                                                        // 3135
          element.setAttribute(name, lowercasedName);                                                                  // 3136
        } else {                                                                                                       // 3137
          element[name] = false;                                                                                       // 3138
          element.removeAttribute(lowercasedName);                                                                     // 3139
        }                                                                                                              // 3140
      } else {                                                                                                         // 3141
        return (element[name] ||                                                                                       // 3142
                 (element.attributes.getNamedItem(name) || noop).specified)                                            // 3143
               ? lowercasedName                                                                                        // 3144
               : undefined;                                                                                            // 3145
      }                                                                                                                // 3146
    } else if (isDefined(value)) {                                                                                     // 3147
      element.setAttribute(name, value);                                                                               // 3148
    } else if (element.getAttribute) {                                                                                 // 3149
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code                            // 3150
      // some elements (e.g. Document) don't have get attribute, so return undefined                                   // 3151
      var ret = element.getAttribute(name, 2);                                                                         // 3152
      // normalize non-existing attributes to undefined (as jQuery)                                                    // 3153
      return ret === null ? undefined : ret;                                                                           // 3154
    }                                                                                                                  // 3155
  },                                                                                                                   // 3156
                                                                                                                       // 3157
  prop: function(element, name, value) {                                                                               // 3158
    if (isDefined(value)) {                                                                                            // 3159
      element[name] = value;                                                                                           // 3160
    } else {                                                                                                           // 3161
      return element[name];                                                                                            // 3162
    }                                                                                                                  // 3163
  },                                                                                                                   // 3164
                                                                                                                       // 3165
  text: (function() {                                                                                                  // 3166
    getText.$dv = '';                                                                                                  // 3167
    return getText;                                                                                                    // 3168
                                                                                                                       // 3169
    function getText(element, value) {                                                                                 // 3170
      if (isUndefined(value)) {                                                                                        // 3171
        var nodeType = element.nodeType;                                                                               // 3172
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';             // 3173
      }                                                                                                                // 3174
      element.textContent = value;                                                                                     // 3175
    }                                                                                                                  // 3176
  })(),                                                                                                                // 3177
                                                                                                                       // 3178
  val: function(element, value) {                                                                                      // 3179
    if (isUndefined(value)) {                                                                                          // 3180
      if (element.multiple && nodeName_(element) === 'select') {                                                       // 3181
        var result = [];                                                                                               // 3182
        forEach(element.options, function(option) {                                                                    // 3183
          if (option.selected) {                                                                                       // 3184
            result.push(option.value || option.text);                                                                  // 3185
          }                                                                                                            // 3186
        });                                                                                                            // 3187
        return result.length === 0 ? null : result;                                                                    // 3188
      }                                                                                                                // 3189
      return element.value;                                                                                            // 3190
    }                                                                                                                  // 3191
    element.value = value;                                                                                             // 3192
  },                                                                                                                   // 3193
                                                                                                                       // 3194
  html: function(element, value) {                                                                                     // 3195
    if (isUndefined(value)) {                                                                                          // 3196
      return element.innerHTML;                                                                                        // 3197
    }                                                                                                                  // 3198
    jqLiteDealoc(element, true);                                                                                       // 3199
    element.innerHTML = value;                                                                                         // 3200
  },                                                                                                                   // 3201
                                                                                                                       // 3202
  empty: jqLiteEmpty                                                                                                   // 3203
}, function(fn, name) {                                                                                                // 3204
  /**                                                                                                                  // 3205
   * Properties: writes return selection, reads return first value                                                     // 3206
   */                                                                                                                  // 3207
  JQLite.prototype[name] = function(arg1, arg2) {                                                                      // 3208
    var i, key;                                                                                                        // 3209
    var nodeCount = this.length;                                                                                       // 3210
                                                                                                                       // 3211
    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it                   // 3212
    // in a way that survives minification.                                                                            // 3213
    // jqLiteEmpty takes no arguments but is a setter.                                                                 // 3214
    if (fn !== jqLiteEmpty &&                                                                                          // 3215
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {      // 3216
      if (isObject(arg1)) {                                                                                            // 3217
                                                                                                                       // 3218
        // we are a write, but the object properties are the key/values                                                // 3219
        for (i = 0; i < nodeCount; i++) {                                                                              // 3220
          if (fn === jqLiteData) {                                                                                     // 3221
            // data() takes the whole object in jQuery                                                                 // 3222
            fn(this[i], arg1);                                                                                         // 3223
          } else {                                                                                                     // 3224
            for (key in arg1) {                                                                                        // 3225
              fn(this[i], key, arg1[key]);                                                                             // 3226
            }                                                                                                          // 3227
          }                                                                                                            // 3228
        }                                                                                                              // 3229
        // return self for chaining                                                                                    // 3230
        return this;                                                                                                   // 3231
      } else {                                                                                                         // 3232
        // we are a read, so read the first child.                                                                     // 3233
        // TODO: do we still need this?                                                                                // 3234
        var value = fn.$dv;                                                                                            // 3235
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.                         // 3236
        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;                                           // 3237
        for (var j = 0; j < jj; j++) {                                                                                 // 3238
          var nodeValue = fn(this[j], arg1, arg2);                                                                     // 3239
          value = value ? value + nodeValue : nodeValue;                                                               // 3240
        }                                                                                                              // 3241
        return value;                                                                                                  // 3242
      }                                                                                                                // 3243
    } else {                                                                                                           // 3244
      // we are a write, so apply to all children                                                                      // 3245
      for (i = 0; i < nodeCount; i++) {                                                                                // 3246
        fn(this[i], arg1, arg2);                                                                                       // 3247
      }                                                                                                                // 3248
      // return self for chaining                                                                                      // 3249
      return this;                                                                                                     // 3250
    }                                                                                                                  // 3251
  };                                                                                                                   // 3252
});                                                                                                                    // 3253
                                                                                                                       // 3254
function createEventHandler(element, events) {                                                                         // 3255
  var eventHandler = function(event, type) {                                                                           // 3256
    // jQuery specific api                                                                                             // 3257
    event.isDefaultPrevented = function() {                                                                            // 3258
      return event.defaultPrevented;                                                                                   // 3259
    };                                                                                                                 // 3260
                                                                                                                       // 3261
    var eventFns = events[type || event.type];                                                                         // 3262
    var eventFnsLength = eventFns ? eventFns.length : 0;                                                               // 3263
                                                                                                                       // 3264
    if (!eventFnsLength) return;                                                                                       // 3265
                                                                                                                       // 3266
    if (isUndefined(event.immediatePropagationStopped)) {                                                              // 3267
      var originalStopImmediatePropagation = event.stopImmediatePropagation;                                           // 3268
      event.stopImmediatePropagation = function() {                                                                    // 3269
        event.immediatePropagationStopped = true;                                                                      // 3270
                                                                                                                       // 3271
        if (event.stopPropagation) {                                                                                   // 3272
          event.stopPropagation();                                                                                     // 3273
        }                                                                                                              // 3274
                                                                                                                       // 3275
        if (originalStopImmediatePropagation) {                                                                        // 3276
          originalStopImmediatePropagation.call(event);                                                                // 3277
        }                                                                                                              // 3278
      };                                                                                                               // 3279
    }                                                                                                                  // 3280
                                                                                                                       // 3281
    event.isImmediatePropagationStopped = function() {                                                                 // 3282
      return event.immediatePropagationStopped === true;                                                               // 3283
    };                                                                                                                 // 3284
                                                                                                                       // 3285
    // Copy event handlers in case event handlers array is modified during execution.                                  // 3286
    if ((eventFnsLength > 1)) {                                                                                        // 3287
      eventFns = shallowCopy(eventFns);                                                                                // 3288
    }                                                                                                                  // 3289
                                                                                                                       // 3290
    for (var i = 0; i < eventFnsLength; i++) {                                                                         // 3291
      if (!event.isImmediatePropagationStopped()) {                                                                    // 3292
        eventFns[i].call(element, event);                                                                              // 3293
      }                                                                                                                // 3294
    }                                                                                                                  // 3295
  };                                                                                                                   // 3296
                                                                                                                       // 3297
  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all                     // 3298
  //       events on `element`                                                                                         // 3299
  eventHandler.elem = element;                                                                                         // 3300
  return eventHandler;                                                                                                 // 3301
}                                                                                                                      // 3302
                                                                                                                       // 3303
//////////////////////////////////////////                                                                             // 3304
// Functions iterating traversal.                                                                                      // 3305
// These functions chain results into a single                                                                         // 3306
// selector.                                                                                                           // 3307
//////////////////////////////////////////                                                                             // 3308
forEach({                                                                                                              // 3309
  removeData: jqLiteRemoveData,                                                                                        // 3310
                                                                                                                       // 3311
  on: function jqLiteOn(element, type, fn, unsupported) {                                                              // 3312
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
                                                                                                                       // 3314
    // Do not add event handlers to non-elements because they will not be cleaned up.                                  // 3315
    if (!jqLiteAcceptsData(element)) {                                                                                 // 3316
      return;                                                                                                          // 3317
    }                                                                                                                  // 3318
                                                                                                                       // 3319
    var expandoStore = jqLiteExpandoStore(element, true);                                                              // 3320
    var events = expandoStore.events;                                                                                  // 3321
    var handle = expandoStore.handle;                                                                                  // 3322
                                                                                                                       // 3323
    if (!handle) {                                                                                                     // 3324
      handle = expandoStore.handle = createEventHandler(element, events);                                              // 3325
    }                                                                                                                  // 3326
                                                                                                                       // 3327
    // http://jsperf.com/string-indexof-vs-split                                                                       // 3328
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];                                                     // 3329
    var i = types.length;                                                                                              // 3330
                                                                                                                       // 3331
    while (i--) {                                                                                                      // 3332
      type = types[i];                                                                                                 // 3333
      var eventFns = events[type];                                                                                     // 3334
                                                                                                                       // 3335
      if (!eventFns) {                                                                                                 // 3336
        events[type] = [];                                                                                             // 3337
                                                                                                                       // 3338
        if (type === 'mouseenter' || type === 'mouseleave') {                                                          // 3339
          // Refer to jQuery's implementation of mouseenter & mouseleave                                               // 3340
          // Read about mouseenter and mouseleave:                                                                     // 3341
          // http://www.quirksmode.org/js/events_mouse.html#link8                                                      // 3342
                                                                                                                       // 3343
          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {                                                   // 3344
            var target = this, related = event.relatedTarget;                                                          // 3345
            // For mousenter/leave call the handler if related is outside the target.                                  // 3346
            // NB: No relatedTarget if the mouse left/entered the browser window                                       // 3347
            if (!related || (related !== target && !target.contains(related))) {                                       // 3348
              handle(event, type);                                                                                     // 3349
            }                                                                                                          // 3350
          });                                                                                                          // 3351
                                                                                                                       // 3352
        } else {                                                                                                       // 3353
          if (type !== '$destroy') {                                                                                   // 3354
            addEventListenerFn(element, type, handle);                                                                 // 3355
          }                                                                                                            // 3356
        }                                                                                                              // 3357
        eventFns = events[type];                                                                                       // 3358
      }                                                                                                                // 3359
      eventFns.push(fn);                                                                                               // 3360
    }                                                                                                                  // 3361
  },                                                                                                                   // 3362
                                                                                                                       // 3363
  off: jqLiteOff,                                                                                                      // 3364
                                                                                                                       // 3365
  one: function(element, type, fn) {                                                                                   // 3366
    element = jqLite(element);                                                                                         // 3367
                                                                                                                       // 3368
    //add the listener twice so that when it is called                                                                 // 3369
    //you can remove the original function and still be                                                                // 3370
    //able to call element.off(ev, fn) normally                                                                        // 3371
    element.on(type, function onFn() {                                                                                 // 3372
      element.off(type, fn);                                                                                           // 3373
      element.off(type, onFn);                                                                                         // 3374
    });                                                                                                                // 3375
    element.on(type, fn);                                                                                              // 3376
  },                                                                                                                   // 3377
                                                                                                                       // 3378
  replaceWith: function(element, replaceNode) {                                                                        // 3379
    var index, parent = element.parentNode;                                                                            // 3380
    jqLiteDealoc(element);                                                                                             // 3381
    forEach(new JQLite(replaceNode), function(node) {                                                                  // 3382
      if (index) {                                                                                                     // 3383
        parent.insertBefore(node, index.nextSibling);                                                                  // 3384
      } else {                                                                                                         // 3385
        parent.replaceChild(node, element);                                                                            // 3386
      }                                                                                                                // 3387
      index = node;                                                                                                    // 3388
    });                                                                                                                // 3389
  },                                                                                                                   // 3390
                                                                                                                       // 3391
  children: function(element) {                                                                                        // 3392
    var children = [];                                                                                                 // 3393
    forEach(element.childNodes, function(element) {                                                                    // 3394
      if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                    // 3395
        children.push(element);                                                                                        // 3396
      }                                                                                                                // 3397
    });                                                                                                                // 3398
    return children;                                                                                                   // 3399
  },                                                                                                                   // 3400
                                                                                                                       // 3401
  contents: function(element) {                                                                                        // 3402
    return element.contentDocument || element.childNodes || [];                                                        // 3403
  },                                                                                                                   // 3404
                                                                                                                       // 3405
  append: function(element, node) {                                                                                    // 3406
    var nodeType = element.nodeType;                                                                                   // 3407
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;                            // 3408
                                                                                                                       // 3409
    node = new JQLite(node);                                                                                           // 3410
                                                                                                                       // 3411
    for (var i = 0, ii = node.length; i < ii; i++) {                                                                   // 3412
      var child = node[i];                                                                                             // 3413
      element.appendChild(child);                                                                                      // 3414
    }                                                                                                                  // 3415
  },                                                                                                                   // 3416
                                                                                                                       // 3417
  prepend: function(element, node) {                                                                                   // 3418
    if (element.nodeType === NODE_TYPE_ELEMENT) {                                                                      // 3419
      var index = element.firstChild;                                                                                  // 3420
      forEach(new JQLite(node), function(child) {                                                                      // 3421
        element.insertBefore(child, index);                                                                            // 3422
      });                                                                                                              // 3423
    }                                                                                                                  // 3424
  },                                                                                                                   // 3425
                                                                                                                       // 3426
  wrap: function(element, wrapNode) {                                                                                  // 3427
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];                                                                      // 3428
    var parent = element.parentNode;                                                                                   // 3429
    if (parent) {                                                                                                      // 3430
      parent.replaceChild(wrapNode, element);                                                                          // 3431
    }                                                                                                                  // 3432
    wrapNode.appendChild(element);                                                                                     // 3433
  },                                                                                                                   // 3434
                                                                                                                       // 3435
  remove: jqLiteRemove,                                                                                                // 3436
                                                                                                                       // 3437
  detach: function(element) {                                                                                          // 3438
    jqLiteRemove(element, true);                                                                                       // 3439
  },                                                                                                                   // 3440
                                                                                                                       // 3441
  after: function(element, newElement) {                                                                               // 3442
    var index = element, parent = element.parentNode;                                                                  // 3443
    newElement = new JQLite(newElement);                                                                               // 3444
                                                                                                                       // 3445
    for (var i = 0, ii = newElement.length; i < ii; i++) {                                                             // 3446
      var node = newElement[i];                                                                                        // 3447
      parent.insertBefore(node, index.nextSibling);                                                                    // 3448
      index = node;                                                                                                    // 3449
    }                                                                                                                  // 3450
  },                                                                                                                   // 3451
                                                                                                                       // 3452
  addClass: jqLiteAddClass,                                                                                            // 3453
  removeClass: jqLiteRemoveClass,                                                                                      // 3454
                                                                                                                       // 3455
  toggleClass: function(element, selector, condition) {                                                                // 3456
    if (selector) {                                                                                                    // 3457
      forEach(selector.split(' '), function(className) {                                                               // 3458
        var classCondition = condition;                                                                                // 3459
        if (isUndefined(classCondition)) {                                                                             // 3460
          classCondition = !jqLiteHasClass(element, className);                                                        // 3461
        }                                                                                                              // 3462
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);                                     // 3463
      });                                                                                                              // 3464
    }                                                                                                                  // 3465
  },                                                                                                                   // 3466
                                                                                                                       // 3467
  parent: function(element) {                                                                                          // 3468
    var parent = element.parentNode;                                                                                   // 3469
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;                                  // 3470
  },                                                                                                                   // 3471
                                                                                                                       // 3472
  next: function(element) {                                                                                            // 3473
    return element.nextElementSibling;                                                                                 // 3474
  },                                                                                                                   // 3475
                                                                                                                       // 3476
  find: function(element, selector) {                                                                                  // 3477
    if (element.getElementsByTagName) {                                                                                // 3478
      return element.getElementsByTagName(selector);                                                                   // 3479
    } else {                                                                                                           // 3480
      return [];                                                                                                       // 3481
    }                                                                                                                  // 3482
  },                                                                                                                   // 3483
                                                                                                                       // 3484
  clone: jqLiteClone,                                                                                                  // 3485
                                                                                                                       // 3486
  triggerHandler: function(element, event, extraParameters) {                                                          // 3487
                                                                                                                       // 3488
    var dummyEvent, eventFnsCopy, handlerArgs;                                                                         // 3489
    var eventName = event.type || event;                                                                               // 3490
    var expandoStore = jqLiteExpandoStore(element);                                                                    // 3491
    var events = expandoStore && expandoStore.events;                                                                  // 3492
    var eventFns = events && events[eventName];                                                                        // 3493
                                                                                                                       // 3494
    if (eventFns) {                                                                                                    // 3495
      // Create a dummy event to pass to the handlers                                                                  // 3496
      dummyEvent = {                                                                                                   // 3497
        preventDefault: function() { this.defaultPrevented = true; },                                                  // 3498
        isDefaultPrevented: function() { return this.defaultPrevented === true; },                                     // 3499
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },                             // 3500
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },               // 3501
        stopPropagation: noop,                                                                                         // 3502
        type: eventName,                                                                                               // 3503
        target: element                                                                                                // 3504
      };                                                                                                               // 3505
                                                                                                                       // 3506
      // If a custom event was provided then extend our dummy event with it                                            // 3507
      if (event.type) {                                                                                                // 3508
        dummyEvent = extend(dummyEvent, event);                                                                        // 3509
      }                                                                                                                // 3510
                                                                                                                       // 3511
      // Copy event handlers in case event handlers array is modified during execution.                                // 3512
      eventFnsCopy = shallowCopy(eventFns);                                                                            // 3513
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];                             // 3514
                                                                                                                       // 3515
      forEach(eventFnsCopy, function(fn) {                                                                             // 3516
        if (!dummyEvent.isImmediatePropagationStopped()) {                                                             // 3517
          fn.apply(element, handlerArgs);                                                                              // 3518
        }                                                                                                              // 3519
      });                                                                                                              // 3520
    }                                                                                                                  // 3521
  }                                                                                                                    // 3522
}, function(fn, name) {                                                                                                // 3523
  /**                                                                                                                  // 3524
   * chaining functions                                                                                                // 3525
   */                                                                                                                  // 3526
  JQLite.prototype[name] = function(arg1, arg2, arg3) {                                                                // 3527
    var value;                                                                                                         // 3528
                                                                                                                       // 3529
    for (var i = 0, ii = this.length; i < ii; i++) {                                                                   // 3530
      if (isUndefined(value)) {                                                                                        // 3531
        value = fn(this[i], arg1, arg2, arg3);                                                                         // 3532
        if (isDefined(value)) {                                                                                        // 3533
          // any function which returns a value needs to be wrapped                                                    // 3534
          value = jqLite(value);                                                                                       // 3535
        }                                                                                                              // 3536
      } else {                                                                                                         // 3537
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));                                                          // 3538
      }                                                                                                                // 3539
    }                                                                                                                  // 3540
    return isDefined(value) ? value : this;                                                                            // 3541
  };                                                                                                                   // 3542
                                                                                                                       // 3543
  // bind legacy bind/unbind to on/off                                                                                 // 3544
  JQLite.prototype.bind = JQLite.prototype.on;                                                                         // 3545
  JQLite.prototype.unbind = JQLite.prototype.off;                                                                      // 3546
});                                                                                                                    // 3547
                                                                                                                       // 3548
                                                                                                                       // 3549
// Provider for private $$jqLite service                                                                               // 3550
function $$jqLiteProvider() {                                                                                          // 3551
  this.$get = function $$jqLite() {                                                                                    // 3552
    return extend(JQLite, {                                                                                            // 3553
      hasClass: function(node, classes) {                                                                              // 3554
        if (node.attr) node = node[0];                                                                                 // 3555
        return jqLiteHasClass(node, classes);                                                                          // 3556
      },                                                                                                               // 3557
      addClass: function(node, classes) {                                                                              // 3558
        if (node.attr) node = node[0];                                                                                 // 3559
        return jqLiteAddClass(node, classes);                                                                          // 3560
      },                                                                                                               // 3561
      removeClass: function(node, classes) {                                                                           // 3562
        if (node.attr) node = node[0];                                                                                 // 3563
        return jqLiteRemoveClass(node, classes);                                                                       // 3564
      }                                                                                                                // 3565
    });                                                                                                                // 3566
  };                                                                                                                   // 3567
}                                                                                                                      // 3568
                                                                                                                       // 3569
/**                                                                                                                    // 3570
 * Computes a hash of an 'obj'.                                                                                        // 3571
 * Hash of a:                                                                                                          // 3572
 *  string is string                                                                                                   // 3573
 *  number is number as string                                                                                         // 3574
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,                      // 3575
 *         that is also assigned to the $$hashKey property of the object.                                              // 3576
 *                                                                                                                     // 3577
 * @param obj                                                                                                          // 3578
 * @returns {string} hash string such that the same input will have the same hash string.                              // 3579
 *         The resulting string key is in 'type:hashKey' format.                                                       // 3580
 */                                                                                                                    // 3581
function hashKey(obj, nextUidFn) {                                                                                     // 3582
  var key = obj && obj.$$hashKey;                                                                                      // 3583
                                                                                                                       // 3584
  if (key) {                                                                                                           // 3585
    if (typeof key === 'function') {                                                                                   // 3586
      key = obj.$$hashKey();                                                                                           // 3587
    }                                                                                                                  // 3588
    return key;                                                                                                        // 3589
  }                                                                                                                    // 3590
                                                                                                                       // 3591
  var objType = typeof obj;                                                                                            // 3592
  if (objType == 'function' || (objType == 'object' && obj !== null)) {                                                // 3593
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();                                                    // 3594
  } else {                                                                                                             // 3595
    key = objType + ':' + obj;                                                                                         // 3596
  }                                                                                                                    // 3597
                                                                                                                       // 3598
  return key;                                                                                                          // 3599
}                                                                                                                      // 3600
                                                                                                                       // 3601
/**                                                                                                                    // 3602
 * HashMap which can use objects as keys                                                                               // 3603
 */                                                                                                                    // 3604
function HashMap(array, isolatedUid) {                                                                                 // 3605
  if (isolatedUid) {                                                                                                   // 3606
    var uid = 0;                                                                                                       // 3607
    this.nextUid = function() {                                                                                        // 3608
      return ++uid;                                                                                                    // 3609
    };                                                                                                                 // 3610
  }                                                                                                                    // 3611
  forEach(array, this.put, this);                                                                                      // 3612
}                                                                                                                      // 3613
HashMap.prototype = {                                                                                                  // 3614
  /**                                                                                                                  // 3615
   * Store key value pair                                                                                              // 3616
   * @param key key to store can be any type                                                                           // 3617
   * @param value value to store can be any type                                                                       // 3618
   */                                                                                                                  // 3619
  put: function(key, value) {                                                                                          // 3620
    this[hashKey(key, this.nextUid)] = value;                                                                          // 3621
  },                                                                                                                   // 3622
                                                                                                                       // 3623
  /**                                                                                                                  // 3624
   * @param key                                                                                                        // 3625
   * @returns {Object} the value for the key                                                                           // 3626
   */                                                                                                                  // 3627
  get: function(key) {                                                                                                 // 3628
    return this[hashKey(key, this.nextUid)];                                                                           // 3629
  },                                                                                                                   // 3630
                                                                                                                       // 3631
  /**                                                                                                                  // 3632
   * Remove the key/value pair                                                                                         // 3633
   * @param key                                                                                                        // 3634
   */                                                                                                                  // 3635
  remove: function(key) {                                                                                              // 3636
    var value = this[key = hashKey(key, this.nextUid)];                                                                // 3637
    delete this[key];                                                                                                  // 3638
    return value;                                                                                                      // 3639
  }                                                                                                                    // 3640
};                                                                                                                     // 3641
                                                                                                                       // 3642
var $$HashMapProvider = [function() {                                                                                  // 3643
  this.$get = [function() {                                                                                            // 3644
    return HashMap;                                                                                                    // 3645
  }];                                                                                                                  // 3646
}];                                                                                                                    // 3647
                                                                                                                       // 3648
/**                                                                                                                    // 3649
 * @ngdoc function                                                                                                     // 3650
 * @module ng                                                                                                          // 3651
 * @name angular.injector                                                                                              // 3652
 * @kind function                                                                                                      // 3653
 *                                                                                                                     // 3654
 * @description                                                                                                        // 3655
 * Creates an injector object that can be used for retrieving services as well as for                                  // 3656
 * dependency injection (see {@link guide/di dependency injection}).                                                   // 3657
 *                                                                                                                     // 3658
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See                           // 3659
 *     {@link angular.module}. The `ng` module must be explicitly added.                                               // 3660
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which                             // 3661
 *     disallows argument name annotation inference.                                                                   // 3662
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.                                          // 3663
 *                                                                                                                     // 3664
 * @example                                                                                                            // 3665
 * Typical usage                                                                                                       // 3666
 * ```js                                                                                                               // 3667
 *   // create an injector                                                                                             // 3668
 *   var $injector = angular.injector(['ng']);                                                                         // 3669
 *                                                                                                                     // 3670
 *   // use the injector to kick off your application                                                                  // 3671
 *   // use the type inference to auto inject arguments, or use implicit injection                                     // 3672
 *   $injector.invoke(function($rootScope, $compile, $document) {                                                      // 3673
 *     $compile($document)($rootScope);                                                                                // 3674
 *     $rootScope.$digest();                                                                                           // 3675
 *   });                                                                                                               // 3676
 * ```                                                                                                                 // 3677
 *                                                                                                                     // 3678
 * Sometimes you want to get access to the injector of a currently running Angular app                                 // 3679
 * from outside Angular. Perhaps, you want to inject and compile some markup after the                                 // 3680
 * application has been bootstrapped. You can do this using the extra `injector()` added                               // 3681
 * to JQuery/jqLite elements. See {@link angular.element}.                                                             // 3682
 *                                                                                                                     // 3683
 * *This is fairly rare but could be the case if a third party library is injecting the                                // 3684
 * markup.*                                                                                                            // 3685
 *                                                                                                                     // 3686
 * In the following example a new block of HTML containing a `ng-controller`                                           // 3687
 * directive is added to the end of the document body by JQuery. We then compile and link                              // 3688
 * it into the current AngularJS scope.                                                                                // 3689
 *                                                                                                                     // 3690
 * ```js                                                                                                               // 3691
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');                                                // 3692
 * $(document.body).append($div);                                                                                      // 3693
 *                                                                                                                     // 3694
 * angular.element(document).injector().invoke(function($compile) {                                                    // 3695
 *   var scope = angular.element($div).scope();                                                                        // 3696
 *   $compile($div)(scope);                                                                                            // 3697
 * });                                                                                                                 // 3698
 * ```                                                                                                                 // 3699
 */                                                                                                                    // 3700
                                                                                                                       // 3701
                                                                                                                       // 3702
/**                                                                                                                    // 3703
 * @ngdoc module                                                                                                       // 3704
 * @name auto                                                                                                          // 3705
 * @description                                                                                                        // 3706
 *                                                                                                                     // 3707
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.                            // 3708
 */                                                                                                                    // 3709
                                                                                                                       // 3710
var FN_ARGS = /^[^\(]*\(\s*([^\)]*)\)/m;                                                                               // 3711
var FN_ARG_SPLIT = /,/;                                                                                                // 3712
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;                                                                                   // 3713
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;                                                               // 3714
var $injectorMinErr = minErr('$injector');                                                                             // 3715
                                                                                                                       // 3716
function anonFn(fn) {                                                                                                  // 3717
  // For anonymous functions, showing at the very least the function signature can help in                             // 3718
  // debugging.                                                                                                        // 3719
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),                                                              // 3720
      args = fnText.match(FN_ARGS);                                                                                    // 3721
  if (args) {                                                                                                          // 3722
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';                                              // 3723
  }                                                                                                                    // 3724
  return 'fn';                                                                                                         // 3725
}                                                                                                                      // 3726
                                                                                                                       // 3727
function annotate(fn, strictDi, name) {                                                                                // 3728
  var $inject,                                                                                                         // 3729
      fnText,                                                                                                          // 3730
      argDecl,                                                                                                         // 3731
      last;                                                                                                            // 3732
                                                                                                                       // 3733
  if (typeof fn === 'function') {                                                                                      // 3734
    if (!($inject = fn.$inject)) {                                                                                     // 3735
      $inject = [];                                                                                                    // 3736
      if (fn.length) {                                                                                                 // 3737
        if (strictDi) {                                                                                                // 3738
          if (!isString(name) || !name) {                                                                              // 3739
            name = fn.name || anonFn(fn);                                                                              // 3740
          }                                                                                                            // 3741
          throw $injectorMinErr('strictdi',                                                                            // 3742
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);                        // 3743
        }                                                                                                              // 3744
        fnText = fn.toString().replace(STRIP_COMMENTS, '');                                                            // 3745
        argDecl = fnText.match(FN_ARGS);                                                                               // 3746
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {                                                        // 3747
          arg.replace(FN_ARG, function(all, underscore, name) {                                                        // 3748
            $inject.push(name);                                                                                        // 3749
          });                                                                                                          // 3750
        });                                                                                                            // 3751
      }                                                                                                                // 3752
      fn.$inject = $inject;                                                                                            // 3753
    }                                                                                                                  // 3754
  } else if (isArray(fn)) {                                                                                            // 3755
    last = fn.length - 1;                                                                                              // 3756
    assertArgFn(fn[last], 'fn');                                                                                       // 3757
    $inject = fn.slice(0, last);                                                                                       // 3758
  } else {                                                                                                             // 3759
    assertArgFn(fn, 'fn', true);                                                                                       // 3760
  }                                                                                                                    // 3761
  return $inject;                                                                                                      // 3762
}                                                                                                                      // 3763
                                                                                                                       // 3764
///////////////////////////////////////                                                                                // 3765
                                                                                                                       // 3766
/**                                                                                                                    // 3767
 * @ngdoc service                                                                                                      // 3768
 * @name $injector                                                                                                     // 3769
 *                                                                                                                     // 3770
 * @description                                                                                                        // 3771
 *                                                                                                                     // 3772
 * `$injector` is used to retrieve object instances as defined by                                                      // 3773
 * {@link auto.$provide provider}, instantiate types, invoke methods,                                                  // 3774
 * and load modules.                                                                                                   // 3775
 *                                                                                                                     // 3776
 * The following always holds true:                                                                                    // 3777
 *                                                                                                                     // 3778
 * ```js                                                                                                               // 3779
 *   var $injector = angular.injector();                                                                               // 3780
 *   expect($injector.get('$injector')).toBe($injector);                                                               // 3781
 *   expect($injector.invoke(function($injector) {                                                                     // 3782
 *     return $injector;                                                                                               // 3783
 *   })).toBe($injector);                                                                                              // 3784
 * ```                                                                                                                 // 3785
 *                                                                                                                     // 3786
 * # Injection Function Annotation                                                                                     // 3787
 *                                                                                                                     // 3788
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The                      // 3789
 * following are all valid ways of annotating function with injection arguments and are equivalent.                    // 3790
 *                                                                                                                     // 3791
 * ```js                                                                                                               // 3792
 *   // inferred (only works if code not minified/obfuscated)                                                          // 3793
 *   $injector.invoke(function(serviceA){});                                                                           // 3794
 *                                                                                                                     // 3795
 *   // annotated                                                                                                      // 3796
 *   function explicit(serviceA) {};                                                                                   // 3797
 *   explicit.$inject = ['serviceA'];                                                                                  // 3798
 *   $injector.invoke(explicit);                                                                                       // 3799
 *                                                                                                                     // 3800
 *   // inline                                                                                                         // 3801
 *   $injector.invoke(['serviceA', function(serviceA){}]);                                                             // 3802
 * ```                                                                                                                 // 3803
 *                                                                                                                     // 3804
 * ## Inference                                                                                                        // 3805
 *                                                                                                                     // 3806
 * In JavaScript calling `toString()` on a function returns the function definition. The definition                    // 3807
 * can then be parsed and the function arguments can be extracted. This method of discovering                          // 3808
 * annotations is disallowed when the injector is in strict mode.                                                      // 3809
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the                    // 3810
 * argument names.                                                                                                     // 3811
 *                                                                                                                     // 3812
 * ## `$inject` Annotation                                                                                             // 3813
 * By adding an `$inject` property onto a function the injection parameters can be specified.                          // 3814
 *                                                                                                                     // 3815
 * ## Inline                                                                                                           // 3816
 * As an array of injection names, where the last item in the array is the function to call.                           // 3817
 */                                                                                                                    // 3818
                                                                                                                       // 3819
/**                                                                                                                    // 3820
 * @ngdoc method                                                                                                       // 3821
 * @name $injector#get                                                                                                 // 3822
 *                                                                                                                     // 3823
 * @description                                                                                                        // 3824
 * Return an instance of the service.                                                                                  // 3825
 *                                                                                                                     // 3826
 * @param {string} name The name of the instance to retrieve.                                                          // 3827
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.           // 3828
 * @return {*} The instance.                                                                                           // 3829
 */                                                                                                                    // 3830
                                                                                                                       // 3831
/**                                                                                                                    // 3832
 * @ngdoc method                                                                                                       // 3833
 * @name $injector#invoke                                                                                              // 3834
 *                                                                                                                     // 3835
 * @description                                                                                                        // 3836
 * Invoke the method and supply the method arguments from the `$injector`.                                             // 3837
 *                                                                                                                     // 3838
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are             // 3839
 *   injected according to the {@link guide/di $inject Annotation} rules.                                              // 3840
 * @param {Object=} self The `this` for the invoked method.                                                            // 3841
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3842
 *                         object first, before the `$injector` is consulted.                                          // 3843
 * @returns {*} the value returned by the invoked `fn` function.                                                       // 3844
 */                                                                                                                    // 3845
                                                                                                                       // 3846
/**                                                                                                                    // 3847
 * @ngdoc method                                                                                                       // 3848
 * @name $injector#has                                                                                                 // 3849
 *                                                                                                                     // 3850
 * @description                                                                                                        // 3851
 * Allows the user to query if the particular service exists.                                                          // 3852
 *                                                                                                                     // 3853
 * @param {string} name Name of the service to query.                                                                  // 3854
 * @returns {boolean} `true` if injector has given service.                                                            // 3855
 */                                                                                                                    // 3856
                                                                                                                       // 3857
/**                                                                                                                    // 3858
 * @ngdoc method                                                                                                       // 3859
 * @name $injector#instantiate                                                                                         // 3860
 * @description                                                                                                        // 3861
 * Create a new instance of JS type. The method takes a constructor function, invokes the new                          // 3862
 * operator, and supplies all of the arguments to the constructor function as specified by the                         // 3863
 * constructor annotation.                                                                                             // 3864
 *                                                                                                                     // 3865
 * @param {Function} Type Annotated constructor function.                                                              // 3866
 * @param {Object=} locals Optional object. If preset then any argument names are read from this                       // 3867
 * object first, before the `$injector` is consulted.                                                                  // 3868
 * @returns {Object} new instance of `Type`.                                                                           // 3869
 */                                                                                                                    // 3870
                                                                                                                       // 3871
/**                                                                                                                    // 3872
 * @ngdoc method                                                                                                       // 3873
 * @name $injector#annotate                                                                                            // 3874
 *                                                                                                                     // 3875
 * @description                                                                                                        // 3876
 * Returns an array of service names which the function is requesting for injection. This API is                       // 3877
 * used by the injector to determine which services need to be injected into the function when the                     // 3878
 * function is invoked. There are three ways in which the function can be annotated with the needed                    // 3879
 * dependencies.                                                                                                       // 3880
 *                                                                                                                     // 3881
 * # Argument names                                                                                                    // 3882
 *                                                                                                                     // 3883
 * The simplest form is to extract the dependencies from the arguments of the function. This is done                   // 3884
 * by converting the function into a string using `toString()` method and extracting the argument                      // 3885
 * names.                                                                                                              // 3886
 * ```js                                                                                                               // 3887
 *   // Given                                                                                                          // 3888
 *   function MyController($scope, $route) {                                                                           // 3889
 *     // ...                                                                                                          // 3890
 *   }                                                                                                                 // 3891
 *                                                                                                                     // 3892
 *   // Then                                                                                                           // 3893
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3894
 * ```                                                                                                                 // 3895
 *                                                                                                                     // 3896
 * You can disallow this method by using strict injection mode.                                                        // 3897
 *                                                                                                                     // 3898
 * This method does not work with code minification / obfuscation. For this reason the following                       // 3899
 * annotation strategies are supported.                                                                                // 3900
 *                                                                                                                     // 3901
 * # The `$inject` property                                                                                            // 3902
 *                                                                                                                     // 3903
 * If a function has an `$inject` property and its value is an array of strings, then the strings                      // 3904
 * represent names of services to be injected into the function.                                                       // 3905
 * ```js                                                                                                               // 3906
 *   // Given                                                                                                          // 3907
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {                                                   // 3908
 *     // ...                                                                                                          // 3909
 *   }                                                                                                                 // 3910
 *   // Define function dependencies                                                                                   // 3911
 *   MyController['$inject'] = ['$scope', '$route'];                                                                   // 3912
 *                                                                                                                     // 3913
 *   // Then                                                                                                           // 3914
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);                                            // 3915
 * ```                                                                                                                 // 3916
 *                                                                                                                     // 3917
 * # The array notation                                                                                                // 3918
 *                                                                                                                     // 3919
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property                   // 3920
 * is very inconvenient. In these situations using the array notation to specify the dependencies in                   // 3921
 * a way that survives minification is a better choice:                                                                // 3922
 *                                                                                                                     // 3923
 * ```js                                                                                                               // 3924
 *   // We wish to write this (not minification / obfuscation safe)                                                    // 3925
 *   injector.invoke(function($compile, $rootScope) {                                                                  // 3926
 *     // ...                                                                                                          // 3927
 *   });                                                                                                               // 3928
 *                                                                                                                     // 3929
 *   // We are forced to write break inlining                                                                          // 3930
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {                                                    // 3931
 *     // ...                                                                                                          // 3932
 *   };                                                                                                                // 3933
 *   tmpFn.$inject = ['$compile', '$rootScope'];                                                                       // 3934
 *   injector.invoke(tmpFn);                                                                                           // 3935
 *                                                                                                                     // 3936
 *   // To better support inline function the inline annotation is supported                                           // 3937
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {                                   // 3938
 *     // ...                                                                                                          // 3939
 *   }]);                                                                                                              // 3940
 *                                                                                                                     // 3941
 *   // Therefore                                                                                                      // 3942
 *   expect(injector.annotate(                                                                                         // 3943
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])                                     // 3944
 *    ).toEqual(['$compile', '$rootScope']);                                                                           // 3945
 * ```                                                                                                                 // 3946
 *                                                                                                                     // 3947
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to                     // 3948
 * be retrieved as described above.                                                                                    // 3949
 *                                                                                                                     // 3950
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.                                     // 3951
 *                                                                                                                     // 3952
 * @returns {Array.<string>} The names of the services which the function requires.                                    // 3953
 */                                                                                                                    // 3954
                                                                                                                       // 3955
                                                                                                                       // 3956
                                                                                                                       // 3957
                                                                                                                       // 3958
/**                                                                                                                    // 3959
 * @ngdoc service                                                                                                      // 3960
 * @name $provide                                                                                                      // 3961
 *                                                                                                                     // 3962
 * @description                                                                                                        // 3963
 *                                                                                                                     // 3964
 * The {@link auto.$provide $provide} service has a number of methods for registering components                       // 3965
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on                              // 3966
 * {@link angular.Module}.                                                                                             // 3967
 *                                                                                                                     // 3968
 * An Angular **service** is a singleton object created by a **service factory**.  These **service                     // 3969
 * factories** are functions which, in turn, are created by a **service provider**.                                    // 3970
 * The **service providers** are constructor functions. When instantiated they must contain a                          // 3971
 * property called `$get`, which holds the **service factory** function.                                               // 3972
 *                                                                                                                     // 3973
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the                     // 3974
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**                      // 3975
 * function to get the instance of the **service**.                                                                    // 3976
 *                                                                                                                     // 3977
 * Often services have no configuration options and there is no need to add methods to the service                     // 3978
 * provider.  The provider will be no more than a constructor function with a `$get` property. For                     // 3979
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register                    // 3980
 * services without specifying a provider.                                                                             // 3981
 *                                                                                                                     // 3982
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the                     // 3983
 *     {@link auto.$injector $injector}                                                                                // 3984
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by                   // 3985
 *     providers and services.                                                                                         // 3986
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by                    // 3987
 *     services, not providers.                                                                                        // 3988
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,                       // 3989
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the                   // 3990
 *     given factory function.                                                                                         // 3991
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`                      // 3992
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate                   // 3993
 *      a new object using the given constructor function.                                                             // 3994
 *                                                                                                                     // 3995
 * See the individual methods for more information and examples.                                                       // 3996
 */                                                                                                                    // 3997
                                                                                                                       // 3998
/**                                                                                                                    // 3999
 * @ngdoc method                                                                                                       // 4000
 * @name $provide#provider                                                                                             // 4001
 * @description                                                                                                        // 4002
 *                                                                                                                     // 4003
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions                      // 4004
 * are constructor functions, whose instances are responsible for "providing" a factory for a                          // 4005
 * service.                                                                                                            // 4006
 *                                                                                                                     // 4007
 * Service provider names start with the name of the service they provide followed by `Provider`.                      // 4008
 * For example, the {@link ng.$log $log} service has a provider called                                                 // 4009
 * {@link ng.$logProvider $logProvider}.                                                                               // 4010
 *                                                                                                                     // 4011
 * Service provider objects can have additional methods which allow configuration of the provider                      // 4012
 * and its service. Importantly, you can configure what kind of service is created by the `$get`                       // 4013
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a                   // 4014
 * method {@link ng.$logProvider#debugEnabled debugEnabled}                                                            // 4015
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the                      // 4016
 * console or not.                                                                                                     // 4017
 *                                                                                                                     // 4018
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +                   // 4019
                        'Provider'` key.                                                                               // 4020
 * @param {(Object|function())} provider If the provider is:                                                           // 4021
 *                                                                                                                     // 4022
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using                          // 4023
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.                          // 4024
 *   - `Constructor`: a new instance of the provider will be created using                                             // 4025
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.                           // 4026
 *                                                                                                                     // 4027
 * @returns {Object} registered provider instance                                                                      // 4028
                                                                                                                       // 4029
 * @example                                                                                                            // 4030
 *                                                                                                                     // 4031
 * The following example shows how to create a simple event tracking service and register it using                     // 4032
 * {@link auto.$provide#provider $provide.provider()}.                                                                 // 4033
 *                                                                                                                     // 4034
 * ```js                                                                                                               // 4035
 *  // Define the eventTracker provider                                                                                // 4036
 *  function EventTrackerProvider() {                                                                                  // 4037
 *    var trackingUrl = '/track';                                                                                      // 4038
 *                                                                                                                     // 4039
 *    // A provider method for configuring where the tracked events should been saved                                  // 4040
 *    this.setTrackingUrl = function(url) {                                                                            // 4041
 *      trackingUrl = url;                                                                                             // 4042
 *    };                                                                                                               // 4043
 *                                                                                                                     // 4044
 *    // The service factory function                                                                                  // 4045
 *    this.$get = ['$http', function($http) {                                                                          // 4046
 *      var trackedEvents = {};                                                                                        // 4047
 *      return {                                                                                                       // 4048
 *        // Call this to track an event                                                                               // 4049
 *        event: function(event) {                                                                                     // 4050
 *          var count = trackedEvents[event] || 0;                                                                     // 4051
 *          count += 1;                                                                                                // 4052
 *          trackedEvents[event] = count;                                                                              // 4053
 *          return count;                                                                                              // 4054
 *        },                                                                                                           // 4055
 *        // Call this to save the tracked events to the trackingUrl                                                   // 4056
 *        save: function() {                                                                                           // 4057
 *          $http.post(trackingUrl, trackedEvents);                                                                    // 4058
 *        }                                                                                                            // 4059
 *      };                                                                                                             // 4060
 *    }];                                                                                                              // 4061
 *  }                                                                                                                  // 4062
 *                                                                                                                     // 4063
 *  describe('eventTracker', function() {                                                                              // 4064
 *    var postSpy;                                                                                                     // 4065
 *                                                                                                                     // 4066
 *    beforeEach(module(function($provide) {                                                                           // 4067
 *      // Register the eventTracker provider                                                                          // 4068
 *      $provide.provider('eventTracker', EventTrackerProvider);                                                       // 4069
 *    }));                                                                                                             // 4070
 *                                                                                                                     // 4071
 *    beforeEach(module(function(eventTrackerProvider) {                                                               // 4072
 *      // Configure eventTracker provider                                                                             // 4073
 *      eventTrackerProvider.setTrackingUrl('/custom-track');                                                          // 4074
 *    }));                                                                                                             // 4075
 *                                                                                                                     // 4076
 *    it('tracks events', inject(function(eventTracker) {                                                              // 4077
 *      expect(eventTracker.event('login')).toEqual(1);                                                                // 4078
 *      expect(eventTracker.event('login')).toEqual(2);                                                                // 4079
 *    }));                                                                                                             // 4080
 *                                                                                                                     // 4081
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {                                           // 4082
 *      postSpy = spyOn($http, 'post');                                                                                // 4083
 *      eventTracker.event('login');                                                                                   // 4084
 *      eventTracker.save();                                                                                           // 4085
 *      expect(postSpy).toHaveBeenCalled();                                                                            // 4086
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');                                                  // 4087
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');                                               // 4088
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });                                                // 4089
 *    }));                                                                                                             // 4090
 *  });                                                                                                                // 4091
 * ```                                                                                                                 // 4092
 */                                                                                                                    // 4093
                                                                                                                       // 4094
/**                                                                                                                    // 4095
 * @ngdoc method                                                                                                       // 4096
 * @name $provide#factory                                                                                              // 4097
 * @description                                                                                                        // 4098
 *                                                                                                                     // 4099
 * Register a **service factory**, which will be called to return the service instance.                                // 4100
 * This is short for registering a service where its provider consists of only a `$get` property,                      // 4101
 * which is the given service factory function.                                                                        // 4102
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to                          // 4103
 * configure your service in a provider.                                                                               // 4104
 *                                                                                                                     // 4105
 * @param {string} name The name of the instance.                                                                      // 4106
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.                   // 4107
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.                 // 4108
 * @returns {Object} registered provider instance                                                                      // 4109
 *                                                                                                                     // 4110
 * @example                                                                                                            // 4111
 * Here is an example of registering a service                                                                         // 4112
 * ```js                                                                                                               // 4113
 *   $provide.factory('ping', ['$http', function($http) {                                                              // 4114
 *     return function ping() {                                                                                        // 4115
 *       return $http.send('/ping');                                                                                   // 4116
 *     };                                                                                                              // 4117
 *   }]);                                                                                                              // 4118
 * ```                                                                                                                 // 4119
 * You would then inject and use this service like this:                                                               // 4120
 * ```js                                                                                                               // 4121
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4122
 *     ping();                                                                                                         // 4123
 *   }]);                                                                                                              // 4124
 * ```                                                                                                                 // 4125
 */                                                                                                                    // 4126
                                                                                                                       // 4127
                                                                                                                       // 4128
/**                                                                                                                    // 4129
 * @ngdoc method                                                                                                       // 4130
 * @name $provide#service                                                                                              // 4131
 * @description                                                                                                        // 4132
 *                                                                                                                     // 4133
 * Register a **service constructor**, which will be invoked with `new` to create the service                          // 4134
 * instance.                                                                                                           // 4135
 * This is short for registering a service where its provider's `$get` property is the service                         // 4136
 * constructor function that will be used to instantiate the service instance.                                         // 4137
 *                                                                                                                     // 4138
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service                     // 4139
 * as a type/class.                                                                                                    // 4140
 *                                                                                                                     // 4141
 * @param {string} name The name of the instance.                                                                      // 4142
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)                    // 4143
 *     that will be instantiated.                                                                                      // 4144
 * @returns {Object} registered provider instance                                                                      // 4145
 *                                                                                                                     // 4146
 * @example                                                                                                            // 4147
 * Here is an example of registering a service using                                                                   // 4148
 * {@link auto.$provide#service $provide.service(class)}.                                                              // 4149
 * ```js                                                                                                               // 4150
 *   var Ping = function($http) {                                                                                      // 4151
 *     this.$http = $http;                                                                                             // 4152
 *   };                                                                                                                // 4153
 *                                                                                                                     // 4154
 *   Ping.$inject = ['$http'];                                                                                         // 4155
 *                                                                                                                     // 4156
 *   Ping.prototype.send = function() {                                                                                // 4157
 *     return this.$http.get('/ping');                                                                                 // 4158
 *   };                                                                                                                // 4159
 *   $provide.service('ping', Ping);                                                                                   // 4160
 * ```                                                                                                                 // 4161
 * You would then inject and use this service like this:                                                               // 4162
 * ```js                                                                                                               // 4163
 *   someModule.controller('Ctrl', ['ping', function(ping) {                                                           // 4164
 *     ping.send();                                                                                                    // 4165
 *   }]);                                                                                                              // 4166
 * ```                                                                                                                 // 4167
 */                                                                                                                    // 4168
                                                                                                                       // 4169
                                                                                                                       // 4170
/**                                                                                                                    // 4171
 * @ngdoc method                                                                                                       // 4172
 * @name $provide#value                                                                                                // 4173
 * @description                                                                                                        // 4174
 *                                                                                                                     // 4175
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a                         // 4176
 * number, an array, an object or a function.  This is short for registering a service where its                       // 4177
 * provider's `$get` property is a factory function that takes no arguments and returns the **value                    // 4178
 * service**.                                                                                                          // 4179
 *                                                                                                                     // 4180
 * Value services are similar to constant services, except that they cannot be injected into a                         // 4181
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by                     // 4182
 * an Angular                                                                                                          // 4183
 * {@link auto.$provide#decorator decorator}.                                                                          // 4184
 *                                                                                                                     // 4185
 * @param {string} name The name of the instance.                                                                      // 4186
 * @param {*} value The value.                                                                                         // 4187
 * @returns {Object} registered provider instance                                                                      // 4188
 *                                                                                                                     // 4189
 * @example                                                                                                            // 4190
 * Here are some examples of creating value services.                                                                  // 4191
 * ```js                                                                                                               // 4192
 *   $provide.value('ADMIN_USER', 'admin');                                                                            // 4193
 *                                                                                                                     // 4194
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });                                                 // 4195
 *                                                                                                                     // 4196
 *   $provide.value('halfOf', function(value) {                                                                        // 4197
 *     return value / 2;                                                                                               // 4198
 *   });                                                                                                               // 4199
 * ```                                                                                                                 // 4200
 */                                                                                                                    // 4201
                                                                                                                       // 4202
                                                                                                                       // 4203
/**                                                                                                                    // 4204
 * @ngdoc method                                                                                                       // 4205
 * @name $provide#constant                                                                                             // 4206
 * @description                                                                                                        // 4207
 *                                                                                                                     // 4208
 * Register a **constant service**, such as a string, a number, an array, an object or a function,                     // 4209
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be                       // 4210
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot                     // 4211
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.                                              // 4212
 *                                                                                                                     // 4213
 * @param {string} name The name of the constant.                                                                      // 4214
 * @param {*} value The constant value.                                                                                // 4215
 * @returns {Object} registered instance                                                                               // 4216
 *                                                                                                                     // 4217
 * @example                                                                                                            // 4218
 * Here a some examples of creating constants:                                                                         // 4219
 * ```js                                                                                                               // 4220
 *   $provide.constant('SHARD_HEIGHT', 306);                                                                           // 4221
 *                                                                                                                     // 4222
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);                                                         // 4223
 *                                                                                                                     // 4224
 *   $provide.constant('double', function(value) {                                                                     // 4225
 *     return value * 2;                                                                                               // 4226
 *   });                                                                                                               // 4227
 * ```                                                                                                                 // 4228
 */                                                                                                                    // 4229
                                                                                                                       // 4230
                                                                                                                       // 4231
/**                                                                                                                    // 4232
 * @ngdoc method                                                                                                       // 4233
 * @name $provide#decorator                                                                                            // 4234
 * @description                                                                                                        // 4235
 *                                                                                                                     // 4236
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator                     // 4237
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the                        // 4238
 * service. The object returned by the decorator may be the original service, or a new service                         // 4239
 * object which replaces or wraps and delegates to the original service.                                               // 4240
 *                                                                                                                     // 4241
 * @param {string} name The name of the service to decorate.                                                           // 4242
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be      // 4243
 *    instantiated and should return the decorated service instance. The function is called using                      // 4244
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.                      // 4245
 *    Local injection arguments:                                                                                       // 4246
 *                                                                                                                     // 4247
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,                          // 4248
 *      decorated or delegated to.                                                                                     // 4249
 *                                                                                                                     // 4250
 * @example                                                                                                            // 4251
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting                     // 4252
 * calls to {@link ng.$log#error $log.warn()}.                                                                         // 4253
 * ```js                                                                                                               // 4254
 *   $provide.decorator('$log', ['$delegate', function($delegate) {                                                    // 4255
 *     $delegate.warn = $delegate.error;                                                                               // 4256
 *     return $delegate;                                                                                               // 4257
 *   }]);                                                                                                              // 4258
 * ```                                                                                                                 // 4259
 */                                                                                                                    // 4260
                                                                                                                       // 4261
                                                                                                                       // 4262
function createInjector(modulesToLoad, strictDi) {                                                                     // 4263
  strictDi = (strictDi === true);                                                                                      // 4264
  var INSTANTIATING = {},                                                                                              // 4265
      providerSuffix = 'Provider',                                                                                     // 4266
      path = [],                                                                                                       // 4267
      loadedModules = new HashMap([], true),                                                                           // 4268
      providerCache = {                                                                                                // 4269
        $provide: {                                                                                                    // 4270
            provider: supportObject(provider),                                                                         // 4271
            factory: supportObject(factory),                                                                           // 4272
            service: supportObject(service),                                                                           // 4273
            value: supportObject(value),                                                                               // 4274
            constant: supportObject(constant),                                                                         // 4275
            decorator: decorator                                                                                       // 4276
          }                                                                                                            // 4277
      },                                                                                                               // 4278
      providerInjector = (providerCache.$injector =                                                                    // 4279
          createInternalInjector(providerCache, function(serviceName, caller) {                                        // 4280
            if (angular.isString(caller)) {                                                                            // 4281
              path.push(caller);                                                                                       // 4282
            }                                                                                                          // 4283
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));                                 // 4284
          })),                                                                                                         // 4285
      instanceCache = {},                                                                                              // 4286
      instanceInjector = (instanceCache.$injector =                                                                    // 4287
          createInternalInjector(instanceCache, function(serviceName, caller) {                                        // 4288
            var provider = providerInjector.get(serviceName + providerSuffix, caller);                                 // 4289
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);                           // 4290
          }));                                                                                                         // 4291
                                                                                                                       // 4292
                                                                                                                       // 4293
  forEach(loadModules(modulesToLoad), function(fn) { if (fn) instanceInjector.invoke(fn); });                          // 4294
                                                                                                                       // 4295
  return instanceInjector;                                                                                             // 4296
                                                                                                                       // 4297
  ////////////////////////////////////                                                                                 // 4298
  // $provider                                                                                                         // 4299
  ////////////////////////////////////                                                                                 // 4300
                                                                                                                       // 4301
  function supportObject(delegate) {                                                                                   // 4302
    return function(key, value) {                                                                                      // 4303
      if (isObject(key)) {                                                                                             // 4304
        forEach(key, reverseParams(delegate));                                                                         // 4305
      } else {                                                                                                         // 4306
        return delegate(key, value);                                                                                   // 4307
      }                                                                                                                // 4308
    };                                                                                                                 // 4309
  }                                                                                                                    // 4310
                                                                                                                       // 4311
  function provider(name, provider_) {                                                                                 // 4312
    assertNotHasOwnProperty(name, 'service');                                                                          // 4313
    if (isFunction(provider_) || isArray(provider_)) {                                                                 // 4314
      provider_ = providerInjector.instantiate(provider_);                                                             // 4315
    }                                                                                                                  // 4316
    if (!provider_.$get) {                                                                                             // 4317
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);                          // 4318
    }                                                                                                                  // 4319
    return providerCache[name + providerSuffix] = provider_;                                                           // 4320
  }                                                                                                                    // 4321
                                                                                                                       // 4322
  function enforceReturnValue(name, factory) {                                                                         // 4323
    return function enforcedReturnValue() {                                                                            // 4324
      var result = instanceInjector.invoke(factory, this);                                                             // 4325
      if (isUndefined(result)) {                                                                                       // 4326
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);          // 4327
      }                                                                                                                // 4328
      return result;                                                                                                   // 4329
    };                                                                                                                 // 4330
  }                                                                                                                    // 4331
                                                                                                                       // 4332
  function factory(name, factoryFn, enforce) {                                                                         // 4333
    return provider(name, {                                                                                            // 4334
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn                                        // 4335
    });                                                                                                                // 4336
  }                                                                                                                    // 4337
                                                                                                                       // 4338
  function service(name, constructor) {                                                                                // 4339
    return factory(name, ['$injector', function($injector) {                                                           // 4340
      return $injector.instantiate(constructor);                                                                       // 4341
    }]);                                                                                                               // 4342
  }                                                                                                                    // 4343
                                                                                                                       // 4344
  function value(name, val) { return factory(name, valueFn(val), false); }                                             // 4345
                                                                                                                       // 4346
  function constant(name, value) {                                                                                     // 4347
    assertNotHasOwnProperty(name, 'constant');                                                                         // 4348
    providerCache[name] = value;                                                                                       // 4349
    instanceCache[name] = value;                                                                                       // 4350
  }                                                                                                                    // 4351
                                                                                                                       // 4352
  function decorator(serviceName, decorFn) {                                                                           // 4353
    var origProvider = providerInjector.get(serviceName + providerSuffix),                                             // 4354
        orig$get = origProvider.$get;                                                                                  // 4355
                                                                                                                       // 4356
    origProvider.$get = function() {                                                                                   // 4357
      var origInstance = instanceInjector.invoke(orig$get, origProvider);                                              // 4358
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});                                        // 4359
    };                                                                                                                 // 4360
  }                                                                                                                    // 4361
                                                                                                                       // 4362
  ////////////////////////////////////                                                                                 // 4363
  // Module Loading                                                                                                    // 4364
  ////////////////////////////////////                                                                                 // 4365
  function loadModules(modulesToLoad) {                                                                                // 4366
    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');                  // 4367
    var runBlocks = [], moduleFn;                                                                                      // 4368
    forEach(modulesToLoad, function(module) {                                                                          // 4369
      if (loadedModules.get(module)) return;                                                                           // 4370
      loadedModules.put(module, true);                                                                                 // 4371
                                                                                                                       // 4372
      function runInvokeQueue(queue) {                                                                                 // 4373
        var i, ii;                                                                                                     // 4374
        for (i = 0, ii = queue.length; i < ii; i++) {                                                                  // 4375
          var invokeArgs = queue[i],                                                                                   // 4376
              provider = providerInjector.get(invokeArgs[0]);                                                          // 4377
                                                                                                                       // 4378
          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);                                                      // 4379
        }                                                                                                              // 4380
      }                                                                                                                // 4381
                                                                                                                       // 4382
      try {                                                                                                            // 4383
        if (isString(module)) {                                                                                        // 4384
          moduleFn = angularModule(module);                                                                            // 4385
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);                    // 4386
          runInvokeQueue(moduleFn._invokeQueue);                                                                       // 4387
          runInvokeQueue(moduleFn._configBlocks);                                                                      // 4388
        } else if (isFunction(module)) {                                                                               // 4389
            runBlocks.push(providerInjector.invoke(module));                                                           // 4390
        } else if (isArray(module)) {                                                                                  // 4391
            runBlocks.push(providerInjector.invoke(module));                                                           // 4392
        } else {                                                                                                       // 4393
          assertArgFn(module, 'module');                                                                               // 4394
        }                                                                                                              // 4395
      } catch (e) {                                                                                                    // 4396
        if (isArray(module)) {                                                                                         // 4397
          module = module[module.length - 1];                                                                          // 4398
        }                                                                                                              // 4399
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {                                                // 4400
          // Safari & FF's stack traces don't contain error.message content                                            // 4401
          // unlike those of Chrome and IE                                                                             // 4402
          // So if stack doesn't contain message, we create a new string that contains both.                           // 4403
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.                          // 4404
          /* jshint -W022 */                                                                                           // 4405
          e = e.message + '\n' + e.stack;                                                                              // 4406
        }                                                                                                              // 4407
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",                             // 4408
                  module, e.stack || e.message || e);                                                                  // 4409
      }                                                                                                                // 4410
    });                                                                                                                // 4411
    return runBlocks;                                                                                                  // 4412
  }                                                                                                                    // 4413
                                                                                                                       // 4414
  ////////////////////////////////////                                                                                 // 4415
  // internal Injector                                                                                                 // 4416
  ////////////////////////////////////                                                                                 // 4417
                                                                                                                       // 4418
  function createInternalInjector(cache, factory) {                                                                    // 4419
                                                                                                                       // 4420
    function getService(serviceName, caller) {                                                                         // 4421
      if (cache.hasOwnProperty(serviceName)) {                                                                         // 4422
        if (cache[serviceName] === INSTANTIATING) {                                                                    // 4423
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',                                              // 4424
                    serviceName + ' <- ' + path.join(' <- '));                                                         // 4425
        }                                                                                                              // 4426
        return cache[serviceName];                                                                                     // 4427
      } else {                                                                                                         // 4428
        try {                                                                                                          // 4429
          path.unshift(serviceName);                                                                                   // 4430
          cache[serviceName] = INSTANTIATING;                                                                          // 4431
          return cache[serviceName] = factory(serviceName, caller);                                                    // 4432
        } catch (err) {                                                                                                // 4433
          if (cache[serviceName] === INSTANTIATING) {                                                                  // 4434
            delete cache[serviceName];                                                                                 // 4435
          }                                                                                                            // 4436
          throw err;                                                                                                   // 4437
        } finally {                                                                                                    // 4438
          path.shift();                                                                                                // 4439
        }                                                                                                              // 4440
      }                                                                                                                // 4441
    }                                                                                                                  // 4442
                                                                                                                       // 4443
    function invoke(fn, self, locals, serviceName) {                                                                   // 4444
      if (typeof locals === 'string') {                                                                                // 4445
        serviceName = locals;                                                                                          // 4446
        locals = null;                                                                                                 // 4447
      }                                                                                                                // 4448
                                                                                                                       // 4449
      var args = [],                                                                                                   // 4450
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),                                              // 4451
          length, i,                                                                                                   // 4452
          key;                                                                                                         // 4453
                                                                                                                       // 4454
      for (i = 0, length = $inject.length; i < length; i++) {                                                          // 4455
        key = $inject[i];                                                                                              // 4456
        if (typeof key !== 'string') {                                                                                 // 4457
          throw $injectorMinErr('itkn',                                                                                // 4458
                  'Incorrect injection token! Expected service name as string, got {0}', key);                         // 4459
        }                                                                                                              // 4460
        args.push(                                                                                                     // 4461
          locals && locals.hasOwnProperty(key)                                                                         // 4462
          ? locals[key]                                                                                                // 4463
          : getService(key, serviceName)                                                                               // 4464
        );                                                                                                             // 4465
      }                                                                                                                // 4466
      if (isArray(fn)) {                                                                                               // 4467
        fn = fn[length];                                                                                               // 4468
      }                                                                                                                // 4469
                                                                                                                       // 4470
      // http://jsperf.com/angularjs-invoke-apply-vs-switch                                                            // 4471
      // #5388                                                                                                         // 4472
      return fn.apply(self, args);                                                                                     // 4473
    }                                                                                                                  // 4474
                                                                                                                       // 4475
    function instantiate(Type, locals, serviceName) {                                                                  // 4476
      // Check if Type is annotated and use just the given function at n-1 as parameter                                // 4477
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);                                 // 4478
      // Object creation: http://jsperf.com/create-constructor/2                                                       // 4479
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);                  // 4480
      var returnedValue = invoke(Type, instance, locals, serviceName);                                                 // 4481
                                                                                                                       // 4482
      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;                          // 4483
    }                                                                                                                  // 4484
                                                                                                                       // 4485
    return {                                                                                                           // 4486
      invoke: invoke,                                                                                                  // 4487
      instantiate: instantiate,                                                                                        // 4488
      get: getService,                                                                                                 // 4489
      annotate: createInjector.$$annotate,                                                                             // 4490
      has: function(name) {                                                                                            // 4491
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);                      // 4492
      }                                                                                                                // 4493
    };                                                                                                                 // 4494
  }                                                                                                                    // 4495
}                                                                                                                      // 4496
                                                                                                                       // 4497
createInjector.$$annotate = annotate;                                                                                  // 4498
                                                                                                                       // 4499
/**                                                                                                                    // 4500
 * @ngdoc provider                                                                                                     // 4501
 * @name $anchorScrollProvider                                                                                         // 4502
 *                                                                                                                     // 4503
 * @description                                                                                                        // 4504
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever                                                 // 4505
 * {@link ng.$location#hash $location.hash()} changes.                                                                 // 4506
 */                                                                                                                    // 4507
function $AnchorScrollProvider() {                                                                                     // 4508
                                                                                                                       // 4509
  var autoScrollingEnabled = true;                                                                                     // 4510
                                                                                                                       // 4511
  /**                                                                                                                  // 4512
   * @ngdoc method                                                                                                     // 4513
   * @name $anchorScrollProvider#disableAutoScrolling                                                                  // 4514
   *                                                                                                                   // 4515
   * @description                                                                                                      // 4516
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to                         // 4517
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />                 // 4518
   * Use this method to disable automatic scrolling.                                                                   // 4519
   *                                                                                                                   // 4520
   * If automatic scrolling is disabled, one must explicitly call                                                      // 4521
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the                         // 4522
   * current hash.                                                                                                     // 4523
   */                                                                                                                  // 4524
  this.disableAutoScrolling = function() {                                                                             // 4525
    autoScrollingEnabled = false;                                                                                      // 4526
  };                                                                                                                   // 4527
                                                                                                                       // 4528
  /**                                                                                                                  // 4529
   * @ngdoc service                                                                                                    // 4530
   * @name $anchorScroll                                                                                               // 4531
   * @kind function                                                                                                    // 4532
   * @requires $window                                                                                                 // 4533
   * @requires $location                                                                                               // 4534
   * @requires $rootScope                                                                                              // 4535
   *                                                                                                                   // 4536
   * @description                                                                                                      // 4537
   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the                     // 4538
   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified                     // 4539
   * in the                                                                                                            // 4540
   * [HTML5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).                      // 4541
   *                                                                                                                   // 4542
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to                       // 4543
   * match any anchor whenever it changes. This can be disabled by calling                                             // 4544
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.               // 4545
   *                                                                                                                   // 4546
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a                      // 4547
   * vertical scroll-offset (either fixed or dynamic).                                                                 // 4548
   *                                                                                                                   // 4549
   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of                      // 4550
   *                       {@link ng.$location#hash $location.hash()} will be used.                                    // 4551
   *                                                                                                                   // 4552
   * @property {(number|function|jqLite)} yOffset                                                                      // 4553
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed                             // 4554
   * positioned elements at the top of the page, such as navbars, headers etc.                                         // 4555
   *                                                                                                                   // 4556
   * `yOffset` can be specified in various ways:                                                                       // 4557
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />                                          // 4558
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return                     // 4559
   *   a number representing the offset (in pixels).<br /><br />                                                       // 4560
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from                     // 4561
   *   the top of the page to the element's bottom will be used as offset.<br />                                       // 4562
   *   **Note**: The element will be taken into account only as long as its `position` is set to                       // 4563
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust                        // 4564
   *   their height and/or positioning according to the viewport's size.                                               // 4565
   *                                                                                                                   // 4566
   * <br />                                                                                                            // 4567
   * <div class="alert alert-warning">                                                                                 // 4568
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and                   // 4569
   * not some child element.                                                                                           // 4570
   * </div>                                                                                                            // 4571
   *                                                                                                                   // 4572
   * @example                                                                                                          // 4573
     <example module="anchorScrollExample">                                                                            // 4574
       <file name="index.html">                                                                                        // 4575
         <div id="scrollArea" ng-controller="ScrollController">                                                        // 4576
           <a ng-click="gotoBottom()">Go to bottom</a>                                                                 // 4577
           <a id="bottom"></a> You're at the bottom!                                                                   // 4578
         </div>                                                                                                        // 4579
       </file>                                                                                                         // 4580
       <file name="script.js">                                                                                         // 4581
         angular.module('anchorScrollExample', [])                                                                     // 4582
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',                                    // 4583
             function ($scope, $location, $anchorScroll) {                                                             // 4584
               $scope.gotoBottom = function() {                                                                        // 4585
                 // set the location.hash to the id of                                                                 // 4586
                 // the element you wish to scroll to.                                                                 // 4587
                 $location.hash('bottom');                                                                             // 4588
                                                                                                                       // 4589
                 // call $anchorScroll()                                                                               // 4590
                 $anchorScroll();                                                                                      // 4591
               };                                                                                                      // 4592
             }]);                                                                                                      // 4593
       </file>                                                                                                         // 4594
       <file name="style.css">                                                                                         // 4595
         #scrollArea {                                                                                                 // 4596
           height: 280px;                                                                                              // 4597
           overflow: auto;                                                                                             // 4598
         }                                                                                                             // 4599
                                                                                                                       // 4600
         #bottom {                                                                                                     // 4601
           display: block;                                                                                             // 4602
           margin-top: 2000px;                                                                                         // 4603
         }                                                                                                             // 4604
       </file>                                                                                                         // 4605
     </example>                                                                                                        // 4606
   *                                                                                                                   // 4607
   * <hr />                                                                                                            // 4608
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).                   // 4609
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.                                      // 4610
   *                                                                                                                   // 4611
   * @example                                                                                                          // 4612
     <example module="anchorScrollOffsetExample">                                                                      // 4613
       <file name="index.html">                                                                                        // 4614
         <div class="fixed-header" ng-controller="headerCtrl">                                                         // 4615
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">                                           // 4616
             Go to anchor {{x}}                                                                                        // 4617
           </a>                                                                                                        // 4618
         </div>                                                                                                        // 4619
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">                                            // 4620
           Anchor {{x}} of 5                                                                                           // 4621
         </div>                                                                                                        // 4622
       </file>                                                                                                         // 4623
       <file name="script.js">                                                                                         // 4624
         angular.module('anchorScrollOffsetExample', [])                                                               // 4625
           .run(['$anchorScroll', function($anchorScroll) {                                                            // 4626
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels                                         // 4627
           }])                                                                                                         // 4628
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',                                          // 4629
             function ($anchorScroll, $location, $scope) {                                                             // 4630
               $scope.gotoAnchor = function(x) {                                                                       // 4631
                 var newHash = 'anchor' + x;                                                                           // 4632
                 if ($location.hash() !== newHash) {                                                                   // 4633
                   // set the $location.hash to `newHash` and                                                          // 4634
                   // $anchorScroll will automatically scroll to it                                                    // 4635
                   $location.hash('anchor' + x);                                                                       // 4636
                 } else {                                                                                              // 4637
                   // call $anchorScroll() explicitly,                                                                 // 4638
                   // since $location.hash hasn't changed                                                              // 4639
                   $anchorScroll();                                                                                    // 4640
                 }                                                                                                     // 4641
               };                                                                                                      // 4642
             }                                                                                                         // 4643
           ]);                                                                                                         // 4644
       </file>                                                                                                         // 4645
       <file name="style.css">                                                                                         // 4646
         body {                                                                                                        // 4647
           padding-top: 50px;                                                                                          // 4648
         }                                                                                                             // 4649
                                                                                                                       // 4650
         .anchor {                                                                                                     // 4651
           border: 2px dashed DarkOrchid;                                                                              // 4652
           padding: 10px 10px 200px 10px;                                                                              // 4653
         }                                                                                                             // 4654
                                                                                                                       // 4655
         .fixed-header {                                                                                               // 4656
           background-color: rgba(0, 0, 0, 0.2);                                                                       // 4657
           height: 50px;                                                                                               // 4658
           position: fixed;                                                                                            // 4659
           top: 0; left: 0; right: 0;                                                                                  // 4660
         }                                                                                                             // 4661
                                                                                                                       // 4662
         .fixed-header > a {                                                                                           // 4663
           display: inline-block;                                                                                      // 4664
           margin: 5px 15px;                                                                                           // 4665
         }                                                                                                             // 4666
       </file>                                                                                                         // 4667
     </example>                                                                                                        // 4668
   */                                                                                                                  // 4669
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {                        // 4670
    var document = $window.document;                                                                                   // 4671
                                                                                                                       // 4672
    // Helper function to get first anchor from a NodeList                                                             // 4673
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant                                 // 4674
    //  and working in all supported browsers.)                                                                        // 4675
    function getFirstAnchor(list) {                                                                                    // 4676
      var result = null;                                                                                               // 4677
      Array.prototype.some.call(list, function(element) {                                                              // 4678
        if (nodeName_(element) === 'a') {                                                                              // 4679
          result = element;                                                                                            // 4680
          return true;                                                                                                 // 4681
        }                                                                                                              // 4682
      });                                                                                                              // 4683
      return result;                                                                                                   // 4684
    }                                                                                                                  // 4685
                                                                                                                       // 4686
    function getYOffset() {                                                                                            // 4687
                                                                                                                       // 4688
      var offset = scroll.yOffset;                                                                                     // 4689
                                                                                                                       // 4690
      if (isFunction(offset)) {                                                                                        // 4691
        offset = offset();                                                                                             // 4692
      } else if (isElement(offset)) {                                                                                  // 4693
        var elem = offset[0];                                                                                          // 4694
        var style = $window.getComputedStyle(elem);                                                                    // 4695
        if (style.position !== 'fixed') {                                                                              // 4696
          offset = 0;                                                                                                  // 4697
        } else {                                                                                                       // 4698
          offset = elem.getBoundingClientRect().bottom;                                                                // 4699
        }                                                                                                              // 4700
      } else if (!isNumber(offset)) {                                                                                  // 4701
        offset = 0;                                                                                                    // 4702
      }                                                                                                                // 4703
                                                                                                                       // 4704
      return offset;                                                                                                   // 4705
    }                                                                                                                  // 4706
                                                                                                                       // 4707
    function scrollTo(elem) {                                                                                          // 4708
      if (elem) {                                                                                                      // 4709
        elem.scrollIntoView();                                                                                         // 4710
                                                                                                                       // 4711
        var offset = getYOffset();                                                                                     // 4712
                                                                                                                       // 4713
        if (offset) {                                                                                                  // 4714
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.                   // 4715
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the                   // 4716
          // top of the viewport.                                                                                      // 4717
          //                                                                                                           // 4718
          // IF the number of pixels from the top of `elem` to the end of the page's content is less                   // 4719
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some                  // 4720
          // way down the page.                                                                                        // 4721
          //                                                                                                           // 4722
          // This is often the case for elements near the bottom of the page.                                          // 4723
          //                                                                                                           // 4724
          // In such cases we do not need to scroll the whole `offset` up, just the difference between                 // 4725
          // the top of the element and the offset, which is enough to align the top of `elem` at the                  // 4726
          // desired position.                                                                                         // 4727
          var elemTop = elem.getBoundingClientRect().top;                                                              // 4728
          $window.scrollBy(0, elemTop - offset);                                                                       // 4729
        }                                                                                                              // 4730
      } else {                                                                                                         // 4731
        $window.scrollTo(0, 0);                                                                                        // 4732
      }                                                                                                                // 4733
    }                                                                                                                  // 4734
                                                                                                                       // 4735
    function scroll(hash) {                                                                                            // 4736
      hash = isString(hash) ? hash : $location.hash();                                                                 // 4737
      var elm;                                                                                                         // 4738
                                                                                                                       // 4739
      // empty hash, scroll to the top of the page                                                                     // 4740
      if (!hash) scrollTo(null);                                                                                       // 4741
                                                                                                                       // 4742
      // element with given id                                                                                         // 4743
      else if ((elm = document.getElementById(hash))) scrollTo(elm);                                                   // 4744
                                                                                                                       // 4745
      // first anchor with given name :-D                                                                              // 4746
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);                                // 4747
                                                                                                                       // 4748
      // no element and hash == 'top', scroll to the top of the page                                                   // 4749
      else if (hash === 'top') scrollTo(null);                                                                         // 4750
    }                                                                                                                  // 4751
                                                                                                                       // 4752
    // does not scroll when user clicks on anchor link that is currently on                                            // 4753
    // (no url change, no $location.hash() change), browser native does scroll                                         // 4754
    if (autoScrollingEnabled) {                                                                                        // 4755
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},                                         // 4756
        function autoScrollWatchAction(newVal, oldVal) {                                                               // 4757
          // skip the initial scroll if $location.hash is empty                                                        // 4758
          if (newVal === oldVal && newVal === '') return;                                                              // 4759
                                                                                                                       // 4760
          jqLiteDocumentLoaded(function() {                                                                            // 4761
            $rootScope.$evalAsync(scroll);                                                                             // 4762
          });                                                                                                          // 4763
        });                                                                                                            // 4764
    }                                                                                                                  // 4765
                                                                                                                       // 4766
    return scroll;                                                                                                     // 4767
  }];                                                                                                                  // 4768
}                                                                                                                      // 4769
                                                                                                                       // 4770
var $animateMinErr = minErr('$animate');                                                                               // 4771
var ELEMENT_NODE = 1;                                                                                                  // 4772
var NG_ANIMATE_CLASSNAME = 'ng-animate';                                                                               // 4773
                                                                                                                       // 4774
function mergeClasses(a,b) {                                                                                           // 4775
  if (!a && !b) return '';                                                                                             // 4776
  if (!a) return b;                                                                                                    // 4777
  if (!b) return a;                                                                                                    // 4778
  if (isArray(a)) a = a.join(' ');                                                                                     // 4779
  if (isArray(b)) b = b.join(' ');                                                                                     // 4780
  return a + ' ' + b;                                                                                                  // 4781
}                                                                                                                      // 4782
                                                                                                                       // 4783
function extractElementNode(element) {                                                                                 // 4784
  for (var i = 0; i < element.length; i++) {                                                                           // 4785
    var elm = element[i];                                                                                              // 4786
    if (elm.nodeType === ELEMENT_NODE) {                                                                               // 4787
      return elm;                                                                                                      // 4788
    }                                                                                                                  // 4789
  }                                                                                                                    // 4790
}                                                                                                                      // 4791
                                                                                                                       // 4792
function splitClasses(classes) {                                                                                       // 4793
  if (isString(classes)) {                                                                                             // 4794
    classes = classes.split(' ');                                                                                      // 4795
  }                                                                                                                    // 4796
                                                                                                                       // 4797
  // Use createMap() to prevent class assumptions involving property names in                                          // 4798
  // Object.prototype                                                                                                  // 4799
  var obj = createMap();                                                                                               // 4800
  forEach(classes, function(klass) {                                                                                   // 4801
    // sometimes the split leaves empty string values                                                                  // 4802
    // incase extra spaces were applied to the options                                                                 // 4803
    if (klass.length) {                                                                                                // 4804
      obj[klass] = true;                                                                                               // 4805
    }                                                                                                                  // 4806
  });                                                                                                                  // 4807
  return obj;                                                                                                          // 4808
}                                                                                                                      // 4809
                                                                                                                       // 4810
// if any other type of options value besides an Object value is                                                       // 4811
// passed into the $animate.method() animation then this helper code                                                   // 4812
// will be run which will ignore it. While this patch is not the                                                       // 4813
// greatest solution to this, a lot of existing plugins depend on                                                      // 4814
// $animate to either call the callback (< 1.2) or return a promise                                                    // 4815
// that can be changed. This helper function ensures that the options                                                  // 4816
// are wiped clean incase a callback function is provided.                                                             // 4817
function prepareAnimateOptions(options) {                                                                              // 4818
  return isObject(options)                                                                                             // 4819
      ? options                                                                                                        // 4820
      : {};                                                                                                            // 4821
}                                                                                                                      // 4822
                                                                                                                       // 4823
var $$CoreAnimateRunnerProvider = function() {                                                                         // 4824
  this.$get = ['$q', '$$rAF', function($q, $$rAF) {                                                                    // 4825
    function AnimateRunner() {}                                                                                        // 4826
    AnimateRunner.all = noop;                                                                                          // 4827
    AnimateRunner.chain = noop;                                                                                        // 4828
    AnimateRunner.prototype = {                                                                                        // 4829
      end: noop,                                                                                                       // 4830
      cancel: noop,                                                                                                    // 4831
      resume: noop,                                                                                                    // 4832
      pause: noop,                                                                                                     // 4833
      complete: noop,                                                                                                  // 4834
      then: function(pass, fail) {                                                                                     // 4835
        return $q(function(resolve) {                                                                                  // 4836
          $$rAF(function() {                                                                                           // 4837
            resolve();                                                                                                 // 4838
          });                                                                                                          // 4839
        }).then(pass, fail);                                                                                           // 4840
      }                                                                                                                // 4841
    };                                                                                                                 // 4842
    return AnimateRunner;                                                                                              // 4843
  }];                                                                                                                  // 4844
};                                                                                                                     // 4845
                                                                                                                       // 4846
// this is prefixed with Core since it conflicts with                                                                  // 4847
// the animateQueueProvider defined in ngAnimate/animateQueue.js                                                       // 4848
var $$CoreAnimateQueueProvider = function() {                                                                          // 4849
  var postDigestQueue = new HashMap();                                                                                 // 4850
  var postDigestElements = [];                                                                                         // 4851
                                                                                                                       // 4852
  this.$get = ['$$AnimateRunner', '$rootScope',                                                                        // 4853
       function($$AnimateRunner,   $rootScope) {                                                                       // 4854
    return {                                                                                                           // 4855
      enabled: noop,                                                                                                   // 4856
      on: noop,                                                                                                        // 4857
      off: noop,                                                                                                       // 4858
      pin: noop,                                                                                                       // 4859
                                                                                                                       // 4860
      push: function(element, event, options, domOperation) {                                                          // 4861
        domOperation        && domOperation();                                                                         // 4862
                                                                                                                       // 4863
        options = options || {};                                                                                       // 4864
        options.from        && element.css(options.from);                                                              // 4865
        options.to          && element.css(options.to);                                                                // 4866
                                                                                                                       // 4867
        if (options.addClass || options.removeClass) {                                                                 // 4868
          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);                                  // 4869
        }                                                                                                              // 4870
                                                                                                                       // 4871
        return new $$AnimateRunner(); // jshint ignore:line                                                            // 4872
      }                                                                                                                // 4873
    };                                                                                                                 // 4874
                                                                                                                       // 4875
    function addRemoveClassesPostDigest(element, add, remove) {                                                        // 4876
      var classVal, data = postDigestQueue.get(element);                                                               // 4877
                                                                                                                       // 4878
      if (!data) {                                                                                                     // 4879
        postDigestQueue.put(element, data = {});                                                                       // 4880
        postDigestElements.push(element);                                                                              // 4881
      }                                                                                                                // 4882
                                                                                                                       // 4883
      var updateData = function(classes, value) {                                                                      // 4884
        var changed = false;                                                                                           // 4885
        if (classes) {                                                                                                 // 4886
          classes = isString(classes) ? classes.split(' ') :                                                           // 4887
                    isArray(classes) ? classes : [];                                                                   // 4888
          forEach(classes, function(className) {                                                                       // 4889
            if (className) {                                                                                           // 4890
              changed = true;                                                                                          // 4891
              data[className] = value;                                                                                 // 4892
            }                                                                                                          // 4893
          });                                                                                                          // 4894
        }                                                                                                              // 4895
        return changed;                                                                                                // 4896
      };                                                                                                               // 4897
                                                                                                                       // 4898
      var classesAdded = updateData(add, true);                                                                        // 4899
      var classesRemoved = updateData(remove, false);                                                                  // 4900
      if ((!classesAdded && !classesRemoved) || postDigestElements.length > 1) return;                                 // 4901
                                                                                                                       // 4902
      $rootScope.$$postDigest(function() {                                                                             // 4903
        forEach(postDigestElements, function(element) {                                                                // 4904
          var data = postDigestQueue.get(element);                                                                     // 4905
          if (data) {                                                                                                  // 4906
            var existing = splitClasses(element.attr('class'));                                                        // 4907
            var toAdd = '';                                                                                            // 4908
            var toRemove = '';                                                                                         // 4909
            forEach(data, function(status, className) {                                                                // 4910
              var hasClass = !!existing[className];                                                                    // 4911
              if (status !== hasClass) {                                                                               // 4912
                if (status) {                                                                                          // 4913
                  toAdd += (toAdd.length ? ' ' : '') + className;                                                      // 4914
                } else {                                                                                               // 4915
                  toRemove += (toRemove.length ? ' ' : '') + className;                                                // 4916
                }                                                                                                      // 4917
              }                                                                                                        // 4918
            });                                                                                                        // 4919
                                                                                                                       // 4920
            forEach(element, function(elm) {                                                                           // 4921
              toAdd    && jqLiteAddClass(elm, toAdd);                                                                  // 4922
              toRemove && jqLiteRemoveClass(elm, toRemove);                                                            // 4923
            });                                                                                                        // 4924
            postDigestQueue.remove(element);                                                                           // 4925
          }                                                                                                            // 4926
        });                                                                                                            // 4927
                                                                                                                       // 4928
        postDigestElements.length = 0;                                                                                 // 4929
      });                                                                                                              // 4930
    }                                                                                                                  // 4931
  }];                                                                                                                  // 4932
};                                                                                                                     // 4933
                                                                                                                       // 4934
/**                                                                                                                    // 4935
 * @ngdoc provider                                                                                                     // 4936
 * @name $animateProvider                                                                                              // 4937
 *                                                                                                                     // 4938
 * @description                                                                                                        // 4939
 * Default implementation of $animate that doesn't perform any animations, instead just                                // 4940
 * synchronously performs DOM updates and resolves the returned runner promise.                                        // 4941
 *                                                                                                                     // 4942
 * In order to enable animations the `ngAnimate` module has to be loaded.                                              // 4943
 *                                                                                                                     // 4944
 * To see the functional implementation check out `src/ngAnimate/animate.js`.                                          // 4945
 */                                                                                                                    // 4946
var $AnimateProvider = ['$provide', function($provide) {                                                               // 4947
  var provider = this;                                                                                                 // 4948
                                                                                                                       // 4949
  this.$$registeredAnimations = Object.create(null);                                                                   // 4950
                                                                                                                       // 4951
   /**                                                                                                                 // 4952
   * @ngdoc method                                                                                                     // 4953
   * @name $animateProvider#register                                                                                   // 4954
   *                                                                                                                   // 4955
   * @description                                                                                                      // 4956
   * Registers a new injectable animation factory function. The factory function produces the                          // 4957
   * animation object which contains callback functions for each event that is expected to be                          // 4958
   * animated.                                                                                                         // 4959
   *                                                                                                                   // 4960
   *   * `eventFn`: `function(element, ... , doneFunction, options)`                                                   // 4961
   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending                    // 4962
   *   on the type of animation additional arguments will be injected into the animation function. The                 // 4963
   *   list below explains the function signatures for the different animation methods:                                // 4964
   *                                                                                                                   // 4965
   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)                              // 4966
   *   - addClass: function(element, addedClasses, doneFunction, options)                                              // 4967
   *   - removeClass: function(element, removedClasses, doneFunction, options)                                         // 4968
   *   - enter, leave, move: function(element, doneFunction, options)                                                  // 4969
   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)                                       // 4970
   *                                                                                                                   // 4971
   *   Make sure to trigger the `doneFunction` once the animation is fully complete.                                   // 4972
   *                                                                                                                   // 4973
   * ```js                                                                                                             // 4974
   *   return {                                                                                                        // 4975
   *     //enter, leave, move signature                                                                                // 4976
   *     eventFn : function(element, done, options) {                                                                  // 4977
   *       //code to run the animation                                                                                 // 4978
   *       //once complete, then run done()                                                                            // 4979
   *       return function endFunction(wasCancelled) {                                                                 // 4980
   *         //code to cancel the animation                                                                            // 4981
   *       }                                                                                                           // 4982
   *     }                                                                                                             // 4983
   *   }                                                                                                               // 4984
   * ```                                                                                                               // 4985
   *                                                                                                                   // 4986
   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).      // 4987
   * @param {Function} factory The factory function that will be executed to return the animation                      // 4988
   *                           object.                                                                                 // 4989
   */                                                                                                                  // 4990
  this.register = function(name, factory) {                                                                            // 4991
    if (name && name.charAt(0) !== '.') {                                                                              // 4992
      throw $animateMinErr('notcsel', "Expecting class selector starting with '.' got '{0}'.", name);                  // 4993
    }                                                                                                                  // 4994
                                                                                                                       // 4995
    var key = name + '-animation';                                                                                     // 4996
    provider.$$registeredAnimations[name.substr(1)] = key;                                                             // 4997
    $provide.factory(key, factory);                                                                                    // 4998
  };                                                                                                                   // 4999
                                                                                                                       // 5000
  /**                                                                                                                  // 5001
   * @ngdoc method                                                                                                     // 5002
   * @name $animateProvider#classNameFilter                                                                            // 5003
   *                                                                                                                   // 5004
   * @description                                                                                                      // 5005
   * Sets and/or returns the CSS class regular expression that is checked when performing                              // 5006
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will                                 // 5007
   * therefore enable $animate to attempt to perform an animation on any element that is triggered.                    // 5008
   * When setting the `classNameFilter` value, animations will only be performed on elements                           // 5009
   * that successfully match the filter expression. This in turn can boost performance                                 // 5010
   * for low-powered devices as well as applications containing a lot of structural operations.                        // 5011
   * @param {RegExp=} expression The className expression which will be checked against all animations                 // 5012
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value            // 5013
   */                                                                                                                  // 5014
  this.classNameFilter = function(expression) {                                                                        // 5015
    if (arguments.length === 1) {                                                                                      // 5016
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;                                     // 5017
      if (this.$$classNameFilter) {                                                                                    // 5018
        var reservedRegex = new RegExp("(\\s+|\\/)" + NG_ANIMATE_CLASSNAME + "(\\s+|\\/)");                            // 5019
        if (reservedRegex.test(this.$$classNameFilter.toString())) {                                                   // 5020
          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
                                                                                                                       // 5022
        }                                                                                                              // 5023
      }                                                                                                                // 5024
    }                                                                                                                  // 5025
    return this.$$classNameFilter;                                                                                     // 5026
  };                                                                                                                   // 5027
                                                                                                                       // 5028
  this.$get = ['$$animateQueue', function($$animateQueue) {                                                            // 5029
    function domInsert(element, parentElement, afterElement) {                                                         // 5030
      // if for some reason the previous element was removed                                                           // 5031
      // from the dom sometime before this code runs then let's                                                        // 5032
      // just stick to using the parent element as the anchor                                                          // 5033
      if (afterElement) {                                                                                              // 5034
        var afterNode = extractElementNode(afterElement);                                                              // 5035
        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {                                 // 5036
          afterElement = null;                                                                                         // 5037
        }                                                                                                              // 5038
      }                                                                                                                // 5039
      afterElement ? afterElement.after(element) : parentElement.prepend(element);                                     // 5040
    }                                                                                                                  // 5041
                                                                                                                       // 5042
    /**                                                                                                                // 5043
     * @ngdoc service                                                                                                  // 5044
     * @name $animate                                                                                                  // 5045
     * @description The $animate service exposes a series of DOM utility methods that provide support                  // 5046
     * for animation hooks. The default behavior is the application of DOM operations, however,                        // 5047
     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting                  // 5048
     * to ensure that animation runs with the triggered DOM operation.                                                 // 5049
     *                                                                                                                 // 5050
     * By default $animate doesn't trigger an animations. This is because the `ngAnimate` module isn't                 // 5051
     * included and only when it is active then the animation hooks that `$animate` triggers will be                   // 5052
     * functional. Once active then all structural `ng-` directives will trigger animations as they perform            // 5053
     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,                       // 5054
     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.                                        // 5055
     *                                                                                                                 // 5056
     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
     *                                                                                                                 // 5058
     * To learn more about enabling animation support, click here to visit the                                         // 5059
     * {@link ngAnimate ngAnimate module page}.                                                                        // 5060
     */                                                                                                                // 5061
    return {                                                                                                           // 5062
      // we don't call it directly since non-existant arguments may                                                    // 5063
      // be interpreted as null within the sub enabled function                                                        // 5064
                                                                                                                       // 5065
      /**                                                                                                              // 5066
       *                                                                                                               // 5067
       * @ngdoc method                                                                                                 // 5068
       * @name $animate#on                                                                                             // 5069
       * @kind function                                                                                                // 5070
       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)      // 5071
       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
       *    is fired with the following params:                                                                        // 5073
       *                                                                                                               // 5074
       * ```js                                                                                                         // 5075
       * $animate.on('enter', container,                                                                               // 5076
       *    function callback(element, phase) {                                                                        // 5077
       *      // cool we detected an enter animation within the container                                              // 5078
       *    }                                                                                                          // 5079
       * );                                                                                                            // 5080
       * ```                                                                                                           // 5081
       *                                                                                                               // 5082
       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
       *     as well as among its children                                                                             // 5085
       * @param {Function} callback the callback function that will be fired when the listener is triggered            // 5086
       *                                                                                                               // 5087
       * The arguments present in the callback function are:                                                           // 5088
       * * `element` - The captured DOM element that the animation was fired on.                                       // 5089
       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
       */                                                                                                              // 5091
      on: $$animateQueue.on,                                                                                           // 5092
                                                                                                                       // 5093
      /**                                                                                                              // 5094
       *                                                                                                               // 5095
       * @ngdoc method                                                                                                 // 5096
       * @name $animate#off                                                                                            // 5097
       * @kind function                                                                                                // 5098
       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
       * can be used in three different ways depending on the arguments:                                               // 5100
       *                                                                                                               // 5101
       * ```js                                                                                                         // 5102
       * // remove all the animation event listeners listening for `enter`                                             // 5103
       * $animate.off('enter');                                                                                        // 5104
       *                                                                                                               // 5105
       * // remove all the animation event listeners listening for `enter` on the given element and its children       // 5106
       * $animate.off('enter', container);                                                                             // 5107
       *                                                                                                               // 5108
       * // remove the event listener function provided by `listenerFn` that is set                                    // 5109
       * // to listen for `enter` on the given `element` as well as its children                                       // 5110
       * $animate.off('enter', container, callback);                                                                   // 5111
       * ```                                                                                                           // 5112
       *                                                                                                               // 5113
       * @param {string} event the animation event (e.g. enter, leave, move, addClass, removeClass, etc...)            // 5114
       * @param {DOMElement=} container the container element the event listener was placed on                         // 5115
       * @param {Function=} callback the callback function that was registered as the listener                         // 5116
       */                                                                                                              // 5117
      off: $$animateQueue.off,                                                                                         // 5118
                                                                                                                       // 5119
      /**                                                                                                              // 5120
       * @ngdoc method                                                                                                 // 5121
       * @name $animate#pin                                                                                            // 5122
       * @kind function                                                                                                // 5123
       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
       *    element despite being outside the realm of the application or within another application. Say for example if the application
       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
       *                                                                                                               // 5130
       *    Note that this feature is only active when the `ngAnimate` module is used.                                 // 5131
       *                                                                                                               // 5132
       * @param {DOMElement} element the external element that will be pinned                                          // 5133
       * @param {DOMElement} parentElement the host parent element that will be associated with the external element   // 5134
       */                                                                                                              // 5135
      pin: $$animateQueue.pin,                                                                                         // 5136
                                                                                                                       // 5137
      /**                                                                                                              // 5138
       *                                                                                                               // 5139
       * @ngdoc method                                                                                                 // 5140
       * @name $animate#enabled                                                                                        // 5141
       * @kind function                                                                                                // 5142
       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
       * function can be called in four ways:                                                                          // 5144
       *                                                                                                               // 5145
       * ```js                                                                                                         // 5146
       * // returns true or false                                                                                      // 5147
       * $animate.enabled();                                                                                           // 5148
       *                                                                                                               // 5149
       * // changes the enabled state for all animations                                                               // 5150
       * $animate.enabled(false);                                                                                      // 5151
       * $animate.enabled(true);                                                                                       // 5152
       *                                                                                                               // 5153
       * // returns true or false if animations are enabled for an element                                             // 5154
       * $animate.enabled(element);                                                                                    // 5155
       *                                                                                                               // 5156
       * // changes the enabled state for an element and its children                                                  // 5157
       * $animate.enabled(element, true);                                                                              // 5158
       * $animate.enabled(element, false);                                                                             // 5159
       * ```                                                                                                           // 5160
       *                                                                                                               // 5161
       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state       // 5162
       * @param {boolean=} enabled whether or not the animations will be enabled for the element                       // 5163
       *                                                                                                               // 5164
       * @return {boolean} whether or not animations are enabled                                                       // 5165
       */                                                                                                              // 5166
      enabled: $$animateQueue.enabled,                                                                                 // 5167
                                                                                                                       // 5168
      /**                                                                                                              // 5169
       * @ngdoc method                                                                                                 // 5170
       * @name $animate#cancel                                                                                         // 5171
       * @kind function                                                                                                // 5172
       * @description Cancels the provided animation.                                                                  // 5173
       *                                                                                                               // 5174
       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.        // 5175
       */                                                                                                              // 5176
      cancel: function(runner) {                                                                                       // 5177
        runner.end && runner.end();                                                                                    // 5178
      },                                                                                                               // 5179
                                                                                                                       // 5180
      /**                                                                                                              // 5181
       *                                                                                                               // 5182
       * @ngdoc method                                                                                                 // 5183
       * @name $animate#enter                                                                                          // 5184
       * @kind function                                                                                                // 5185
       * @description Inserts the element into the DOM either after the `after` element (if provided) or               // 5186
       *   as the first child within the `parent` element and then triggers an animation.                              // 5187
       *   A promise is returned that will be resolved during the next digest once the animation                       // 5188
       *   has completed.                                                                                              // 5189
       *                                                                                                               // 5190
       * @param {DOMElement} element the element which will be inserted into the DOM                                   // 5191
       * @param {DOMElement} parent the parent element which will append the element as                                // 5192
       *   a child (so long as the after element is not present)                                                       // 5193
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5194
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5195
       *                                                                                                               // 5196
       * @return {Promise} the animation callback promise                                                              // 5197
       */                                                                                                              // 5198
      enter: function(element, parent, after, options) {                                                               // 5199
        parent = parent && jqLite(parent);                                                                             // 5200
        after = after && jqLite(after);                                                                                // 5201
        parent = parent || after.parent();                                                                             // 5202
        domInsert(element, parent, after);                                                                             // 5203
        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));                                  // 5204
      },                                                                                                               // 5205
                                                                                                                       // 5206
      /**                                                                                                              // 5207
       *                                                                                                               // 5208
       * @ngdoc method                                                                                                 // 5209
       * @name $animate#move                                                                                           // 5210
       * @kind function                                                                                                // 5211
       * @description Inserts (moves) the element into its new position in the DOM either after                        // 5212
       *   the `after` element (if provided) or as the first child within the `parent` element                         // 5213
       *   and then triggers an animation. A promise is returned that will be resolved                                 // 5214
       *   during the next digest once the animation has completed.                                                    // 5215
       *                                                                                                               // 5216
       * @param {DOMElement} element the element which will be moved into the new DOM position                         // 5217
       * @param {DOMElement} parent the parent element which will append the element as                                // 5218
       *   a child (so long as the after element is not present)                                                       // 5219
       * @param {DOMElement=} after the sibling element after which the element will be appended                       // 5220
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5221
       *                                                                                                               // 5222
       * @return {Promise} the animation callback promise                                                              // 5223
       */                                                                                                              // 5224
      move: function(element, parent, after, options) {                                                                // 5225
        parent = parent && jqLite(parent);                                                                             // 5226
        after = after && jqLite(after);                                                                                // 5227
        parent = parent || after.parent();                                                                             // 5228
        domInsert(element, parent, after);                                                                             // 5229
        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));                                   // 5230
      },                                                                                                               // 5231
                                                                                                                       // 5232
      /**                                                                                                              // 5233
       * @ngdoc method                                                                                                 // 5234
       * @name $animate#leave                                                                                          // 5235
       * @kind function                                                                                                // 5236
       * @description Triggers an animation and then removes the element from the DOM.                                 // 5237
       * When the function is called a promise is returned that will be resolved during the next                       // 5238
       * digest once the animation has completed.                                                                      // 5239
       *                                                                                                               // 5240
       * @param {DOMElement} element the element which will be removed from the DOM                                    // 5241
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5242
       *                                                                                                               // 5243
       * @return {Promise} the animation callback promise                                                              // 5244
       */                                                                                                              // 5245
      leave: function(element, options) {                                                                              // 5246
        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {                      // 5247
          element.remove();                                                                                            // 5248
        });                                                                                                            // 5249
      },                                                                                                               // 5250
                                                                                                                       // 5251
      /**                                                                                                              // 5252
       * @ngdoc method                                                                                                 // 5253
       * @name $animate#addClass                                                                                       // 5254
       * @kind function                                                                                                // 5255
       *                                                                                                               // 5256
       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon      // 5257
       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an     // 5258
       *   animation if element already contains the CSS class or if the class is removed at a later step.             // 5259
       *   Note that class-based animations are treated differently compared to structural animations                  // 5260
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5261
       *   depending if CSS or JavaScript animations are used.                                                         // 5262
       *                                                                                                               // 5263
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5264
       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)    // 5265
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5266
       *                                                                                                               // 5267
       * @return {Promise} the animation callback promise                                                              // 5268
       */                                                                                                              // 5269
      addClass: function(element, className, options) {                                                                // 5270
        options = prepareAnimateOptions(options);                                                                      // 5271
        options.addClass = mergeClasses(options.addclass, className);                                                  // 5272
        return $$animateQueue.push(element, 'addClass', options);                                                      // 5273
      },                                                                                                               // 5274
                                                                                                                       // 5275
      /**                                                                                                              // 5276
       * @ngdoc method                                                                                                 // 5277
       * @name $animate#removeClass                                                                                    // 5278
       * @kind function                                                                                                // 5279
       *                                                                                                               // 5280
       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon     // 5281
       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an  // 5282
       *   animation if element does not contain the CSS class or if the class is added at a later step.               // 5283
       *   Note that class-based animations are treated differently compared to structural animations                  // 5284
       *   (like enter, move and leave) since the CSS classes may be added/removed at different points                 // 5285
       *   depending if CSS or JavaScript animations are used.                                                         // 5286
       *                                                                                                               // 5287
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5288
       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)  // 5289
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5290
       *                                                                                                               // 5291
       * @return {Promise} the animation callback promise                                                              // 5292
       */                                                                                                              // 5293
      removeClass: function(element, className, options) {                                                             // 5294
        options = prepareAnimateOptions(options);                                                                      // 5295
        options.removeClass = mergeClasses(options.removeClass, className);                                            // 5296
        return $$animateQueue.push(element, 'removeClass', options);                                                   // 5297
      },                                                                                                               // 5298
                                                                                                                       // 5299
      /**                                                                                                              // 5300
       * @ngdoc method                                                                                                 // 5301
       * @name $animate#setClass                                                                                       // 5302
       * @kind function                                                                                                // 5303
       *                                                                                                               // 5304
       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)   // 5305
       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and            // 5306
       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has    // 5307
       *    passed. Note that class-based animations are treated differently compared to structural animations         // 5308
       *    (like enter, move and leave) since the CSS classes may be added/removed at different points                // 5309
       *    depending if CSS or JavaScript animations are used.                                                        // 5310
       *                                                                                                               // 5311
       * @param {DOMElement} element the element which the CSS classes will be applied to                              // 5312
       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)          // 5313
       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)     // 5314
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5315
       *                                                                                                               // 5316
       * @return {Promise} the animation callback promise                                                              // 5317
       */                                                                                                              // 5318
      setClass: function(element, add, remove, options) {                                                              // 5319
        options = prepareAnimateOptions(options);                                                                      // 5320
        options.addClass = mergeClasses(options.addClass, add);                                                        // 5321
        options.removeClass = mergeClasses(options.removeClass, remove);                                               // 5322
        return $$animateQueue.push(element, 'setClass', options);                                                      // 5323
      },                                                                                                               // 5324
                                                                                                                       // 5325
      /**                                                                                                              // 5326
       * @ngdoc method                                                                                                 // 5327
       * @name $animate#animate                                                                                        // 5328
       * @kind function                                                                                                // 5329
       *                                                                                                               // 5330
       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
       * If any detected CSS transition, keyframe or JavaScript matches the provided className value then the animation will take
       * on the provided styles. For example, if a transition animation is set for the given className then the provided from and
       * to styles will be applied alongside the given transition. If a JavaScript animation is detected then the provided styles
       * will be given in as function paramters into the `animate` method (or as apart of the `options` parameter).    // 5335
       *                                                                                                               // 5336
       * @param {DOMElement} element the element which the CSS styles will be applied to                               // 5337
       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.        // 5341
       *    (Note that if no animation is detected then this value will not be appplied to the element.)               // 5342
       * @param {object=} options an optional collection of options/styles that will be applied to the element         // 5343
       *                                                                                                               // 5344
       * @return {Promise} the animation callback promise                                                              // 5345
       */                                                                                                              // 5346
      animate: function(element, from, to, className, options) {                                                       // 5347
        options = prepareAnimateOptions(options);                                                                      // 5348
        options.from = options.from ? extend(options.from, from) : from;                                               // 5349
        options.to   = options.to   ? extend(options.to, to)     : to;                                                 // 5350
                                                                                                                       // 5351
        className = className || 'ng-inline-animate';                                                                  // 5352
        options.tempClasses = mergeClasses(options.tempClasses, className);                                            // 5353
        return $$animateQueue.push(element, 'animate', options);                                                       // 5354
      }                                                                                                                // 5355
    };                                                                                                                 // 5356
  }];                                                                                                                  // 5357
}];                                                                                                                    // 5358
                                                                                                                       // 5359
/**                                                                                                                    // 5360
 * @ngdoc service                                                                                                      // 5361
 * @name $animateCss                                                                                                   // 5362
 * @kind object                                                                                                        // 5363
 *                                                                                                                     // 5364
 * @description                                                                                                        // 5365
 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,                       // 5366
 * then the `$animateCss` service will actually perform animations.                                                    // 5367
 *                                                                                                                     // 5368
 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.                                 // 5369
 */                                                                                                                    // 5370
var $CoreAnimateCssProvider = function() {                                                                             // 5371
  this.$get = ['$$rAF', '$q', function($$rAF, $q) {                                                                    // 5372
                                                                                                                       // 5373
    var RAFPromise = function() {};                                                                                    // 5374
    RAFPromise.prototype = {                                                                                           // 5375
      done: function(cancel) {                                                                                         // 5376
        this.defer && this.defer[cancel === true ? 'reject' : 'resolve']();                                            // 5377
      },                                                                                                               // 5378
      end: function() {                                                                                                // 5379
        this.done();                                                                                                   // 5380
      },                                                                                                               // 5381
      cancel: function() {                                                                                             // 5382
        this.done(true);                                                                                               // 5383
      },                                                                                                               // 5384
      getPromise: function() {                                                                                         // 5385
        if (!this.defer) {                                                                                             // 5386
          this.defer = $q.defer();                                                                                     // 5387
        }                                                                                                              // 5388
        return this.defer.promise;                                                                                     // 5389
      },                                                                                                               // 5390
      then: function(f1,f2) {                                                                                          // 5391
        return this.getPromise().then(f1,f2);                                                                          // 5392
      },                                                                                                               // 5393
      'catch': function(f1) {                                                                                          // 5394
        return this.getPromise()['catch'](f1);                                                                         // 5395
      },                                                                                                               // 5396
      'finally': function(f1) {                                                                                        // 5397
        return this.getPromise()['finally'](f1);                                                                       // 5398
      }                                                                                                                // 5399
    };                                                                                                                 // 5400
                                                                                                                       // 5401
    return function(element, options) {                                                                                // 5402
      if (options.from) {                                                                                              // 5403
        element.css(options.from);                                                                                     // 5404
        options.from = null;                                                                                           // 5405
      }                                                                                                                // 5406
                                                                                                                       // 5407
      var closed, runner = new RAFPromise();                                                                           // 5408
      return {                                                                                                         // 5409
        start: run,                                                                                                    // 5410
        end: run                                                                                                       // 5411
      };                                                                                                               // 5412
                                                                                                                       // 5413
      function run() {                                                                                                 // 5414
        $$rAF(function() {                                                                                             // 5415
          close();                                                                                                     // 5416
          if (!closed) {                                                                                               // 5417
            runner.done();                                                                                             // 5418
          }                                                                                                            // 5419
          closed = true;                                                                                               // 5420
        });                                                                                                            // 5421
        return runner;                                                                                                 // 5422
      }                                                                                                                // 5423
                                                                                                                       // 5424
      function close() {                                                                                               // 5425
        if (options.addClass) {                                                                                        // 5426
          element.addClass(options.addClass);                                                                          // 5427
          options.addClass = null;                                                                                     // 5428
        }                                                                                                              // 5429
        if (options.removeClass) {                                                                                     // 5430
          element.removeClass(options.removeClass);                                                                    // 5431
          options.removeClass = null;                                                                                  // 5432
        }                                                                                                              // 5433
        if (options.to) {                                                                                              // 5434
          element.css(options.to);                                                                                     // 5435
          options.to = null;                                                                                           // 5436
        }                                                                                                              // 5437
      }                                                                                                                // 5438
    };                                                                                                                 // 5439
  }];                                                                                                                  // 5440
};                                                                                                                     // 5441
                                                                                                                       // 5442
/* global stripHash: true */                                                                                           // 5443
                                                                                                                       // 5444
/**                                                                                                                    // 5445
 * ! This is a private undocumented service !                                                                          // 5446
 *                                                                                                                     // 5447
 * @name $browser                                                                                                      // 5448
 * @requires $log                                                                                                      // 5449
 * @description                                                                                                        // 5450
 * This object has two goals:                                                                                          // 5451
 *                                                                                                                     // 5452
 * - hide all the global state in the browser caused by the window object                                              // 5453
 * - abstract away all the browser specific features and inconsistencies                                               // 5454
 *                                                                                                                     // 5455
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`                                  // 5456
 * service, which can be used for convenient testing of the application without the interaction with                   // 5457
 * the real browser apis.                                                                                              // 5458
 */                                                                                                                    // 5459
/**                                                                                                                    // 5460
 * @param {object} window The global window object.                                                                    // 5461
 * @param {object} document jQuery wrapped document.                                                                   // 5462
 * @param {object} $log window.console or an object with the same interface.                                           // 5463
 * @param {object} $sniffer $sniffer service                                                                           // 5464
 */                                                                                                                    // 5465
function Browser(window, document, $log, $sniffer) {                                                                   // 5466
  var self = this,                                                                                                     // 5467
      rawDocument = document[0],                                                                                       // 5468
      location = window.location,                                                                                      // 5469
      history = window.history,                                                                                        // 5470
      setTimeout = window.setTimeout,                                                                                  // 5471
      clearTimeout = window.clearTimeout,                                                                              // 5472
      pendingDeferIds = {};                                                                                            // 5473
                                                                                                                       // 5474
  self.isMock = false;                                                                                                 // 5475
                                                                                                                       // 5476
  var outstandingRequestCount = 0;                                                                                     // 5477
  var outstandingRequestCallbacks = [];                                                                                // 5478
                                                                                                                       // 5479
  // TODO(vojta): remove this temporary api                                                                            // 5480
  self.$$completeOutstandingRequest = completeOutstandingRequest;                                                      // 5481
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };                                       // 5482
                                                                                                                       // 5483
  /**                                                                                                                  // 5484
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`                    // 5485
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.                            // 5486
   */                                                                                                                  // 5487
  function completeOutstandingRequest(fn) {                                                                            // 5488
    try {                                                                                                              // 5489
      fn.apply(null, sliceArgs(arguments, 1));                                                                         // 5490
    } finally {                                                                                                        // 5491
      outstandingRequestCount--;                                                                                       // 5492
      if (outstandingRequestCount === 0) {                                                                             // 5493
        while (outstandingRequestCallbacks.length) {                                                                   // 5494
          try {                                                                                                        // 5495
            outstandingRequestCallbacks.pop()();                                                                       // 5496
          } catch (e) {                                                                                                // 5497
            $log.error(e);                                                                                             // 5498
          }                                                                                                            // 5499
        }                                                                                                              // 5500
      }                                                                                                                // 5501
    }                                                                                                                  // 5502
  }                                                                                                                    // 5503
                                                                                                                       // 5504
  function getHash(url) {                                                                                              // 5505
    var index = url.indexOf('#');                                                                                      // 5506
    return index === -1 ? '' : url.substr(index);                                                                      // 5507
  }                                                                                                                    // 5508
                                                                                                                       // 5509
  /**                                                                                                                  // 5510
   * @private                                                                                                          // 5511
   * Note: this method is used only by scenario runner                                                                 // 5512
   * TODO(vojta): prefix this method with $$ ?                                                                         // 5513
   * @param {function()} callback Function that will be called when no outstanding request                             // 5514
   */                                                                                                                  // 5515
  self.notifyWhenNoOutstandingRequests = function(callback) {                                                          // 5516
    if (outstandingRequestCount === 0) {                                                                               // 5517
      callback();                                                                                                      // 5518
    } else {                                                                                                           // 5519
      outstandingRequestCallbacks.push(callback);                                                                      // 5520
    }                                                                                                                  // 5521
  };                                                                                                                   // 5522
                                                                                                                       // 5523
  //////////////////////////////////////////////////////////////                                                       // 5524
  // URL API                                                                                                           // 5525
  //////////////////////////////////////////////////////////////                                                       // 5526
                                                                                                                       // 5527
  var cachedState, lastHistoryState,                                                                                   // 5528
      lastBrowserUrl = location.href,                                                                                  // 5529
      baseElement = document.find('base'),                                                                             // 5530
      reloadLocation = null;                                                                                           // 5531
                                                                                                                       // 5532
  cacheState();                                                                                                        // 5533
  lastHistoryState = cachedState;                                                                                      // 5534
                                                                                                                       // 5535
  /**                                                                                                                  // 5536
   * @name $browser#url                                                                                                // 5537
   *                                                                                                                   // 5538
   * @description                                                                                                      // 5539
   * GETTER:                                                                                                           // 5540
   * Without any argument, this method just returns current value of location.href.                                    // 5541
   *                                                                                                                   // 5542
   * SETTER:                                                                                                           // 5543
   * With at least one argument, this method sets url to new value.                                                    // 5544
   * If html5 history api supported, pushState/replaceState is used, otherwise                                         // 5545
   * location.href/location.replace is used.                                                                           // 5546
   * Returns its own instance to allow chaining                                                                        // 5547
   *                                                                                                                   // 5548
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5549
   * {@link ng.$location $location service} to change url.                                                             // 5550
   *                                                                                                                   // 5551
   * @param {string} url New url (when used as setter)                                                                 // 5552
   * @param {boolean=} replace Should new url replace current history record?                                          // 5553
   * @param {object=} state object to use with pushState/replaceState                                                  // 5554
   */                                                                                                                  // 5555
  self.url = function(url, replace, state) {                                                                           // 5556
    // In modern browsers `history.state` is `null` by default; treating it separately                                 // 5557
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`                                   // 5558
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.                                 // 5559
    if (isUndefined(state)) {                                                                                          // 5560
      state = null;                                                                                                    // 5561
    }                                                                                                                  // 5562
                                                                                                                       // 5563
    // Android Browser BFCache causes location, history reference to become stale.                                     // 5564
    if (location !== window.location) location = window.location;                                                      // 5565
    if (history !== window.history) history = window.history;                                                          // 5566
                                                                                                                       // 5567
    // setter                                                                                                          // 5568
    if (url) {                                                                                                         // 5569
      var sameState = lastHistoryState === state;                                                                      // 5570
                                                                                                                       // 5571
      // Don't change anything if previous and current URLs and states match. This also prevents                       // 5572
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.                                // 5573
      // See https://github.com/angular/angular.js/commit/ffb2701                                                      // 5574
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {                                                // 5575
        return self;                                                                                                   // 5576
      }                                                                                                                // 5577
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);                                   // 5578
      lastBrowserUrl = url;                                                                                            // 5579
      lastHistoryState = state;                                                                                        // 5580
      // Don't use history API if only the hash changed                                                                // 5581
      // due to a bug in IE10/IE11 which leads                                                                         // 5582
      // to not firing a `hashchange` nor `popstate` event                                                             // 5583
      // in some cases (see #9143).                                                                                    // 5584
      if ($sniffer.history && (!sameBase || !sameState)) {                                                             // 5585
        history[replace ? 'replaceState' : 'pushState'](state, '', url);                                               // 5586
        cacheState();                                                                                                  // 5587
        // Do the assignment again so that those two variables are referentially identical.                            // 5588
        lastHistoryState = cachedState;                                                                                // 5589
      } else {                                                                                                         // 5590
        if (!sameBase || reloadLocation) {                                                                             // 5591
          reloadLocation = url;                                                                                        // 5592
        }                                                                                                              // 5593
        if (replace) {                                                                                                 // 5594
          location.replace(url);                                                                                       // 5595
        } else if (!sameBase) {                                                                                        // 5596
          location.href = url;                                                                                         // 5597
        } else {                                                                                                       // 5598
          location.hash = getHash(url);                                                                                // 5599
        }                                                                                                              // 5600
      }                                                                                                                // 5601
      return self;                                                                                                     // 5602
    // getter                                                                                                          // 5603
    } else {                                                                                                           // 5604
      // - reloadLocation is needed as browsers don't allow to read out                                                // 5605
      //   the new location.href if a reload happened.                                                                 // 5606
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172                     // 5607
      return reloadLocation || location.href.replace(/%27/g,"'");                                                      // 5608
    }                                                                                                                  // 5609
  };                                                                                                                   // 5610
                                                                                                                       // 5611
  /**                                                                                                                  // 5612
   * @name $browser#state                                                                                              // 5613
   *                                                                                                                   // 5614
   * @description                                                                                                      // 5615
   * This method is a getter.                                                                                          // 5616
   *                                                                                                                   // 5617
   * Return history.state or null if history.state is undefined.                                                       // 5618
   *                                                                                                                   // 5619
   * @returns {object} state                                                                                           // 5620
   */                                                                                                                  // 5621
  self.state = function() {                                                                                            // 5622
    return cachedState;                                                                                                // 5623
  };                                                                                                                   // 5624
                                                                                                                       // 5625
  var urlChangeListeners = [],                                                                                         // 5626
      urlChangeInit = false;                                                                                           // 5627
                                                                                                                       // 5628
  function cacheStateAndFireUrlChange() {                                                                              // 5629
    cacheState();                                                                                                      // 5630
    fireUrlChange();                                                                                                   // 5631
  }                                                                                                                    // 5632
                                                                                                                       // 5633
  function getCurrentState() {                                                                                         // 5634
    try {                                                                                                              // 5635
      return history.state;                                                                                            // 5636
    } catch (e) {                                                                                                      // 5637
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).                                               // 5638
    }                                                                                                                  // 5639
  }                                                                                                                    // 5640
                                                                                                                       // 5641
  // This variable should be used *only* inside the cacheState function.                                               // 5642
  var lastCachedState = null;                                                                                          // 5643
  function cacheState() {                                                                                              // 5644
    // This should be the only place in $browser where `history.state` is read.                                        // 5645
    cachedState = getCurrentState();                                                                                   // 5646
    cachedState = isUndefined(cachedState) ? null : cachedState;                                                       // 5647
                                                                                                                       // 5648
    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.                                       // 5649
    if (equals(cachedState, lastCachedState)) {                                                                        // 5650
      cachedState = lastCachedState;                                                                                   // 5651
    }                                                                                                                  // 5652
    lastCachedState = cachedState;                                                                                     // 5653
  }                                                                                                                    // 5654
                                                                                                                       // 5655
  function fireUrlChange() {                                                                                           // 5656
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {                                           // 5657
      return;                                                                                                          // 5658
    }                                                                                                                  // 5659
                                                                                                                       // 5660
    lastBrowserUrl = self.url();                                                                                       // 5661
    lastHistoryState = cachedState;                                                                                    // 5662
    forEach(urlChangeListeners, function(listener) {                                                                   // 5663
      listener(self.url(), cachedState);                                                                               // 5664
    });                                                                                                                // 5665
  }                                                                                                                    // 5666
                                                                                                                       // 5667
  /**                                                                                                                  // 5668
   * @name $browser#onUrlChange                                                                                        // 5669
   *                                                                                                                   // 5670
   * @description                                                                                                      // 5671
   * Register callback function that will be called, when url changes.                                                 // 5672
   *                                                                                                                   // 5673
   * It's only called when the url is changed from outside of angular:                                                 // 5674
   * - user types different url into address bar                                                                       // 5675
   * - user clicks on history (forward/back) button                                                                    // 5676
   * - user clicks on a link                                                                                           // 5677
   *                                                                                                                   // 5678
   * It's not called when url is changed by $browser.url() method                                                      // 5679
   *                                                                                                                   // 5680
   * The listener gets called with new url as parameter.                                                               // 5681
   *                                                                                                                   // 5682
   * NOTE: this api is intended for use only by the $location service. Please use the                                  // 5683
   * {@link ng.$location $location service} to monitor url changes in angular apps.                                    // 5684
   *                                                                                                                   // 5685
   * @param {function(string)} listener Listener function to be called when url changes.                               // 5686
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.                     // 5687
   */                                                                                                                  // 5688
  self.onUrlChange = function(callback) {                                                                              // 5689
    // TODO(vojta): refactor to use node's syntax for events                                                           // 5690
    if (!urlChangeInit) {                                                                                              // 5691
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)                         // 5692
      // don't fire popstate when user change the address bar and don't fire hashchange when url                       // 5693
      // changed by push/replaceState                                                                                  // 5694
                                                                                                                       // 5695
      // html5 history api - popstate event                                                                            // 5696
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);                                 // 5697
      // hashchange event                                                                                              // 5698
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);                                                     // 5699
                                                                                                                       // 5700
      urlChangeInit = true;                                                                                            // 5701
    }                                                                                                                  // 5702
                                                                                                                       // 5703
    urlChangeListeners.push(callback);                                                                                 // 5704
    return callback;                                                                                                   // 5705
  };                                                                                                                   // 5706
                                                                                                                       // 5707
  /**                                                                                                                  // 5708
   * @private                                                                                                          // 5709
   * Remove popstate and hashchange handler from window.                                                               // 5710
   *                                                                                                                   // 5711
   * NOTE: this api is intended for use only by $rootScope.                                                            // 5712
   */                                                                                                                  // 5713
  self.$$applicationDestroyed = function() {                                                                           // 5714
    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);                                             // 5715
  };                                                                                                                   // 5716
                                                                                                                       // 5717
  /**                                                                                                                  // 5718
   * Checks whether the url has changed outside of Angular.                                                            // 5719
   * Needs to be exported to be able to check for changes that have been done in sync,                                 // 5720
   * as hashchange/popstate events fire in async.                                                                      // 5721
   */                                                                                                                  // 5722
  self.$$checkUrlChange = fireUrlChange;                                                                               // 5723
                                                                                                                       // 5724
  //////////////////////////////////////////////////////////////                                                       // 5725
  // Misc API                                                                                                          // 5726
  //////////////////////////////////////////////////////////////                                                       // 5727
                                                                                                                       // 5728
  /**                                                                                                                  // 5729
   * @name $browser#baseHref                                                                                           // 5730
   *                                                                                                                   // 5731
   * @description                                                                                                      // 5732
   * Returns current <base href>                                                                                       // 5733
   * (always relative - without domain)                                                                                // 5734
   *                                                                                                                   // 5735
   * @returns {string} The current base href                                                                           // 5736
   */                                                                                                                  // 5737
  self.baseHref = function() {                                                                                         // 5738
    var href = baseElement.attr('href');                                                                               // 5739
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';                                                     // 5740
  };                                                                                                                   // 5741
                                                                                                                       // 5742
  /**                                                                                                                  // 5743
   * @name $browser#defer                                                                                              // 5744
   * @param {function()} fn A function, who's execution should be deferred.                                            // 5745
   * @param {number=} [delay=0] of milliseconds to defer the function execution.                                       // 5746
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.                           // 5747
   *                                                                                                                   // 5748
   * @description                                                                                                      // 5749
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.                                                         // 5750
   *                                                                                                                   // 5751
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using                   // 5752
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed                      // 5753
   * via `$browser.defer.flush()`.                                                                                     // 5754
   *                                                                                                                   // 5755
   */                                                                                                                  // 5756
  self.defer = function(fn, delay) {                                                                                   // 5757
    var timeoutId;                                                                                                     // 5758
    outstandingRequestCount++;                                                                                         // 5759
    timeoutId = setTimeout(function() {                                                                                // 5760
      delete pendingDeferIds[timeoutId];                                                                               // 5761
      completeOutstandingRequest(fn);                                                                                  // 5762
    }, delay || 0);                                                                                                    // 5763
    pendingDeferIds[timeoutId] = true;                                                                                 // 5764
    return timeoutId;                                                                                                  // 5765
  };                                                                                                                   // 5766
                                                                                                                       // 5767
                                                                                                                       // 5768
  /**                                                                                                                  // 5769
   * @name $browser#defer.cancel                                                                                       // 5770
   *                                                                                                                   // 5771
   * @description                                                                                                      // 5772
   * Cancels a deferred task identified with `deferId`.                                                                // 5773
   *                                                                                                                   // 5774
   * @param {*} deferId Token returned by the `$browser.defer` function.                                               // 5775
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                            // 5776
   *                    canceled.                                                                                      // 5777
   */                                                                                                                  // 5778
  self.defer.cancel = function(deferId) {                                                                              // 5779
    if (pendingDeferIds[deferId]) {                                                                                    // 5780
      delete pendingDeferIds[deferId];                                                                                 // 5781
      clearTimeout(deferId);                                                                                           // 5782
      completeOutstandingRequest(noop);                                                                                // 5783
      return true;                                                                                                     // 5784
    }                                                                                                                  // 5785
    return false;                                                                                                      // 5786
  };                                                                                                                   // 5787
                                                                                                                       // 5788
}                                                                                                                      // 5789
                                                                                                                       // 5790
function $BrowserProvider() {                                                                                          // 5791
  this.$get = ['$window', '$log', '$sniffer', '$document',                                                             // 5792
      function($window, $log, $sniffer, $document) {                                                                   // 5793
        return new Browser($window, $document, $log, $sniffer);                                                        // 5794
      }];                                                                                                              // 5795
}                                                                                                                      // 5796
                                                                                                                       // 5797
/**                                                                                                                    // 5798
 * @ngdoc service                                                                                                      // 5799
 * @name $cacheFactory                                                                                                 // 5800
 *                                                                                                                     // 5801
 * @description                                                                                                        // 5802
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to                               // 5803
 * them.                                                                                                               // 5804
 *                                                                                                                     // 5805
 * ```js                                                                                                               // 5806
 *                                                                                                                     // 5807
 *  var cache = $cacheFactory('cacheId');                                                                              // 5808
 *  expect($cacheFactory.get('cacheId')).toBe(cache);                                                                  // 5809
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();                                                      // 5810
 *                                                                                                                     // 5811
 *  cache.put("key", "value");                                                                                         // 5812
 *  cache.put("another key", "another value");                                                                         // 5813
 *                                                                                                                     // 5814
 *  // We've specified no options on creation                                                                          // 5815
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});                                                            // 5816
 *                                                                                                                     // 5817
 * ```                                                                                                                 // 5818
 *                                                                                                                     // 5819
 *                                                                                                                     // 5820
 * @param {string} cacheId Name or id of the newly created cache.                                                      // 5821
 * @param {object=} options Options object that specifies the cache behavior. Properties:                              // 5822
 *                                                                                                                     // 5823
 *   - `{number=}` `capacity` — turns the cache into LRU cache.                                                        // 5824
 *                                                                                                                     // 5825
 * @returns {object} Newly created cache object with the following set of methods:                                     // 5826
 *                                                                                                                     // 5827
 * - `{object}` `info()` — Returns id, size, and options of cache.                                                     // 5828
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns                     // 5829
 *   it.                                                                                                               // 5830
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.                         // 5831
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.                                        // 5832
 * - `{void}` `removeAll()` — Removes all cached values.                                                               // 5833
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.                                       // 5834
 *                                                                                                                     // 5835
 * @example                                                                                                            // 5836
   <example module="cacheExampleApp">                                                                                  // 5837
     <file name="index.html">                                                                                          // 5838
       <div ng-controller="CacheController">                                                                           // 5839
         <input ng-model="newCacheKey" placeholder="Key">                                                              // 5840
         <input ng-model="newCacheValue" placeholder="Value">                                                          // 5841
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>                                             // 5842
                                                                                                                       // 5843
         <p ng-if="keys.length">Cached Values</p>                                                                      // 5844
         <div ng-repeat="key in keys">                                                                                 // 5845
           <span ng-bind="key"></span>                                                                                 // 5846
           <span>: </span>                                                                                             // 5847
           <b ng-bind="cache.get(key)"></b>                                                                            // 5848
         </div>                                                                                                        // 5849
                                                                                                                       // 5850
         <p>Cache Info</p>                                                                                             // 5851
         <div ng-repeat="(key, value) in cache.info()">                                                                // 5852
           <span ng-bind="key"></span>                                                                                 // 5853
           <span>: </span>                                                                                             // 5854
           <b ng-bind="value"></b>                                                                                     // 5855
         </div>                                                                                                        // 5856
       </div>                                                                                                          // 5857
     </file>                                                                                                           // 5858
     <file name="script.js">                                                                                           // 5859
       angular.module('cacheExampleApp', []).                                                                          // 5860
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {                   // 5861
           $scope.keys = [];                                                                                           // 5862
           $scope.cache = $cacheFactory('cacheId');                                                                    // 5863
           $scope.put = function(key, value) {                                                                         // 5864
             if ($scope.cache.get(key) === undefined) {                                                                // 5865
               $scope.keys.push(key);                                                                                  // 5866
             }                                                                                                         // 5867
             $scope.cache.put(key, value === undefined ? null : value);                                                // 5868
           };                                                                                                          // 5869
         }]);                                                                                                          // 5870
     </file>                                                                                                           // 5871
     <file name="style.css">                                                                                           // 5872
       p {                                                                                                             // 5873
         margin: 10px 0 3px;                                                                                           // 5874
       }                                                                                                               // 5875
     </file>                                                                                                           // 5876
   </example>                                                                                                          // 5877
 */                                                                                                                    // 5878
function $CacheFactoryProvider() {                                                                                     // 5879
                                                                                                                       // 5880
  this.$get = function() {                                                                                             // 5881
    var caches = {};                                                                                                   // 5882
                                                                                                                       // 5883
    function cacheFactory(cacheId, options) {                                                                          // 5884
      if (cacheId in caches) {                                                                                         // 5885
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);                              // 5886
      }                                                                                                                // 5887
                                                                                                                       // 5888
      var size = 0,                                                                                                    // 5889
          stats = extend({}, options, {id: cacheId}),                                                                  // 5890
          data = {},                                                                                                   // 5891
          capacity = (options && options.capacity) || Number.MAX_VALUE,                                                // 5892
          lruHash = {},                                                                                                // 5893
          freshEnd = null,                                                                                             // 5894
          staleEnd = null;                                                                                             // 5895
                                                                                                                       // 5896
      /**                                                                                                              // 5897
       * @ngdoc type                                                                                                   // 5898
       * @name $cacheFactory.Cache                                                                                     // 5899
       *                                                                                                               // 5900
       * @description                                                                                                  // 5901
       * A cache object used to store and retrieve data, primarily used by                                             // 5902
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache                             // 5903
       * templates and other data.                                                                                     // 5904
       *                                                                                                               // 5905
       * ```js                                                                                                         // 5906
       *  angular.module('superCache')                                                                                 // 5907
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {                                         // 5908
       *      return $cacheFactory('super-cache');                                                                     // 5909
       *    }]);                                                                                                       // 5910
       * ```                                                                                                           // 5911
       *                                                                                                               // 5912
       * Example test:                                                                                                 // 5913
       *                                                                                                               // 5914
       * ```js                                                                                                         // 5915
       *  it('should behave like a cache', inject(function(superCache) {                                               // 5916
       *    superCache.put('key', 'value');                                                                            // 5917
       *    superCache.put('another key', 'another value');                                                            // 5918
       *                                                                                                               // 5919
       *    expect(superCache.info()).toEqual({                                                                        // 5920
       *      id: 'super-cache',                                                                                       // 5921
       *      size: 2                                                                                                  // 5922
       *    });                                                                                                        // 5923
       *                                                                                                               // 5924
       *    superCache.remove('another key');                                                                          // 5925
       *    expect(superCache.get('another key')).toBeUndefined();                                                     // 5926
       *                                                                                                               // 5927
       *    superCache.removeAll();                                                                                    // 5928
       *    expect(superCache.info()).toEqual({                                                                        // 5929
       *      id: 'super-cache',                                                                                       // 5930
       *      size: 0                                                                                                  // 5931
       *    });                                                                                                        // 5932
       *  }));                                                                                                         // 5933
       * ```                                                                                                           // 5934
       */                                                                                                              // 5935
      return caches[cacheId] = {                                                                                       // 5936
                                                                                                                       // 5937
        /**                                                                                                            // 5938
         * @ngdoc method                                                                                               // 5939
         * @name $cacheFactory.Cache#put                                                                               // 5940
         * @kind function                                                                                              // 5941
         *                                                                                                             // 5942
         * @description                                                                                                // 5943
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be                               // 5944
         * retrieved later, and incrementing the size of the cache if the key was not already                          // 5945
         * present in the cache. If behaving like an LRU cache, it will also remove stale                              // 5946
         * entries from the set.                                                                                       // 5947
         *                                                                                                             // 5948
         * It will not insert undefined values into the cache.                                                         // 5949
         *                                                                                                             // 5950
         * @param {string} key the key under which the cached data is stored.                                          // 5951
         * @param {*} value the value to store alongside the key. If it is undefined, the key                          // 5952
         *    will not be stored.                                                                                      // 5953
         * @returns {*} the value stored.                                                                              // 5954
         */                                                                                                            // 5955
        put: function(key, value) {                                                                                    // 5956
          if (isUndefined(value)) return;                                                                              // 5957
          if (capacity < Number.MAX_VALUE) {                                                                           // 5958
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});                                                // 5959
                                                                                                                       // 5960
            refresh(lruEntry);                                                                                         // 5961
          }                                                                                                            // 5962
                                                                                                                       // 5963
          if (!(key in data)) size++;                                                                                  // 5964
          data[key] = value;                                                                                           // 5965
                                                                                                                       // 5966
          if (size > capacity) {                                                                                       // 5967
            this.remove(staleEnd.key);                                                                                 // 5968
          }                                                                                                            // 5969
                                                                                                                       // 5970
          return value;                                                                                                // 5971
        },                                                                                                             // 5972
                                                                                                                       // 5973
        /**                                                                                                            // 5974
         * @ngdoc method                                                                                               // 5975
         * @name $cacheFactory.Cache#get                                                                               // 5976
         * @kind function                                                                                              // 5977
         *                                                                                                             // 5978
         * @description                                                                                                // 5979
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.                                // 5980
         *                                                                                                             // 5981
         * @param {string} key the key of the data to be retrieved                                                     // 5982
         * @returns {*} the value stored.                                                                              // 5983
         */                                                                                                            // 5984
        get: function(key) {                                                                                           // 5985
          if (capacity < Number.MAX_VALUE) {                                                                           // 5986
            var lruEntry = lruHash[key];                                                                               // 5987
                                                                                                                       // 5988
            if (!lruEntry) return;                                                                                     // 5989
                                                                                                                       // 5990
            refresh(lruEntry);                                                                                         // 5991
          }                                                                                                            // 5992
                                                                                                                       // 5993
          return data[key];                                                                                            // 5994
        },                                                                                                             // 5995
                                                                                                                       // 5996
                                                                                                                       // 5997
        /**                                                                                                            // 5998
         * @ngdoc method                                                                                               // 5999
         * @name $cacheFactory.Cache#remove                                                                            // 6000
         * @kind function                                                                                              // 6001
         *                                                                                                             // 6002
         * @description                                                                                                // 6003
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.                                         // 6004
         *                                                                                                             // 6005
         * @param {string} key the key of the entry to be removed                                                      // 6006
         */                                                                                                            // 6007
        remove: function(key) {                                                                                        // 6008
          if (capacity < Number.MAX_VALUE) {                                                                           // 6009
            var lruEntry = lruHash[key];                                                                               // 6010
                                                                                                                       // 6011
            if (!lruEntry) return;                                                                                     // 6012
                                                                                                                       // 6013
            if (lruEntry == freshEnd) freshEnd = lruEntry.p;                                                           // 6014
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;                                                           // 6015
            link(lruEntry.n,lruEntry.p);                                                                               // 6016
                                                                                                                       // 6017
            delete lruHash[key];                                                                                       // 6018
          }                                                                                                            // 6019
                                                                                                                       // 6020
          delete data[key];                                                                                            // 6021
          size--;                                                                                                      // 6022
        },                                                                                                             // 6023
                                                                                                                       // 6024
                                                                                                                       // 6025
        /**                                                                                                            // 6026
         * @ngdoc method                                                                                               // 6027
         * @name $cacheFactory.Cache#removeAll                                                                         // 6028
         * @kind function                                                                                              // 6029
         *                                                                                                             // 6030
         * @description                                                                                                // 6031
         * Clears the cache object of any entries.                                                                     // 6032
         */                                                                                                            // 6033
        removeAll: function() {                                                                                        // 6034
          data = {};                                                                                                   // 6035
          size = 0;                                                                                                    // 6036
          lruHash = {};                                                                                                // 6037
          freshEnd = staleEnd = null;                                                                                  // 6038
        },                                                                                                             // 6039
                                                                                                                       // 6040
                                                                                                                       // 6041
        /**                                                                                                            // 6042
         * @ngdoc method                                                                                               // 6043
         * @name $cacheFactory.Cache#destroy                                                                           // 6044
         * @kind function                                                                                              // 6045
         *                                                                                                             // 6046
         * @description                                                                                                // 6047
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,                                             // 6048
         * removing it from the {@link $cacheFactory $cacheFactory} set.                                               // 6049
         */                                                                                                            // 6050
        destroy: function() {                                                                                          // 6051
          data = null;                                                                                                 // 6052
          stats = null;                                                                                                // 6053
          lruHash = null;                                                                                              // 6054
          delete caches[cacheId];                                                                                      // 6055
        },                                                                                                             // 6056
                                                                                                                       // 6057
                                                                                                                       // 6058
        /**                                                                                                            // 6059
         * @ngdoc method                                                                                               // 6060
         * @name $cacheFactory.Cache#info                                                                              // 6061
         * @kind function                                                                                              // 6062
         *                                                                                                             // 6063
         * @description                                                                                                // 6064
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.                              // 6065
         *                                                                                                             // 6066
         * @returns {object} an object with the following properties:                                                  // 6067
         *   <ul>                                                                                                      // 6068
         *     <li>**id**: the id of the cache instance</li>                                                           // 6069
         *     <li>**size**: the number of entries kept in the cache instance</li>                                     // 6070
         *     <li>**...**: any additional properties from the options object when creating the                        // 6071
         *       cache.</li>                                                                                           // 6072
         *   </ul>                                                                                                     // 6073
         */                                                                                                            // 6074
        info: function() {                                                                                             // 6075
          return extend({}, stats, {size: size});                                                                      // 6076
        }                                                                                                              // 6077
      };                                                                                                               // 6078
                                                                                                                       // 6079
                                                                                                                       // 6080
      /**                                                                                                              // 6081
       * makes the `entry` the freshEnd of the LRU linked list                                                         // 6082
       */                                                                                                              // 6083
      function refresh(entry) {                                                                                        // 6084
        if (entry != freshEnd) {                                                                                       // 6085
          if (!staleEnd) {                                                                                             // 6086
            staleEnd = entry;                                                                                          // 6087
          } else if (staleEnd == entry) {                                                                              // 6088
            staleEnd = entry.n;                                                                                        // 6089
          }                                                                                                            // 6090
                                                                                                                       // 6091
          link(entry.n, entry.p);                                                                                      // 6092
          link(entry, freshEnd);                                                                                       // 6093
          freshEnd = entry;                                                                                            // 6094
          freshEnd.n = null;                                                                                           // 6095
        }                                                                                                              // 6096
      }                                                                                                                // 6097
                                                                                                                       // 6098
                                                                                                                       // 6099
      /**                                                                                                              // 6100
       * bidirectionally links two entries of the LRU linked list                                                      // 6101
       */                                                                                                              // 6102
      function link(nextEntry, prevEntry) {                                                                            // 6103
        if (nextEntry != prevEntry) {                                                                                  // 6104
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify                        // 6105
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify                            // 6106
        }                                                                                                              // 6107
      }                                                                                                                // 6108
    }                                                                                                                  // 6109
                                                                                                                       // 6110
                                                                                                                       // 6111
  /**                                                                                                                  // 6112
   * @ngdoc method                                                                                                     // 6113
   * @name $cacheFactory#info                                                                                          // 6114
   *                                                                                                                   // 6115
   * @description                                                                                                      // 6116
   * Get information about all the caches that have been created                                                       // 6117
   *                                                                                                                   // 6118
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`                              // 6119
   */                                                                                                                  // 6120
    cacheFactory.info = function() {                                                                                   // 6121
      var info = {};                                                                                                   // 6122
      forEach(caches, function(cache, cacheId) {                                                                       // 6123
        info[cacheId] = cache.info();                                                                                  // 6124
      });                                                                                                              // 6125
      return info;                                                                                                     // 6126
    };                                                                                                                 // 6127
                                                                                                                       // 6128
                                                                                                                       // 6129
  /**                                                                                                                  // 6130
   * @ngdoc method                                                                                                     // 6131
   * @name $cacheFactory#get                                                                                           // 6132
   *                                                                                                                   // 6133
   * @description                                                                                                      // 6134
   * Get access to a cache object by the `cacheId` used when it was created.                                           // 6135
   *                                                                                                                   // 6136
   * @param {string} cacheId Name or id of a cache to access.                                                          // 6137
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.                           // 6138
   */                                                                                                                  // 6139
    cacheFactory.get = function(cacheId) {                                                                             // 6140
      return caches[cacheId];                                                                                          // 6141
    };                                                                                                                 // 6142
                                                                                                                       // 6143
                                                                                                                       // 6144
    return cacheFactory;                                                                                               // 6145
  };                                                                                                                   // 6146
}                                                                                                                      // 6147
                                                                                                                       // 6148
/**                                                                                                                    // 6149
 * @ngdoc service                                                                                                      // 6150
 * @name $templateCache                                                                                                // 6151
 *                                                                                                                     // 6152
 * @description                                                                                                        // 6153
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You                      // 6154
 * can load templates directly into the cache in a `script` tag, or by consuming the                                   // 6155
 * `$templateCache` service directly.                                                                                  // 6156
 *                                                                                                                     // 6157
 * Adding via the `script` tag:                                                                                        // 6158
 *                                                                                                                     // 6159
 * ```html                                                                                                             // 6160
 *   <script type="text/ng-template" id="templateId.html">                                                             // 6161
 *     <p>This is the content of the template</p>                                                                      // 6162
 *   </script>                                                                                                         // 6163
 * ```                                                                                                                 // 6164
 *                                                                                                                     // 6165
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of                    // 6166
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,                          // 6167
 * element with ng-app attribute), otherwise the template will be ignored.                                             // 6168
 *                                                                                                                     // 6169
 * Adding via the `$templateCache` service:                                                                            // 6170
 *                                                                                                                     // 6171
 * ```js                                                                                                               // 6172
 * var myApp = angular.module('myApp', []);                                                                            // 6173
 * myApp.run(function($templateCache) {                                                                                // 6174
 *   $templateCache.put('templateId.html', 'This is the content of the template');                                     // 6175
 * });                                                                                                                 // 6176
 * ```                                                                                                                 // 6177
 *                                                                                                                     // 6178
 * To retrieve the template later, simply use it in your HTML:                                                         // 6179
 * ```html                                                                                                             // 6180
 * <div ng-include=" 'templateId.html' "></div>                                                                        // 6181
 * ```                                                                                                                 // 6182
 *                                                                                                                     // 6183
 * or get it via Javascript:                                                                                           // 6184
 * ```js                                                                                                               // 6185
 * $templateCache.get('templateId.html')                                                                               // 6186
 * ```                                                                                                                 // 6187
 *                                                                                                                     // 6188
 * See {@link ng.$cacheFactory $cacheFactory}.                                                                         // 6189
 *                                                                                                                     // 6190
 */                                                                                                                    // 6191
function $TemplateCacheProvider() {                                                                                    // 6192
  this.$get = ['$cacheFactory', function($cacheFactory) {                                                              // 6193
    return $cacheFactory('templates');                                                                                 // 6194
  }];                                                                                                                  // 6195
}                                                                                                                      // 6196
                                                                                                                       // 6197
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 6198
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 6199
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 6200
 *          An approval from 2 Core members with history of modifying      *                                           // 6201
 *                         this file is required.                          *                                           // 6202
 *                                                                         *                                           // 6203
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 6204
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 6205
 *     Or gives undesired access to variables likes document or window?    *                                           // 6206
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 6207
                                                                                                                       // 6208
/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!                                                     // 6209
 *                                                                                                                     // 6210
 * DOM-related variables:                                                                                              // 6211
 *                                                                                                                     // 6212
 * - "node" - DOM Node                                                                                                 // 6213
 * - "element" - DOM Element or Node                                                                                   // 6214
 * - "$node" or "$element" - jqLite-wrapped node or element                                                            // 6215
 *                                                                                                                     // 6216
 *                                                                                                                     // 6217
 * Compiler related stuff:                                                                                             // 6218
 *                                                                                                                     // 6219
 * - "linkFn" - linking fn of a single directive                                                                       // 6220
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node                                     // 6221
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node                    // 6222
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)                    // 6223
 */                                                                                                                    // 6224
                                                                                                                       // 6225
                                                                                                                       // 6226
/**                                                                                                                    // 6227
 * @ngdoc service                                                                                                      // 6228
 * @name $compile                                                                                                      // 6229
 * @kind function                                                                                                      // 6230
 *                                                                                                                     // 6231
 * @description                                                                                                        // 6232
 * Compiles an HTML string or DOM into a template and produces a template function, which                              // 6233
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.                             // 6234
 *                                                                                                                     // 6235
 * The compilation is a process of walking the DOM tree and matching DOM elements to                                   // 6236
 * {@link ng.$compileProvider#directive directives}.                                                                   // 6237
 *                                                                                                                     // 6238
 * <div class="alert alert-warning">                                                                                   // 6239
 * **Note:** This document is an in-depth reference of all directive options.                                          // 6240
 * For a gentle introduction to directives with examples of common use cases,                                          // 6241
 * see the {@link guide/directive directive guide}.                                                                    // 6242
 * </div>                                                                                                              // 6243
 *                                                                                                                     // 6244
 * ## Comprehensive Directive API                                                                                      // 6245
 *                                                                                                                     // 6246
 * There are many different options for a directive.                                                                   // 6247
 *                                                                                                                     // 6248
 * The difference resides in the return value of the factory function.                                                 // 6249
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,            // 6250
 * or just the `postLink` function (all other properties will have the default values).                                // 6251
 *                                                                                                                     // 6252
 * <div class="alert alert-success">                                                                                   // 6253
 * **Best Practice:** It's recommended to use the "directive definition object" form.                                  // 6254
 * </div>                                                                                                              // 6255
 *                                                                                                                     // 6256
 * Here's an example directive declared with a Directive Definition Object:                                            // 6257
 *                                                                                                                     // 6258
 * ```js                                                                                                               // 6259
 *   var myModule = angular.module(...);                                                                               // 6260
 *                                                                                                                     // 6261
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6262
 *     var directiveDefinitionObject = {                                                                               // 6263
 *       priority: 0,                                                                                                  // 6264
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },                                         // 6265
 *       // or                                                                                                         // 6266
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },                                // 6267
 *       transclude: false,                                                                                            // 6268
 *       restrict: 'A',                                                                                                // 6269
 *       templateNamespace: 'html',                                                                                    // 6270
 *       scope: false,                                                                                                 // 6271
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },                        // 6272
 *       controllerAs: 'stringIdentifier',                                                                             // 6273
 *       bindToController: false,                                                                                      // 6274
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {                                                     // 6276
 *         return {                                                                                                    // 6277
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6278
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6279
 *         }                                                                                                           // 6280
 *         // or                                                                                                       // 6281
 *         // return function postLink( ... ) { ... }                                                                  // 6282
 *       },                                                                                                            // 6283
 *       // or                                                                                                         // 6284
 *       // link: {                                                                                                    // 6285
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },                                       // 6286
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }                                      // 6287
 *       // }                                                                                                          // 6288
 *       // or                                                                                                         // 6289
 *       // link: function postLink( ... ) { ... }                                                                     // 6290
 *     };                                                                                                              // 6291
 *     return directiveDefinitionObject;                                                                               // 6292
 *   });                                                                                                               // 6293
 * ```                                                                                                                 // 6294
 *                                                                                                                     // 6295
 * <div class="alert alert-warning">                                                                                   // 6296
 * **Note:** Any unspecified options will use the default value. You can see the default values below.                 // 6297
 * </div>                                                                                                              // 6298
 *                                                                                                                     // 6299
 * Therefore the above can be simplified as:                                                                           // 6300
 *                                                                                                                     // 6301
 * ```js                                                                                                               // 6302
 *   var myModule = angular.module(...);                                                                               // 6303
 *                                                                                                                     // 6304
 *   myModule.directive('directiveName', function factory(injectables) {                                               // 6305
 *     var directiveDefinitionObject = {                                                                               // 6306
 *       link: function postLink(scope, iElement, iAttrs) { ... }                                                      // 6307
 *     };                                                                                                              // 6308
 *     return directiveDefinitionObject;                                                                               // 6309
 *     // or                                                                                                           // 6310
 *     // return function postLink(scope, iElement, iAttrs) { ... }                                                    // 6311
 *   });                                                                                                               // 6312
 * ```                                                                                                                 // 6313
 *                                                                                                                     // 6314
 *                                                                                                                     // 6315
 *                                                                                                                     // 6316
 * ### Directive Definition Object                                                                                     // 6317
 *                                                                                                                     // 6318
 * The directive definition object provides instructions to the {@link ng.$compile                                     // 6319
 * compiler}. The attributes are:                                                                                      // 6320
 *                                                                                                                     // 6321
 * #### `multiElement`                                                                                                 // 6322
 * When this property is set to true, the HTML compiler will collect DOM nodes between                                 // 6323
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them                           // 6324
 * together as the directive elements. It is recommended that this feature be used on directives                       // 6325
 * which are not strictly behavioural (such as {@link ngClick}), and which                                             // 6326
 * do not manipulate or replace child nodes (such as {@link ngInclude}).                                               // 6327
 *                                                                                                                     // 6328
 * #### `priority`                                                                                                     // 6329
 * When there are multiple directives defined on a single DOM element, sometimes it                                    // 6330
 * is necessary to specify the order in which the directives are applied. The `priority` is used                       // 6331
 * to sort the directives before their `compile` functions get called. Priority is defined as a                        // 6332
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions                         // 6333
 * are also run in priority order, but post-link functions are run in reverse order. The order                         // 6334
 * of directives with the same priority is undefined. The default priority is `0`.                                     // 6335
 *                                                                                                                     // 6336
 * #### `terminal`                                                                                                     // 6337
 * If set to true then the current `priority` will be the last set of directives                                       // 6338
 * which will execute (any directives at the current priority will still execute                                       // 6339
 * as the order of execution on same `priority` is undefined). Note that expressions                                   // 6340
 * and other directives used in the directive's template will also be excluded from execution.                         // 6341
 *                                                                                                                     // 6342
 * #### `scope`                                                                                                        // 6343
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the            // 6344
 * same element request a new scope, only one new scope is created. The new scope rule does not                        // 6345
 * apply for the root of the template since the root of the template always gets a new scope.                          // 6346
 *                                                                                                                     // 6347
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from           // 6348
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful                       // 6349
 * when creating reusable components, which should not accidentally read or modify data in the                         // 6350
 * parent scope.                                                                                                       // 6351
 *                                                                                                                     // 6352
 * The 'isolate' scope takes an object hash which defines a set of local scope properties                              // 6353
 * derived from the parent scope. These local properties are useful for aliasing values for                            // 6354
 * templates. Locals definition is a hash of local scope property to its source:                                       // 6355
 *                                                                                                                     // 6356
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is                         // 6357
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the                        // 6358
 *   attribute name is assumed to be the same as the local name.                                                       // 6359
 *   Given `<widget my-attr="hello {{name}}">` and widget definition                                                   // 6360
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect                          // 6361
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the                           // 6362
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not                           // 6363
 *   component scope).                                                                                                 // 6364
 *                                                                                                                     // 6365
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the                             // 6366
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`                         // 6367
 *   name is specified then the attribute name is assumed to be the same as the local name.                            // 6368
 *   Given `<widget my-attr="parentModel">` and widget definition of                                                   // 6369
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the                       // 6370
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected                        // 6371
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent                      // 6372
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You                      // 6373
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If                      // 6374
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use                       // 6375
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).                                                // 6376
 *                                                                                                                     // 6377
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.                      // 6378
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the                           // 6379
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of                             // 6380
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to                               // 6381
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to                            // 6382
 *   pass data from the isolated scope via an expression to the parent scope, this can be                              // 6383
 *   done by passing a map of local variable names and values into the expression wrapper fn.                          // 6384
 *   For example, if the expression is `increment(amount)` then we can specify the amount value                        // 6385
 *   by calling the `localFn` as `localFn({amount: 22})`.                                                              // 6386
 *                                                                                                                     // 6387
 *                                                                                                                     // 6388
 * #### `bindToController`                                                                                             // 6389
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller         // 6391
 * is instantiated, the initial values of the isolate scope bindings are already available.                            // 6392
 *                                                                                                                     // 6393
 * #### `controller`                                                                                                   // 6394
 * Controller constructor function. The controller is instantiated before the                                          // 6395
 * pre-linking phase and it is shared with other directives (see                                                       // 6396
 * `require` attribute). This allows the directives to communicate with each other and augment                         // 6397
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:      // 6398
 *                                                                                                                     // 6399
 * * `$scope` - Current scope associated with the element                                                              // 6400
 * * `$element` - Current element                                                                                      // 6401
 * * `$attrs` - Current attributes object for the element                                                              // 6402
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:                        // 6403
 *   `function([scope], cloneLinkingFn, futureParentElement)`.                                                         // 6404
 *    * `scope`: optional argument to override the scope.                                                              // 6405
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.                      // 6406
 *    * `futureParentElement`:                                                                                         // 6407
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.                             // 6408
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.          // 6409
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)              // 6410
 *          and when the `cloneLinkinFn` is passed,                                                                    // 6411
 *          as those elements need to created and cloned in a special way when they are defined outside their          // 6412
 *          usual containers (e.g. like `<svg>`).                                                                      // 6413
 *        * See also the `directive.templateNamespace` property.                                                       // 6414
 *                                                                                                                     // 6415
 *                                                                                                                     // 6416
 * #### `require`                                                                                                      // 6417
 * Require another directive and inject its controller as the fourth argument to the linking function. The             // 6418
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the        // 6419
 * injected argument will be an array in corresponding order. If no such directive can be                              // 6420
 * found, or if the directive does not have a controller, then an error is raised (unless no link function             // 6421
 * is specified, in which case error checking is skipped). The name can be prefixed with:                              // 6422
 *                                                                                                                     // 6423
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.                 // 6424
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.                     // 6425
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.       // 6426
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.            // 6427
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass                 // 6428
 *   `null` to the `link` fn if not found.                                                                             // 6429
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass                     // 6430
 *   `null` to the `link` fn if not found.                                                                             // 6431
 *                                                                                                                     // 6432
 *                                                                                                                     // 6433
 * #### `controllerAs`                                                                                                 // 6434
 * Identifier name for a reference to the controller in the directive's scope.                                         // 6435
 * This allows the controller to be referenced from the directive template. The directive                              // 6436
 * needs to define a scope for this configuration to be used. Useful in the case when                                  // 6437
 * directive is used as component.                                                                                     // 6438
 *                                                                                                                     // 6439
 *                                                                                                                     // 6440
 * #### `restrict`                                                                                                     // 6441
 * String of subset of `EACM` which restricts the directive to a specific directive                                    // 6442
 * declaration style. If omitted, the defaults (elements and attributes) are used.                                     // 6443
 *                                                                                                                     // 6444
 * * `E` - Element name (default): `<my-directive></my-directive>`                                                     // 6445
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`                                                       // 6446
 * * `C` - Class: `<div class="my-directive: exp;"></div>`                                                             // 6447
 * * `M` - Comment: `<!-- directive: my-directive exp -->`                                                             // 6448
 *                                                                                                                     // 6449
 *                                                                                                                     // 6450
 * #### `templateNamespace`                                                                                            // 6451
 * String representing the document type used by the markup in the template.                                           // 6452
 * AngularJS needs this information as those elements need to be created and cloned                                    // 6453
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.                    // 6454
 *                                                                                                                     // 6455
 * * `html` - All root nodes in the template are HTML. Root nodes may also be                                          // 6456
 *   top-level elements such as `<svg>` or `<math>`.                                                                   // 6457
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).                                     // 6458
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).                                  // 6459
 *                                                                                                                     // 6460
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.                              // 6461
 *                                                                                                                     // 6462
 * #### `template`                                                                                                     // 6463
 * HTML markup that may:                                                                                               // 6464
 * * Replace the contents of the directive's element (default).                                                        // 6465
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).                                       // 6466
 * * Wrap the contents of the directive's element (if `transclude` is true).                                           // 6467
 *                                                                                                                     // 6468
 * Value may be:                                                                                                       // 6469
 *                                                                                                                     // 6470
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.                                                   // 6471
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`                          // 6472
 *   function api below) and returns a string value.                                                                   // 6473
 *                                                                                                                     // 6474
 *                                                                                                                     // 6475
 * #### `templateUrl`                                                                                                  // 6476
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.                    // 6477
 *                                                                                                                     // 6478
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element        // 6479
 * for later when the template has been resolved.  In the meantime it will continue to compile and link                // 6480
 * sibling and parent elements as though this element had not contained any directives.                                // 6481
 *                                                                                                                     // 6482
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this                // 6483
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the                // 6484
 * case when only one deeply nested directive has `templateUrl`.                                                       // 6485
 *                                                                                                                     // 6486
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}            // 6487
 *                                                                                                                     // 6488
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two                     // 6489
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns                       // 6490
 * a string value representing the url.  In either case, the template URL is passed through {@link                     // 6491
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.                                                             // 6492
 *                                                                                                                     // 6493
 *                                                                                                                     // 6494
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)                                 // 6495
 * specify what the template should replace. Defaults to `false`.                                                      // 6496
 *                                                                                                                     // 6497
 * * `true` - the template will replace the directive's element.                                                       // 6498
 * * `false` - the template will replace the contents of the directive's element.                                      // 6499
 *                                                                                                                     // 6500
 * The replacement process migrates all of the attributes / classes from the old element to the new                    // 6501
 * one. See the {@link guide/directive#template-expanding-directive                                                    // 6502
 * Directives Guide} for an example.                                                                                   // 6503
 *                                                                                                                     // 6504
 * There are very few scenarios where element replacement is required for the application function,                    // 6505
 * the main one being reusable custom components that are used within SVG contexts                                     // 6506
 * (because SVG doesn't work with custom elements in the DOM tree).                                                    // 6507
 *                                                                                                                     // 6508
 * #### `transclude`                                                                                                   // 6509
 * Extract the contents of the element where the directive appears and make it available to the directive.             // 6510
 * The contents are compiled and provided to the directive as a **transclusion function**. See the                     // 6511
 * {@link $compile#transclusion Transclusion} section below.                                                           // 6512
 *                                                                                                                     // 6513
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the          // 6514
 * directive's element or the entire element:                                                                          // 6515
 *                                                                                                                     // 6516
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.                                // 6517
 * * `'element'` - transclude the whole of the directive's element including any directives on this                    // 6518
 *   element that defined at a lower priority than this directive. When used, the `template`                           // 6519
 *   property is ignored.                                                                                              // 6520
 *                                                                                                                     // 6521
 *                                                                                                                     // 6522
 * #### `compile`                                                                                                      // 6523
 *                                                                                                                     // 6524
 * ```js                                                                                                               // 6525
 *   function compile(tElement, tAttrs, transclude) { ... }                                                            // 6526
 * ```                                                                                                                 // 6527
 *                                                                                                                     // 6528
 * The compile function deals with transforming the template DOM. Since most directives do not do                      // 6529
 * template transformation, it is not used often. The compile function takes the following arguments:                  // 6530
 *                                                                                                                     // 6531
 *   * `tElement` - template element - The element where the directive has been declared. It is                        // 6532
 *     safe to do template transformation on the element and child elements only.                                      // 6533
 *                                                                                                                     // 6534
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared                  // 6535
 *     between all directive compile functions.                                                                        // 6536
 *                                                                                                                     // 6537
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`                // 6538
 *                                                                                                                     // 6539
 * <div class="alert alert-warning">                                                                                   // 6540
 * **Note:** The template instance and the link instance may be different objects if the template has                  // 6541
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that                  // 6542
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration                  // 6543
 * should be done in a linking function rather than in a compile function.                                             // 6544
 * </div>                                                                                                              // 6545
                                                                                                                       // 6546
 * <div class="alert alert-warning">                                                                                   // 6547
 * **Note:** The compile function cannot handle directives that recursively use themselves in their                    // 6548
 * own templates or compile functions. Compiling these directives results in an infinite loop and a                    // 6549
 * stack overflow errors.                                                                                              // 6550
 *                                                                                                                     // 6551
 * This can be avoided by manually using $compile in the postLink function to imperatively compile                     // 6552
 * a directive's template instead of relying on automatic template compilation via `template` or                       // 6553
 * `templateUrl` declaration or manual compilation inside the compile function.                                        // 6554
 * </div>                                                                                                              // 6555
 *                                                                                                                     // 6556
 * <div class="alert alert-danger">                                                                                    // 6557
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it                     // 6558
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed                 // 6559
 *   to the link function instead.                                                                                     // 6560
 * </div>                                                                                                              // 6561
                                                                                                                       // 6562
 * A compile function can have a return value which can be either a function or an object.                             // 6563
 *                                                                                                                     // 6564
 * * returning a (post-link) function - is equivalent to registering the linking function via the                      // 6565
 *   `link` property of the config object when the compile function is empty.                                          // 6566
 *                                                                                                                     // 6567
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to                   // 6568
 *   control when a linking function should be called during the linking phase. See info about                         // 6569
 *   pre-linking and post-linking functions below.                                                                     // 6570
 *                                                                                                                     // 6571
 *                                                                                                                     // 6572
 * #### `link`                                                                                                         // 6573
 * This property is used only if the `compile` property is not defined.                                                // 6574
 *                                                                                                                     // 6575
 * ```js                                                                                                               // 6576
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }                                          // 6577
 * ```                                                                                                                 // 6578
 *                                                                                                                     // 6579
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is                   // 6580
 * executed after the template has been cloned. This is where most of the directive logic will be                      // 6581
 * put.                                                                                                                // 6582
 *                                                                                                                     // 6583
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the                                       // 6584
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.                                           // 6585
 *                                                                                                                     // 6586
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to                    // 6587
 *     manipulate the children of the element only in `postLink` function since the children have                      // 6588
 *     already been linked.                                                                                            // 6589
 *                                                                                                                     // 6590
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared                  // 6591
 *     between all directive linking functions.                                                                        // 6592
 *                                                                                                                     // 6593
 *   * `controller` - the directive's required controller instance(s) - Instances are shared                           // 6594
 *     among all directives, which allows the directives to use the controllers as a communication                     // 6595
 *     channel. The exact value depends on the directive's `require` property:                                         // 6596
 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one            // 6597
 *       * `string`: the controller instance                                                                           // 6598
 *       * `array`: array of controller instances                                                                      // 6599
 *                                                                                                                     // 6600
 *     If a required controller cannot be found, and it is optional, the instance is `null`,                           // 6601
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.                         // 6602
 *                                                                                                                     // 6603
 *     Note that you can also require the directive's own controller - it will be made available like                  // 6604
 *     any other controller.                                                                                           // 6605
 *                                                                                                                     // 6606
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.                     // 6607
 *     This is the same as the `$transclude`                                                                           // 6608
 *     parameter of directive controllers, see there for details.                                                      // 6609
 *     `function([scope], cloneLinkingFn, futureParentElement)`.                                                       // 6610
 *                                                                                                                     // 6611
 * #### Pre-linking function                                                                                           // 6612
 *                                                                                                                     // 6613
 * Executed before the child elements are linked. Not safe to do DOM transformation since the                          // 6614
 * compiler linking function will fail to locate the correct elements for linking.                                     // 6615
 *                                                                                                                     // 6616
 * #### Post-linking function                                                                                          // 6617
 *                                                                                                                     // 6618
 * Executed after the child elements are linked.                                                                       // 6619
 *                                                                                                                     // 6620
 * Note that child elements that contain `templateUrl` directives will not have been compiled                          // 6621
 * and linked since they are waiting for their template to load asynchronously and their own                           // 6622
 * compilation and linking has been suspended until that occurs.                                                       // 6623
 *                                                                                                                     // 6624
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting                   // 6625
 * for their async templates to be resolved.                                                                           // 6626
 *                                                                                                                     // 6627
 *                                                                                                                     // 6628
 * ### Transclusion                                                                                                    // 6629
 *                                                                                                                     // 6630
 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and                 // 6631
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS               // 6632
 * scope from where they were taken.                                                                                   // 6633
 *                                                                                                                     // 6634
 * Transclusion is used (often with {@link ngTransclude}) to insert the                                                // 6635
 * original contents of a directive's element into a specified place in the template of the directive.                 // 6636
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded                  // 6637
 * content has access to the properties on the scope from which it was taken, even if the directive                    // 6638
 * has isolated scope.                                                                                                 // 6639
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.                    // 6640
 *                                                                                                                     // 6641
 * This makes it possible for the widget to have private state for its template, while the transcluded                 // 6642
 * content has access to its originating scope.                                                                        // 6643
 *                                                                                                                     // 6644
 * <div class="alert alert-warning">                                                                                   // 6645
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the          // 6646
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives                  // 6647
 * Testing Transclusion Directives}.                                                                                   // 6648
 * </div>                                                                                                              // 6649
 *                                                                                                                     // 6650
 * #### Transclusion Functions                                                                                         // 6651
 *                                                                                                                     // 6652
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion            // 6653
 * function** to the directive's `link` function and `controller`. This transclusion function is a special             // 6654
 * **linking function** that will return the compiled contents linked to a new transclusion scope.                     // 6655
 *                                                                                                                     // 6656
 * <div class="alert alert-info">                                                                                      // 6657
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since                  // 6658
 * ngTransclude will deal with it for us.                                                                              // 6659
 * </div>                                                                                                              // 6660
 *                                                                                                                     // 6661
 * If you want to manually control the insertion and removal of the transcluded content in your directive              // 6662
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery        // 6663
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.                           // 6664
 *                                                                                                                     // 6665
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts            // 6666
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded    // 6667
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.                       // 6668
 *                                                                                                                     // 6669
 * <div class="alert alert-info">                                                                                      // 6670
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function            // 6671
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.            // 6672
 * </div>                                                                                                              // 6673
 *                                                                                                                     // 6674
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone                   // 6675
 * attach function**:                                                                                                  // 6676
 *                                                                                                                     // 6677
 * ```js                                                                                                               // 6678
 * var transcludedContent, transclusionScope;                                                                          // 6679
 *                                                                                                                     // 6680
 * $transclude(function(clone, scope) {                                                                                // 6681
 *   element.append(clone);                                                                                            // 6682
 *   transcludedContent = clone;                                                                                       // 6683
 *   transclusionScope = scope;                                                                                        // 6684
 * });                                                                                                                 // 6685
 * ```                                                                                                                 // 6686
 *                                                                                                                     // 6687
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the                 // 6688
 * associated transclusion scope:                                                                                      // 6689
 *                                                                                                                     // 6690
 * ```js                                                                                                               // 6691
 * transcludedContent.remove();                                                                                        // 6692
 * transclusionScope.$destroy();                                                                                       // 6693
 * ```                                                                                                                 // 6694
 *                                                                                                                     // 6695
 * <div class="alert alert-info">                                                                                      // 6696
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive                   // 6697
 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),                    // 6698
 * then you are also responsible for calling `$destroy` on the transclusion scope.                                     // 6699
 * </div>                                                                                                              // 6700
 *                                                                                                                     // 6701
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}               // 6702
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if                // 6703
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.                           // 6704
 *                                                                                                                     // 6705
 *                                                                                                                     // 6706
 * #### Transclusion Scopes                                                                                            // 6707
 *                                                                                                                     // 6708
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion                 // 6709
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed               // 6710
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it                // 6711
 * was taken.                                                                                                          // 6712
 *                                                                                                                     // 6713
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look            // 6714
 * like this:                                                                                                          // 6715
 *                                                                                                                     // 6716
 * ```html                                                                                                             // 6717
 * <div ng-app>                                                                                                        // 6718
 *   <div isolate>                                                                                                     // 6719
 *     <div transclusion>                                                                                              // 6720
 *     </div>                                                                                                          // 6721
 *   </div>                                                                                                            // 6722
 * </div>                                                                                                              // 6723
 * ```                                                                                                                 // 6724
 *                                                                                                                     // 6725
 * The `$parent` scope hierarchy will look like this:                                                                  // 6726
 *                                                                                                                     // 6727
 * ```                                                                                                                 // 6728
 * - $rootScope                                                                                                        // 6729
 *   - isolate                                                                                                         // 6730
 *     - transclusion                                                                                                  // 6731
 * ```                                                                                                                 // 6732
 *                                                                                                                     // 6733
 * but the scopes will inherit prototypically from different scopes to their `$parent`.                                // 6734
 *                                                                                                                     // 6735
 * ```                                                                                                                 // 6736
 * - $rootScope                                                                                                        // 6737
 *   - transclusion                                                                                                    // 6738
 * - isolate                                                                                                           // 6739
 * ```                                                                                                                 // 6740
 *                                                                                                                     // 6741
 *                                                                                                                     // 6742
 * ### Attributes                                                                                                      // 6743
 *                                                                                                                     // 6744
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the                       // 6745
 * `link()` or `compile()` functions. It has a variety of uses.                                                        // 6746
 *                                                                                                                     // 6747
 * accessing *Normalized attribute names:*                                                                             // 6748
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.                  // 6749
 * the attributes object allows for normalized access to                                                               // 6750
 *   the attributes.                                                                                                   // 6751
 *                                                                                                                     // 6752
 * * *Directive inter-communication:* All directives share the same instance of the attributes                         // 6753
 *   object which allows the directives to use the attributes object as inter directive                                // 6754
 *   communication.                                                                                                    // 6755
 *                                                                                                                     // 6756
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object                           // 6757
 *   allowing other directives to read the interpolated value.                                                         // 6758
 *                                                                                                                     // 6759
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes                    // 6760
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also                  // 6761
 *   the only way to easily get the actual value because during the linking phase the interpolation                    // 6762
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.                                    // 6763
 *                                                                                                                     // 6764
 * ```js                                                                                                               // 6765
 * function linkingFn(scope, elm, attrs, ctrl) {                                                                       // 6766
 *   // get the attribute value                                                                                        // 6767
 *   console.log(attrs.ngModel);                                                                                       // 6768
 *                                                                                                                     // 6769
 *   // change the attribute                                                                                           // 6770
 *   attrs.$set('ngModel', 'new value');                                                                               // 6771
 *                                                                                                                     // 6772
 *   // observe changes to interpolated attribute                                                                      // 6773
 *   attrs.$observe('ngModel', function(value) {                                                                       // 6774
 *     console.log('ngModel has changed value to ' + value);                                                           // 6775
 *   });                                                                                                               // 6776
 * }                                                                                                                   // 6777
 * ```                                                                                                                 // 6778
 *                                                                                                                     // 6779
 * ## Example                                                                                                          // 6780
 *                                                                                                                     // 6781
 * <div class="alert alert-warning">                                                                                   // 6782
 * **Note**: Typically directives are registered with `module.directive`. The example below is                         // 6783
 * to illustrate how `$compile` works.                                                                                 // 6784
 * </div>                                                                                                              // 6785
 *                                                                                                                     // 6786
 <example module="compileExample">                                                                                     // 6787
   <file name="index.html">                                                                                            // 6788
    <script>                                                                                                           // 6789
      angular.module('compileExample', [], function($compileProvider) {                                                // 6790
        // configure new 'compile' directive by passing a directive                                                    // 6791
        // factory function. The factory function injects the '$compile'                                               // 6792
        $compileProvider.directive('compile', function($compile) {                                                     // 6793
          // directive factory creates a link function                                                                 // 6794
          return function(scope, element, attrs) {                                                                     // 6795
            scope.$watch(                                                                                              // 6796
              function(scope) {                                                                                        // 6797
                 // watch the 'compile' expression for changes                                                         // 6798
                return scope.$eval(attrs.compile);                                                                     // 6799
              },                                                                                                       // 6800
              function(value) {                                                                                        // 6801
                // when the 'compile' expression changes                                                               // 6802
                // assign it into the current DOM                                                                      // 6803
                element.html(value);                                                                                   // 6804
                                                                                                                       // 6805
                // compile the new DOM and link it to the current                                                      // 6806
                // scope.                                                                                              // 6807
                // NOTE: we only compile .childNodes so that                                                           // 6808
                // we don't get into infinite loop compiling ourselves                                                 // 6809
                $compile(element.contents())(scope);                                                                   // 6810
              }                                                                                                        // 6811
            );                                                                                                         // 6812
          };                                                                                                           // 6813
        });                                                                                                            // 6814
      })                                                                                                               // 6815
      .controller('GreeterController', ['$scope', function($scope) {                                                   // 6816
        $scope.name = 'Angular';                                                                                       // 6817
        $scope.html = 'Hello {{name}}';                                                                                // 6818
      }]);                                                                                                             // 6819
    </script>                                                                                                          // 6820
    <div ng-controller="GreeterController">                                                                            // 6821
      <input ng-model="name"> <br/>                                                                                    // 6822
      <textarea ng-model="html"></textarea> <br/>                                                                      // 6823
      <div compile="html"></div>                                                                                       // 6824
    </div>                                                                                                             // 6825
   </file>                                                                                                             // 6826
   <file name="protractor.js" type="protractor">                                                                       // 6827
     it('should auto compile', function() {                                                                            // 6828
       var textarea = $('textarea');                                                                                   // 6829
       var output = $('div[compile]');                                                                                 // 6830
       // The initial state reads 'Hello Angular'.                                                                     // 6831
       expect(output.getText()).toBe('Hello Angular');                                                                 // 6832
       textarea.clear();                                                                                               // 6833
       textarea.sendKeys('{{name}}!');                                                                                 // 6834
       expect(output.getText()).toBe('Angular!');                                                                      // 6835
     });                                                                                                               // 6836
   </file>                                                                                                             // 6837
 </example>                                                                                                            // 6838
                                                                                                                       // 6839
 *                                                                                                                     // 6840
 *                                                                                                                     // 6841
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.                      // 6842
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.          // 6843
 *                                                                                                                     // 6844
 * <div class="alert alert-danger">                                                                                    // 6845
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it                             // 6846
 *   e.g. will not use the right outer scope. Please pass the transclude function as a                                 // 6847
 *   `parentBoundTranscludeFn` to the link function instead.                                                           // 6848
 * </div>                                                                                                              // 6849
 *                                                                                                                     // 6850
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the                       // 6851
 *                 root element(s), not their children)                                                                // 6852
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template                 // 6853
 * (a DOM element/tree) to a scope. Where:                                                                             // 6854
 *                                                                                                                     // 6855
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.                                                        // 6856
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the                          // 6857
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the                                 // 6858
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is                               // 6859
 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:                                                      // 6860
 *                                                                                                                     // 6861
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.                             // 6862
 *      * `scope` - is the current scope with which the linking function is working with.                              // 6863
 *                                                                                                                     // 6864
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following           // 6865
 *  keys may be used to control linking behavior:                                                                      // 6866
 *                                                                                                                     // 6867
 *      * `parentBoundTranscludeFn` - the transclude function made available to                                        // 6868
 *        directives; if given, it will be passed through to the link functions of                                     // 6869
 *        directives found in `element` during compilation.                                                            // 6870
 *      * `transcludeControllers` - an object hash with keys that map controller names                                 // 6871
 *        to controller instances; if given, it will make the controllers                                              // 6872
 *        available to directives.                                                                                     // 6873
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add                             // 6874
 *        the cloned elements; only needed for transcludes that are allowed to contain non html                        // 6875
 *        elements (e.g. SVG elements). See also the directive.controller property.                                    // 6876
 *                                                                                                                     // 6877
 * Calling the linking function returns the element of the template. It is either the original                         // 6878
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.                                  // 6879
 *                                                                                                                     // 6880
 * After linking the view is not updated until after a call to $digest which typically is done by                      // 6881
 * Angular automatically.                                                                                              // 6882
 *                                                                                                                     // 6883
 * If you need access to the bound view, there are two ways to do it:                                                  // 6884
 *                                                                                                                     // 6885
 * - If you are not asking the linking function to clone the template, create the DOM element(s)                       // 6886
 *   before you send them to the compiler and keep this reference around.                                              // 6887
 *   ```js                                                                                                             // 6888
 *     var element = $compile('<p>{{total}}</p>')(scope);                                                              // 6889
 *   ```                                                                                                               // 6890
 *                                                                                                                     // 6891
 * - if on the other hand, you need the element to be cloned, the view reference from the original                     // 6892
 *   example would not point to the clone, but rather to the original template that was cloned. In                     // 6893
 *   this case, you can access the clone via the cloneAttachFn:                                                        // 6894
 *   ```js                                                                                                             // 6895
 *     var templateElement = angular.element('<p>{{total}}</p>'),                                                      // 6896
 *         scope = ....;                                                                                               // 6897
 *                                                                                                                     // 6898
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {                           // 6899
 *       //attach the clone to DOM document at the right place                                                         // 6900
 *     });                                                                                                             // 6901
 *                                                                                                                     // 6902
 *     //now we have reference to the cloned DOM via `clonedElement`                                                   // 6903
 *   ```                                                                                                               // 6904
 *                                                                                                                     // 6905
 *                                                                                                                     // 6906
 * For information on how the compiler works, see the                                                                  // 6907
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.                                        // 6908
 */                                                                                                                    // 6909
                                                                                                                       // 6910
var $compileMinErr = minErr('$compile');                                                                               // 6911
                                                                                                                       // 6912
/**                                                                                                                    // 6913
 * @ngdoc provider                                                                                                     // 6914
 * @name $compileProvider                                                                                              // 6915
 *                                                                                                                     // 6916
 * @description                                                                                                        // 6917
 */                                                                                                                    // 6918
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];                                                      // 6919
function $CompileProvider($provide, $$sanitizeUriProvider) {                                                           // 6920
  var hasDirectives = {},                                                                                              // 6921
      Suffix = 'Directive',                                                                                            // 6922
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,                                                // 6923
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,                                                          // 6924
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),                                                     // 6925
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;                                                           // 6926
                                                                                                                       // 6927
  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes                                    // 6928
  // The assumption is that future DOM event attribute names will begin with                                           // 6929
  // 'on' and be composed of only English letters.                                                                     // 6930
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;                                                           // 6931
                                                                                                                       // 6932
  function parseIsolateBindings(scope, directiveName, isController) {                                                  // 6933
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;                                                           // 6934
                                                                                                                       // 6935
    var bindings = {};                                                                                                 // 6936
                                                                                                                       // 6937
    forEach(scope, function(definition, scopeName) {                                                                   // 6938
      var match = definition.match(LOCAL_REGEXP);                                                                      // 6939
                                                                                                                       // 6940
      if (!match) {                                                                                                    // 6941
        throw $compileMinErr('iscp',                                                                                   // 6942
            "Invalid {3} for directive '{0}'." +                                                                       // 6943
            " Definition: {... {1}: '{2}' ...}",                                                                       // 6944
            directiveName, scopeName, definition,                                                                      // 6945
            (isController ? "controller bindings definition" :                                                         // 6946
            "isolate scope definition"));                                                                              // 6947
      }                                                                                                                // 6948
                                                                                                                       // 6949
      bindings[scopeName] = {                                                                                          // 6950
        mode: match[1][0],                                                                                             // 6951
        collection: match[2] === '*',                                                                                  // 6952
        optional: match[3] === '?',                                                                                    // 6953
        attrName: match[4] || scopeName                                                                                // 6954
      };                                                                                                               // 6955
    });                                                                                                                // 6956
                                                                                                                       // 6957
    return bindings;                                                                                                   // 6958
  }                                                                                                                    // 6959
                                                                                                                       // 6960
  function parseDirectiveBindings(directive, directiveName) {                                                          // 6961
    var bindings = {                                                                                                   // 6962
      isolateScope: null,                                                                                              // 6963
      bindToController: null                                                                                           // 6964
    };                                                                                                                 // 6965
    if (isObject(directive.scope)) {                                                                                   // 6966
      if (directive.bindToController === true) {                                                                       // 6967
        bindings.bindToController = parseIsolateBindings(directive.scope,                                              // 6968
                                                         directiveName, true);                                         // 6969
        bindings.isolateScope = {};                                                                                    // 6970
      } else {                                                                                                         // 6971
        bindings.isolateScope = parseIsolateBindings(directive.scope,                                                  // 6972
                                                     directiveName, false);                                            // 6973
      }                                                                                                                // 6974
    }                                                                                                                  // 6975
    if (isObject(directive.bindToController)) {                                                                        // 6976
      bindings.bindToController =                                                                                      // 6977
          parseIsolateBindings(directive.bindToController, directiveName, true);                                       // 6978
    }                                                                                                                  // 6979
    if (isObject(bindings.bindToController)) {                                                                         // 6980
      var controller = directive.controller;                                                                           // 6981
      var controllerAs = directive.controllerAs;                                                                       // 6982
      if (!controller) {                                                                                               // 6983
        // There is no controller, there may or may not be a controllerAs property                                     // 6984
        throw $compileMinErr('noctrl',                                                                                 // 6985
              "Cannot bind to controller without directive '{0}'s controller.",                                        // 6986
              directiveName);                                                                                          // 6987
      } else if (!identifierForController(controller, controllerAs)) {                                                 // 6988
        // There is a controller, but no identifier or controllerAs property                                           // 6989
        throw $compileMinErr('noident',                                                                                // 6990
              "Cannot bind to controller without identifier for directive '{0}'.",                                     // 6991
              directiveName);                                                                                          // 6992
      }                                                                                                                // 6993
    }                                                                                                                  // 6994
    return bindings;                                                                                                   // 6995
  }                                                                                                                    // 6996
                                                                                                                       // 6997
  function assertValidDirectiveName(name) {                                                                            // 6998
    var letter = name.charAt(0);                                                                                       // 6999
    if (!letter || letter !== lowercase(letter)) {                                                                     // 7000
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }                                                                                                                  // 7002
    if (name !== name.trim()) {                                                                                        // 7003
      throw $compileMinErr('baddir',                                                                                   // 7004
            "Directive name '{0}' is invalid. The name should not contain leading or trailing whitespaces",            // 7005
            name);                                                                                                     // 7006
    }                                                                                                                  // 7007
  }                                                                                                                    // 7008
                                                                                                                       // 7009
  /**                                                                                                                  // 7010
   * @ngdoc method                                                                                                     // 7011
   * @name $compileProvider#directive                                                                                  // 7012
   * @kind function                                                                                                    // 7013
   *                                                                                                                   // 7014
   * @description                                                                                                      // 7015
   * Register a new directive with the compiler.                                                                       // 7016
   *                                                                                                                   // 7017
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which                   // 7018
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the                     // 7019
   *    names and the values are the factories.                                                                        // 7020
   * @param {Function|Array} directiveFactory An injectable directive factory function. See                            // 7021
   *    {@link guide/directive} for more info.                                                                         // 7022
   * @returns {ng.$compileProvider} Self for chaining.                                                                 // 7023
   */                                                                                                                  // 7024
   this.directive = function registerDirective(name, directiveFactory) {                                               // 7025
    assertNotHasOwnProperty(name, 'directive');                                                                        // 7026
    if (isString(name)) {                                                                                              // 7027
      assertValidDirectiveName(name);                                                                                  // 7028
      assertArg(directiveFactory, 'directiveFactory');                                                                 // 7029
      if (!hasDirectives.hasOwnProperty(name)) {                                                                       // 7030
        hasDirectives[name] = [];                                                                                      // 7031
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',                                             // 7032
          function($injector, $exceptionHandler) {                                                                     // 7033
            var directives = [];                                                                                       // 7034
            forEach(hasDirectives[name], function(directiveFactory, index) {                                           // 7035
              try {                                                                                                    // 7036
                var directive = $injector.invoke(directiveFactory);                                                    // 7037
                if (isFunction(directive)) {                                                                           // 7038
                  directive = { compile: valueFn(directive) };                                                         // 7039
                } else if (!directive.compile && directive.link) {                                                     // 7040
                  directive.compile = valueFn(directive.link);                                                         // 7041
                }                                                                                                      // 7042
                directive.priority = directive.priority || 0;                                                          // 7043
                directive.index = index;                                                                               // 7044
                directive.name = directive.name || name;                                                               // 7045
                directive.require = directive.require || (directive.controller && directive.name);                     // 7046
                directive.restrict = directive.restrict || 'EA';                                                       // 7047
                var bindings = directive.$$bindings =                                                                  // 7048
                    parseDirectiveBindings(directive, directive.name);                                                 // 7049
                if (isObject(bindings.isolateScope)) {                                                                 // 7050
                  directive.$$isolateBindings = bindings.isolateScope;                                                 // 7051
                }                                                                                                      // 7052
                directive.$$moduleName = directiveFactory.$$moduleName;                                                // 7053
                directives.push(directive);                                                                            // 7054
              } catch (e) {                                                                                            // 7055
                $exceptionHandler(e);                                                                                  // 7056
              }                                                                                                        // 7057
            });                                                                                                        // 7058
            return directives;                                                                                         // 7059
          }]);                                                                                                         // 7060
      }                                                                                                                // 7061
      hasDirectives[name].push(directiveFactory);                                                                      // 7062
    } else {                                                                                                           // 7063
      forEach(name, reverseParams(registerDirective));                                                                 // 7064
    }                                                                                                                  // 7065
    return this;                                                                                                       // 7066
  };                                                                                                                   // 7067
                                                                                                                       // 7068
                                                                                                                       // 7069
  /**                                                                                                                  // 7070
   * @ngdoc method                                                                                                     // 7071
   * @name $compileProvider#aHrefSanitizationWhitelist                                                                 // 7072
   * @kind function                                                                                                    // 7073
   *                                                                                                                   // 7074
   * @description                                                                                                      // 7075
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7076
   * urls during a[href] sanitization.                                                                                 // 7077
   *                                                                                                                   // 7078
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.                            // 7079
   *                                                                                                                   // 7080
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 7081
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 7082
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7083
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7084
   *                                                                                                                   // 7085
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7086
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7087
   *    chaining otherwise.                                                                                            // 7088
   */                                                                                                                  // 7089
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 7090
    if (isDefined(regexp)) {                                                                                           // 7091
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);                                                        // 7092
      return this;                                                                                                     // 7093
    } else {                                                                                                           // 7094
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();                                                       // 7095
    }                                                                                                                  // 7096
  };                                                                                                                   // 7097
                                                                                                                       // 7098
                                                                                                                       // 7099
  /**                                                                                                                  // 7100
   * @ngdoc method                                                                                                     // 7101
   * @name $compileProvider#imgSrcSanitizationWhitelist                                                                // 7102
   * @kind function                                                                                                    // 7103
   *                                                                                                                   // 7104
   * @description                                                                                                      // 7105
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 7106
   * urls during img[src] sanitization.                                                                                // 7107
   *                                                                                                                   // 7108
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 7109
   *                                                                                                                   // 7110
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 7111
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 7112
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 7113
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 7114
   *                                                                                                                   // 7115
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 7116
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 7117
   *    chaining otherwise.                                                                                            // 7118
   */                                                                                                                  // 7119
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 7120
    if (isDefined(regexp)) {                                                                                           // 7121
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);                                                       // 7122
      return this;                                                                                                     // 7123
    } else {                                                                                                           // 7124
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();                                                      // 7125
    }                                                                                                                  // 7126
  };                                                                                                                   // 7127
                                                                                                                       // 7128
  /**                                                                                                                  // 7129
   * @ngdoc method                                                                                                     // 7130
   * @name  $compileProvider#debugInfoEnabled                                                                          // 7131
   *                                                                                                                   // 7132
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the                // 7133
   * current debugInfoEnabled state                                                                                    // 7134
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 7135
   *                                                                                                                   // 7136
   * @kind function                                                                                                    // 7137
   *                                                                                                                   // 7138
   * @description                                                                                                      // 7139
   * Call this method to enable/disable various debug runtime information in the compiler such as adding               // 7140
   * binding information and a reference to the current scope on to DOM elements.                                      // 7141
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope                 // 7142
   * * `ng-binding` CSS class                                                                                          // 7143
   * * `$binding` data property containing an array of the binding expressions                                         // 7144
   *                                                                                                                   // 7145
   * You may want to disable this in production for a significant performance boost. See                               // 7146
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.                                      // 7147
   *                                                                                                                   // 7148
   * The default value is true.                                                                                        // 7149
   */                                                                                                                  // 7150
  var debugInfoEnabled = true;                                                                                         // 7151
  this.debugInfoEnabled = function(enabled) {                                                                          // 7152
    if (isDefined(enabled)) {                                                                                          // 7153
      debugInfoEnabled = enabled;                                                                                      // 7154
      return this;                                                                                                     // 7155
    }                                                                                                                  // 7156
    return debugInfoEnabled;                                                                                           // 7157
  };                                                                                                                   // 7158
                                                                                                                       // 7159
  this.$get = [                                                                                                        // 7160
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',                            // 7161
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',                             // 7162
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,                             // 7163
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {                            // 7164
                                                                                                                       // 7165
    var Attributes = function(element, attributesToCopy) {                                                             // 7166
      if (attributesToCopy) {                                                                                          // 7167
        var keys = Object.keys(attributesToCopy);                                                                      // 7168
        var i, l, key;                                                                                                 // 7169
                                                                                                                       // 7170
        for (i = 0, l = keys.length; i < l; i++) {                                                                     // 7171
          key = keys[i];                                                                                               // 7172
          this[key] = attributesToCopy[key];                                                                           // 7173
        }                                                                                                              // 7174
      } else {                                                                                                         // 7175
        this.$attr = {};                                                                                               // 7176
      }                                                                                                                // 7177
                                                                                                                       // 7178
      this.$$element = element;                                                                                        // 7179
    };                                                                                                                 // 7180
                                                                                                                       // 7181
    Attributes.prototype = {                                                                                           // 7182
      /**                                                                                                              // 7183
       * @ngdoc method                                                                                                 // 7184
       * @name $compile.directive.Attributes#$normalize                                                                // 7185
       * @kind function                                                                                                // 7186
       *                                                                                                               // 7187
       * @description                                                                                                  // 7188
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or     // 7189
       * `data-`) to its normalized, camelCase form.                                                                   // 7190
       *                                                                                                               // 7191
       * Also there is special case for Moz prefix starting with upper case letter.                                    // 7192
       *                                                                                                               // 7193
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *                                                                                                               // 7195
       * @param {string} name Name to normalize                                                                        // 7196
       */                                                                                                              // 7197
      $normalize: directiveNormalize,                                                                                  // 7198
                                                                                                                       // 7199
                                                                                                                       // 7200
      /**                                                                                                              // 7201
       * @ngdoc method                                                                                                 // 7202
       * @name $compile.directive.Attributes#$addClass                                                                 // 7203
       * @kind function                                                                                                // 7204
       *                                                                                                               // 7205
       * @description                                                                                                  // 7206
       * Adds the CSS class value specified by the classVal parameter to the element. If animations                    // 7207
       * are enabled then an animation will be triggered for the class addition.                                       // 7208
       *                                                                                                               // 7209
       * @param {string} classVal The className value that will be added to the element                                // 7210
       */                                                                                                              // 7211
      $addClass: function(classVal) {                                                                                  // 7212
        if (classVal && classVal.length > 0) {                                                                         // 7213
          $animate.addClass(this.$$element, classVal);                                                                 // 7214
        }                                                                                                              // 7215
      },                                                                                                               // 7216
                                                                                                                       // 7217
      /**                                                                                                              // 7218
       * @ngdoc method                                                                                                 // 7219
       * @name $compile.directive.Attributes#$removeClass                                                              // 7220
       * @kind function                                                                                                // 7221
       *                                                                                                               // 7222
       * @description                                                                                                  // 7223
       * Removes the CSS class value specified by the classVal parameter from the element. If                          // 7224
       * animations are enabled then an animation will be triggered for the class removal.                             // 7225
       *                                                                                                               // 7226
       * @param {string} classVal The className value that will be removed from the element                            // 7227
       */                                                                                                              // 7228
      $removeClass: function(classVal) {                                                                               // 7229
        if (classVal && classVal.length > 0) {                                                                         // 7230
          $animate.removeClass(this.$$element, classVal);                                                              // 7231
        }                                                                                                              // 7232
      },                                                                                                               // 7233
                                                                                                                       // 7234
      /**                                                                                                              // 7235
       * @ngdoc method                                                                                                 // 7236
       * @name $compile.directive.Attributes#$updateClass                                                              // 7237
       * @kind function                                                                                                // 7238
       *                                                                                                               // 7239
       * @description                                                                                                  // 7240
       * Adds and removes the appropriate CSS class values to the element based on the difference                      // 7241
       * between the new and old CSS class values (specified as newClasses and oldClasses).                            // 7242
       *                                                                                                               // 7243
       * @param {string} newClasses The current CSS className value                                                    // 7244
       * @param {string} oldClasses The former CSS className value                                                     // 7245
       */                                                                                                              // 7246
      $updateClass: function(newClasses, oldClasses) {                                                                 // 7247
        var toAdd = tokenDifference(newClasses, oldClasses);                                                           // 7248
        if (toAdd && toAdd.length) {                                                                                   // 7249
          $animate.addClass(this.$$element, toAdd);                                                                    // 7250
        }                                                                                                              // 7251
                                                                                                                       // 7252
        var toRemove = tokenDifference(oldClasses, newClasses);                                                        // 7253
        if (toRemove && toRemove.length) {                                                                             // 7254
          $animate.removeClass(this.$$element, toRemove);                                                              // 7255
        }                                                                                                              // 7256
      },                                                                                                               // 7257
                                                                                                                       // 7258
      /**                                                                                                              // 7259
       * Set a normalized attribute on the element in a way such that all directives                                   // 7260
       * can share the attribute. This function properly handles boolean attributes.                                   // 7261
       * @param {string} key Normalized key. (ie ngAttribute)                                                          // 7262
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.                          // 7263
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.                      // 7264
       *     Defaults to true.                                                                                         // 7265
       * @param {string=} attrName Optional none normalized name. Defaults to key.                                     // 7266
       */                                                                                                              // 7267
      $set: function(key, value, writeAttr, attrName) {                                                                // 7268
        // TODO: decide whether or not to throw an error if "class"                                                    // 7269
        //is set through this function since it may cause $updateClass to                                              // 7270
        //become unstable.                                                                                             // 7271
                                                                                                                       // 7272
        var node = this.$$element[0],                                                                                  // 7273
            booleanKey = getBooleanAttrName(node, key),                                                                // 7274
            aliasedKey = getAliasedAttrName(node, key),                                                                // 7275
            observer = key,                                                                                            // 7276
            nodeName;                                                                                                  // 7277
                                                                                                                       // 7278
        if (booleanKey) {                                                                                              // 7279
          this.$$element.prop(key, value);                                                                             // 7280
          attrName = booleanKey;                                                                                       // 7281
        } else if (aliasedKey) {                                                                                       // 7282
          this[aliasedKey] = value;                                                                                    // 7283
          observer = aliasedKey;                                                                                       // 7284
        }                                                                                                              // 7285
                                                                                                                       // 7286
        this[key] = value;                                                                                             // 7287
                                                                                                                       // 7288
        // translate normalized key to actual key                                                                      // 7289
        if (attrName) {                                                                                                // 7290
          this.$attr[key] = attrName;                                                                                  // 7291
        } else {                                                                                                       // 7292
          attrName = this.$attr[key];                                                                                  // 7293
          if (!attrName) {                                                                                             // 7294
            this.$attr[key] = attrName = snake_case(key, '-');                                                         // 7295
          }                                                                                                            // 7296
        }                                                                                                              // 7297
                                                                                                                       // 7298
        nodeName = nodeName_(this.$$element);                                                                          // 7299
                                                                                                                       // 7300
        if ((nodeName === 'a' && key === 'href') ||                                                                    // 7301
            (nodeName === 'img' && key === 'src')) {                                                                   // 7302
          // sanitize a[href] and img[src] values                                                                      // 7303
          this[key] = value = $$sanitizeUri(value, key === 'src');                                                     // 7304
        } else if (nodeName === 'img' && key === 'srcset') {                                                           // 7305
          // sanitize img[srcset] values                                                                               // 7306
          var result = "";                                                                                             // 7307
                                                                                                                       // 7308
          // first check if there are spaces because it's not the same pattern                                         // 7309
          var trimmedSrcset = trim(value);                                                                             // 7310
          //                (   999x   ,|   999w   ,|   ,|,   )                                                        // 7311
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;                                                      // 7312
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;                                                 // 7313
                                                                                                                       // 7314
          // split srcset into tuple of uri and descriptor except for the last item                                    // 7315
          var rawUris = trimmedSrcset.split(pattern);                                                                  // 7316
                                                                                                                       // 7317
          // for each tuples                                                                                           // 7318
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);                                                      // 7319
          for (var i = 0; i < nbrUrisWith2parts; i++) {                                                                // 7320
            var innerIdx = i * 2;                                                                                      // 7321
            // sanitize the uri                                                                                        // 7322
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);                                                    // 7323
            // add the descriptor                                                                                      // 7324
            result += (" " + trim(rawUris[innerIdx + 1]));                                                             // 7325
          }                                                                                                            // 7326
                                                                                                                       // 7327
          // split the last item into uri and descriptor                                                               // 7328
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);                                                            // 7329
                                                                                                                       // 7330
          // sanitize the last uri                                                                                     // 7331
          result += $$sanitizeUri(trim(lastTuple[0]), true);                                                           // 7332
                                                                                                                       // 7333
          // and add the last descriptor if any                                                                        // 7334
          if (lastTuple.length === 2) {                                                                                // 7335
            result += (" " + trim(lastTuple[1]));                                                                      // 7336
          }                                                                                                            // 7337
          this[key] = value = result;                                                                                  // 7338
        }                                                                                                              // 7339
                                                                                                                       // 7340
        if (writeAttr !== false) {                                                                                     // 7341
          if (value === null || value === undefined) {                                                                 // 7342
            this.$$element.removeAttr(attrName);                                                                       // 7343
          } else {                                                                                                     // 7344
            this.$$element.attr(attrName, value);                                                                      // 7345
          }                                                                                                            // 7346
        }                                                                                                              // 7347
                                                                                                                       // 7348
        // fire observers                                                                                              // 7349
        var $$observers = this.$$observers;                                                                            // 7350
        $$observers && forEach($$observers[observer], function(fn) {                                                   // 7351
          try {                                                                                                        // 7352
            fn(value);                                                                                                 // 7353
          } catch (e) {                                                                                                // 7354
            $exceptionHandler(e);                                                                                      // 7355
          }                                                                                                            // 7356
        });                                                                                                            // 7357
      },                                                                                                               // 7358
                                                                                                                       // 7359
                                                                                                                       // 7360
      /**                                                                                                              // 7361
       * @ngdoc method                                                                                                 // 7362
       * @name $compile.directive.Attributes#$observe                                                                  // 7363
       * @kind function                                                                                                // 7364
       *                                                                                                               // 7365
       * @description                                                                                                  // 7366
       * Observes an interpolated attribute.                                                                           // 7367
       *                                                                                                               // 7368
       * The observer function will be invoked once during the next `$digest` following                                // 7369
       * compilation. The observer is then invoked whenever the interpolated value                                     // 7370
       * changes.                                                                                                      // 7371
       *                                                                                                               // 7372
       * @param {string} key Normalized key. (ie ngAttribute) .                                                        // 7373
       * @param {function(interpolatedValue)} fn Function that will be called whenever                                 // 7374
                the interpolated value of the attribute changes.                                                       // 7375
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.            // 7376
       * @returns {function()} Returns a deregistration function for this observer.                                    // 7377
       */                                                                                                              // 7378
      $observe: function(key, fn) {                                                                                    // 7379
        var attrs = this,                                                                                              // 7380
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),                                    // 7381
            listeners = ($$observers[key] || ($$observers[key] = []));                                                 // 7382
                                                                                                                       // 7383
        listeners.push(fn);                                                                                            // 7384
        $rootScope.$evalAsync(function() {                                                                             // 7385
          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {                           // 7386
            // no one registered attribute interpolation function, so lets call it manually                            // 7387
            fn(attrs[key]);                                                                                            // 7388
          }                                                                                                            // 7389
        });                                                                                                            // 7390
                                                                                                                       // 7391
        return function() {                                                                                            // 7392
          arrayRemove(listeners, fn);                                                                                  // 7393
        };                                                                                                             // 7394
      }                                                                                                                // 7395
    };                                                                                                                 // 7396
                                                                                                                       // 7397
                                                                                                                       // 7398
    function safeAddClass($element, className) {                                                                       // 7399
      try {                                                                                                            // 7400
        $element.addClass(className);                                                                                  // 7401
      } catch (e) {                                                                                                    // 7402
        // ignore, since it means that we are trying to set class on                                                   // 7403
        // SVG element, where class name is read-only.                                                                 // 7404
      }                                                                                                                // 7405
    }                                                                                                                  // 7406
                                                                                                                       // 7407
                                                                                                                       // 7408
    var startSymbol = $interpolate.startSymbol(),                                                                      // 7409
        endSymbol = $interpolate.endSymbol(),                                                                          // 7410
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')                                              // 7411
            ? identity                                                                                                 // 7412
            : function denormalizeTemplate(template) {                                                                 // 7413
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);                                 // 7414
        },                                                                                                             // 7415
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;                                                                              // 7416
                                                                                                                       // 7417
    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {                       // 7418
      var bindings = $element.data('$binding') || [];                                                                  // 7419
                                                                                                                       // 7420
      if (isArray(binding)) {                                                                                          // 7421
        bindings = bindings.concat(binding);                                                                           // 7422
      } else {                                                                                                         // 7423
        bindings.push(binding);                                                                                        // 7424
      }                                                                                                                // 7425
                                                                                                                       // 7426
      $element.data('$binding', bindings);                                                                             // 7427
    } : noop;                                                                                                          // 7428
                                                                                                                       // 7429
    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {                              // 7430
      safeAddClass($element, 'ng-binding');                                                                            // 7431
    } : noop;                                                                                                          // 7432
                                                                                                                       // 7433
    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {       // 7434
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';                 // 7435
      $element.data(dataName, scope);                                                                                  // 7436
    } : noop;                                                                                                          // 7437
                                                                                                                       // 7438
    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {                        // 7439
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');                                              // 7440
    } : noop;                                                                                                          // 7441
                                                                                                                       // 7442
    return compile;                                                                                                    // 7443
                                                                                                                       // 7444
    //================================                                                                                 // 7445
                                                                                                                       // 7446
    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,                                        // 7447
                        previousCompileContext) {                                                                      // 7448
      if (!($compileNodes instanceof jqLite)) {                                                                        // 7449
        // jquery always rewraps, whereas we need to preserve the original selector so that we can                     // 7450
        // modify it.                                                                                                  // 7451
        $compileNodes = jqLite($compileNodes);                                                                         // 7452
      }                                                                                                                // 7453
      // We can not compile top level text elements since text nodes can be merged and we will                         // 7454
      // not be able to attach scope data to them, so we will wrap them in <span>                                      // 7455
      forEach($compileNodes, function(node, index) {                                                                   // 7456
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {                         // 7457
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];                                       // 7458
        }                                                                                                              // 7459
      });                                                                                                              // 7460
      var compositeLinkFn =                                                                                            // 7461
              compileNodes($compileNodes, transcludeFn, $compileNodes,                                                 // 7462
                           maxPriority, ignoreDirective, previousCompileContext);                                      // 7463
      compile.$$addScopeClass($compileNodes);                                                                          // 7464
      var namespace = null;                                                                                            // 7465
      return function publicLinkFn(scope, cloneConnectFn, options) {                                                   // 7466
        assertArg(scope, 'scope');                                                                                     // 7467
                                                                                                                       // 7468
        options = options || {};                                                                                       // 7469
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,                                                 // 7470
          transcludeControllers = options.transcludeControllers,                                                       // 7471
          futureParentElement = options.futureParentElement;                                                           // 7472
                                                                                                                       // 7473
        // When `parentBoundTranscludeFn` is passed, it is a                                                           // 7474
        // `controllersBoundTransclude` function (it was previously passed                                             // 7475
        // as `transclude` to directive.link) so we must unwrap it to get                                              // 7476
        // its `boundTranscludeFn`                                                                                     // 7477
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {                                    // 7478
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;                                         // 7479
        }                                                                                                              // 7480
                                                                                                                       // 7481
        if (!namespace) {                                                                                              // 7482
          namespace = detectNamespaceForChildElements(futureParentElement);                                            // 7483
        }                                                                                                              // 7484
        var $linkNode;                                                                                                 // 7485
        if (namespace !== 'html') {                                                                                    // 7486
          // When using a directive with replace:true and templateUrl the $compileNodes                                // 7487
          // (or a child element inside of them)                                                                       // 7488
          // might change, so we need to recreate the namespace adapted compileNodes                                   // 7489
          // for call to the link function.                                                                            // 7490
          // Note: This will already clone the nodes...                                                                // 7491
          $linkNode = jqLite(                                                                                          // 7492
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())                                      // 7493
          );                                                                                                           // 7494
        } else if (cloneConnectFn) {                                                                                   // 7495
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart                   // 7496
          // and sometimes changes the structure of the DOM.                                                           // 7497
          $linkNode = JQLitePrototype.clone.call($compileNodes);                                                       // 7498
        } else {                                                                                                       // 7499
          $linkNode = $compileNodes;                                                                                   // 7500
        }                                                                                                              // 7501
                                                                                                                       // 7502
        if (transcludeControllers) {                                                                                   // 7503
          for (var controllerName in transcludeControllers) {                                                          // 7504
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);       // 7505
          }                                                                                                            // 7506
        }                                                                                                              // 7507
                                                                                                                       // 7508
        compile.$$addScopeInfo($linkNode, scope);                                                                      // 7509
                                                                                                                       // 7510
        if (cloneConnectFn) cloneConnectFn($linkNode, scope);                                                          // 7511
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);                    // 7512
        return $linkNode;                                                                                              // 7513
      };                                                                                                               // 7514
    }                                                                                                                  // 7515
                                                                                                                       // 7516
    function detectNamespaceForChildElements(parentElement) {                                                          // 7517
      // TODO: Make this detect MathML as well...                                                                      // 7518
      var node = parentElement && parentElement[0];                                                                    // 7519
      if (!node) {                                                                                                     // 7520
        return 'html';                                                                                                 // 7521
      } else {                                                                                                         // 7522
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';                   // 7523
      }                                                                                                                // 7524
    }                                                                                                                  // 7525
                                                                                                                       // 7526
    /**                                                                                                                // 7527
     * Compile function matches each node in nodeList against the directives. Once all directives                      // 7528
     * for a particular node are collected their compile functions are executed. The compile                           // 7529
     * functions return values - the linking functions - are combined into a composite linking                         // 7530
     * function, which is the a linking function for the node.                                                         // 7531
     *                                                                                                                 // 7532
     * @param {NodeList} nodeList an array of nodes or NodeList to compile                                             // 7533
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7534
     *        scope argument is auto-generated to the new child of the transcluded parent scope.                       // 7535
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then                      // 7536
     *        the rootElement must be set the jqLite collection of the compile root. This is                           // 7537
     *        needed so that the jqLite collection items can be replaced with widgets.                                 // 7538
     * @param {number=} maxPriority Max directive priority.                                                            // 7539
     * @returns {Function} A composite linking function of all of the matched directives or null.                      // 7540
     */                                                                                                                // 7541
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,                          // 7542
                            previousCompileContext) {                                                                  // 7543
      var linkFns = [],                                                                                                // 7544
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;                        // 7545
                                                                                                                       // 7546
      for (var i = 0; i < nodeList.length; i++) {                                                                      // 7547
        attrs = new Attributes();                                                                                      // 7548
                                                                                                                       // 7549
        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.                          // 7550
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,                      // 7551
                                        ignoreDirective);                                                              // 7552
                                                                                                                       // 7553
        nodeLinkFn = (directives.length)                                                                               // 7554
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,                        // 7555
                                      null, [], [], previousCompileContext)                                            // 7556
            : null;                                                                                                    // 7557
                                                                                                                       // 7558
        if (nodeLinkFn && nodeLinkFn.scope) {                                                                          // 7559
          compile.$$addScopeClass(attrs.$$element);                                                                    // 7560
        }                                                                                                              // 7561
                                                                                                                       // 7562
        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||                                                            // 7563
                      !(childNodes = nodeList[i].childNodes) ||                                                        // 7564
                      !childNodes.length)                                                                              // 7565
            ? null                                                                                                     // 7566
            : compileNodes(childNodes,                                                                                 // 7567
                 nodeLinkFn ? (                                                                                        // 7568
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)                            // 7569
                     && nodeLinkFn.transclude) : transcludeFn);                                                        // 7570
                                                                                                                       // 7571
        if (nodeLinkFn || childLinkFn) {                                                                               // 7572
          linkFns.push(i, nodeLinkFn, childLinkFn);                                                                    // 7573
          linkFnFound = true;                                                                                          // 7574
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;                                                             // 7575
        }                                                                                                              // 7576
                                                                                                                       // 7577
        //use the previous context only for the first element in the virtual group                                     // 7578
        previousCompileContext = null;                                                                                 // 7579
      }                                                                                                                // 7580
                                                                                                                       // 7581
      // return a linking function if we have found anything, null otherwise                                           // 7582
      return linkFnFound ? compositeLinkFn : null;                                                                     // 7583
                                                                                                                       // 7584
      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {                               // 7585
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;                             // 7586
        var stableNodeList;                                                                                            // 7587
                                                                                                                       // 7588
                                                                                                                       // 7589
        if (nodeLinkFnFound) {                                                                                         // 7590
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our                    // 7591
          // offsets don't get screwed up                                                                              // 7592
          var nodeListLength = nodeList.length;                                                                        // 7593
          stableNodeList = new Array(nodeListLength);                                                                  // 7594
                                                                                                                       // 7595
          // create a sparse array by only copying the elements which have a linkFn                                    // 7596
          for (i = 0; i < linkFns.length; i+=3) {                                                                      // 7597
            idx = linkFns[i];                                                                                          // 7598
            stableNodeList[idx] = nodeList[idx];                                                                       // 7599
          }                                                                                                            // 7600
        } else {                                                                                                       // 7601
          stableNodeList = nodeList;                                                                                   // 7602
        }                                                                                                              // 7603
                                                                                                                       // 7604
        for (i = 0, ii = linkFns.length; i < ii;) {                                                                    // 7605
          node = stableNodeList[linkFns[i++]];                                                                         // 7606
          nodeLinkFn = linkFns[i++];                                                                                   // 7607
          childLinkFn = linkFns[i++];                                                                                  // 7608
                                                                                                                       // 7609
          if (nodeLinkFn) {                                                                                            // 7610
            if (nodeLinkFn.scope) {                                                                                    // 7611
              childScope = scope.$new();                                                                               // 7612
              compile.$$addScopeInfo(jqLite(node), childScope);                                                        // 7613
              var destroyBindings = nodeLinkFn.$$destroyBindings;                                                      // 7614
              if (destroyBindings) {                                                                                   // 7615
                nodeLinkFn.$$destroyBindings = null;                                                                   // 7616
                childScope.$on('$destroyed', destroyBindings);                                                         // 7617
              }                                                                                                        // 7618
            } else {                                                                                                   // 7619
              childScope = scope;                                                                                      // 7620
            }                                                                                                          // 7621
                                                                                                                       // 7622
            if (nodeLinkFn.transcludeOnThisElement) {                                                                  // 7623
              childBoundTranscludeFn = createBoundTranscludeFn(                                                        // 7624
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);                                              // 7625
                                                                                                                       // 7626
            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {                                 // 7627
              childBoundTranscludeFn = parentBoundTranscludeFn;                                                        // 7628
                                                                                                                       // 7629
            } else if (!parentBoundTranscludeFn && transcludeFn) {                                                     // 7630
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);                                   // 7631
                                                                                                                       // 7632
            } else {                                                                                                   // 7633
              childBoundTranscludeFn = null;                                                                           // 7634
            }                                                                                                          // 7635
                                                                                                                       // 7636
            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn,                            // 7637
                       nodeLinkFn);                                                                                    // 7638
                                                                                                                       // 7639
          } else if (childLinkFn) {                                                                                    // 7640
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);                                   // 7641
          }                                                                                                            // 7642
        }                                                                                                              // 7643
      }                                                                                                                // 7644
    }                                                                                                                  // 7645
                                                                                                                       // 7646
    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {                                 // 7647
                                                                                                                       // 7648
      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) { // 7649
                                                                                                                       // 7650
        if (!transcludedScope) {                                                                                       // 7651
          transcludedScope = scope.$new(false, containingScope);                                                       // 7652
          transcludedScope.$$transcluded = true;                                                                       // 7653
        }                                                                                                              // 7654
                                                                                                                       // 7655
        return transcludeFn(transcludedScope, cloneFn, {                                                               // 7656
          parentBoundTranscludeFn: previousBoundTranscludeFn,                                                          // 7657
          transcludeControllers: controllers,                                                                          // 7658
          futureParentElement: futureParentElement                                                                     // 7659
        });                                                                                                            // 7660
      };                                                                                                               // 7661
                                                                                                                       // 7662
      return boundTranscludeFn;                                                                                        // 7663
    }                                                                                                                  // 7664
                                                                                                                       // 7665
    /**                                                                                                                // 7666
     * Looks for directives on the given node and adds them to the directive collection which is                       // 7667
     * sorted.                                                                                                         // 7668
     *                                                                                                                 // 7669
     * @param node Node to search.                                                                                     // 7670
     * @param directives An array to which the directives are added to. This array is sorted before                    // 7671
     *        the function returns.                                                                                    // 7672
     * @param attrs The shared attrs object which is used to populate the normalized attributes.                       // 7673
     * @param {number=} maxPriority Max directive priority.                                                            // 7674
     */                                                                                                                // 7675
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {                                // 7676
      var nodeType = node.nodeType,                                                                                    // 7677
          attrsMap = attrs.$attr,                                                                                      // 7678
          match,                                                                                                       // 7679
          className;                                                                                                   // 7680
                                                                                                                       // 7681
      switch (nodeType) {                                                                                              // 7682
        case NODE_TYPE_ELEMENT: /* Element */                                                                          // 7683
          // use the node name: <directive>                                                                            // 7684
          addDirective(directives,                                                                                     // 7685
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);                                 // 7686
                                                                                                                       // 7687
          // iterate over the attributes                                                                               // 7688
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,                           // 7689
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {                                                 // 7690
            var attrStartName = false;                                                                                 // 7691
            var attrEndName = false;                                                                                   // 7692
                                                                                                                       // 7693
            attr = nAttrs[j];                                                                                          // 7694
            name = attr.name;                                                                                          // 7695
            value = trim(attr.value);                                                                                  // 7696
                                                                                                                       // 7697
            // support ngAttr attribute binding                                                                        // 7698
            ngAttrName = directiveNormalize(name);                                                                     // 7699
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {                                                         // 7700
              name = name.replace(PREFIX_REGEXP, '')                                                                   // 7701
                .substr(8).replace(/_(.)/g, function(match, letter) {                                                  // 7702
                  return letter.toUpperCase();                                                                         // 7703
                });                                                                                                    // 7704
            }                                                                                                          // 7705
                                                                                                                       // 7706
            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');                                               // 7707
            if (directiveIsMultiElement(directiveNName)) {                                                             // 7708
              if (ngAttrName === directiveNName + 'Start') {                                                           // 7709
                attrStartName = name;                                                                                  // 7710
                attrEndName = name.substr(0, name.length - 5) + 'end';                                                 // 7711
                name = name.substr(0, name.length - 6);                                                                // 7712
              }                                                                                                        // 7713
            }                                                                                                          // 7714
                                                                                                                       // 7715
            nName = directiveNormalize(name.toLowerCase());                                                            // 7716
            attrsMap[nName] = name;                                                                                    // 7717
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {                                                            // 7718
                attrs[nName] = value;                                                                                  // 7719
                if (getBooleanAttrName(node, nName)) {                                                                 // 7720
                  attrs[nName] = true; // presence means true                                                          // 7721
                }                                                                                                      // 7722
            }                                                                                                          // 7723
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);                                     // 7724
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,                          // 7725
                          attrEndName);                                                                                // 7726
          }                                                                                                            // 7727
                                                                                                                       // 7728
          // use class as directive                                                                                    // 7729
          className = node.className;                                                                                  // 7730
          if (isObject(className)) {                                                                                   // 7731
              // Maybe SVGAnimatedString                                                                               // 7732
              className = className.animVal;                                                                           // 7733
          }                                                                                                            // 7734
          if (isString(className) && className !== '') {                                                               // 7735
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {                                                   // 7736
              nName = directiveNormalize(match[2]);                                                                    // 7737
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {                                // 7738
                attrs[nName] = trim(match[3]);                                                                         // 7739
              }                                                                                                        // 7740
              className = className.substr(match.index + match[0].length);                                             // 7741
            }                                                                                                          // 7742
          }                                                                                                            // 7743
          break;                                                                                                       // 7744
        case NODE_TYPE_TEXT: /* Text Node */                                                                           // 7745
          if (msie === 11) {                                                                                           // 7746
            // Workaround for #11781                                                                                   // 7747
            while (node.parentNode && node.nextSibling && node.nextSibling.nodeType === NODE_TYPE_TEXT) {              // 7748
              node.nodeValue = node.nodeValue + node.nextSibling.nodeValue;                                            // 7749
              node.parentNode.removeChild(node.nextSibling);                                                           // 7750
            }                                                                                                          // 7751
          }                                                                                                            // 7752
          addTextInterpolateDirective(directives, node.nodeValue);                                                     // 7753
          break;                                                                                                       // 7754
        case NODE_TYPE_COMMENT: /* Comment */                                                                          // 7755
          try {                                                                                                        // 7756
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);                                                     // 7757
            if (match) {                                                                                               // 7758
              nName = directiveNormalize(match[1]);                                                                    // 7759
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {                                // 7760
                attrs[nName] = trim(match[2]);                                                                         // 7761
              }                                                                                                        // 7762
            }                                                                                                          // 7763
          } catch (e) {                                                                                                // 7764
            // turns out that under some circumstances IE9 throws errors when one attempts to read                     // 7765
            // comment's node value.                                                                                   // 7766
            // Just ignore it and continue. (Can't seem to reproduce in test case.)                                    // 7767
          }                                                                                                            // 7768
          break;                                                                                                       // 7769
      }                                                                                                                // 7770
                                                                                                                       // 7771
      directives.sort(byPriority);                                                                                     // 7772
      return directives;                                                                                               // 7773
    }                                                                                                                  // 7774
                                                                                                                       // 7775
    /**                                                                                                                // 7776
     * Given a node with an directive-start it collects all of the siblings until it finds                             // 7777
     * directive-end.                                                                                                  // 7778
     * @param node                                                                                                     // 7779
     * @param attrStart                                                                                                // 7780
     * @param attrEnd                                                                                                  // 7781
     * @returns {*}                                                                                                    // 7782
     */                                                                                                                // 7783
    function groupScan(node, attrStart, attrEnd) {                                                                     // 7784
      var nodes = [];                                                                                                  // 7785
      var depth = 0;                                                                                                   // 7786
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {                                            // 7787
        do {                                                                                                           // 7788
          if (!node) {                                                                                                 // 7789
            throw $compileMinErr('uterdir',                                                                            // 7790
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",                              // 7791
                      attrStart, attrEnd);                                                                             // 7792
          }                                                                                                            // 7793
          if (node.nodeType == NODE_TYPE_ELEMENT) {                                                                    // 7794
            if (node.hasAttribute(attrStart)) depth++;                                                                 // 7795
            if (node.hasAttribute(attrEnd)) depth--;                                                                   // 7796
          }                                                                                                            // 7797
          nodes.push(node);                                                                                            // 7798
          node = node.nextSibling;                                                                                     // 7799
        } while (depth > 0);                                                                                           // 7800
      } else {                                                                                                         // 7801
        nodes.push(node);                                                                                              // 7802
      }                                                                                                                // 7803
                                                                                                                       // 7804
      return jqLite(nodes);                                                                                            // 7805
    }                                                                                                                  // 7806
                                                                                                                       // 7807
    /**                                                                                                                // 7808
     * Wrapper for linking function which converts normal linking function into a grouped                              // 7809
     * linking function.                                                                                               // 7810
     * @param linkFn                                                                                                   // 7811
     * @param attrStart                                                                                                // 7812
     * @param attrEnd                                                                                                  // 7813
     * @returns {Function}                                                                                             // 7814
     */                                                                                                                // 7815
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {                                                  // 7816
      return function(scope, element, attrs, controllers, transcludeFn) {                                              // 7817
        element = groupScan(element[0], attrStart, attrEnd);                                                           // 7818
        return linkFn(scope, element, attrs, controllers, transcludeFn);                                               // 7819
      };                                                                                                               // 7820
    }                                                                                                                  // 7821
                                                                                                                       // 7822
    /**                                                                                                                // 7823
     * Once the directives have been collected, their compile functions are executed. This method                      // 7824
     * is responsible for inlining directive templates as well as terminating the application                          // 7825
     * of the directives if the terminal directive has been reached.                                                   // 7826
     *                                                                                                                 // 7827
     * @param {Array} directives Array of collected directives to execute their compile function.                      // 7828
     *        this needs to be pre-sorted by priority order.                                                           // 7829
     * @param {Node} compileNode The raw DOM node to apply the compile functions to                                    // 7830
     * @param {Object} templateAttrs The shared attribute function                                                     // 7831
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the                     // 7832
     *                                                  scope argument is auto-generated to the new                    // 7833
     *                                                  child of the transcluded parent scope.                         // 7834
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this                        // 7835
     *                              argument has the root jqLite array so that we can replace nodes                    // 7836
     *                              on it.                                                                             // 7837
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when                       // 7838
     *                                           compiling the transclusion.                                           // 7839
     * @param {Array.<Function>} preLinkFns                                                                            // 7840
     * @param {Array.<Function>} postLinkFns                                                                           // 7841
     * @param {Object} previousCompileContext Context used for previous compilation of the current                     // 7842
     *                                        node                                                                     // 7843
     * @returns {Function} linkFn                                                                                      // 7844
     */                                                                                                                // 7845
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,                               // 7846
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,                    // 7847
                                   previousCompileContext) {                                                           // 7848
      previousCompileContext = previousCompileContext || {};                                                           // 7849
                                                                                                                       // 7850
      var terminalPriority = -Number.MAX_VALUE,                                                                        // 7851
          newScopeDirective = previousCompileContext.newScopeDirective,                                                // 7852
          controllerDirectives = previousCompileContext.controllerDirectives,                                          // 7853
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,                                  // 7854
          templateDirective = previousCompileContext.templateDirective,                                                // 7855
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,                                // 7856
          hasTranscludeDirective = false,                                                                              // 7857
          hasTemplate = false,                                                                                         // 7858
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,                        // 7859
          $compileNode = templateAttrs.$$element = jqLite(compileNode),                                                // 7860
          directive,                                                                                                   // 7861
          directiveName,                                                                                               // 7862
          $template,                                                                                                   // 7863
          replaceDirective = originalReplaceDirective,                                                                 // 7864
          childTranscludeFn = transcludeFn,                                                                            // 7865
          linkFn,                                                                                                      // 7866
          directiveValue;                                                                                              // 7867
                                                                                                                       // 7868
      // executes all directives on the current element                                                                // 7869
      for (var i = 0, ii = directives.length; i < ii; i++) {                                                           // 7870
        directive = directives[i];                                                                                     // 7871
        var attrStart = directive.$$start;                                                                             // 7872
        var attrEnd = directive.$$end;                                                                                 // 7873
                                                                                                                       // 7874
        // collect multiblock sections                                                                                 // 7875
        if (attrStart) {                                                                                               // 7876
          $compileNode = groupScan(compileNode, attrStart, attrEnd);                                                   // 7877
        }                                                                                                              // 7878
        $template = undefined;                                                                                         // 7879
                                                                                                                       // 7880
        if (terminalPriority > directive.priority) {                                                                   // 7881
          break; // prevent further processing of directives                                                           // 7882
        }                                                                                                              // 7883
                                                                                                                       // 7884
        if (directiveValue = directive.scope) {                                                                        // 7885
                                                                                                                       // 7886
          // skip the check for directives with async templates, we'll check the derived sync                          // 7887
          // directive when the template arrives                                                                       // 7888
          if (!directive.templateUrl) {                                                                                // 7889
            if (isObject(directiveValue)) {                                                                            // 7890
              // This directive is trying to add an isolated scope.                                                    // 7891
              // Check that there is no scope of any kind already                                                      // 7892
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,                   // 7893
                                directive, $compileNode);                                                              // 7894
              newIsolateScopeDirective = directive;                                                                    // 7895
            } else {                                                                                                   // 7896
              // This directive is trying to add a child scope.                                                        // 7897
              // Check that there is no isolated scope already                                                         // 7898
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,                             // 7899
                                $compileNode);                                                                         // 7900
            }                                                                                                          // 7901
          }                                                                                                            // 7902
                                                                                                                       // 7903
          newScopeDirective = newScopeDirective || directive;                                                          // 7904
        }                                                                                                              // 7905
                                                                                                                       // 7906
        directiveName = directive.name;                                                                                // 7907
                                                                                                                       // 7908
        if (!directive.templateUrl && directive.controller) {                                                          // 7909
          directiveValue = directive.controller;                                                                       // 7910
          controllerDirectives = controllerDirectives || createMap();                                                  // 7911
          assertNoDuplicate("'" + directiveName + "' controller",                                                      // 7912
              controllerDirectives[directiveName], directive, $compileNode);                                           // 7913
          controllerDirectives[directiveName] = directive;                                                             // 7914
        }                                                                                                              // 7915
                                                                                                                       // 7916
        if (directiveValue = directive.transclude) {                                                                   // 7917
          hasTranscludeDirective = true;                                                                               // 7918
                                                                                                                       // 7919
          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.                    // 7920
          // This option should only be used by directives that know how to safely handle element transclusion,        // 7921
          // where the transcluded nodes are added or replaced after linking.                                          // 7922
          if (!directive.$$tlb) {                                                                                      // 7923
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);                     // 7924
            nonTlbTranscludeDirective = directive;                                                                     // 7925
          }                                                                                                            // 7926
                                                                                                                       // 7927
          if (directiveValue == 'element') {                                                                           // 7928
            hasElementTranscludeDirective = true;                                                                      // 7929
            terminalPriority = directive.priority;                                                                     // 7930
            $template = $compileNode;                                                                                  // 7931
            $compileNode = templateAttrs.$$element =                                                                   // 7932
                jqLite(document.createComment(' ' + directiveName + ': ' +                                             // 7933
                                              templateAttrs[directiveName] + ' '));                                    // 7934
            compileNode = $compileNode[0];                                                                             // 7935
            replaceWith(jqCollection, sliceArgs($template), compileNode);                                              // 7936
                                                                                                                       // 7937
            childTranscludeFn = compile($template, transcludeFn, terminalPriority,                                     // 7938
                                        replaceDirective && replaceDirective.name, {                                   // 7939
                                          // Don't pass in:                                                            // 7940
                                          // - controllerDirectives - otherwise we'll create duplicates controllers    // 7941
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.                                // 7943
                                          //                                                                           // 7944
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.                                       // 7946
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective                         // 7947
                                        });                                                                            // 7948
          } else {                                                                                                     // 7949
            $template = jqLite(jqLiteClone(compileNode)).contents();                                                   // 7950
            $compileNode.empty(); // clear contents                                                                    // 7951
            childTranscludeFn = compile($template, transcludeFn);                                                      // 7952
          }                                                                                                            // 7953
        }                                                                                                              // 7954
                                                                                                                       // 7955
        if (directive.template) {                                                                                      // 7956
          hasTemplate = true;                                                                                          // 7957
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 7958
          templateDirective = directive;                                                                               // 7959
                                                                                                                       // 7960
          directiveValue = (isFunction(directive.template))                                                            // 7961
              ? directive.template($compileNode, templateAttrs)                                                        // 7962
              : directive.template;                                                                                    // 7963
                                                                                                                       // 7964
          directiveValue = denormalizeTemplate(directiveValue);                                                        // 7965
                                                                                                                       // 7966
          if (directive.replace) {                                                                                     // 7967
            replaceDirective = directive;                                                                              // 7968
            if (jqLiteIsTextNode(directiveValue)) {                                                                    // 7969
              $template = [];                                                                                          // 7970
            } else {                                                                                                   // 7971
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));             // 7972
            }                                                                                                          // 7973
            compileNode = $template[0];                                                                                // 7974
                                                                                                                       // 7975
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 7976
              throw $compileMinErr('tplrt',                                                                            // 7977
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 7978
                  directiveName, '');                                                                                  // 7979
            }                                                                                                          // 7980
                                                                                                                       // 7981
            replaceWith(jqCollection, $compileNode, compileNode);                                                      // 7982
                                                                                                                       // 7983
            var newTemplateAttrs = {$attr: {}};                                                                        // 7984
                                                                                                                       // 7985
            // combine directives from the original node and from the template:                                        // 7986
            // - take the array of directives for this element                                                         // 7987
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)  // 7988
            // - collect directives from the template and sort them by priority                                        // 7989
            // - combine directives as: processed + template + unprocessed                                             // 7990
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);                             // 7991
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));                         // 7992
                                                                                                                       // 7993
            if (newIsolateScopeDirective) {                                                                            // 7994
              markDirectivesAsIsolate(templateDirectives);                                                             // 7995
            }                                                                                                          // 7996
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);                          // 7997
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);                                                  // 7998
                                                                                                                       // 7999
            ii = directives.length;                                                                                    // 8000
          } else {                                                                                                     // 8001
            $compileNode.html(directiveValue);                                                                         // 8002
          }                                                                                                            // 8003
        }                                                                                                              // 8004
                                                                                                                       // 8005
        if (directive.templateUrl) {                                                                                   // 8006
          hasTemplate = true;                                                                                          // 8007
          assertNoDuplicate('template', templateDirective, directive, $compileNode);                                   // 8008
          templateDirective = directive;                                                                               // 8009
                                                                                                                       // 8010
          if (directive.replace) {                                                                                     // 8011
            replaceDirective = directive;                                                                              // 8012
          }                                                                                                            // 8013
                                                                                                                       // 8014
          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,                   // 8015
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {     // 8016
                controllerDirectives: controllerDirectives,                                                            // 8017
                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,                             // 8018
                newIsolateScopeDirective: newIsolateScopeDirective,                                                    // 8019
                templateDirective: templateDirective,                                                                  // 8020
                nonTlbTranscludeDirective: nonTlbTranscludeDirective                                                   // 8021
              });                                                                                                      // 8022
          ii = directives.length;                                                                                      // 8023
        } else if (directive.compile) {                                                                                // 8024
          try {                                                                                                        // 8025
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);                                // 8026
            if (isFunction(linkFn)) {                                                                                  // 8027
              addLinkFns(null, linkFn, attrStart, attrEnd);                                                            // 8028
            } else if (linkFn) {                                                                                       // 8029
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);                                                 // 8030
            }                                                                                                          // 8031
          } catch (e) {                                                                                                // 8032
            $exceptionHandler(e, startingTag($compileNode));                                                           // 8033
          }                                                                                                            // 8034
        }                                                                                                              // 8035
                                                                                                                       // 8036
        if (directive.terminal) {                                                                                      // 8037
          nodeLinkFn.terminal = true;                                                                                  // 8038
          terminalPriority = Math.max(terminalPriority, directive.priority);                                           // 8039
        }                                                                                                              // 8040
                                                                                                                       // 8041
      }                                                                                                                // 8042
                                                                                                                       // 8043
      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;                                        // 8044
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;                                                     // 8045
      nodeLinkFn.templateOnThisElement = hasTemplate;                                                                  // 8046
      nodeLinkFn.transclude = childTranscludeFn;                                                                       // 8047
                                                                                                                       // 8048
      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;                            // 8049
                                                                                                                       // 8050
      // might be normal or delayed nodeLinkFn depending on if templateUrl is present                                  // 8051
      return nodeLinkFn;                                                                                               // 8052
                                                                                                                       // 8053
      ////////////////////                                                                                             // 8054
                                                                                                                       // 8055
      function addLinkFns(pre, post, attrStart, attrEnd) {                                                             // 8056
        if (pre) {                                                                                                     // 8057
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);                                    // 8058
          pre.require = directive.require;                                                                             // 8059
          pre.directiveName = directiveName;                                                                           // 8060
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8061
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});                                                       // 8062
          }                                                                                                            // 8063
          preLinkFns.push(pre);                                                                                        // 8064
        }                                                                                                              // 8065
        if (post) {                                                                                                    // 8066
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);                                  // 8067
          post.require = directive.require;                                                                            // 8068
          post.directiveName = directiveName;                                                                          // 8069
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {                                    // 8070
            post = cloneAndAnnotateFn(post, {isolateScope: true});                                                     // 8071
          }                                                                                                            // 8072
          postLinkFns.push(post);                                                                                      // 8073
        }                                                                                                              // 8074
      }                                                                                                                // 8075
                                                                                                                       // 8076
                                                                                                                       // 8077
      function getControllers(directiveName, require, $element, elementControllers) {                                  // 8078
        var value;                                                                                                     // 8079
                                                                                                                       // 8080
        if (isString(require)) {                                                                                       // 8081
          var match = require.match(REQUIRE_PREFIX_REGEXP);                                                            // 8082
          var name = require.substring(match[0].length);                                                               // 8083
          var inheritType = match[1] || match[3];                                                                      // 8084
          var optional = match[2] === '?';                                                                             // 8085
                                                                                                                       // 8086
          //If only parents then start at the parent element                                                           // 8087
          if (inheritType === '^^') {                                                                                  // 8088
            $element = $element.parent();                                                                              // 8089
          //Otherwise attempt getting the controller from elementControllers in case                                   // 8090
          //the element is transcluded (and has no data) and to avoid .data if possible                                // 8091
          } else {                                                                                                     // 8092
            value = elementControllers && elementControllers[name];                                                    // 8093
            value = value && value.instance;                                                                           // 8094
          }                                                                                                            // 8095
                                                                                                                       // 8096
          if (!value) {                                                                                                // 8097
            var dataName = '$' + name + 'Controller';                                                                  // 8098
            value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);                          // 8099
          }                                                                                                            // 8100
                                                                                                                       // 8101
          if (!value && !optional) {                                                                                   // 8102
            throw $compileMinErr('ctreq',                                                                              // 8103
                "Controller '{0}', required by directive '{1}', can't be found!",                                      // 8104
                name, directiveName);                                                                                  // 8105
          }                                                                                                            // 8106
        } else if (isArray(require)) {                                                                                 // 8107
          value = [];                                                                                                  // 8108
          for (var i = 0, ii = require.length; i < ii; i++) {                                                          // 8109
            value[i] = getControllers(directiveName, require[i], $element, elementControllers);                        // 8110
          }                                                                                                            // 8111
        }                                                                                                              // 8112
                                                                                                                       // 8113
        return value || null;                                                                                          // 8114
      }                                                                                                                // 8115
                                                                                                                       // 8116
      function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope) {            // 8117
        var elementControllers = createMap();                                                                          // 8118
        for (var controllerKey in controllerDirectives) {                                                              // 8119
          var directive = controllerDirectives[controllerKey];                                                         // 8120
          var locals = {                                                                                               // 8121
            $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,         // 8122
            $element: $element,                                                                                        // 8123
            $attrs: attrs,                                                                                             // 8124
            $transclude: transcludeFn                                                                                  // 8125
          };                                                                                                           // 8126
                                                                                                                       // 8127
          var controller = directive.controller;                                                                       // 8128
          if (controller == '@') {                                                                                     // 8129
            controller = attrs[directive.name];                                                                        // 8130
          }                                                                                                            // 8131
                                                                                                                       // 8132
          var controllerInstance = $controller(controller, locals, true, directive.controllerAs);                      // 8133
                                                                                                                       // 8134
          // For directives with element transclusion the element is a comment,                                        // 8135
          // but jQuery .data doesn't support attaching data to comment nodes as it's hard to                          // 8136
          // clean up (http://bugs.jquery.com/ticket/8335).                                                            // 8137
          // Instead, we save the controllers for the element in a local hash and attach to .data                      // 8138
          // later, once we have the actual element.                                                                   // 8139
          elementControllers[directive.name] = controllerInstance;                                                     // 8140
          if (!hasElementTranscludeDirective) {                                                                        // 8141
            $element.data('$' + directive.name + 'Controller', controllerInstance.instance);                           // 8142
          }                                                                                                            // 8143
        }                                                                                                              // 8144
        return elementControllers;                                                                                     // 8145
      }                                                                                                                // 8146
                                                                                                                       // 8147
      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn,                               // 8148
                          thisLinkFn) {                                                                                // 8149
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,                       // 8150
            attrs;                                                                                                     // 8151
                                                                                                                       // 8152
        if (compileNode === linkNode) {                                                                                // 8153
          attrs = templateAttrs;                                                                                       // 8154
          $element = templateAttrs.$$element;                                                                          // 8155
        } else {                                                                                                       // 8156
          $element = jqLite(linkNode);                                                                                 // 8157
          attrs = new Attributes($element, templateAttrs);                                                             // 8158
        }                                                                                                              // 8159
                                                                                                                       // 8160
        if (newIsolateScopeDirective) {                                                                                // 8161
          isolateScope = scope.$new(true);                                                                             // 8162
        }                                                                                                              // 8163
                                                                                                                       // 8164
        if (boundTranscludeFn) {                                                                                       // 8165
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`                                        // 8166
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`                                            // 8167
          transcludeFn = controllersBoundTransclude;                                                                   // 8168
          transcludeFn.$$boundTransclude = boundTranscludeFn;                                                          // 8169
        }                                                                                                              // 8170
                                                                                                                       // 8171
        if (controllerDirectives) {                                                                                    // 8172
          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope);
        }                                                                                                              // 8174
                                                                                                                       // 8175
        if (newIsolateScopeDirective) {                                                                                // 8176
          // Initialize isolate scope bindings for new isolate scope directive.                                        // 8177
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));                                   // 8179
          compile.$$addScopeClass($element, true);                                                                     // 8180
          isolateScope.$$isolateBindings =                                                                             // 8181
              newIsolateScopeDirective.$$isolateBindings;                                                              // 8182
          initializeDirectiveBindings(scope, attrs, isolateScope,                                                      // 8183
                                      isolateScope.$$isolateBindings,                                                  // 8184
                                      newIsolateScopeDirective, isolateScope);                                         // 8185
        }                                                                                                              // 8186
        if (elementControllers) {                                                                                      // 8187
          // Initialize bindToController bindings for new/isolate scopes                                               // 8188
          var scopeDirective = newIsolateScopeDirective || newScopeDirective;                                          // 8189
          var bindings;                                                                                                // 8190
          var controllerForBindings;                                                                                   // 8191
          if (scopeDirective && elementControllers[scopeDirective.name]) {                                             // 8192
            bindings = scopeDirective.$$bindings.bindToController;                                                     // 8193
            controller = elementControllers[scopeDirective.name];                                                      // 8194
                                                                                                                       // 8195
            if (controller && controller.identifier && bindings) {                                                     // 8196
              controllerForBindings = controller;                                                                      // 8197
              thisLinkFn.$$destroyBindings =                                                                           // 8198
                  initializeDirectiveBindings(scope, attrs, controller.instance,                                       // 8199
                                              bindings, scopeDirective);                                               // 8200
            }                                                                                                          // 8201
          }                                                                                                            // 8202
          for (i in elementControllers) {                                                                              // 8203
            controller = elementControllers[i];                                                                        // 8204
            var controllerResult = controller();                                                                       // 8205
                                                                                                                       // 8206
            if (controllerResult !== controller.instance) {                                                            // 8207
              // If the controller constructor has a return value, overwrite the instance                              // 8208
              // from setupControllers and update the element data                                                     // 8209
              controller.instance = controllerResult;                                                                  // 8210
              $element.data('$' + i + 'Controller', controllerResult);                                                 // 8211
              if (controller === controllerForBindings) {                                                              // 8212
                // Remove and re-install bindToController bindings                                                     // 8213
                thisLinkFn.$$destroyBindings();                                                                        // 8214
                thisLinkFn.$$destroyBindings =                                                                         // 8215
                  initializeDirectiveBindings(scope, attrs, controllerResult, bindings, scopeDirective);               // 8216
              }                                                                                                        // 8217
            }                                                                                                          // 8218
          }                                                                                                            // 8219
        }                                                                                                              // 8220
                                                                                                                       // 8221
        // PRELINKING                                                                                                  // 8222
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {                                                             // 8223
          linkFn = preLinkFns[i];                                                                                      // 8224
          invokeLinkFn(linkFn,                                                                                         // 8225
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8226
              $element,                                                                                                // 8227
              attrs,                                                                                                   // 8228
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8229
              transcludeFn                                                                                             // 8230
          );                                                                                                           // 8231
        }                                                                                                              // 8232
                                                                                                                       // 8233
        // RECURSION                                                                                                   // 8234
        // We only pass the isolate scope, if the isolate directive has a template,                                    // 8235
        // otherwise the child elements do not belong to the isolate directive.                                        // 8236
        var scopeToChild = scope;                                                                                      // 8237
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;                                                                                 // 8239
        }                                                                                                              // 8240
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);                   // 8241
                                                                                                                       // 8242
        // POSTLINKING                                                                                                 // 8243
        for (i = postLinkFns.length - 1; i >= 0; i--) {                                                                // 8244
          linkFn = postLinkFns[i];                                                                                     // 8245
          invokeLinkFn(linkFn,                                                                                         // 8246
              linkFn.isolateScope ? isolateScope : scope,                                                              // 8247
              $element,                                                                                                // 8248
              attrs,                                                                                                   // 8249
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),    // 8250
              transcludeFn                                                                                             // 8251
          );                                                                                                           // 8252
        }                                                                                                              // 8253
                                                                                                                       // 8254
        // This is the function that is injected as `$transclude`.                                                     // 8255
        // Note: all arguments are optional!                                                                           // 8256
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {                               // 8257
          var transcludeControllers;                                                                                   // 8258
                                                                                                                       // 8259
          // No scope passed in:                                                                                       // 8260
          if (!isScope(scope)) {                                                                                       // 8261
            futureParentElement = cloneAttachFn;                                                                       // 8262
            cloneAttachFn = scope;                                                                                     // 8263
            scope = undefined;                                                                                         // 8264
          }                                                                                                            // 8265
                                                                                                                       // 8266
          if (hasElementTranscludeDirective) {                                                                         // 8267
            transcludeControllers = elementControllers;                                                                // 8268
          }                                                                                                            // 8269
          if (!futureParentElement) {                                                                                  // 8270
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;                        // 8271
          }                                                                                                            // 8272
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);    // 8273
        }                                                                                                              // 8274
      }                                                                                                                // 8275
    }                                                                                                                  // 8276
                                                                                                                       // 8277
    function markDirectivesAsIsolate(directives) {                                                                     // 8278
      // mark all directives as needing isolate scope.                                                                 // 8279
      for (var j = 0, jj = directives.length; j < jj; j++) {                                                           // 8280
        directives[j] = inherit(directives[j], {$$isolateScope: true});                                                // 8281
      }                                                                                                                // 8282
    }                                                                                                                  // 8283
                                                                                                                       // 8284
    /**                                                                                                                // 8285
     * looks up the directive and decorates it with exception handling and proper parameters. We                       // 8286
     * call this the boundDirective.                                                                                   // 8287
     *                                                                                                                 // 8288
     * @param {string} name name of the directive to look up.                                                          // 8289
     * @param {string} location The directive must be found in specific format.                                        // 8290
     *   String containing any of theses characters:                                                                   // 8291
     *                                                                                                                 // 8292
     *   * `E`: element name                                                                                           // 8293
     *   * `A': attribute                                                                                              // 8294
     *   * `C`: class                                                                                                  // 8295
     *   * `M`: comment                                                                                                // 8296
     * @returns {boolean} true if directive was added.                                                                 // 8297
     */                                                                                                                // 8298
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,                    // 8299
                          endAttrName) {                                                                               // 8300
      if (name === ignoreDirective) return null;                                                                       // 8301
      var match = null;                                                                                                // 8302
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8303
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8304
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8305
          try {                                                                                                        // 8306
            directive = directives[i];                                                                                 // 8307
            if ((maxPriority === undefined || maxPriority > directive.priority) &&                                     // 8308
                 directive.restrict.indexOf(location) != -1) {                                                         // 8309
              if (startAttrName) {                                                                                     // 8310
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});                          // 8311
              }                                                                                                        // 8312
              tDirectives.push(directive);                                                                             // 8313
              match = directive;                                                                                       // 8314
            }                                                                                                          // 8315
          } catch (e) { $exceptionHandler(e); }                                                                        // 8316
        }                                                                                                              // 8317
      }                                                                                                                // 8318
      return match;                                                                                                    // 8319
    }                                                                                                                  // 8320
                                                                                                                       // 8321
                                                                                                                       // 8322
    /**                                                                                                                // 8323
     * looks up the directive and returns true if it is a multi-element directive,                                     // 8324
     * and therefore requires DOM nodes between -start and -end markers to be grouped                                  // 8325
     * together.                                                                                                       // 8326
     *                                                                                                                 // 8327
     * @param {string} name name of the directive to look up.                                                          // 8328
     * @returns true if directive was registered as multi-element.                                                     // 8329
     */                                                                                                                // 8330
    function directiveIsMultiElement(name) {                                                                           // 8331
      if (hasDirectives.hasOwnProperty(name)) {                                                                        // 8332
        for (var directive, directives = $injector.get(name + Suffix),                                                 // 8333
            i = 0, ii = directives.length; i < ii; i++) {                                                              // 8334
          directive = directives[i];                                                                                   // 8335
          if (directive.multiElement) {                                                                                // 8336
            return true;                                                                                               // 8337
          }                                                                                                            // 8338
        }                                                                                                              // 8339
      }                                                                                                                // 8340
      return false;                                                                                                    // 8341
    }                                                                                                                  // 8342
                                                                                                                       // 8343
    /**                                                                                                                // 8344
     * When the element is replaced with HTML template then the new attributes                                         // 8345
     * on the template need to be merged with the existing attributes in the DOM.                                      // 8346
     * The desired effect is to have both of the attributes present.                                                   // 8347
     *                                                                                                                 // 8348
     * @param {object} dst destination attributes (original DOM)                                                       // 8349
     * @param {object} src source attributes (from the directive template)                                             // 8350
     */                                                                                                                // 8351
    function mergeTemplateAttributes(dst, src) {                                                                       // 8352
      var srcAttr = src.$attr,                                                                                         // 8353
          dstAttr = dst.$attr,                                                                                         // 8354
          $element = dst.$$element;                                                                                    // 8355
                                                                                                                       // 8356
      // reapply the old attributes to the new element                                                                 // 8357
      forEach(dst, function(value, key) {                                                                              // 8358
        if (key.charAt(0) != '$') {                                                                                    // 8359
          if (src[key] && src[key] !== value) {                                                                        // 8360
            value += (key === 'style' ? ';' : ' ') + src[key];                                                         // 8361
          }                                                                                                            // 8362
          dst.$set(key, value, true, srcAttr[key]);                                                                    // 8363
        }                                                                                                              // 8364
      });                                                                                                              // 8365
                                                                                                                       // 8366
      // copy the new attributes on the old attrs object                                                               // 8367
      forEach(src, function(value, key) {                                                                              // 8368
        if (key == 'class') {                                                                                          // 8369
          safeAddClass($element, value);                                                                               // 8370
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;                                             // 8371
        } else if (key == 'style') {                                                                                   // 8372
          $element.attr('style', $element.attr('style') + ';' + value);                                                // 8373
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;                                             // 8374
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.                                       // 8375
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you                                     // 8376
          // have an attribute like "has-own-property" or "data-has-own-property", etc.                                // 8377
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {                                                 // 8378
          dst[key] = value;                                                                                            // 8379
          dstAttr[key] = srcAttr[key];                                                                                 // 8380
        }                                                                                                              // 8381
      });                                                                                                              // 8382
    }                                                                                                                  // 8383
                                                                                                                       // 8384
                                                                                                                       // 8385
    function compileTemplateUrl(directives, $compileNode, tAttrs,                                                      // 8386
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {                            // 8387
      var linkQueue = [],                                                                                              // 8388
          afterTemplateNodeLinkFn,                                                                                     // 8389
          afterTemplateChildLinkFn,                                                                                    // 8390
          beforeTemplateCompileNode = $compileNode[0],                                                                 // 8391
          origAsyncDirective = directives.shift(),                                                                     // 8392
          derivedSyncDirective = inherit(origAsyncDirective, {                                                         // 8393
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective                // 8394
          }),                                                                                                          // 8395
          templateUrl = (isFunction(origAsyncDirective.templateUrl))                                                   // 8396
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)                                                   // 8397
              : origAsyncDirective.templateUrl,                                                                        // 8398
          templateNamespace = origAsyncDirective.templateNamespace;                                                    // 8399
                                                                                                                       // 8400
      $compileNode.empty();                                                                                            // 8401
                                                                                                                       // 8402
      $templateRequest(templateUrl)                                                                                    // 8403
        .then(function(content) {                                                                                      // 8404
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;                                       // 8405
                                                                                                                       // 8406
          content = denormalizeTemplate(content);                                                                      // 8407
                                                                                                                       // 8408
          if (origAsyncDirective.replace) {                                                                            // 8409
            if (jqLiteIsTextNode(content)) {                                                                           // 8410
              $template = [];                                                                                          // 8411
            } else {                                                                                                   // 8412
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));                              // 8413
            }                                                                                                          // 8414
            compileNode = $template[0];                                                                                // 8415
                                                                                                                       // 8416
            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {                                 // 8417
              throw $compileMinErr('tplrt',                                                                            // 8418
                  "Template for directive '{0}' must have exactly one root element. {1}",                              // 8419
                  origAsyncDirective.name, templateUrl);                                                               // 8420
            }                                                                                                          // 8421
                                                                                                                       // 8422
            tempTemplateAttrs = {$attr: {}};                                                                           // 8423
            replaceWith($rootElement, $compileNode, compileNode);                                                      // 8424
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);                            // 8425
                                                                                                                       // 8426
            if (isObject(origAsyncDirective.scope)) {                                                                  // 8427
              markDirectivesAsIsolate(templateDirectives);                                                             // 8428
            }                                                                                                          // 8429
            directives = templateDirectives.concat(directives);                                                        // 8430
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);                                                        // 8431
          } else {                                                                                                     // 8432
            compileNode = beforeTemplateCompileNode;                                                                   // 8433
            $compileNode.html(content);                                                                                // 8434
          }                                                                                                            // 8435
                                                                                                                       // 8436
          directives.unshift(derivedSyncDirective);                                                                    // 8437
                                                                                                                       // 8438
          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,                             // 8439
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,                            // 8440
              previousCompileContext);                                                                                 // 8441
          forEach($rootElement, function(node, i) {                                                                    // 8442
            if (node == compileNode) {                                                                                 // 8443
              $rootElement[i] = $compileNode[0];                                                                       // 8444
            }                                                                                                          // 8445
          });                                                                                                          // 8446
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);                      // 8447
                                                                                                                       // 8448
          while (linkQueue.length) {                                                                                   // 8449
            var scope = linkQueue.shift(),                                                                             // 8450
                beforeTemplateLinkNode = linkQueue.shift(),                                                            // 8451
                linkRootElement = linkQueue.shift(),                                                                   // 8452
                boundTranscludeFn = linkQueue.shift(),                                                                 // 8453
                linkNode = $compileNode[0];                                                                            // 8454
                                                                                                                       // 8455
            if (scope.$$destroyed) continue;                                                                           // 8456
                                                                                                                       // 8457
            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {                                                // 8458
              var oldClasses = beforeTemplateLinkNode.className;                                                       // 8459
                                                                                                                       // 8460
              if (!(previousCompileContext.hasElementTranscludeDirective &&                                            // 8461
                  origAsyncDirective.replace)) {                                                                       // 8462
                // it was cloned therefore we have to clone as well.                                                   // 8463
                linkNode = jqLiteClone(compileNode);                                                                   // 8464
              }                                                                                                        // 8465
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);                                  // 8466
                                                                                                                       // 8467
              // Copy in CSS classes from original node                                                                // 8468
              safeAddClass(jqLite(linkNode), oldClasses);                                                              // 8469
            }                                                                                                          // 8470
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                     // 8471
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {                                                                                                   // 8473
              childBoundTranscludeFn = boundTranscludeFn;                                                              // 8474
            }                                                                                                          // 8475
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,                           // 8476
              childBoundTranscludeFn, afterTemplateNodeLinkFn);                                                        // 8477
          }                                                                                                            // 8478
          linkQueue = null;                                                                                            // 8479
        });                                                                                                            // 8480
                                                                                                                       // 8481
      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {              // 8482
        var childBoundTranscludeFn = boundTranscludeFn;                                                                // 8483
        if (scope.$$destroyed) return;                                                                                 // 8484
        if (linkQueue) {                                                                                               // 8485
          linkQueue.push(scope,                                                                                        // 8486
                         node,                                                                                         // 8487
                         rootElement,                                                                                  // 8488
                         childBoundTranscludeFn);                                                                      // 8489
        } else {                                                                                                       // 8490
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {                                                       // 8491
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }                                                                                                            // 8493
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn,          // 8494
                                  afterTemplateNodeLinkFn);                                                            // 8495
        }                                                                                                              // 8496
      };                                                                                                               // 8497
    }                                                                                                                  // 8498
                                                                                                                       // 8499
                                                                                                                       // 8500
    /**                                                                                                                // 8501
     * Sorting function for bound directives.                                                                          // 8502
     */                                                                                                                // 8503
    function byPriority(a, b) {                                                                                        // 8504
      var diff = b.priority - a.priority;                                                                              // 8505
      if (diff !== 0) return diff;                                                                                     // 8506
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;                                                        // 8507
      return a.index - b.index;                                                                                        // 8508
    }                                                                                                                  // 8509
                                                                                                                       // 8510
    function assertNoDuplicate(what, previousDirective, directive, element) {                                          // 8511
                                                                                                                       // 8512
      function wrapModuleNameIfDefined(moduleName) {                                                                   // 8513
        return moduleName ?                                                                                            // 8514
          (' (module: ' + moduleName + ')') :                                                                          // 8515
          '';                                                                                                          // 8516
      }                                                                                                                // 8517
                                                                                                                       // 8518
      if (previousDirective) {                                                                                         // 8519
        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',                // 8520
            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),                           // 8521
            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));              // 8522
      }                                                                                                                // 8523
    }                                                                                                                  // 8524
                                                                                                                       // 8525
                                                                                                                       // 8526
    function addTextInterpolateDirective(directives, text) {                                                           // 8527
      var interpolateFn = $interpolate(text, true);                                                                    // 8528
      if (interpolateFn) {                                                                                             // 8529
        directives.push({                                                                                              // 8530
          priority: 0,                                                                                                 // 8531
          compile: function textInterpolateCompileFn(templateNode) {                                                   // 8532
            var templateNodeParent = templateNode.parent(),                                                            // 8533
                hasCompileParent = !!templateNodeParent.length;                                                        // 8534
                                                                                                                       // 8535
            // When transcluding a template that has bindings in the root                                              // 8536
            // we don't have a parent and thus need to add the class during linking fn.                                // 8537
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);                                       // 8538
                                                                                                                       // 8539
            return function textInterpolateLinkFn(scope, node) {                                                       // 8540
              var parent = node.parent();                                                                              // 8541
              if (!hasCompileParent) compile.$$addBindingClass(parent);                                                // 8542
              compile.$$addBindingInfo(parent, interpolateFn.expressions);                                             // 8543
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {                                   // 8544
                node[0].nodeValue = value;                                                                             // 8545
              });                                                                                                      // 8546
            };                                                                                                         // 8547
          }                                                                                                            // 8548
        });                                                                                                            // 8549
      }                                                                                                                // 8550
    }                                                                                                                  // 8551
                                                                                                                       // 8552
                                                                                                                       // 8553
    function wrapTemplate(type, template) {                                                                            // 8554
      type = lowercase(type || 'html');                                                                                // 8555
      switch (type) {                                                                                                  // 8556
      case 'svg':                                                                                                      // 8557
      case 'math':                                                                                                     // 8558
        var wrapper = document.createElement('div');                                                                   // 8559
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';                                           // 8560
        return wrapper.childNodes[0].childNodes;                                                                       // 8561
      default:                                                                                                         // 8562
        return template;                                                                                               // 8563
      }                                                                                                                // 8564
    }                                                                                                                  // 8565
                                                                                                                       // 8566
                                                                                                                       // 8567
    function getTrustedContext(node, attrNormalizedName) {                                                             // 8568
      if (attrNormalizedName == "srcdoc") {                                                                            // 8569
        return $sce.HTML;                                                                                              // 8570
      }                                                                                                                // 8571
      var tag = nodeName_(node);                                                                                       // 8572
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.                                           // 8573
      if (attrNormalizedName == "xlinkHref" ||                                                                         // 8574
          (tag == "form" && attrNormalizedName == "action") ||                                                         // 8575
          (tag != "img" && (attrNormalizedName == "src" ||                                                             // 8576
                            attrNormalizedName == "ngSrc"))) {                                                         // 8577
        return $sce.RESOURCE_URL;                                                                                      // 8578
      }                                                                                                                // 8579
    }                                                                                                                  // 8580
                                                                                                                       // 8581
                                                                                                                       // 8582
    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {                                // 8583
      var trustedContext = getTrustedContext(node, name);                                                              // 8584
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;                                                       // 8585
                                                                                                                       // 8586
      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);                                     // 8587
                                                                                                                       // 8588
      // no interpolation found -> ignore                                                                              // 8589
      if (!interpolateFn) return;                                                                                      // 8590
                                                                                                                       // 8591
                                                                                                                       // 8592
      if (name === "multiple" && nodeName_(node) === "select") {                                                       // 8593
        throw $compileMinErr("selmulti",                                                                               // 8594
            "Binding to the 'multiple' attribute is not supported. Element: {0}",                                      // 8595
            startingTag(node));                                                                                        // 8596
      }                                                                                                                // 8597
                                                                                                                       // 8598
      directives.push({                                                                                                // 8599
        priority: 100,                                                                                                 // 8600
        compile: function() {                                                                                          // 8601
            return {                                                                                                   // 8602
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {                                           // 8603
                var $$observers = (attr.$$observers || (attr.$$observers = {}));                                       // 8604
                                                                                                                       // 8605
                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {                                                            // 8606
                  throw $compileMinErr('nodomevents',                                                                  // 8607
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +                // 8608
                          "ng- versions (such as ng-click instead of onclick) instead.");                              // 8609
                }                                                                                                      // 8610
                                                                                                                       // 8611
                // If the attribute has changed since last $interpolate()ed                                            // 8612
                var newValue = attr[name];                                                                             // 8613
                if (newValue !== value) {                                                                              // 8614
                  // we need to interpolate again since the attribute value has been updated                           // 8615
                  // (e.g. by another directive's compile function)                                                    // 8616
                  // ensure unset/empty values make interpolateFn falsy                                                // 8617
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);              // 8618
                  value = newValue;                                                                                    // 8619
                }                                                                                                      // 8620
                                                                                                                       // 8621
                // if attribute was updated so that there is no interpolation going on we don't want to                // 8622
                // register any observers                                                                              // 8623
                if (!interpolateFn) return;                                                                            // 8624
                                                                                                                       // 8625
                // initialize attr object so that it's ready in case we need the value for isolate                     // 8626
                // scope initialization, otherwise the value would not be available from isolate                       // 8627
                // directive's linking fn during linking phase                                                         // 8628
                attr[name] = interpolateFn(scope);                                                                     // 8629
                                                                                                                       // 8630
                ($$observers[name] || ($$observers[name] = [])).$$inter = true;                                        // 8631
                (attr.$$observers && attr.$$observers[name].$$scope || scope).                                         // 8632
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {                        // 8633
                    //special case for class attribute addition + removal                                              // 8634
                    //so that class changes can tap into the animation                                                 // 8635
                    //hooks provided by the $animate service. Be sure to                                               // 8636
                    //skip animations when the first digest occurs (when                                               // 8637
                    //both the new and the old values are the same) since                                              // 8638
                    //the CSS classes are the non-interpolated values                                                  // 8639
                    if (name === 'class' && newValue != oldValue) {                                                    // 8640
                      attr.$updateClass(newValue, oldValue);                                                           // 8641
                    } else {                                                                                           // 8642
                      attr.$set(name, newValue);                                                                       // 8643
                    }                                                                                                  // 8644
                  });                                                                                                  // 8645
              }                                                                                                        // 8646
            };                                                                                                         // 8647
          }                                                                                                            // 8648
      });                                                                                                              // 8649
    }                                                                                                                  // 8650
                                                                                                                       // 8651
                                                                                                                       // 8652
    /**                                                                                                                // 8653
     * This is a special jqLite.replaceWith, which can replace items which                                             // 8654
     * have no parents, provided that the containing jqLite collection is provided.                                    // 8655
     *                                                                                                                 // 8656
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes                   // 8657
     *                               in the root of the tree.                                                          // 8658
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep                      // 8659
     *                                  the shell, but replace its DOM node reference.                                 // 8660
     * @param {Node} newNode The new DOM node.                                                                         // 8661
     */                                                                                                                // 8662
    function replaceWith($rootElement, elementsToRemove, newNode) {                                                    // 8663
      var firstElementToRemove = elementsToRemove[0],                                                                  // 8664
          removeCount = elementsToRemove.length,                                                                       // 8665
          parent = firstElementToRemove.parentNode,                                                                    // 8666
          i, ii;                                                                                                       // 8667
                                                                                                                       // 8668
      if ($rootElement) {                                                                                              // 8669
        for (i = 0, ii = $rootElement.length; i < ii; i++) {                                                           // 8670
          if ($rootElement[i] == firstElementToRemove) {                                                               // 8671
            $rootElement[i++] = newNode;                                                                               // 8672
            for (var j = i, j2 = j + removeCount - 1,                                                                  // 8673
                     jj = $rootElement.length;                                                                         // 8674
                 j < jj; j++, j2++) {                                                                                  // 8675
              if (j2 < jj) {                                                                                           // 8676
                $rootElement[j] = $rootElement[j2];                                                                    // 8677
              } else {                                                                                                 // 8678
                delete $rootElement[j];                                                                                // 8679
              }                                                                                                        // 8680
            }                                                                                                          // 8681
            $rootElement.length -= removeCount - 1;                                                                    // 8682
                                                                                                                       // 8683
            // If the replaced element is also the jQuery .context then replace it                                     // 8684
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it                        // 8685
            // http://api.jquery.com/context/                                                                          // 8686
            if ($rootElement.context === firstElementToRemove) {                                                       // 8687
              $rootElement.context = newNode;                                                                          // 8688
            }                                                                                                          // 8689
            break;                                                                                                     // 8690
          }                                                                                                            // 8691
        }                                                                                                              // 8692
      }                                                                                                                // 8693
                                                                                                                       // 8694
      if (parent) {                                                                                                    // 8695
        parent.replaceChild(newNode, firstElementToRemove);                                                            // 8696
      }                                                                                                                // 8697
                                                                                                                       // 8698
      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?                        // 8699
      var fragment = document.createDocumentFragment();                                                                // 8700
      fragment.appendChild(firstElementToRemove);                                                                      // 8701
                                                                                                                       // 8702
      if (jqLite.hasData(firstElementToRemove)) {                                                                      // 8703
        // Copy over user data (that includes Angular's $scope etc.). Don't copy private                               // 8704
        // data here because there's no public interface in jQuery to do that and copying over                         // 8705
        // event listeners (which is the main use of private data) wouldn't work anyway.                               // 8706
        jqLite(newNode).data(jqLite(firstElementToRemove).data());                                                     // 8707
                                                                                                                       // 8708
        // Remove data of the replaced element. We cannot just call .remove()                                          // 8709
        // on the element it since that would deallocate scope that is needed                                          // 8710
        // for the new node. Instead, remove the data "manually".                                                      // 8711
        if (!jQuery) {                                                                                                 // 8712
          delete jqLite.cache[firstElementToRemove[jqLite.expando]];                                                   // 8713
        } else {                                                                                                       // 8714
          // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after                        // 8715
          // the replaced element. The cleanData version monkey-patched by Angular would cause                         // 8716
          // the scope to be trashed and we do need the very same scope to work with the new                           // 8717
          // element. However, we cannot just cache the non-patched version and use it here as                         // 8718
          // that would break if another library patches the method after Angular does (one                            // 8719
          // example is jQuery UI). Instead, set a flag indicating scope destroying should be                          // 8720
          // skipped this one time.                                                                                    // 8721
          skipDestroyOnNextJQueryCleanData = true;                                                                     // 8722
          jQuery.cleanData([firstElementToRemove]);                                                                    // 8723
        }                                                                                                              // 8724
      }                                                                                                                // 8725
                                                                                                                       // 8726
      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {                                                     // 8727
        var element = elementsToRemove[k];                                                                             // 8728
        jqLite(element).remove(); // must do this way to clean up expando                                              // 8729
        fragment.appendChild(element);                                                                                 // 8730
        delete elementsToRemove[k];                                                                                    // 8731
      }                                                                                                                // 8732
                                                                                                                       // 8733
      elementsToRemove[0] = newNode;                                                                                   // 8734
      elementsToRemove.length = 1;                                                                                     // 8735
    }                                                                                                                  // 8736
                                                                                                                       // 8737
                                                                                                                       // 8738
    function cloneAndAnnotateFn(fn, annotation) {                                                                      // 8739
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);                                 // 8740
    }                                                                                                                  // 8741
                                                                                                                       // 8742
                                                                                                                       // 8743
    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {                                 // 8744
      try {                                                                                                            // 8745
        linkFn(scope, $element, attrs, controllers, transcludeFn);                                                     // 8746
      } catch (e) {                                                                                                    // 8747
        $exceptionHandler(e, startingTag($element));                                                                   // 8748
      }                                                                                                                // 8749
    }                                                                                                                  // 8750
                                                                                                                       // 8751
                                                                                                                       // 8752
    // Set up $watches for isolate scope and controller bindings. This process                                         // 8753
    // only occurs for isolate scopes and new scopes with controllerAs.                                                // 8754
    function initializeDirectiveBindings(scope, attrs, destination, bindings,                                          // 8755
                                         directive, newScope) {                                                        // 8756
      var onNewScopeDestroyed;                                                                                         // 8757
      forEach(bindings, function(definition, scopeName) {                                                              // 8758
        var attrName = definition.attrName,                                                                            // 8759
        optional = definition.optional,                                                                                // 8760
        mode = definition.mode, // @, =, or &                                                                          // 8761
        lastValue,                                                                                                     // 8762
        parentGet, parentSet, compare;                                                                                 // 8763
                                                                                                                       // 8764
        switch (mode) {                                                                                                // 8765
                                                                                                                       // 8766
          case '@':                                                                                                    // 8767
            if (!optional && !hasOwnProperty.call(attrs, attrName)) {                                                  // 8768
              destination[scopeName] = attrs[attrName] = void 0;                                                       // 8769
            }                                                                                                          // 8770
            attrs.$observe(attrName, function(value) {                                                                 // 8771
              if (isString(value)) {                                                                                   // 8772
                destination[scopeName] = value;                                                                        // 8773
              }                                                                                                        // 8774
            });                                                                                                        // 8775
            attrs.$$observers[attrName].$$scope = scope;                                                               // 8776
            if (isString(attrs[attrName])) {                                                                           // 8777
              // If the attribute has been provided then we trigger an interpolation to ensure                         // 8778
              // the value is there for use in the link fn                                                             // 8779
              destination[scopeName] = $interpolate(attrs[attrName])(scope);                                           // 8780
            }                                                                                                          // 8781
            break;                                                                                                     // 8782
                                                                                                                       // 8783
          case '=':                                                                                                    // 8784
            if (!hasOwnProperty.call(attrs, attrName)) {                                                               // 8785
              if (optional) break;                                                                                     // 8786
              attrs[attrName] = void 0;                                                                                // 8787
            }                                                                                                          // 8788
            if (optional && !attrs[attrName]) break;                                                                   // 8789
                                                                                                                       // 8790
            parentGet = $parse(attrs[attrName]);                                                                       // 8791
            if (parentGet.literal) {                                                                                   // 8792
              compare = equals;                                                                                        // 8793
            } else {                                                                                                   // 8794
              compare = function(a, b) { return a === b || (a !== a && b !== b); };                                    // 8795
            }                                                                                                          // 8796
            parentSet = parentGet.assign || function() {                                                               // 8797
              // reset the change, or we will throw this exception on every $digest                                    // 8798
              lastValue = destination[scopeName] = parentGet(scope);                                                   // 8799
              throw $compileMinErr('nonassign',                                                                        // 8800
                  "Expression '{0}' used with directive '{1}' is non-assignable!",                                     // 8801
                  attrs[attrName], directive.name);                                                                    // 8802
            };                                                                                                         // 8803
            lastValue = destination[scopeName] = parentGet(scope);                                                     // 8804
            var parentValueWatch = function parentValueWatch(parentValue) {                                            // 8805
              if (!compare(parentValue, destination[scopeName])) {                                                     // 8806
                // we are out of sync and need to copy                                                                 // 8807
                if (!compare(parentValue, lastValue)) {                                                                // 8808
                  // parent changed and it has precedence                                                              // 8809
                  destination[scopeName] = parentValue;                                                                // 8810
                } else {                                                                                               // 8811
                  // if the parent can be assigned then do so                                                          // 8812
                  parentSet(scope, parentValue = destination[scopeName]);                                              // 8813
                }                                                                                                      // 8814
              }                                                                                                        // 8815
              return lastValue = parentValue;                                                                          // 8816
            };                                                                                                         // 8817
            parentValueWatch.$stateful = true;                                                                         // 8818
            var unwatch;                                                                                               // 8819
            if (definition.collection) {                                                                               // 8820
              unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);                                     // 8821
            } else {                                                                                                   // 8822
              unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);              // 8823
            }                                                                                                          // 8824
            onNewScopeDestroyed = (onNewScopeDestroyed || []);                                                         // 8825
            onNewScopeDestroyed.push(unwatch);                                                                         // 8826
            break;                                                                                                     // 8827
                                                                                                                       // 8828
          case '&':                                                                                                    // 8829
            // Don't assign Object.prototype method to scope                                                           // 8830
            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;                               // 8831
                                                                                                                       // 8832
            // Don't assign noop to destination if expression is not valid                                             // 8833
            if (parentGet === noop && optional) break;                                                                 // 8834
                                                                                                                       // 8835
            destination[scopeName] = function(locals) {                                                                // 8836
              return parentGet(scope, locals);                                                                         // 8837
            };                                                                                                         // 8838
            break;                                                                                                     // 8839
        }                                                                                                              // 8840
      });                                                                                                              // 8841
      var destroyBindings = onNewScopeDestroyed ? function destroyBindings() {                                         // 8842
        for (var i = 0, ii = onNewScopeDestroyed.length; i < ii; ++i) {                                                // 8843
          onNewScopeDestroyed[i]();                                                                                    // 8844
        }                                                                                                              // 8845
      } : noop;                                                                                                        // 8846
      if (newScope && destroyBindings !== noop) {                                                                      // 8847
        newScope.$on('$destroy', destroyBindings);                                                                     // 8848
        return noop;                                                                                                   // 8849
      }                                                                                                                // 8850
      return destroyBindings;                                                                                          // 8851
    }                                                                                                                  // 8852
  }];                                                                                                                  // 8853
}                                                                                                                      // 8854
                                                                                                                       // 8855
var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;                                                                           // 8856
/**                                                                                                                    // 8857
 * Converts all accepted directives format into proper directive name.                                                 // 8858
 * @param name Name to normalize                                                                                       // 8859
 */                                                                                                                    // 8860
function directiveNormalize(name) {                                                                                    // 8861
  return camelCase(name.replace(PREFIX_REGEXP, ''));                                                                   // 8862
}                                                                                                                      // 8863
                                                                                                                       // 8864
/**                                                                                                                    // 8865
 * @ngdoc type                                                                                                         // 8866
 * @name $compile.directive.Attributes                                                                                 // 8867
 *                                                                                                                     // 8868
 * @description                                                                                                        // 8869
 * A shared object between directive compile / linking functions which contains normalized DOM                         // 8870
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is                          // 8871
 * needed since all of these are treated as equivalent in Angular:                                                     // 8872
 *                                                                                                                     // 8873
 * ```                                                                                                                 // 8874
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">                                                    // 8875
 * ```                                                                                                                 // 8876
 */                                                                                                                    // 8877
                                                                                                                       // 8878
/**                                                                                                                    // 8879
 * @ngdoc property                                                                                                     // 8880
 * @name $compile.directive.Attributes#$attr                                                                           // 8881
 *                                                                                                                     // 8882
 * @description                                                                                                        // 8883
 * A map of DOM element attribute names to the normalized name. This is                                                // 8884
 * needed to do reverse lookup from normalized name back to actual name.                                               // 8885
 */                                                                                                                    // 8886
                                                                                                                       // 8887
                                                                                                                       // 8888
/**                                                                                                                    // 8889
 * @ngdoc method                                                                                                       // 8890
 * @name $compile.directive.Attributes#$set                                                                            // 8891
 * @kind function                                                                                                      // 8892
 *                                                                                                                     // 8893
 * @description                                                                                                        // 8894
 * Set DOM element attribute value.                                                                                    // 8895
 *                                                                                                                     // 8896
 *                                                                                                                     // 8897
 * @param {string} name Normalized element attribute name of the property to modify. The name is                       // 8898
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}                          // 8899
 *          property to the original name.                                                                             // 8900
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.                       // 8901
 */                                                                                                                    // 8902
                                                                                                                       // 8903
                                                                                                                       // 8904
                                                                                                                       // 8905
/**                                                                                                                    // 8906
 * Closure compiler type information                                                                                   // 8907
 */                                                                                                                    // 8908
                                                                                                                       // 8909
function nodesetLinkingFn(                                                                                             // 8910
  /* angular.Scope */ scope,                                                                                           // 8911
  /* NodeList */ nodeList,                                                                                             // 8912
  /* Element */ rootElement,                                                                                           // 8913
  /* function(Function) */ boundTranscludeFn                                                                           // 8914
) {}                                                                                                                   // 8915
                                                                                                                       // 8916
function directiveLinkingFn(                                                                                           // 8917
  /* nodesetLinkingFn */ nodesetLinkingFn,                                                                             // 8918
  /* angular.Scope */ scope,                                                                                           // 8919
  /* Node */ node,                                                                                                     // 8920
  /* Element */ rootElement,                                                                                           // 8921
  /* function(Function) */ boundTranscludeFn                                                                           // 8922
) {}                                                                                                                   // 8923
                                                                                                                       // 8924
function tokenDifference(str1, str2) {                                                                                 // 8925
  var values = '',                                                                                                     // 8926
      tokens1 = str1.split(/\s+/),                                                                                     // 8927
      tokens2 = str2.split(/\s+/);                                                                                     // 8928
                                                                                                                       // 8929
  outer:                                                                                                               // 8930
  for (var i = 0; i < tokens1.length; i++) {                                                                           // 8931
    var token = tokens1[i];                                                                                            // 8932
    for (var j = 0; j < tokens2.length; j++) {                                                                         // 8933
      if (token == tokens2[j]) continue outer;                                                                         // 8934
    }                                                                                                                  // 8935
    values += (values.length > 0 ? ' ' : '') + token;                                                                  // 8936
  }                                                                                                                    // 8937
  return values;                                                                                                       // 8938
}                                                                                                                      // 8939
                                                                                                                       // 8940
function removeComments(jqNodes) {                                                                                     // 8941
  jqNodes = jqLite(jqNodes);                                                                                           // 8942
  var i = jqNodes.length;                                                                                              // 8943
                                                                                                                       // 8944
  if (i <= 1) {                                                                                                        // 8945
    return jqNodes;                                                                                                    // 8946
  }                                                                                                                    // 8947
                                                                                                                       // 8948
  while (i--) {                                                                                                        // 8949
    var node = jqNodes[i];                                                                                             // 8950
    if (node.nodeType === NODE_TYPE_COMMENT) {                                                                         // 8951
      splice.call(jqNodes, i, 1);                                                                                      // 8952
    }                                                                                                                  // 8953
  }                                                                                                                    // 8954
  return jqNodes;                                                                                                      // 8955
}                                                                                                                      // 8956
                                                                                                                       // 8957
var $controllerMinErr = minErr('$controller');                                                                         // 8958
                                                                                                                       // 8959
                                                                                                                       // 8960
var CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;                                                                             // 8961
function identifierForController(controller, ident) {                                                                  // 8962
  if (ident && isString(ident)) return ident;                                                                          // 8963
  if (isString(controller)) {                                                                                          // 8964
    var match = CNTRL_REG.exec(controller);                                                                            // 8965
    if (match) return match[3];                                                                                        // 8966
  }                                                                                                                    // 8967
}                                                                                                                      // 8968
                                                                                                                       // 8969
                                                                                                                       // 8970
/**                                                                                                                    // 8971
 * @ngdoc provider                                                                                                     // 8972
 * @name $controllerProvider                                                                                           // 8973
 * @description                                                                                                        // 8974
 * The {@link ng.$controller $controller service} is used by Angular to create new                                     // 8975
 * controllers.                                                                                                        // 8976
 *                                                                                                                     // 8977
 * This provider allows controller registration via the                                                                // 8978
 * {@link ng.$controllerProvider#register register} method.                                                            // 8979
 */                                                                                                                    // 8980
function $ControllerProvider() {                                                                                       // 8981
  var controllers = {},                                                                                                // 8982
      globals = false;                                                                                                 // 8983
                                                                                                                       // 8984
  /**                                                                                                                  // 8985
   * @ngdoc method                                                                                                     // 8986
   * @name $controllerProvider#register                                                                                // 8987
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are                   // 8988
   *    the names and the values are the constructors.                                                                 // 8989
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI                       // 8990
   *    annotations in the array notation).                                                                            // 8991
   */                                                                                                                  // 8992
  this.register = function(name, constructor) {                                                                        // 8993
    assertNotHasOwnProperty(name, 'controller');                                                                       // 8994
    if (isObject(name)) {                                                                                              // 8995
      extend(controllers, name);                                                                                       // 8996
    } else {                                                                                                           // 8997
      controllers[name] = constructor;                                                                                 // 8998
    }                                                                                                                  // 8999
  };                                                                                                                   // 9000
                                                                                                                       // 9001
  /**                                                                                                                  // 9002
   * @ngdoc method                                                                                                     // 9003
   * @name $controllerProvider#allowGlobals                                                                            // 9004
   * @description If called, allows `$controller` to find controller constructors on `window`                          // 9005
   */                                                                                                                  // 9006
  this.allowGlobals = function() {                                                                                     // 9007
    globals = true;                                                                                                    // 9008
  };                                                                                                                   // 9009
                                                                                                                       // 9010
                                                                                                                       // 9011
  this.$get = ['$injector', '$window', function($injector, $window) {                                                  // 9012
                                                                                                                       // 9013
    /**                                                                                                                // 9014
     * @ngdoc service                                                                                                  // 9015
     * @name $controller                                                                                               // 9016
     * @requires $injector                                                                                             // 9017
     *                                                                                                                 // 9018
     * @param {Function|string} constructor If called with a function then it's considered to be the                   // 9019
     *    controller constructor function. Otherwise it's considered to be a string which is used                      // 9020
     *    to retrieve the controller constructor using the following steps:                                            // 9021
     *                                                                                                                 // 9022
     *    * check if a controller with given name is registered via `$controllerProvider`                              // 9023
     *    * check if evaluating the string on the current scope returns a constructor                                  // 9024
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global                             // 9025
     *      `window` object (not recommended)                                                                          // 9026
     *                                                                                                                 // 9027
     *    The string can use the `controller as property` syntax, where the controller instance is published           // 9028
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this          // 9029
     *    to work correctly.                                                                                           // 9030
     *                                                                                                                 // 9031
     * @param {Object} locals Injection locals for Controller.                                                         // 9032
     * @return {Object} Instance of given controller.                                                                  // 9033
     *                                                                                                                 // 9034
     * @description                                                                                                    // 9035
     * `$controller` service is responsible for instantiating controllers.                                             // 9036
     *                                                                                                                 // 9037
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into                                 // 9038
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).            // 9039
     */                                                                                                                // 9040
    return function(expression, locals, later, ident) {                                                                // 9041
      // PRIVATE API:                                                                                                  // 9042
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.                   // 9043
      //                     If true, $controller will allocate the object with the correct                            // 9044
      //                     prototype chain, but will not invoke the controller until a returned                      // 9045
      //                     callback is invoked.                                                                      // 9046
      //   param `ident` --- An optional label which overrides the label parsed from the controller                    // 9047
      //                     expression, if any.                                                                       // 9048
      var instance, match, constructor, identifier;                                                                    // 9049
      later = later === true;                                                                                          // 9050
      if (ident && isString(ident)) {                                                                                  // 9051
        identifier = ident;                                                                                            // 9052
      }                                                                                                                // 9053
                                                                                                                       // 9054
      if (isString(expression)) {                                                                                      // 9055
        match = expression.match(CNTRL_REG);                                                                           // 9056
        if (!match) {                                                                                                  // 9057
          throw $controllerMinErr('ctrlfmt',                                                                           // 9058
            "Badly formed controller string '{0}'. " +                                                                 // 9059
            "Must match `__name__ as __id__` or `__name__`.", expression);                                             // 9060
        }                                                                                                              // 9061
        constructor = match[1],                                                                                        // 9062
        identifier = identifier || match[3];                                                                           // 9063
        expression = controllers.hasOwnProperty(constructor)                                                           // 9064
            ? controllers[constructor]                                                                                 // 9065
            : getter(locals.$scope, constructor, true) ||                                                              // 9066
                (globals ? getter($window, constructor, true) : undefined);                                            // 9067
                                                                                                                       // 9068
        assertArgFn(expression, constructor, true);                                                                    // 9069
      }                                                                                                                // 9070
                                                                                                                       // 9071
      if (later) {                                                                                                     // 9072
        // Instantiate controller later:                                                                               // 9073
        // This machinery is used to create an instance of the object before calling the                               // 9074
        // controller's constructor itself.                                                                            // 9075
        //                                                                                                             // 9076
        // This allows properties to be added to the controller before the constructor is                              // 9077
        // invoked. Primarily, this is used for isolate scope bindings in $compile.                                    // 9078
        //                                                                                                             // 9079
        // This feature is not intended for use by applications, and is thus not documented                            // 9080
        // publicly.                                                                                                   // 9081
        // Object creation: http://jsperf.com/create-constructor/2                                                     // 9082
        var controllerPrototype = (isArray(expression) ?                                                               // 9083
          expression[expression.length - 1] : expression).prototype;                                                   // 9084
        instance = Object.create(controllerPrototype || null);                                                         // 9085
                                                                                                                       // 9086
        if (identifier) {                                                                                              // 9087
          addIdentifier(locals, identifier, instance, constructor || expression.name);                                 // 9088
        }                                                                                                              // 9089
                                                                                                                       // 9090
        var instantiate;                                                                                               // 9091
        return instantiate = extend(function() {                                                                       // 9092
          var result = $injector.invoke(expression, instance, locals, constructor);                                    // 9093
          if (result !== instance && (isObject(result) || isFunction(result))) {                                       // 9094
            instance = result;                                                                                         // 9095
            if (identifier) {                                                                                          // 9096
              // If result changed, re-assign controllerAs value to scope.                                             // 9097
              addIdentifier(locals, identifier, instance, constructor || expression.name);                             // 9098
            }                                                                                                          // 9099
          }                                                                                                            // 9100
          return instance;                                                                                             // 9101
        }, {                                                                                                           // 9102
          instance: instance,                                                                                          // 9103
          identifier: identifier                                                                                       // 9104
        });                                                                                                            // 9105
      }                                                                                                                // 9106
                                                                                                                       // 9107
      instance = $injector.instantiate(expression, locals, constructor);                                               // 9108
                                                                                                                       // 9109
      if (identifier) {                                                                                                // 9110
        addIdentifier(locals, identifier, instance, constructor || expression.name);                                   // 9111
      }                                                                                                                // 9112
                                                                                                                       // 9113
      return instance;                                                                                                 // 9114
    };                                                                                                                 // 9115
                                                                                                                       // 9116
    function addIdentifier(locals, identifier, instance, name) {                                                       // 9117
      if (!(locals && isObject(locals.$scope))) {                                                                      // 9118
        throw minErr('$controller')('noscp',                                                                           // 9119
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",                          // 9120
          name, identifier);                                                                                           // 9121
      }                                                                                                                // 9122
                                                                                                                       // 9123
      locals.$scope[identifier] = instance;                                                                            // 9124
    }                                                                                                                  // 9125
  }];                                                                                                                  // 9126
}                                                                                                                      // 9127
                                                                                                                       // 9128
/**                                                                                                                    // 9129
 * @ngdoc service                                                                                                      // 9130
 * @name $document                                                                                                     // 9131
 * @requires $window                                                                                                   // 9132
 *                                                                                                                     // 9133
 * @description                                                                                                        // 9134
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.                      // 9135
 *                                                                                                                     // 9136
 * @example                                                                                                            // 9137
   <example module="documentExample">                                                                                  // 9138
     <file name="index.html">                                                                                          // 9139
       <div ng-controller="ExampleController">                                                                         // 9140
         <p>$document title: <b ng-bind="title"></b></p>                                                               // 9141
         <p>window.document title: <b ng-bind="windowTitle"></b></p>                                                   // 9142
       </div>                                                                                                          // 9143
     </file>                                                                                                           // 9144
     <file name="script.js">                                                                                           // 9145
       angular.module('documentExample', [])                                                                           // 9146
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {                        // 9147
           $scope.title = $document[0].title;                                                                          // 9148
           $scope.windowTitle = angular.element(window.document)[0].title;                                             // 9149
         }]);                                                                                                          // 9150
     </file>                                                                                                           // 9151
   </example>                                                                                                          // 9152
 */                                                                                                                    // 9153
function $DocumentProvider() {                                                                                         // 9154
  this.$get = ['$window', function(window) {                                                                           // 9155
    return jqLite(window.document);                                                                                    // 9156
  }];                                                                                                                  // 9157
}                                                                                                                      // 9158
                                                                                                                       // 9159
/**                                                                                                                    // 9160
 * @ngdoc service                                                                                                      // 9161
 * @name $exceptionHandler                                                                                             // 9162
 * @requires ng.$log                                                                                                   // 9163
 *                                                                                                                     // 9164
 * @description                                                                                                        // 9165
 * Any uncaught exception in angular expressions is delegated to this service.                                         // 9166
 * The default implementation simply delegates to `$log.error` which logs it into                                      // 9167
 * the browser console.                                                                                                // 9168
 *                                                                                                                     // 9169
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by                                       // 9170
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.                                      // 9171
 *                                                                                                                     // 9172
 * ## Example:                                                                                                         // 9173
 *                                                                                                                     // 9174
 * ```js                                                                                                               // 9175
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {                                 // 9176
 *     return function(exception, cause) {                                                                             // 9177
 *       exception.message += ' (caused by "' + cause + '")';                                                          // 9178
 *       throw exception;                                                                                              // 9179
 *     };                                                                                                              // 9180
 *   });                                                                                                               // 9181
 * ```                                                                                                                 // 9182
 *                                                                                                                     // 9183
 * This example will override the normal action of `$exceptionHandler`, to make angular                                // 9184
 * exceptions fail hard when they happen, instead of just logging to the console.                                      // 9185
 *                                                                                                                     // 9186
 * <hr />                                                                                                              // 9187
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`                       // 9188
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}                         // 9189
 * (unless executed during a digest).                                                                                  // 9190
 *                                                                                                                     // 9191
 * If you wish, you can manually delegate exceptions, e.g.                                                             // 9192
 * `try { ... } catch(e) { $exceptionHandler(e); }`                                                                    // 9193
 *                                                                                                                     // 9194
 * @param {Error} exception Exception associated with the error.                                                       // 9195
 * @param {string=} cause optional information about the context in which                                              // 9196
 *       the error was thrown.                                                                                         // 9197
 *                                                                                                                     // 9198
 */                                                                                                                    // 9199
function $ExceptionHandlerProvider() {                                                                                 // 9200
  this.$get = ['$log', function($log) {                                                                                // 9201
    return function(exception, cause) {                                                                                // 9202
      $log.error.apply($log, arguments);                                                                               // 9203
    };                                                                                                                 // 9204
  }];                                                                                                                  // 9205
}                                                                                                                      // 9206
                                                                                                                       // 9207
var $$ForceReflowProvider = function() {                                                                               // 9208
  this.$get = ['$document', function($document) {                                                                      // 9209
    return function(domNode) {                                                                                         // 9210
      //the line below will force the browser to perform a repaint so                                                  // 9211
      //that all the animated elements within the animation frame will                                                 // 9212
      //be properly updated and drawn on screen. This is required to                                                   // 9213
      //ensure that the preparation animation is properly flushed so that                                              // 9214
      //the active state picks up from there. DO NOT REMOVE THIS LINE.                                                 // 9215
      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH                                         // 9216
      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND                                        // 9217
      //WILL TAKE YEARS AWAY FROM YOUR LIFE.                                                                           // 9218
      if (domNode) {                                                                                                   // 9219
        if (!domNode.nodeType && domNode instanceof jqLite) {                                                          // 9220
          domNode = domNode[0];                                                                                        // 9221
        }                                                                                                              // 9222
      } else {                                                                                                         // 9223
        domNode = $document[0].body;                                                                                   // 9224
      }                                                                                                                // 9225
      return domNode.offsetWidth + 1;                                                                                  // 9226
    };                                                                                                                 // 9227
  }];                                                                                                                  // 9228
};                                                                                                                     // 9229
                                                                                                                       // 9230
var APPLICATION_JSON = 'application/json';                                                                             // 9231
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};                             // 9232
var JSON_START = /^\[|^\{(?!\{)/;                                                                                      // 9233
var JSON_ENDS = {                                                                                                      // 9234
  '[': /]$/,                                                                                                           // 9235
  '{': /}$/                                                                                                            // 9236
};                                                                                                                     // 9237
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;                                                                           // 9238
var $httpMinErr = minErr('$http');                                                                                     // 9239
var $httpMinErrLegacyFn = function(method) {                                                                           // 9240
  return function() {                                                                                                  // 9241
    throw $httpMinErr('legacy', 'The method `{0}` on the promise returned from `$http` has been disabled.', method);   // 9242
  };                                                                                                                   // 9243
};                                                                                                                     // 9244
                                                                                                                       // 9245
function serializeValue(v) {                                                                                           // 9246
  if (isObject(v)) {                                                                                                   // 9247
    return isDate(v) ? v.toISOString() : toJson(v);                                                                    // 9248
  }                                                                                                                    // 9249
  return v;                                                                                                            // 9250
}                                                                                                                      // 9251
                                                                                                                       // 9252
                                                                                                                       // 9253
function $HttpParamSerializerProvider() {                                                                              // 9254
  /**                                                                                                                  // 9255
   * @ngdoc service                                                                                                    // 9256
   * @name $httpParamSerializer                                                                                        // 9257
   * @description                                                                                                      // 9258
   *                                                                                                                   // 9259
   * Default {@link $http `$http`} params serializer that converts objects to strings                                  // 9260
   * according to the following rules:                                                                                 // 9261
   *                                                                                                                   // 9262
   * * `{'foo': 'bar'}` results in `foo=bar`                                                                           // 9263
   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)                    // 9265
   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D"` (stringified and encoded representation of an object)
   *                                                                                                                   // 9267
   * Note that serializer will sort the request parameters alphabetically.                                             // 9268
   * */                                                                                                                // 9269
                                                                                                                       // 9270
  this.$get = function() {                                                                                             // 9271
    return function ngParamSerializer(params) {                                                                        // 9272
      if (!params) return '';                                                                                          // 9273
      var parts = [];                                                                                                  // 9274
      forEachSorted(params, function(value, key) {                                                                     // 9275
        if (value === null || isUndefined(value)) return;                                                              // 9276
        if (isArray(value)) {                                                                                          // 9277
          forEach(value, function(v, k) {                                                                              // 9278
            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));                                // 9279
          });                                                                                                          // 9280
        } else {                                                                                                       // 9281
          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));                               // 9282
        }                                                                                                              // 9283
      });                                                                                                              // 9284
                                                                                                                       // 9285
      return parts.join('&');                                                                                          // 9286
    };                                                                                                                 // 9287
  };                                                                                                                   // 9288
}                                                                                                                      // 9289
                                                                                                                       // 9290
function $HttpParamSerializerJQLikeProvider() {                                                                        // 9291
  /**                                                                                                                  // 9292
   * @ngdoc service                                                                                                    // 9293
   * @name $httpParamSerializerJQLike                                                                                  // 9294
   * @description                                                                                                      // 9295
   *                                                                                                                   // 9296
   * Alternative {@link $http `$http`} params serializer that follows                                                  // 9297
   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.                                           // 9298
   * The serializer will also sort the params alphabetically.                                                          // 9299
   *                                                                                                                   // 9300
   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:                   // 9301
   *                                                                                                                   // 9302
   * ```js                                                                                                             // 9303
   * $http({                                                                                                           // 9304
   *   url: myUrl,                                                                                                     // 9305
   *   method: 'GET',                                                                                                  // 9306
   *   params: myParams,                                                                                               // 9307
   *   paramSerializer: '$httpParamSerializerJQLike'                                                                   // 9308
   * });                                                                                                               // 9309
   * ```                                                                                                               // 9310
   *                                                                                                                   // 9311
   * It is also possible to set it as the default `paramSerializer` in the                                             // 9312
   * {@link $httpProvider#defaults `$httpProvider`}.                                                                   // 9313
   *                                                                                                                   // 9314
   * Additionally, you can inject the serializer and use it explicitly, for example to serialize                       // 9315
   * form data for submission:                                                                                         // 9316
   *                                                                                                                   // 9317
   * ```js                                                                                                             // 9318
   * .controller(function($http, $httpParamSerializerJQLike) {                                                         // 9319
   *   //...                                                                                                           // 9320
   *                                                                                                                   // 9321
   *   $http({                                                                                                         // 9322
   *     url: myUrl,                                                                                                   // 9323
   *     method: 'POST',                                                                                               // 9324
   *     data: $httpParamSerializerJQLike(myData),                                                                     // 9325
   *     headers: {                                                                                                    // 9326
   *       'Content-Type': 'application/x-www-form-urlencoded'                                                         // 9327
   *     }                                                                                                             // 9328
   *   });                                                                                                             // 9329
   *                                                                                                                   // 9330
   * });                                                                                                               // 9331
   * ```                                                                                                               // 9332
   *                                                                                                                   // 9333
   * */                                                                                                                // 9334
  this.$get = function() {                                                                                             // 9335
    return function jQueryLikeParamSerializer(params) {                                                                // 9336
      if (!params) return '';                                                                                          // 9337
      var parts = [];                                                                                                  // 9338
      serialize(params, '', true);                                                                                     // 9339
      return parts.join('&');                                                                                          // 9340
                                                                                                                       // 9341
      function serialize(toSerialize, prefix, topLevel) {                                                              // 9342
        if (toSerialize === null || isUndefined(toSerialize)) return;                                                  // 9343
        if (isArray(toSerialize)) {                                                                                    // 9344
          forEach(toSerialize, function(value, index) {                                                                // 9345
            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');                                     // 9346
          });                                                                                                          // 9347
        } else if (isObject(toSerialize) && !isDate(toSerialize)) {                                                    // 9348
          forEachSorted(toSerialize, function(value, key) {                                                            // 9349
            serialize(value, prefix +                                                                                  // 9350
                (topLevel ? '' : '[') +                                                                                // 9351
                key +                                                                                                  // 9352
                (topLevel ? '' : ']'));                                                                                // 9353
          });                                                                                                          // 9354
        } else {                                                                                                       // 9355
          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));                      // 9356
        }                                                                                                              // 9357
      }                                                                                                                // 9358
    };                                                                                                                 // 9359
  };                                                                                                                   // 9360
}                                                                                                                      // 9361
                                                                                                                       // 9362
function defaultHttpResponseTransform(data, headers) {                                                                 // 9363
  if (isString(data)) {                                                                                                // 9364
    // Strip json vulnerability protection prefix and trim whitespace                                                  // 9365
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();                                                    // 9366
                                                                                                                       // 9367
    if (tempData) {                                                                                                    // 9368
      var contentType = headers('Content-Type');                                                                       // 9369
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {                    // 9370
        data = fromJson(tempData);                                                                                     // 9371
      }                                                                                                                // 9372
    }                                                                                                                  // 9373
  }                                                                                                                    // 9374
                                                                                                                       // 9375
  return data;                                                                                                         // 9376
}                                                                                                                      // 9377
                                                                                                                       // 9378
function isJsonLike(str) {                                                                                             // 9379
    var jsonStart = str.match(JSON_START);                                                                             // 9380
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);                                                             // 9381
}                                                                                                                      // 9382
                                                                                                                       // 9383
/**                                                                                                                    // 9384
 * Parse headers into key value object                                                                                 // 9385
 *                                                                                                                     // 9386
 * @param {string} headers Raw headers as a string                                                                     // 9387
 * @returns {Object} Parsed headers as key value object                                                                // 9388
 */                                                                                                                    // 9389
function parseHeaders(headers) {                                                                                       // 9390
  var parsed = createMap(), i;                                                                                         // 9391
                                                                                                                       // 9392
  function fillInParsed(key, val) {                                                                                    // 9393
    if (key) {                                                                                                         // 9394
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;                                                      // 9395
    }                                                                                                                  // 9396
  }                                                                                                                    // 9397
                                                                                                                       // 9398
  if (isString(headers)) {                                                                                             // 9399
    forEach(headers.split('\n'), function(line) {                                                                      // 9400
      i = line.indexOf(':');                                                                                           // 9401
      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));                                      // 9402
    });                                                                                                                // 9403
  } else if (isObject(headers)) {                                                                                      // 9404
    forEach(headers, function(headerVal, headerKey) {                                                                  // 9405
      fillInParsed(lowercase(headerKey), trim(headerVal));                                                             // 9406
    });                                                                                                                // 9407
  }                                                                                                                    // 9408
                                                                                                                       // 9409
  return parsed;                                                                                                       // 9410
}                                                                                                                      // 9411
                                                                                                                       // 9412
                                                                                                                       // 9413
/**                                                                                                                    // 9414
 * Returns a function that provides access to parsed headers.                                                          // 9415
 *                                                                                                                     // 9416
 * Headers are lazy parsed when first requested.                                                                       // 9417
 * @see parseHeaders                                                                                                   // 9418
 *                                                                                                                     // 9419
 * @param {(string|Object)} headers Headers to provide access to.                                                      // 9420
 * @returns {function(string=)} Returns a getter function which if called with:                                        // 9421
 *                                                                                                                     // 9422
 *   - if called with single an argument returns a single header value or null                                         // 9423
 *   - if called with no arguments returns an object containing all headers.                                           // 9424
 */                                                                                                                    // 9425
function headersGetter(headers) {                                                                                      // 9426
  var headersObj;                                                                                                      // 9427
                                                                                                                       // 9428
  return function(name) {                                                                                              // 9429
    if (!headersObj) headersObj =  parseHeaders(headers);                                                              // 9430
                                                                                                                       // 9431
    if (name) {                                                                                                        // 9432
      var value = headersObj[lowercase(name)];                                                                         // 9433
      if (value === void 0) {                                                                                          // 9434
        value = null;                                                                                                  // 9435
      }                                                                                                                // 9436
      return value;                                                                                                    // 9437
    }                                                                                                                  // 9438
                                                                                                                       // 9439
    return headersObj;                                                                                                 // 9440
  };                                                                                                                   // 9441
}                                                                                                                      // 9442
                                                                                                                       // 9443
                                                                                                                       // 9444
/**                                                                                                                    // 9445
 * Chain all given functions                                                                                           // 9446
 *                                                                                                                     // 9447
 * This function is used for both request and response transforming                                                    // 9448
 *                                                                                                                     // 9449
 * @param {*} data Data to transform.                                                                                  // 9450
 * @param {function(string=)} headers HTTP headers getter fn.                                                          // 9451
 * @param {number} status HTTP status code of the response.                                                            // 9452
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.                                         // 9453
 * @returns {*} Transformed data.                                                                                      // 9454
 */                                                                                                                    // 9455
function transformData(data, headers, status, fns) {                                                                   // 9456
  if (isFunction(fns)) {                                                                                               // 9457
    return fns(data, headers, status);                                                                                 // 9458
  }                                                                                                                    // 9459
                                                                                                                       // 9460
  forEach(fns, function(fn) {                                                                                          // 9461
    data = fn(data, headers, status);                                                                                  // 9462
  });                                                                                                                  // 9463
                                                                                                                       // 9464
  return data;                                                                                                         // 9465
}                                                                                                                      // 9466
                                                                                                                       // 9467
                                                                                                                       // 9468
function isSuccess(status) {                                                                                           // 9469
  return 200 <= status && status < 300;                                                                                // 9470
}                                                                                                                      // 9471
                                                                                                                       // 9472
                                                                                                                       // 9473
/**                                                                                                                    // 9474
 * @ngdoc provider                                                                                                     // 9475
 * @name $httpProvider                                                                                                 // 9476
 * @description                                                                                                        // 9477
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.                           // 9478
 * */                                                                                                                  // 9479
function $HttpProvider() {                                                                                             // 9480
  /**                                                                                                                  // 9481
   * @ngdoc property                                                                                                   // 9482
   * @name $httpProvider#defaults                                                                                      // 9483
   * @description                                                                                                      // 9484
   *                                                                                                                   // 9485
   * Object containing default values for all {@link ng.$http $http} requests.                                         // 9486
   *                                                                                                                   // 9487
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}                 // 9488
   * that will provide the cache for all requests who set their `cache` property to `true`.                            // 9489
   * If you set the `defaults.cache = false` then only requests that specify their own custom                          // 9490
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.                        // 9491
   *                                                                                                                   // 9492
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.                            // 9493
   * Defaults value is `'XSRF-TOKEN'`.                                                                                 // 9494
   *                                                                                                                   // 9495
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the                             // 9496
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.                                                                   // 9497
   *                                                                                                                   // 9498
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.                                     // 9499
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on                                         // 9500
   * setting default headers.                                                                                          // 9501
   *     - **`defaults.headers.common`**                                                                               // 9502
   *     - **`defaults.headers.post`**                                                                                 // 9503
   *     - **`defaults.headers.put`**                                                                                  // 9504
   *     - **`defaults.headers.patch`**                                                                                // 9505
   *                                                                                                                   // 9506
   *                                                                                                                   // 9507
   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function                 // 9508
   *  used to the prepare string representation of request parameters (specified as an object).                        // 9509
   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.    // 9510
   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.                                                // 9511
   *                                                                                                                   // 9512
   **/                                                                                                                 // 9513
  var defaults = this.defaults = {                                                                                     // 9514
    // transform incoming response data                                                                                // 9515
    transformResponse: [defaultHttpResponseTransform],                                                                 // 9516
                                                                                                                       // 9517
    // transform outgoing request data                                                                                 // 9518
    transformRequest: [function(d) {                                                                                   // 9519
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;                                // 9520
    }],                                                                                                                // 9521
                                                                                                                       // 9522
    // default headers                                                                                                 // 9523
    headers: {                                                                                                         // 9524
      common: {                                                                                                        // 9525
        'Accept': 'application/json, text/plain, */*'                                                                  // 9526
      },                                                                                                               // 9527
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9528
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),                                                              // 9529
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)                                                               // 9530
    },                                                                                                                 // 9531
                                                                                                                       // 9532
    xsrfCookieName: 'XSRF-TOKEN',                                                                                      // 9533
    xsrfHeaderName: 'X-XSRF-TOKEN',                                                                                    // 9534
                                                                                                                       // 9535
    paramSerializer: '$httpParamSerializer'                                                                            // 9536
  };                                                                                                                   // 9537
                                                                                                                       // 9538
  var useApplyAsync = false;                                                                                           // 9539
  /**                                                                                                                  // 9540
   * @ngdoc method                                                                                                     // 9541
   * @name $httpProvider#useApplyAsync                                                                                 // 9542
   * @description                                                                                                      // 9543
   *                                                                                                                   // 9544
   * Configure $http service to combine processing of multiple http responses received at around                       // 9545
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in              // 9546
   * significant performance improvement for bigger applications that make many HTTP requests                          // 9547
   * concurrently (common during application bootstrap).                                                               // 9548
   *                                                                                                                   // 9549
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9550
   *                                                                                                                   // 9551
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred                          // 9552
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window                        // 9553
   *    to load and share the same digest cycle.                                                                       // 9554
   *                                                                                                                   // 9555
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9556
   *    otherwise, returns the current configured value.                                                               // 9557
   **/                                                                                                                 // 9558
  this.useApplyAsync = function(value) {                                                                               // 9559
    if (isDefined(value)) {                                                                                            // 9560
      useApplyAsync = !!value;                                                                                         // 9561
      return this;                                                                                                     // 9562
    }                                                                                                                  // 9563
    return useApplyAsync;                                                                                              // 9564
  };                                                                                                                   // 9565
                                                                                                                       // 9566
  var useLegacyPromise = true;                                                                                         // 9567
  /**                                                                                                                  // 9568
   * @ngdoc method                                                                                                     // 9569
   * @name $httpProvider#useLegacyPromiseExtensions                                                                    // 9570
   * @description                                                                                                      // 9571
   *                                                                                                                   // 9572
   * Configure `$http` service to return promises without the shorthand methods `success` and `error`.                 // 9573
   * This should be used to make sure that applications work without these methods.                                    // 9574
   *                                                                                                                   // 9575
   * Defaults to false. If no value is specified, returns the current configured value.                                // 9576
   *                                                                                                                   // 9577
   * @param {boolean=} value If true, `$http` will return a normal promise without the `success` and `error` methods.  // 9578
   *                                                                                                                   // 9579
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.                        // 9580
   *    otherwise, returns the current configured value.                                                               // 9581
   **/                                                                                                                 // 9582
  this.useLegacyPromiseExtensions = function(value) {                                                                  // 9583
    if (isDefined(value)) {                                                                                            // 9584
      useLegacyPromise = !!value;                                                                                      // 9585
      return this;                                                                                                     // 9586
    }                                                                                                                  // 9587
    return useLegacyPromise;                                                                                           // 9588
  };                                                                                                                   // 9589
                                                                                                                       // 9590
  /**                                                                                                                  // 9591
   * @ngdoc property                                                                                                   // 9592
   * @name $httpProvider#interceptors                                                                                  // 9593
   * @description                                                                                                      // 9594
   *                                                                                                                   // 9595
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}                     // 9596
   * pre-processing of request or postprocessing of responses.                                                         // 9597
   *                                                                                                                   // 9598
   * These service factories are ordered by request, i.e. they are applied in the same order as the                    // 9599
   * array, on request, but reverse order, on response.                                                                // 9600
   *                                                                                                                   // 9601
   * {@link ng.$http#interceptors Interceptors detailed info}                                                          // 9602
   **/                                                                                                                 // 9603
  var interceptorFactories = this.interceptors = [];                                                                   // 9604
                                                                                                                       // 9605
  this.$get = ['$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector',                     // 9606
      function($httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector) {                               // 9607
                                                                                                                       // 9608
    var defaultCache = $cacheFactory('$http');                                                                         // 9609
                                                                                                                       // 9610
    /**                                                                                                                // 9611
     * Make sure that default param serializer is exposed as a function                                                // 9612
     */                                                                                                                // 9613
    defaults.paramSerializer = isString(defaults.paramSerializer) ?                                                    // 9614
      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;                                              // 9615
                                                                                                                       // 9616
    /**                                                                                                                // 9617
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.                             // 9618
     * The reversal is needed so that we can build up the interception chain around the                                // 9619
     * server request.                                                                                                 // 9620
     */                                                                                                                // 9621
    var reversedInterceptors = [];                                                                                     // 9622
                                                                                                                       // 9623
    forEach(interceptorFactories, function(interceptorFactory) {                                                       // 9624
      reversedInterceptors.unshift(isString(interceptorFactory)                                                        // 9625
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));                                 // 9626
    });                                                                                                                // 9627
                                                                                                                       // 9628
    /**                                                                                                                // 9629
     * @ngdoc service                                                                                                  // 9630
     * @kind function                                                                                                  // 9631
     * @name $http                                                                                                     // 9632
     * @requires ng.$httpBackend                                                                                       // 9633
     * @requires $cacheFactory                                                                                         // 9634
     * @requires $rootScope                                                                                            // 9635
     * @requires $q                                                                                                    // 9636
     * @requires $injector                                                                                             // 9637
     *                                                                                                                 // 9638
     * @description                                                                                                    // 9639
     * The `$http` service is a core Angular service that facilitates communication with the remote                    // 9640
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)                // 9641
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).                                                      // 9642
     *                                                                                                                 // 9643
     * For unit testing applications that use `$http` service, see                                                     // 9644
     * {@link ngMock.$httpBackend $httpBackend mock}.                                                                  // 9645
     *                                                                                                                 // 9646
     * For a higher level of abstraction, please check out the {@link ngResource.$resource                             // 9647
     * $resource} service.                                                                                             // 9648
     *                                                                                                                 // 9649
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by                                    // 9650
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage                    // 9651
     * it is important to familiarize yourself with these APIs and the guarantees they provide.                        // 9652
     *                                                                                                                 // 9653
     *                                                                                                                 // 9654
     * ## General usage                                                                                                // 9655
     * The `$http` service is a function which takes a single argument — a configuration object —                      // 9656
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.                                  // 9657
     *                                                                                                                 // 9658
     * ```js                                                                                                           // 9659
     *   // Simple GET request example :                                                                               // 9660
     *   $http.get('/someUrl').                                                                                        // 9661
     *     then(function(response) {                                                                                   // 9662
     *       // this callback will be called asynchronously                                                            // 9663
     *       // when the response is available                                                                         // 9664
     *     }, function(response) {                                                                                     // 9665
     *       // called asynchronously if an error occurs                                                               // 9666
     *       // or server returns response with an error status.                                                       // 9667
     *     });                                                                                                         // 9668
     * ```                                                                                                             // 9669
     *                                                                                                                 // 9670
     * ```js                                                                                                           // 9671
     *   // Simple POST request example (passing data) :                                                               // 9672
     *   $http.post('/someUrl', {msg:'hello word!'}).                                                                  // 9673
     *     then(function(response) {                                                                                   // 9674
     *       // this callback will be called asynchronously                                                            // 9675
     *       // when the response is available                                                                         // 9676
     *     }, function(response) {                                                                                     // 9677
     *       // called asynchronously if an error occurs                                                               // 9678
     *       // or server returns response with an error status.                                                       // 9679
     *     });                                                                                                         // 9680
     * ```                                                                                                             // 9681
     *                                                                                                                 // 9682
     * The response object has these properties:                                                                       // 9683
     *                                                                                                                 // 9684
     *   - **data** – `{string|Object}` – The response body transformed with the transform                             // 9685
     *     functions.                                                                                                  // 9686
     *   - **status** – `{number}` – HTTP status code of the response.                                                 // 9687
     *   - **headers** – `{function([headerName])}` – Header getter function.                                          // 9688
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.                   // 9689
     *   - **statusText** – `{string}` – HTTP status text of the response.                                             // 9690
     *                                                                                                                 // 9691
     * A response status code between 200 and 299 is considered a success status and                                   // 9692
     * will result in the success callback being called. Note that if the response is a redirect,                      // 9693
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be                        // 9694
     * called for such responses.                                                                                      // 9695
     *                                                                                                                 // 9696
     * ## Writing Unit Tests that use $http                                                                            // 9697
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call                                        // 9698
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending                                    // 9699
     * request using trained responses.                                                                                // 9700
     *                                                                                                                 // 9701
     * ```                                                                                                             // 9702
     * $httpBackend.expectGET(...);                                                                                    // 9703
     * $http.get(...);                                                                                                 // 9704
     * $httpBackend.flush();                                                                                           // 9705
     * ```                                                                                                             // 9706
     *                                                                                                                 // 9707
     * ## Shortcut methods                                                                                             // 9708
     *                                                                                                                 // 9709
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and                       // 9710
     * request data must be passed in for POST/PUT requests.                                                           // 9711
     *                                                                                                                 // 9712
     * ```js                                                                                                           // 9713
     *   $http.get('/someUrl').then(successCallback);                                                                  // 9714
     *   $http.post('/someUrl', data).then(successCallback);                                                           // 9715
     * ```                                                                                                             // 9716
     *                                                                                                                 // 9717
     * Complete list of shortcut methods:                                                                              // 9718
     *                                                                                                                 // 9719
     * - {@link ng.$http#get $http.get}                                                                                // 9720
     * - {@link ng.$http#head $http.head}                                                                              // 9721
     * - {@link ng.$http#post $http.post}                                                                              // 9722
     * - {@link ng.$http#put $http.put}                                                                                // 9723
     * - {@link ng.$http#delete $http.delete}                                                                          // 9724
     * - {@link ng.$http#jsonp $http.jsonp}                                                                            // 9725
     * - {@link ng.$http#patch $http.patch}                                                                            // 9726
     *                                                                                                                 // 9727
     *                                                                                                                 // 9728
     * ## Deprecation Notice                                                                                           // 9729
     * <div class="alert alert-danger">                                                                                // 9730
     *   The `$http` legacy promise methods `success` and `error` have been deprecated.                                // 9731
     *   Use the standard `then` method instead.                                                                       // 9732
     *   If {@link $httpProvider#useLegacyPromiseExtensions `$httpProvider.useLegacyPromiseExtensions`} is set to      // 9733
     *   `false` then these methods will throw {@link $http:legacy `$http/legacy`} error.                              // 9734
     * </div>                                                                                                          // 9735
     *                                                                                                                 // 9736
     * ## Setting HTTP Headers                                                                                         // 9737
     *                                                                                                                 // 9738
     * The $http service will automatically add certain HTTP headers to all requests. These defaults                   // 9739
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration                         // 9740
     * object, which currently contains this default configuration:                                                    // 9741
     *                                                                                                                 // 9742
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):                           // 9743
     *   - `Accept: application/json, text/plain, * / *`                                                               // 9744
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)                                    // 9745
     *   - `Content-Type: application/json`                                                                            // 9746
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)                                       // 9747
     *   - `Content-Type: application/json`                                                                            // 9748
     *                                                                                                                 // 9749
     * To add or overwrite these defaults, simply add or remove a property from these configuration                    // 9750
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object                      // 9751
     * with the lowercased HTTP method name as the key, e.g.                                                           // 9752
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.                                               // 9753
     *                                                                                                                 // 9754
     * The defaults can also be set at runtime via the `$http.defaults` object in the same                             // 9755
     * fashion. For example:                                                                                           // 9756
     *                                                                                                                 // 9757
     * ```                                                                                                             // 9758
     * module.run(function($http) {                                                                                    // 9759
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'                                            // 9760
     * });                                                                                                             // 9761
     * ```                                                                                                             // 9762
     *                                                                                                                 // 9763
     * In addition, you can supply a `headers` property in the config object passed when                               // 9764
     * calling `$http(config)`, which overrides the defaults without changing them globally.                           // 9765
     *                                                                                                                 // 9766
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,    // 9767
     * Use the `headers` property, setting the desired header to `undefined`. For example:                             // 9768
     *                                                                                                                 // 9769
     * ```js                                                                                                           // 9770
     * var req = {                                                                                                     // 9771
     *  method: 'POST',                                                                                                // 9772
     *  url: 'http://example.com',                                                                                     // 9773
     *  headers: {                                                                                                     // 9774
     *    'Content-Type': undefined                                                                                    // 9775
     *  },                                                                                                             // 9776
     *  data: { test: 'test' }                                                                                         // 9777
     * }                                                                                                               // 9778
     *                                                                                                                 // 9779
     * $http(req).then(function(){...}, function(){...});                                                              // 9780
     * ```                                                                                                             // 9781
     *                                                                                                                 // 9782
     * ## Transforming Requests and Responses                                                                          // 9783
     *                                                                                                                 // 9784
     * Both requests and responses can be transformed using transformation functions: `transformRequest`               // 9785
     * and `transformResponse`. These properties can be a single function that returns                                 // 9786
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,   // 9787
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.            // 9788
     *                                                                                                                 // 9789
     * ### Default Transformations                                                                                     // 9790
     *                                                                                                                 // 9791
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and                         // 9792
     * `defaults.transformResponse` properties. If a request does not provide its own transformations                  // 9793
     * then these will be applied.                                                                                     // 9794
     *                                                                                                                 // 9795
     * You can augment or replace the default transformations by modifying these properties by adding to or            // 9796
     * replacing the array.                                                                                            // 9797
     *                                                                                                                 // 9798
     * Angular provides the following default transformations:                                                         // 9799
     *                                                                                                                 // 9800
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):      // 9801
     *                                                                                                                 // 9802
     * - If the `data` property of the request configuration object contains an object, serialize it                   // 9803
     *   into JSON format.                                                                                             // 9804
     *                                                                                                                 // 9805
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):   // 9806
     *                                                                                                                 // 9807
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).                            // 9808
     *  - If JSON response is detected, deserialize it using a JSON parser.                                            // 9809
     *                                                                                                                 // 9810
     *                                                                                                                 // 9811
     * ### Overriding the Default Transformations Per Request                                                          // 9812
     *                                                                                                                 // 9813
     * If you wish override the request/response transformations only for a single request then provide                // 9814
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed                     // 9815
     * into `$http`.                                                                                                   // 9816
     *                                                                                                                 // 9817
     * Note that if you provide these properties on the config object the default transformations will be              // 9818
     * overwritten. If you wish to augment the default transformations then you must include them in your              // 9819
     * local transformation array.                                                                                     // 9820
     *                                                                                                                 // 9821
     * The following code demonstrates adding a new response transformation to be run after the default response       // 9822
     * transformations have been run.                                                                                  // 9823
     *                                                                                                                 // 9824
     * ```js                                                                                                           // 9825
     * function appendTransform(defaults, transform) {                                                                 // 9826
     *                                                                                                                 // 9827
     *   // We can't guarantee that the default transformation is an array                                             // 9828
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];                                                 // 9829
     *                                                                                                                 // 9830
     *   // Append the new transformation to the defaults                                                              // 9831
     *   return defaults.concat(transform);                                                                            // 9832
     * }                                                                                                               // 9833
     *                                                                                                                 // 9834
     * $http({                                                                                                         // 9835
     *   url: '...',                                                                                                   // 9836
     *   method: 'GET',                                                                                                // 9837
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {                        // 9838
     *     return doTransform(value);                                                                                  // 9839
     *   })                                                                                                            // 9840
     * });                                                                                                             // 9841
     * ```                                                                                                             // 9842
     *                                                                                                                 // 9843
     *                                                                                                                 // 9844
     * ## Caching                                                                                                      // 9845
     *                                                                                                                 // 9846
     * To enable caching, set the request configuration `cache` property to `true` (to use default                     // 9847
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).                       // 9848
     * When the cache is enabled, `$http` stores the response from the server in the specified                         // 9849
     * cache. The next time the same request is made, the response is served from the cache without                    // 9850
     * sending a request to the server.                                                                                // 9851
     *                                                                                                                 // 9852
     * Note that even if the response is served from cache, delivery of the data is asynchronous in                    // 9853
     * the same way that real requests are.                                                                            // 9854
     *                                                                                                                 // 9855
     * If there are multiple GET requests for the same URL that should be cached using the same                        // 9856
     * cache, but the cache is not populated yet, only one request to the server will be made and                      // 9857
     * the remaining requests will be fulfilled using the response from the first request.                             // 9858
     *                                                                                                                 // 9859
     * You can change the default cache to a new object (built with                                                    // 9860
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the                                                       // 9861
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set                                 // 9862
     * their `cache` property to `true` will now use this cache object.                                                // 9863
     *                                                                                                                 // 9864
     * If you set the default cache to `false` then only requests that specify their own custom                        // 9865
     * cache object will be cached.                                                                                    // 9866
     *                                                                                                                 // 9867
     * ## Interceptors                                                                                                 // 9868
     *                                                                                                                 // 9869
     * Before you start creating interceptors, be sure to understand the                                               // 9870
     * {@link ng.$q $q and deferred/promise APIs}.                                                                     // 9871
     *                                                                                                                 // 9872
     * For purposes of global error handling, authentication, or any kind of synchronous or                            // 9873
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be                    // 9874
     * able to intercept requests before they are handed to the server and                                             // 9875
     * responses before they are handed over to the application code that                                              // 9876
     * initiated these requests. The interceptors leverage the {@link ng.$q                                            // 9877
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.                        // 9878
     *                                                                                                                 // 9879
     * The interceptors are service factories that are registered with the `$httpProvider` by                          // 9880
     * adding them to the `$httpProvider.interceptors` array. The factory is called and                                // 9881
     * injected with dependencies (if specified) and returns the interceptor.                                          // 9882
     *                                                                                                                 // 9883
     * There are two kinds of interceptors (and two kinds of rejection interceptors):                                  // 9884
     *                                                                                                                 // 9885
     *   * `request`: interceptors get called with a http `config` object. The function is free to                     // 9886
     *     modify the `config` object or create a new one. The function needs to return the `config`                   // 9887
     *     object directly, or a promise containing the `config` or a new `config` object.                             // 9888
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or                       // 9889
     *     resolved with a rejection.                                                                                  // 9890
     *   * `response`: interceptors get called with http `response` object. The function is free to                    // 9891
     *     modify the `response` object or create a new one. The function needs to return the `response`               // 9892
     *     object directly, or as a promise containing the `response` or a new `response` object.                      // 9893
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or                      // 9894
     *     resolved with a rejection.                                                                                  // 9895
     *                                                                                                                 // 9896
     *                                                                                                                 // 9897
     * ```js                                                                                                           // 9898
     *   // register the interceptor as a service                                                                      // 9899
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {                                // 9900
     *     return {                                                                                                    // 9901
     *       // optional method                                                                                        // 9902
     *       'request': function(config) {                                                                             // 9903
     *         // do something on success                                                                              // 9904
     *         return config;                                                                                          // 9905
     *       },                                                                                                        // 9906
     *                                                                                                                 // 9907
     *       // optional method                                                                                        // 9908
     *      'requestError': function(rejection) {                                                                      // 9909
     *         // do something on error                                                                                // 9910
     *         if (canRecover(rejection)) {                                                                            // 9911
     *           return responseOrNewPromise                                                                           // 9912
     *         }                                                                                                       // 9913
     *         return $q.reject(rejection);                                                                            // 9914
     *       },                                                                                                        // 9915
     *                                                                                                                 // 9916
     *                                                                                                                 // 9917
     *                                                                                                                 // 9918
     *       // optional method                                                                                        // 9919
     *       'response': function(response) {                                                                          // 9920
     *         // do something on success                                                                              // 9921
     *         return response;                                                                                        // 9922
     *       },                                                                                                        // 9923
     *                                                                                                                 // 9924
     *       // optional method                                                                                        // 9925
     *      'responseError': function(rejection) {                                                                     // 9926
     *         // do something on error                                                                                // 9927
     *         if (canRecover(rejection)) {                                                                            // 9928
     *           return responseOrNewPromise                                                                           // 9929
     *         }                                                                                                       // 9930
     *         return $q.reject(rejection);                                                                            // 9931
     *       }                                                                                                         // 9932
     *     };                                                                                                          // 9933
     *   });                                                                                                           // 9934
     *                                                                                                                 // 9935
     *   $httpProvider.interceptors.push('myHttpInterceptor');                                                         // 9936
     *                                                                                                                 // 9937
     *                                                                                                                 // 9938
     *   // alternatively, register the interceptor via an anonymous factory                                           // 9939
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {                                      // 9940
     *     return {                                                                                                    // 9941
     *      'request': function(config) {                                                                              // 9942
     *          // same as above                                                                                       // 9943
     *       },                                                                                                        // 9944
     *                                                                                                                 // 9945
     *       'response': function(response) {                                                                          // 9946
     *          // same as above                                                                                       // 9947
     *       }                                                                                                         // 9948
     *     };                                                                                                          // 9949
     *   });                                                                                                           // 9950
     * ```                                                                                                             // 9951
     *                                                                                                                 // 9952
     * ## Security Considerations                                                                                      // 9953
     *                                                                                                                 // 9954
     * When designing web applications, consider security threats from:                                                // 9955
     *                                                                                                                 // 9956
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9957
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)                                               // 9958
     *                                                                                                                 // 9959
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes                    // 9960
     * pre-configured with strategies that address these issues, but for this to work backend server                   // 9961
     * cooperation is required.                                                                                        // 9962
     *                                                                                                                 // 9963
     * ### JSON Vulnerability Protection                                                                               // 9964
     *                                                                                                                 // 9965
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)       // 9966
     * allows third party website to turn your JSON resource URL into                                                  // 9967
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To                                   // 9968
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.                        // 9969
     * Angular will automatically strip the prefix before processing it as JSON.                                       // 9970
     *                                                                                                                 // 9971
     * For example if your server needs to return:                                                                     // 9972
     * ```js                                                                                                           // 9973
     * ['one','two']                                                                                                   // 9974
     * ```                                                                                                             // 9975
     *                                                                                                                 // 9976
     * which is vulnerable to attack, your server can return:                                                          // 9977
     * ```js                                                                                                           // 9978
     * )]}',                                                                                                           // 9979
     * ['one','two']                                                                                                   // 9980
     * ```                                                                                                             // 9981
     *                                                                                                                 // 9982
     * Angular will strip the prefix, before processing the JSON.                                                      // 9983
     *                                                                                                                 // 9984
     *                                                                                                                 // 9985
     * ### Cross Site Request Forgery (XSRF) Protection                                                                // 9986
     *                                                                                                                 // 9987
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which                         // 9988
     * an unauthorized site can gain your user's private data. Angular provides a mechanism                            // 9989
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie                    // 9990
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only                           // 9991
     * JavaScript that runs on your domain could read the cookie, your server can be assured that                      // 9992
     * the XHR came from JavaScript running on your domain. The header will not be set for                             // 9993
     * cross-domain requests.                                                                                          // 9994
     *                                                                                                                 // 9995
     * To take advantage of this, your server needs to set a token in a JavaScript readable session                    // 9996
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the                        // 9997
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure                     // 9998
     * that only JavaScript running on your domain could have sent the request. The token must be                      // 9999
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from                       // 10000
     * making up its own tokens). We recommend that the token is a digest of your site's                               // 10001
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)                      // 10002
     * for added security.                                                                                             // 10003
     *                                                                                                                 // 10004
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName                            // 10005
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,                         // 10006
     * or the per-request config object.                                                                               // 10007
     *                                                                                                                 // 10008
     * In order to prevent collisions in environments where multiple Angular apps share the                            // 10009
     * same domain or subdomain, we recommend that each application uses unique cookie name.                           // 10010
     *                                                                                                                 // 10011
     * @param {object} config Object describing the request to be made and how it should be                            // 10012
     *    processed. The object has following properties:                                                              // 10013
     *                                                                                                                 // 10014
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)                                            // 10015
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.                   // 10016
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized               // 10017
     *      with the `paramSerializer` and appended as GET parameters.                                                 // 10018
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.                                // 10019
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing                   // 10020
     *      HTTP headers to send to the server. If the return value of a function is null, the                         // 10021
     *      header will not be sent. Functions accept a config object as an argument.                                  // 10022
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.                     // 10023
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.                                // 10024
     *    - **transformRequest** –                                                                                     // 10025
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –                                  // 10026
     *      transform function or an array of such functions. The transform function takes the http                    // 10027
     *      request body and headers and returns its transformed (typically serialized) version.                       // 10028
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10029
     *      Overriding the Default Transformations}                                                                    // 10030
     *    - **transformResponse** –                                                                                    // 10031
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –                  // 10032
     *      transform function or an array of such functions. The transform function takes the http                    // 10033
     *      response body, headers and status and returns its transformed (typically deserialized) version.            // 10034
     *      See {@link ng.$http#overriding-the-default-transformations-per-request                                     // 10035
     *      Overriding the Default TransformationjqLiks}                                                               // 10036
     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to               // 10037
     *      prepare the string representation of request parameters (specified as an object).                          // 10038
     *      If specified as string, it is interpreted as function registered with the                                  // 10039
     *      {@link $injector $injector}, which means you can create your own serializer                                // 10040
     *      by registering it as a {@link auto.$provide#service service}.                                              // 10041
     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};                           // 10042
     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}               // 10043
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the                   // 10044
     *      GET request, otherwise if a cache instance built with                                                      // 10045
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for                                        // 10046
     *      caching.                                                                                                   // 10047
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}                       // 10048
     *      that should abort the request when resolved.                                                               // 10049
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the                       // 10050
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.                                                                                      // 10052
     *    - **responseType** - `{string}` - see                                                                        // 10053
     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
     *                                                                                                                 // 10055
     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object             // 10056
     *                        when the request succeeds or fails.                                                      // 10057
     *                                                                                                                 // 10058
     *                                                                                                                 // 10059
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending                        // 10060
     *   requests. This is primarily meant to be used for debugging purposes.                                          // 10061
     *                                                                                                                 // 10062
     *                                                                                                                 // 10063
     * @example                                                                                                        // 10064
<example module="httpExample">                                                                                         // 10065
<file name="index.html">                                                                                               // 10066
  <div ng-controller="FetchController">                                                                                // 10067
    <select ng-model="method" aria-label="Request method">                                                             // 10068
      <option>GET</option>                                                                                             // 10069
      <option>JSONP</option>                                                                                           // 10070
    </select>                                                                                                          // 10071
    <input type="text" ng-model="url" size="80" aria-label="URL" />                                                    // 10072
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>                                                        // 10073
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>                     // 10074
    <button id="samplejsonpbtn"                                                                                        // 10075
      ng-click="updateModel('JSONP',                                                                                   // 10076
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">                      // 10077
      Sample JSONP                                                                                                     // 10078
    </button>                                                                                                          // 10079
    <button id="invalidjsonpbtn"                                                                                       // 10080
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">                     // 10081
        Invalid JSONP                                                                                                  // 10082
      </button>                                                                                                        // 10083
    <pre>http status code: {{status}}</pre>                                                                            // 10084
    <pre>http response data: {{data}}</pre>                                                                            // 10085
  </div>                                                                                                               // 10086
</file>                                                                                                                // 10087
<file name="script.js">                                                                                                // 10088
  angular.module('httpExample', [])                                                                                    // 10089
    .controller('FetchController', ['$scope', '$http', '$templateCache',                                               // 10090
      function($scope, $http, $templateCache) {                                                                        // 10091
        $scope.method = 'GET';                                                                                         // 10092
        $scope.url = 'http-hello.html';                                                                                // 10093
                                                                                                                       // 10094
        $scope.fetch = function() {                                                                                    // 10095
          $scope.code = null;                                                                                          // 10096
          $scope.response = null;                                                                                      // 10097
                                                                                                                       // 10098
          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).                                      // 10099
            then(function(response) {                                                                                  // 10100
              $scope.status = response.status;                                                                         // 10101
              $scope.data = response.data;                                                                             // 10102
            }, function(response) {                                                                                    // 10103
              $scope.data = response.data || "Request failed";                                                         // 10104
              $scope.status = response.status;                                                                         // 10105
          });                                                                                                          // 10106
        };                                                                                                             // 10107
                                                                                                                       // 10108
        $scope.updateModel = function(method, url) {                                                                   // 10109
          $scope.method = method;                                                                                      // 10110
          $scope.url = url;                                                                                            // 10111
        };                                                                                                             // 10112
      }]);                                                                                                             // 10113
</file>                                                                                                                // 10114
<file name="http-hello.html">                                                                                          // 10115
  Hello, $http!                                                                                                        // 10116
</file>                                                                                                                // 10117
<file name="protractor.js" type="protractor">                                                                          // 10118
  var status = element(by.binding('status'));                                                                          // 10119
  var data = element(by.binding('data'));                                                                              // 10120
  var fetchBtn = element(by.id('fetchbtn'));                                                                           // 10121
  var sampleGetBtn = element(by.id('samplegetbtn'));                                                                   // 10122
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));                                                               // 10123
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));                                                             // 10124
                                                                                                                       // 10125
  it('should make an xhr GET request', function() {                                                                    // 10126
    sampleGetBtn.click();                                                                                              // 10127
    fetchBtn.click();                                                                                                  // 10128
    expect(status.getText()).toMatch('200');                                                                           // 10129
    expect(data.getText()).toMatch(/Hello, \$http!/);                                                                  // 10130
  });                                                                                                                  // 10131
                                                                                                                       // 10132
// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185                                  // 10133
// it('should make a JSONP request to angularjs.org', function() {                                                     // 10134
//   sampleJsonpBtn.click();                                                                                           // 10135
//   fetchBtn.click();                                                                                                 // 10136
//   expect(status.getText()).toMatch('200');                                                                          // 10137
//   expect(data.getText()).toMatch(/Super Hero!/);                                                                    // 10138
// });                                                                                                                 // 10139
                                                                                                                       // 10140
  it('should make JSONP request to invalid URL and invoke the error handler',                                          // 10141
      function() {                                                                                                     // 10142
    invalidJsonpBtn.click();                                                                                           // 10143
    fetchBtn.click();                                                                                                  // 10144
    expect(status.getText()).toMatch('0');                                                                             // 10145
    expect(data.getText()).toMatch('Request failed');                                                                  // 10146
  });                                                                                                                  // 10147
</file>                                                                                                                // 10148
</example>                                                                                                             // 10149
     */                                                                                                                // 10150
    function $http(requestConfig) {                                                                                    // 10151
                                                                                                                       // 10152
      if (!angular.isObject(requestConfig)) {                                                                          // 10153
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }                                                                                                                // 10155
                                                                                                                       // 10156
      var config = extend({                                                                                            // 10157
        method: 'get',                                                                                                 // 10158
        transformRequest: defaults.transformRequest,                                                                   // 10159
        transformResponse: defaults.transformResponse,                                                                 // 10160
        paramSerializer: defaults.paramSerializer                                                                      // 10161
      }, requestConfig);                                                                                               // 10162
                                                                                                                       // 10163
      config.headers = mergeHeaders(requestConfig);                                                                    // 10164
      config.method = uppercase(config.method);                                                                        // 10165
      config.paramSerializer = isString(config.paramSerializer) ?                                                      // 10166
        $injector.get(config.paramSerializer) : config.paramSerializer;                                                // 10167
                                                                                                                       // 10168
      var serverRequest = function(config) {                                                                           // 10169
        var headers = config.headers;                                                                                  // 10170
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);          // 10171
                                                                                                                       // 10172
        // strip content-type if data is undefined                                                                     // 10173
        if (isUndefined(reqData)) {                                                                                    // 10174
          forEach(headers, function(value, header) {                                                                   // 10175
            if (lowercase(header) === 'content-type') {                                                                // 10176
                delete headers[header];                                                                                // 10177
            }                                                                                                          // 10178
          });                                                                                                          // 10179
        }                                                                                                              // 10180
                                                                                                                       // 10181
        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {                           // 10182
          config.withCredentials = defaults.withCredentials;                                                           // 10183
        }                                                                                                              // 10184
                                                                                                                       // 10185
        // send request                                                                                                // 10186
        return sendReq(config, reqData).then(transformResponse, transformResponse);                                    // 10187
      };                                                                                                               // 10188
                                                                                                                       // 10189
      var chain = [serverRequest, undefined];                                                                          // 10190
      var promise = $q.when(config);                                                                                   // 10191
                                                                                                                       // 10192
      // apply interceptors                                                                                            // 10193
      forEach(reversedInterceptors, function(interceptor) {                                                            // 10194
        if (interceptor.request || interceptor.requestError) {                                                         // 10195
          chain.unshift(interceptor.request, interceptor.requestError);                                                // 10196
        }                                                                                                              // 10197
        if (interceptor.response || interceptor.responseError) {                                                       // 10198
          chain.push(interceptor.response, interceptor.responseError);                                                 // 10199
        }                                                                                                              // 10200
      });                                                                                                              // 10201
                                                                                                                       // 10202
      while (chain.length) {                                                                                           // 10203
        var thenFn = chain.shift();                                                                                    // 10204
        var rejectFn = chain.shift();                                                                                  // 10205
                                                                                                                       // 10206
        promise = promise.then(thenFn, rejectFn);                                                                      // 10207
      }                                                                                                                // 10208
                                                                                                                       // 10209
      if (useLegacyPromise) {                                                                                          // 10210
        promise.success = function(fn) {                                                                               // 10211
          assertArgFn(fn, 'fn');                                                                                       // 10212
                                                                                                                       // 10213
          promise.then(function(response) {                                                                            // 10214
            fn(response.data, response.status, response.headers, config);                                              // 10215
          });                                                                                                          // 10216
          return promise;                                                                                              // 10217
        };                                                                                                             // 10218
                                                                                                                       // 10219
        promise.error = function(fn) {                                                                                 // 10220
          assertArgFn(fn, 'fn');                                                                                       // 10221
                                                                                                                       // 10222
          promise.then(null, function(response) {                                                                      // 10223
            fn(response.data, response.status, response.headers, config);                                              // 10224
          });                                                                                                          // 10225
          return promise;                                                                                              // 10226
        };                                                                                                             // 10227
      } else {                                                                                                         // 10228
        promise.success = $httpMinErrLegacyFn('success');                                                              // 10229
        promise.error = $httpMinErrLegacyFn('error');                                                                  // 10230
      }                                                                                                                // 10231
                                                                                                                       // 10232
      return promise;                                                                                                  // 10233
                                                                                                                       // 10234
      function transformResponse(response) {                                                                           // 10235
        // make a copy since the response must be cacheable                                                            // 10236
        var resp = extend({}, response);                                                                               // 10237
        if (!response.data) {                                                                                          // 10238
          resp.data = response.data;                                                                                   // 10239
        } else {                                                                                                       // 10240
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);       // 10241
        }                                                                                                              // 10242
        return (isSuccess(response.status))                                                                            // 10243
          ? resp                                                                                                       // 10244
          : $q.reject(resp);                                                                                           // 10245
      }                                                                                                                // 10246
                                                                                                                       // 10247
      function executeHeaderFns(headers, config) {                                                                     // 10248
        var headerContent, processedHeaders = {};                                                                      // 10249
                                                                                                                       // 10250
        forEach(headers, function(headerFn, header) {                                                                  // 10251
          if (isFunction(headerFn)) {                                                                                  // 10252
            headerContent = headerFn(config);                                                                          // 10253
            if (headerContent != null) {                                                                               // 10254
              processedHeaders[header] = headerContent;                                                                // 10255
            }                                                                                                          // 10256
          } else {                                                                                                     // 10257
            processedHeaders[header] = headerFn;                                                                       // 10258
          }                                                                                                            // 10259
        });                                                                                                            // 10260
                                                                                                                       // 10261
        return processedHeaders;                                                                                       // 10262
      }                                                                                                                // 10263
                                                                                                                       // 10264
      function mergeHeaders(config) {                                                                                  // 10265
        var defHeaders = defaults.headers,                                                                             // 10266
            reqHeaders = extend({}, config.headers),                                                                   // 10267
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;                                                      // 10268
                                                                                                                       // 10269
        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);                              // 10270
                                                                                                                       // 10271
        // using for-in instead of forEach to avoid unecessary iteration after header has been found                   // 10272
        defaultHeadersIteration:                                                                                       // 10273
        for (defHeaderName in defHeaders) {                                                                            // 10274
          lowercaseDefHeaderName = lowercase(defHeaderName);                                                           // 10275
                                                                                                                       // 10276
          for (reqHeaderName in reqHeaders) {                                                                          // 10277
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {                                                 // 10278
              continue defaultHeadersIteration;                                                                        // 10279
            }                                                                                                          // 10280
          }                                                                                                            // 10281
                                                                                                                       // 10282
          reqHeaders[defHeaderName] = defHeaders[defHeaderName];                                                       // 10283
        }                                                                                                              // 10284
                                                                                                                       // 10285
        // execute if header value is a function for merged headers                                                    // 10286
        return executeHeaderFns(reqHeaders, shallowCopy(config));                                                      // 10287
      }                                                                                                                // 10288
    }                                                                                                                  // 10289
                                                                                                                       // 10290
    $http.pendingRequests = [];                                                                                        // 10291
                                                                                                                       // 10292
    /**                                                                                                                // 10293
     * @ngdoc method                                                                                                   // 10294
     * @name $http#get                                                                                                 // 10295
     *                                                                                                                 // 10296
     * @description                                                                                                    // 10297
     * Shortcut method to perform `GET` request.                                                                       // 10298
     *                                                                                                                 // 10299
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10300
     * @param {Object=} config Optional configuration object                                                           // 10301
     * @returns {HttpPromise} Future object                                                                            // 10302
     */                                                                                                                // 10303
                                                                                                                       // 10304
    /**                                                                                                                // 10305
     * @ngdoc method                                                                                                   // 10306
     * @name $http#delete                                                                                              // 10307
     *                                                                                                                 // 10308
     * @description                                                                                                    // 10309
     * Shortcut method to perform `DELETE` request.                                                                    // 10310
     *                                                                                                                 // 10311
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10312
     * @param {Object=} config Optional configuration object                                                           // 10313
     * @returns {HttpPromise} Future object                                                                            // 10314
     */                                                                                                                // 10315
                                                                                                                       // 10316
    /**                                                                                                                // 10317
     * @ngdoc method                                                                                                   // 10318
     * @name $http#head                                                                                                // 10319
     *                                                                                                                 // 10320
     * @description                                                                                                    // 10321
     * Shortcut method to perform `HEAD` request.                                                                      // 10322
     *                                                                                                                 // 10323
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10324
     * @param {Object=} config Optional configuration object                                                           // 10325
     * @returns {HttpPromise} Future object                                                                            // 10326
     */                                                                                                                // 10327
                                                                                                                       // 10328
    /**                                                                                                                // 10329
     * @ngdoc method                                                                                                   // 10330
     * @name $http#jsonp                                                                                               // 10331
     *                                                                                                                 // 10332
     * @description                                                                                                    // 10333
     * Shortcut method to perform `JSONP` request.                                                                     // 10334
     *                                                                                                                 // 10335
     * @param {string} url Relative or absolute URL specifying the destination of the request.                         // 10336
     *                     The name of the callback should be the string `JSON_CALLBACK`.                              // 10337
     * @param {Object=} config Optional configuration object                                                           // 10338
     * @returns {HttpPromise} Future object                                                                            // 10339
     */                                                                                                                // 10340
    createShortMethods('get', 'delete', 'head', 'jsonp');                                                              // 10341
                                                                                                                       // 10342
    /**                                                                                                                // 10343
     * @ngdoc method                                                                                                   // 10344
     * @name $http#post                                                                                                // 10345
     *                                                                                                                 // 10346
     * @description                                                                                                    // 10347
     * Shortcut method to perform `POST` request.                                                                      // 10348
     *                                                                                                                 // 10349
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10350
     * @param {*} data Request content                                                                                 // 10351
     * @param {Object=} config Optional configuration object                                                           // 10352
     * @returns {HttpPromise} Future object                                                                            // 10353
     */                                                                                                                // 10354
                                                                                                                       // 10355
    /**                                                                                                                // 10356
     * @ngdoc method                                                                                                   // 10357
     * @name $http#put                                                                                                 // 10358
     *                                                                                                                 // 10359
     * @description                                                                                                    // 10360
     * Shortcut method to perform `PUT` request.                                                                       // 10361
     *                                                                                                                 // 10362
     * @param {string} url Relative or absolute URL specifying the destination of the request                          // 10363
     * @param {*} data Request content                                                                                 // 10364
     * @param {Object=} config Optional configuration object                                                           // 10365
     * @returns {HttpPromise} Future object                                                                            // 10366
     */                                                                                                                // 10367
                                                                                                                       // 10368
     /**                                                                                                               // 10369
      * @ngdoc method                                                                                                  // 10370
      * @name $http#patch                                                                                              // 10371
      *                                                                                                                // 10372
      * @description                                                                                                   // 10373
      * Shortcut method to perform `PATCH` request.                                                                    // 10374
      *                                                                                                                // 10375
      * @param {string} url Relative or absolute URL specifying the destination of the request                         // 10376
      * @param {*} data Request content                                                                                // 10377
      * @param {Object=} config Optional configuration object                                                          // 10378
      * @returns {HttpPromise} Future object                                                                           // 10379
      */                                                                                                               // 10380
    createShortMethodsWithData('post', 'put', 'patch');                                                                // 10381
                                                                                                                       // 10382
        /**                                                                                                            // 10383
         * @ngdoc property                                                                                             // 10384
         * @name $http#defaults                                                                                        // 10385
         *                                                                                                             // 10386
         * @description                                                                                                // 10387
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of                        // 10388
         * default headers, withCredentials as well as request and response transformations.                           // 10389
         *                                                                                                             // 10390
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.                        // 10391
         */                                                                                                            // 10392
    $http.defaults = defaults;                                                                                         // 10393
                                                                                                                       // 10394
                                                                                                                       // 10395
    return $http;                                                                                                      // 10396
                                                                                                                       // 10397
                                                                                                                       // 10398
    function createShortMethods(names) {                                                                               // 10399
      forEach(arguments, function(name) {                                                                              // 10400
        $http[name] = function(url, config) {                                                                          // 10401
          return $http(extend({}, config || {}, {                                                                      // 10402
            method: name,                                                                                              // 10403
            url: url                                                                                                   // 10404
          }));                                                                                                         // 10405
        };                                                                                                             // 10406
      });                                                                                                              // 10407
    }                                                                                                                  // 10408
                                                                                                                       // 10409
                                                                                                                       // 10410
    function createShortMethodsWithData(name) {                                                                        // 10411
      forEach(arguments, function(name) {                                                                              // 10412
        $http[name] = function(url, data, config) {                                                                    // 10413
          return $http(extend({}, config || {}, {                                                                      // 10414
            method: name,                                                                                              // 10415
            url: url,                                                                                                  // 10416
            data: data                                                                                                 // 10417
          }));                                                                                                         // 10418
        };                                                                                                             // 10419
      });                                                                                                              // 10420
    }                                                                                                                  // 10421
                                                                                                                       // 10422
                                                                                                                       // 10423
    /**                                                                                                                // 10424
     * Makes the request.                                                                                              // 10425
     *                                                                                                                 // 10426
     * !!! ACCESSES CLOSURE VARS:                                                                                      // 10427
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests                                   // 10428
     */                                                                                                                // 10429
    function sendReq(config, reqData) {                                                                                // 10430
      var deferred = $q.defer(),                                                                                       // 10431
          promise = deferred.promise,                                                                                  // 10432
          cache,                                                                                                       // 10433
          cachedResp,                                                                                                  // 10434
          reqHeaders = config.headers,                                                                                 // 10435
          url = buildUrl(config.url, config.paramSerializer(config.params));                                           // 10436
                                                                                                                       // 10437
      $http.pendingRequests.push(config);                                                                              // 10438
      promise.then(removePendingReq, removePendingReq);                                                                // 10439
                                                                                                                       // 10440
                                                                                                                       // 10441
      if ((config.cache || defaults.cache) && config.cache !== false &&                                                // 10442
          (config.method === 'GET' || config.method === 'JSONP')) {                                                    // 10443
        cache = isObject(config.cache) ? config.cache                                                                  // 10444
              : isObject(defaults.cache) ? defaults.cache                                                              // 10445
              : defaultCache;                                                                                          // 10446
      }                                                                                                                // 10447
                                                                                                                       // 10448
      if (cache) {                                                                                                     // 10449
        cachedResp = cache.get(url);                                                                                   // 10450
        if (isDefined(cachedResp)) {                                                                                   // 10451
          if (isPromiseLike(cachedResp)) {                                                                             // 10452
            // cached request has already been sent, but there is no response yet                                      // 10453
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);                                       // 10454
          } else {                                                                                                     // 10455
            // serving from cache                                                                                      // 10456
            if (isArray(cachedResp)) {                                                                                 // 10457
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);                 // 10458
            } else {                                                                                                   // 10459
              resolvePromise(cachedResp, 200, {}, 'OK');                                                               // 10460
            }                                                                                                          // 10461
          }                                                                                                            // 10462
        } else {                                                                                                       // 10463
          // put the promise for the non-transformed response into cache as a placeholder                              // 10464
          cache.put(url, promise);                                                                                     // 10465
        }                                                                                                              // 10466
      }                                                                                                                // 10467
                                                                                                                       // 10468
                                                                                                                       // 10469
      // if we won't have the response in cache, set the xsrf headers and                                              // 10470
      // send the request to the backend                                                                               // 10471
      if (isUndefined(cachedResp)) {                                                                                   // 10472
        var xsrfValue = urlIsSameOrigin(config.url)                                                                    // 10473
            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]                                       // 10474
            : undefined;                                                                                               // 10475
        if (xsrfValue) {                                                                                               // 10476
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;                                  // 10477
        }                                                                                                              // 10478
                                                                                                                       // 10479
        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,                                    // 10480
            config.withCredentials, config.responseType);                                                              // 10481
      }                                                                                                                // 10482
                                                                                                                       // 10483
      return promise;                                                                                                  // 10484
                                                                                                                       // 10485
                                                                                                                       // 10486
      /**                                                                                                              // 10487
       * Callback registered to $httpBackend():                                                                        // 10488
       *  - caches the response if desired                                                                             // 10489
       *  - resolves the raw $http promise                                                                             // 10490
       *  - calls $apply                                                                                               // 10491
       */                                                                                                              // 10492
      function done(status, response, headersString, statusText) {                                                     // 10493
        if (cache) {                                                                                                   // 10494
          if (isSuccess(status)) {                                                                                     // 10495
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);                               // 10496
          } else {                                                                                                     // 10497
            // remove promise from the cache                                                                           // 10498
            cache.remove(url);                                                                                         // 10499
          }                                                                                                            // 10500
        }                                                                                                              // 10501
                                                                                                                       // 10502
        function resolveHttpPromise() {                                                                                // 10503
          resolvePromise(response, status, headersString, statusText);                                                 // 10504
        }                                                                                                              // 10505
                                                                                                                       // 10506
        if (useApplyAsync) {                                                                                           // 10507
          $rootScope.$applyAsync(resolveHttpPromise);                                                                  // 10508
        } else {                                                                                                       // 10509
          resolveHttpPromise();                                                                                        // 10510
          if (!$rootScope.$$phase) $rootScope.$apply();                                                                // 10511
        }                                                                                                              // 10512
      }                                                                                                                // 10513
                                                                                                                       // 10514
                                                                                                                       // 10515
      /**                                                                                                              // 10516
       * Resolves the raw $http promise.                                                                               // 10517
       */                                                                                                              // 10518
      function resolvePromise(response, status, headers, statusText) {                                                 // 10519
        // normalize internal statuses to 0                                                                            // 10520
        status = Math.max(status, 0);                                                                                  // 10521
                                                                                                                       // 10522
        (isSuccess(status) ? deferred.resolve : deferred.reject)({                                                     // 10523
          data: response,                                                                                              // 10524
          status: status,                                                                                              // 10525
          headers: headersGetter(headers),                                                                             // 10526
          config: config,                                                                                              // 10527
          statusText: statusText                                                                                       // 10528
        });                                                                                                            // 10529
      }                                                                                                                // 10530
                                                                                                                       // 10531
      function resolvePromiseWithResult(result) {                                                                      // 10532
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);                  // 10533
      }                                                                                                                // 10534
                                                                                                                       // 10535
      function removePendingReq() {                                                                                    // 10536
        var idx = $http.pendingRequests.indexOf(config);                                                               // 10537
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);                                                          // 10538
      }                                                                                                                // 10539
    }                                                                                                                  // 10540
                                                                                                                       // 10541
                                                                                                                       // 10542
    function buildUrl(url, serializedParams) {                                                                         // 10543
      if (serializedParams.length > 0) {                                                                               // 10544
        url += ((url.indexOf('?') == -1) ? '?' : '&') + serializedParams;                                              // 10545
      }                                                                                                                // 10546
      return url;                                                                                                      // 10547
    }                                                                                                                  // 10548
  }];                                                                                                                  // 10549
}                                                                                                                      // 10550
                                                                                                                       // 10551
function createXhr() {                                                                                                 // 10552
    return new window.XMLHttpRequest();                                                                                // 10553
}                                                                                                                      // 10554
                                                                                                                       // 10555
/**                                                                                                                    // 10556
 * @ngdoc service                                                                                                      // 10557
 * @name $httpBackend                                                                                                  // 10558
 * @requires $window                                                                                                   // 10559
 * @requires $document                                                                                                 // 10560
 *                                                                                                                     // 10561
 * @description                                                                                                        // 10562
 * HTTP backend used by the {@link ng.$http service} that delegates to                                                 // 10563
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.                                            // 10564
 *                                                                                                                     // 10565
 * You should never need to use this service directly, instead use the higher-level abstractions:                      // 10566
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.                                                   // 10567
 *                                                                                                                     // 10568
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock                                  // 10569
 * $httpBackend} which can be trained with responses.                                                                  // 10570
 */                                                                                                                    // 10571
function $HttpBackendProvider() {                                                                                      // 10572
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {                            // 10573
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);            // 10574
  }];                                                                                                                  // 10575
}                                                                                                                      // 10576
                                                                                                                       // 10577
function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {                               // 10578
  // TODO(vojta): fix the signature                                                                                    // 10579
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {                      // 10580
    $browser.$$incOutstandingRequestCount();                                                                           // 10581
    url = url || $browser.url();                                                                                       // 10582
                                                                                                                       // 10583
    if (lowercase(method) == 'jsonp') {                                                                                // 10584
      var callbackId = '_' + (callbacks.counter++).toString(36);                                                       // 10585
      callbacks[callbackId] = function(data) {                                                                         // 10586
        callbacks[callbackId].data = data;                                                                             // 10587
        callbacks[callbackId].called = true;                                                                           // 10588
      };                                                                                                               // 10589
                                                                                                                       // 10590
      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),                        // 10591
          callbackId, function(status, text) {                                                                         // 10592
        completeRequest(callback, status, callbacks[callbackId].data, "", text);                                       // 10593
        callbacks[callbackId] = noop;                                                                                  // 10594
      });                                                                                                              // 10595
    } else {                                                                                                           // 10596
                                                                                                                       // 10597
      var xhr = createXhr();                                                                                           // 10598
                                                                                                                       // 10599
      xhr.open(method, url, true);                                                                                     // 10600
      forEach(headers, function(value, key) {                                                                          // 10601
        if (isDefined(value)) {                                                                                        // 10602
            xhr.setRequestHeader(key, value);                                                                          // 10603
        }                                                                                                              // 10604
      });                                                                                                              // 10605
                                                                                                                       // 10606
      xhr.onload = function requestLoaded() {                                                                          // 10607
        var statusText = xhr.statusText || '';                                                                         // 10608
                                                                                                                       // 10609
        // responseText is the old-school way of retrieving response (supported by IE9)                                // 10610
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)                     // 10611
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;                                          // 10612
                                                                                                                       // 10613
        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)                                                      // 10614
        var status = xhr.status === 1223 ? 204 : xhr.status;                                                           // 10615
                                                                                                                       // 10616
        // fix status code when it is 0 (0 status is undocumented).                                                    // 10617
        // Occurs when accessing file resources or on Android 4.1 stock browser                                        // 10618
        // while retrieving files from application cache.                                                              // 10619
        if (status === 0) {                                                                                            // 10620
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;                                      // 10621
        }                                                                                                              // 10622
                                                                                                                       // 10623
        completeRequest(callback,                                                                                      // 10624
            status,                                                                                                    // 10625
            response,                                                                                                  // 10626
            xhr.getAllResponseHeaders(),                                                                               // 10627
            statusText);                                                                                               // 10628
      };                                                                                                               // 10629
                                                                                                                       // 10630
      var requestError = function() {                                                                                  // 10631
        // The response is always empty                                                                                // 10632
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');                                                                 // 10634
      };                                                                                                               // 10635
                                                                                                                       // 10636
      xhr.onerror = requestError;                                                                                      // 10637
      xhr.onabort = requestError;                                                                                      // 10638
                                                                                                                       // 10639
      if (withCredentials) {                                                                                           // 10640
        xhr.withCredentials = true;                                                                                    // 10641
      }                                                                                                                // 10642
                                                                                                                       // 10643
      if (responseType) {                                                                                              // 10644
        try {                                                                                                          // 10645
          xhr.responseType = responseType;                                                                             // 10646
        } catch (e) {                                                                                                  // 10647
          // WebKit added support for the json responseType value on 09/03/2013                                        // 10648
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are                          // 10649
          // known to throw when setting the value "json" as the response type. Other older                            // 10650
          // browsers implementing the responseType                                                                    // 10651
          //                                                                                                           // 10652
          // The json response type can be ignored if not supported, because JSON payloads are                         // 10653
          // parsed on the client-side regardless.                                                                     // 10654
          if (responseType !== 'json') {                                                                               // 10655
            throw e;                                                                                                   // 10656
          }                                                                                                            // 10657
        }                                                                                                              // 10658
      }                                                                                                                // 10659
                                                                                                                       // 10660
      xhr.send(post);                                                                                                  // 10661
    }                                                                                                                  // 10662
                                                                                                                       // 10663
    if (timeout > 0) {                                                                                                 // 10664
      var timeoutId = $browserDefer(timeoutRequest, timeout);                                                          // 10665
    } else if (isPromiseLike(timeout)) {                                                                               // 10666
      timeout.then(timeoutRequest);                                                                                    // 10667
    }                                                                                                                  // 10668
                                                                                                                       // 10669
                                                                                                                       // 10670
    function timeoutRequest() {                                                                                        // 10671
      jsonpDone && jsonpDone();                                                                                        // 10672
      xhr && xhr.abort();                                                                                              // 10673
    }                                                                                                                  // 10674
                                                                                                                       // 10675
    function completeRequest(callback, status, response, headersString, statusText) {                                  // 10676
      // cancel timeout and subsequent timeout promise resolution                                                      // 10677
      if (timeoutId !== undefined) {                                                                                   // 10678
        $browserDefer.cancel(timeoutId);                                                                               // 10679
      }                                                                                                                // 10680
      jsonpDone = xhr = null;                                                                                          // 10681
                                                                                                                       // 10682
      callback(status, response, headersString, statusText);                                                           // 10683
      $browser.$$completeOutstandingRequest(noop);                                                                     // 10684
    }                                                                                                                  // 10685
  };                                                                                                                   // 10686
                                                                                                                       // 10687
  function jsonpReq(url, callbackId, done) {                                                                           // 10688
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:                     // 10689
    // - fetches local scripts via XHR and evals them                                                                  // 10690
    // - adds and immediately removes script elements from the document                                                // 10691
    var script = rawDocument.createElement('script'), callback = null;                                                 // 10692
    script.type = "text/javascript";                                                                                   // 10693
    script.src = url;                                                                                                  // 10694
    script.async = true;                                                                                               // 10695
                                                                                                                       // 10696
    callback = function(event) {                                                                                       // 10697
      removeEventListenerFn(script, "load", callback);                                                                 // 10698
      removeEventListenerFn(script, "error", callback);                                                                // 10699
      rawDocument.body.removeChild(script);                                                                            // 10700
      script = null;                                                                                                   // 10701
      var status = -1;                                                                                                 // 10702
      var text = "unknown";                                                                                            // 10703
                                                                                                                       // 10704
      if (event) {                                                                                                     // 10705
        if (event.type === "load" && !callbacks[callbackId].called) {                                                  // 10706
          event = { type: "error" };                                                                                   // 10707
        }                                                                                                              // 10708
        text = event.type;                                                                                             // 10709
        status = event.type === "error" ? 404 : 200;                                                                   // 10710
      }                                                                                                                // 10711
                                                                                                                       // 10712
      if (done) {                                                                                                      // 10713
        done(status, text);                                                                                            // 10714
      }                                                                                                                // 10715
    };                                                                                                                 // 10716
                                                                                                                       // 10717
    addEventListenerFn(script, "load", callback);                                                                      // 10718
    addEventListenerFn(script, "error", callback);                                                                     // 10719
    rawDocument.body.appendChild(script);                                                                              // 10720
    return callback;                                                                                                   // 10721
  }                                                                                                                    // 10722
}                                                                                                                      // 10723
                                                                                                                       // 10724
var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');                                          // 10725
$interpolateMinErr.throwNoconcat = function(text) {                                                                    // 10726
  throw $interpolateMinErr('noconcat',                                                                                 // 10727
      "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +                                        // 10728
      "interpolations that concatenate multiple expressions when a trusted value is " +                                // 10729
      "required.  See http://docs.angularjs.org/api/ng.$sce", text);                                                   // 10730
};                                                                                                                     // 10731
                                                                                                                       // 10732
$interpolateMinErr.interr = function(text, err) {                                                                      // 10733
  return $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text, err.toString());                            // 10734
};                                                                                                                     // 10735
                                                                                                                       // 10736
/**                                                                                                                    // 10737
 * @ngdoc provider                                                                                                     // 10738
 * @name $interpolateProvider                                                                                          // 10739
 *                                                                                                                     // 10740
 * @description                                                                                                        // 10741
 *                                                                                                                     // 10742
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.                                           // 10743
 *                                                                                                                     // 10744
 * @example                                                                                                            // 10745
<example module="customInterpolationApp">                                                                              // 10746
<file name="index.html">                                                                                               // 10747
<script>                                                                                                               // 10748
  var customInterpolationApp = angular.module('customInterpolationApp', []);                                           // 10749
                                                                                                                       // 10750
  customInterpolationApp.config(function($interpolateProvider) {                                                       // 10751
    $interpolateProvider.startSymbol('//');                                                                            // 10752
    $interpolateProvider.endSymbol('//');                                                                              // 10753
  });                                                                                                                  // 10754
                                                                                                                       // 10755
                                                                                                                       // 10756
  customInterpolationApp.controller('DemoController', function() {                                                     // 10757
      this.label = "This binding is brought you by // interpolation symbols.";                                         // 10758
  });                                                                                                                  // 10759
</script>                                                                                                              // 10760
<div ng-app="App" ng-controller="DemoController as demo">                                                              // 10761
    //demo.label//                                                                                                     // 10762
</div>                                                                                                                 // 10763
</file>                                                                                                                // 10764
<file name="protractor.js" type="protractor">                                                                          // 10765
  it('should interpolate binding with custom symbols', function() {                                                    // 10766
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });                                                                                                                  // 10768
</file>                                                                                                                // 10769
</example>                                                                                                             // 10770
 */                                                                                                                    // 10771
function $InterpolateProvider() {                                                                                      // 10772
  var startSymbol = '{{';                                                                                              // 10773
  var endSymbol = '}}';                                                                                                // 10774
                                                                                                                       // 10775
  /**                                                                                                                  // 10776
   * @ngdoc method                                                                                                     // 10777
   * @name $interpolateProvider#startSymbol                                                                            // 10778
   * @description                                                                                                      // 10779
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.                                // 10780
   *                                                                                                                   // 10781
   * @param {string=} value new value to set the starting symbol to.                                                   // 10782
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10783
   */                                                                                                                  // 10784
  this.startSymbol = function(value) {                                                                                 // 10785
    if (value) {                                                                                                       // 10786
      startSymbol = value;                                                                                             // 10787
      return this;                                                                                                     // 10788
    } else {                                                                                                           // 10789
      return startSymbol;                                                                                              // 10790
    }                                                                                                                  // 10791
  };                                                                                                                   // 10792
                                                                                                                       // 10793
  /**                                                                                                                  // 10794
   * @ngdoc method                                                                                                     // 10795
   * @name $interpolateProvider#endSymbol                                                                              // 10796
   * @description                                                                                                      // 10797
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                              // 10798
   *                                                                                                                   // 10799
   * @param {string=} value new value to set the ending symbol to.                                                     // 10800
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.                         // 10801
   */                                                                                                                  // 10802
  this.endSymbol = function(value) {                                                                                   // 10803
    if (value) {                                                                                                       // 10804
      endSymbol = value;                                                                                               // 10805
      return this;                                                                                                     // 10806
    } else {                                                                                                           // 10807
      return endSymbol;                                                                                                // 10808
    }                                                                                                                  // 10809
  };                                                                                                                   // 10810
                                                                                                                       // 10811
                                                                                                                       // 10812
  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {                      // 10813
    var startSymbolLength = startSymbol.length,                                                                        // 10814
        endSymbolLength = endSymbol.length,                                                                            // 10815
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),                                       // 10816
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');                                           // 10817
                                                                                                                       // 10818
    function escape(ch) {                                                                                              // 10819
      return '\\\\\\' + ch;                                                                                            // 10820
    }                                                                                                                  // 10821
                                                                                                                       // 10822
    function unescapeText(text) {                                                                                      // 10823
      return text.replace(escapedStartRegexp, startSymbol).                                                            // 10824
        replace(escapedEndRegexp, endSymbol);                                                                          // 10825
    }                                                                                                                  // 10826
                                                                                                                       // 10827
    function stringify(value) {                                                                                        // 10828
      if (value == null) { // null || undefined                                                                        // 10829
        return '';                                                                                                     // 10830
      }                                                                                                                // 10831
      switch (typeof value) {                                                                                          // 10832
        case 'string':                                                                                                 // 10833
          break;                                                                                                       // 10834
        case 'number':                                                                                                 // 10835
          value = '' + value;                                                                                          // 10836
          break;                                                                                                       // 10837
        default:                                                                                                       // 10838
          value = toJson(value);                                                                                       // 10839
      }                                                                                                                // 10840
                                                                                                                       // 10841
      return value;                                                                                                    // 10842
    }                                                                                                                  // 10843
                                                                                                                       // 10844
    /**                                                                                                                // 10845
     * @ngdoc service                                                                                                  // 10846
     * @name $interpolate                                                                                              // 10847
     * @kind function                                                                                                  // 10848
     *                                                                                                                 // 10849
     * @requires $parse                                                                                                // 10850
     * @requires $sce                                                                                                  // 10851
     *                                                                                                                 // 10852
     * @description                                                                                                    // 10853
     *                                                                                                                 // 10854
     * Compiles a string with markup into an interpolation function. This service is used by the                       // 10855
     * HTML {@link ng.$compile $compile} service for data binding. See                                                 // 10856
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the                                        // 10857
     * interpolation markup.                                                                                           // 10858
     *                                                                                                                 // 10859
     *                                                                                                                 // 10860
     * ```js                                                                                                           // 10861
     *   var $interpolate = ...; // injected                                                                           // 10862
     *   var exp = $interpolate('Hello {{name | uppercase}}!');                                                        // 10863
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');                                                       // 10864
     * ```                                                                                                             // 10865
     *                                                                                                                 // 10866
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is                          // 10867
     * `true`, the interpolation function will return `undefined` unless all embedded expressions                      // 10868
     * evaluate to a value other than `undefined`.                                                                     // 10869
     *                                                                                                                 // 10870
     * ```js                                                                                                           // 10871
     *   var $interpolate = ...; // injected                                                                           // 10872
     *   var context = {greeting: 'Hello', name: undefined };                                                          // 10873
     *                                                                                                                 // 10874
     *   // default "forgiving" mode                                                                                   // 10875
     *   var exp = $interpolate('{{greeting}} {{name}}!');                                                             // 10876
     *   expect(exp(context)).toEqual('Hello !');                                                                      // 10877
     *                                                                                                                 // 10878
     *   // "allOrNothing" mode                                                                                        // 10879
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);                                              // 10880
     *   expect(exp(context)).toBeUndefined();                                                                         // 10881
     *   context.name = 'Angular';                                                                                     // 10882
     *   expect(exp(context)).toEqual('Hello Angular!');                                                               // 10883
     * ```                                                                                                             // 10884
     *                                                                                                                 // 10885
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.                      // 10886
     *                                                                                                                 // 10887
     * ####Escaped Interpolation                                                                                       // 10888
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers                     // 10889
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).                 // 10890
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression                 // 10891
     * or binding.                                                                                                     // 10892
     *                                                                                                                 // 10893
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some                      // 10894
     * degree, while also enabling code examples to work without relying on the                                        // 10895
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.                                                     // 10896
     *                                                                                                                 // 10897
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,                  // 10898
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all                // 10899
     * interpolation start/end markers with their escaped counterparts.**                                              // 10900
     *                                                                                                                 // 10901
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered               // 10902
     * output when the $interpolate service processes the text. So, for HTML elements interpolated                     // 10903
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter              // 10904
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,               // 10905
     * this is typically useful only when user-data is used in rendering a template from the server, or                // 10906
     * when otherwise untrusted data is used by a directive.                                                           // 10907
     *                                                                                                                 // 10908
     * <example>                                                                                                       // 10909
     *  <file name="index.html">                                                                                       // 10910
     *    <div ng-init="username='A user'">                                                                            // 10911
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}                  // 10912
     *        </p>                                                                                                     // 10913
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the                             // 10914
     *        application, but fails to accomplish their task, because the server has correctly                        // 10915
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)                      // 10916
     *        characters.</p>                                                                                          // 10917
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed                    // 10918
     *        from the database by an administrator.</p>                                                               // 10919
     *    </div>                                                                                                       // 10920
     *  </file>                                                                                                        // 10921
     * </example>                                                                                                      // 10922
     *                                                                                                                 // 10923
     * @param {string} text The text with markup to interpolate.                                                       // 10924
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have                     // 10925
     *    embedded expression in order to return an interpolation function. Strings with no                            // 10926
     *    embedded expression will return null for the interpolation function.                                         // 10927
     * @param {string=} trustedContext when provided, the returned function passes the interpolated                    // 10928
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,                                 // 10929
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that                        // 10930
     *    provides Strict Contextual Escaping for details.                                                             // 10931
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined                          // 10932
     *    unless all embedded expressions evaluate to a value other than `undefined`.                                  // 10933
     * @returns {function(context)} an interpolation function which is used to compute the                             // 10934
     *    interpolated string. The function has these parameters:                                                      // 10935
     *                                                                                                                 // 10936
     * - `context`: evaluation context for all expressions embedded in the interpolated text                           // 10937
     */                                                                                                                // 10938
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {                                    // 10939
      allOrNothing = !!allOrNothing;                                                                                   // 10940
      var startIndex,                                                                                                  // 10941
          endIndex,                                                                                                    // 10942
          index = 0,                                                                                                   // 10943
          expressions = [],                                                                                            // 10944
          parseFns = [],                                                                                               // 10945
          textLength = text.length,                                                                                    // 10946
          exp,                                                                                                         // 10947
          concat = [],                                                                                                 // 10948
          expressionPositions = [];                                                                                    // 10949
                                                                                                                       // 10950
      while (index < textLength) {                                                                                     // 10951
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&                                                 // 10952
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {                           // 10953
          if (index !== startIndex) {                                                                                  // 10954
            concat.push(unescapeText(text.substring(index, startIndex)));                                              // 10955
          }                                                                                                            // 10956
          exp = text.substring(startIndex + startSymbolLength, endIndex);                                              // 10957
          expressions.push(exp);                                                                                       // 10958
          parseFns.push($parse(exp, parseStringifyInterceptor));                                                       // 10959
          index = endIndex + endSymbolLength;                                                                          // 10960
          expressionPositions.push(concat.length);                                                                     // 10961
          concat.push('');                                                                                             // 10962
        } else {                                                                                                       // 10963
          // we did not find an interpolation, so we have to add the remainder to the separators array                 // 10964
          if (index !== textLength) {                                                                                  // 10965
            concat.push(unescapeText(text.substring(index)));                                                          // 10966
          }                                                                                                            // 10967
          break;                                                                                                       // 10968
        }                                                                                                              // 10969
      }                                                                                                                // 10970
                                                                                                                       // 10971
      // Concatenating expressions makes it hard to reason about whether some combination of                           // 10972
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a                      // 10973
      // single expression be used for iframe[src], object[src], etc., we ensure that the value                        // 10974
      // that's used is assigned or constructed by some JS code somewhere that is more testable or                     // 10975
      // make it obvious that you bound the value to some user controlled value.  This helps reduce                    // 10976
      // the load when auditing for XSS issues.                                                                        // 10977
      if (trustedContext && concat.length > 1) {                                                                       // 10978
          $interpolateMinErr.throwNoconcat(text);                                                                      // 10979
      }                                                                                                                // 10980
                                                                                                                       // 10981
      if (!mustHaveExpression || expressions.length) {                                                                 // 10982
        var compute = function(values) {                                                                               // 10983
          for (var i = 0, ii = expressions.length; i < ii; i++) {                                                      // 10984
            if (allOrNothing && isUndefined(values[i])) return;                                                        // 10985
            concat[expressionPositions[i]] = values[i];                                                                // 10986
          }                                                                                                            // 10987
          return concat.join('');                                                                                      // 10988
        };                                                                                                             // 10989
                                                                                                                       // 10990
        var getValue = function(value) {                                                                               // 10991
          return trustedContext ?                                                                                      // 10992
            $sce.getTrusted(trustedContext, value) :                                                                   // 10993
            $sce.valueOf(value);                                                                                       // 10994
        };                                                                                                             // 10995
                                                                                                                       // 10996
        return extend(function interpolationFn(context) {                                                              // 10997
            var i = 0;                                                                                                 // 10998
            var ii = expressions.length;                                                                               // 10999
            var values = new Array(ii);                                                                                // 11000
                                                                                                                       // 11001
            try {                                                                                                      // 11002
              for (; i < ii; i++) {                                                                                    // 11003
                values[i] = parseFns[i](context);                                                                      // 11004
              }                                                                                                        // 11005
                                                                                                                       // 11006
              return compute(values);                                                                                  // 11007
            } catch (err) {                                                                                            // 11008
              $exceptionHandler($interpolateMinErr.interr(text, err));                                                 // 11009
            }                                                                                                          // 11010
                                                                                                                       // 11011
          }, {                                                                                                         // 11012
          // all of these properties are undocumented for now                                                          // 11013
          exp: text, //just for compatibility with regular watchers created via $watch                                 // 11014
          expressions: expressions,                                                                                    // 11015
          $$watchDelegate: function(scope, listener) {                                                                 // 11016
            var lastValue;                                                                                             // 11017
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {                      // 11018
              var currValue = compute(values);                                                                         // 11019
              if (isFunction(listener)) {                                                                              // 11020
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);                   // 11021
              }                                                                                                        // 11022
              lastValue = currValue;                                                                                   // 11023
            });                                                                                                        // 11024
          }                                                                                                            // 11025
        });                                                                                                            // 11026
      }                                                                                                                // 11027
                                                                                                                       // 11028
      function parseStringifyInterceptor(value) {                                                                      // 11029
        try {                                                                                                          // 11030
          value = getValue(value);                                                                                     // 11031
          return allOrNothing && !isDefined(value) ? value : stringify(value);                                         // 11032
        } catch (err) {                                                                                                // 11033
          $exceptionHandler($interpolateMinErr.interr(text, err));                                                     // 11034
        }                                                                                                              // 11035
      }                                                                                                                // 11036
    }                                                                                                                  // 11037
                                                                                                                       // 11038
                                                                                                                       // 11039
    /**                                                                                                                // 11040
     * @ngdoc method                                                                                                   // 11041
     * @name $interpolate#startSymbol                                                                                  // 11042
     * @description                                                                                                    // 11043
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.                          // 11044
     *                                                                                                                 // 11045
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change                    // 11046
     * the symbol.                                                                                                     // 11047
     *                                                                                                                 // 11048
     * @returns {string} start symbol.                                                                                 // 11049
     */                                                                                                                // 11050
    $interpolate.startSymbol = function() {                                                                            // 11051
      return startSymbol;                                                                                              // 11052
    };                                                                                                                 // 11053
                                                                                                                       // 11054
                                                                                                                       // 11055
    /**                                                                                                                // 11056
     * @ngdoc method                                                                                                   // 11057
     * @name $interpolate#endSymbol                                                                                    // 11058
     * @description                                                                                                    // 11059
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.                            // 11060
     *                                                                                                                 // 11061
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change                        // 11062
     * the symbol.                                                                                                     // 11063
     *                                                                                                                 // 11064
     * @returns {string} end symbol.                                                                                   // 11065
     */                                                                                                                // 11066
    $interpolate.endSymbol = function() {                                                                              // 11067
      return endSymbol;                                                                                                // 11068
    };                                                                                                                 // 11069
                                                                                                                       // 11070
    return $interpolate;                                                                                               // 11071
  }];                                                                                                                  // 11072
}                                                                                                                      // 11073
                                                                                                                       // 11074
function $IntervalProvider() {                                                                                         // 11075
  this.$get = ['$rootScope', '$window', '$q', '$$q',                                                                   // 11076
       function($rootScope,   $window,   $q,   $$q) {                                                                  // 11077
    var intervals = {};                                                                                                // 11078
                                                                                                                       // 11079
                                                                                                                       // 11080
     /**                                                                                                               // 11081
      * @ngdoc service                                                                                                 // 11082
      * @name $interval                                                                                                // 11083
      *                                                                                                                // 11084
      * @description                                                                                                   // 11085
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`                        // 11086
      * milliseconds.                                                                                                  // 11087
      *                                                                                                                // 11088
      * The return value of registering an interval function is a promise. This promise will be                        // 11089
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or                     // 11090
      * run indefinitely if `count` is not defined. The value of the notification will be the                          // 11091
      * number of iterations that have run.                                                                            // 11092
      * To cancel an interval, call `$interval.cancel(promise)`.                                                       // 11093
      *                                                                                                                // 11094
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to                               // 11095
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that                       // 11096
      * time.                                                                                                          // 11097
      *                                                                                                                // 11098
      * <div class="alert alert-warning">                                                                              // 11099
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished                 // 11100
      * with them.  In particular they are not automatically destroyed when a controller's scope or a                  // 11101
      * directive's element are destroyed.                                                                             // 11102
      * You should take this into consideration and make sure to always cancel the interval at the                     // 11103
      * appropriate moment.  See the example below for more details on how and when to do this.                        // 11104
      * </div>                                                                                                         // 11105
      *                                                                                                                // 11106
      * @param {function()} fn A function that should be called repeatedly.                                            // 11107
      * @param {number} delay Number of milliseconds between each function call.                                       // 11108
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat                            // 11109
      *   indefinitely.                                                                                                // 11110
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 11111
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 11112
      * @param {...*=} Pass additional parameters to the executed function.                                            // 11113
      * @returns {promise} A promise which will be notified on each iteration.                                         // 11114
      *                                                                                                                // 11115
      * @example                                                                                                       // 11116
      * <example module="intervalExample">                                                                             // 11117
      * <file name="index.html">                                                                                       // 11118
      *   <script>                                                                                                     // 11119
      *     angular.module('intervalExample', [])                                                                      // 11120
      *       .controller('ExampleController', ['$scope', '$interval',                                                 // 11121
      *         function($scope, $interval) {                                                                          // 11122
      *           $scope.format = 'M/d/yy h:mm:ss a';                                                                  // 11123
      *           $scope.blood_1 = 100;                                                                                // 11124
      *           $scope.blood_2 = 120;                                                                                // 11125
      *                                                                                                                // 11126
      *           var stop;                                                                                            // 11127
      *           $scope.fight = function() {                                                                          // 11128
      *             // Don't start a new fight if we are already fighting                                              // 11129
      *             if ( angular.isDefined(stop) ) return;                                                             // 11130
      *                                                                                                                // 11131
      *             stop = $interval(function() {                                                                      // 11132
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {                                                  // 11133
      *                 $scope.blood_1 = $scope.blood_1 - 3;                                                           // 11134
      *                 $scope.blood_2 = $scope.blood_2 - 4;                                                           // 11135
      *               } else {                                                                                         // 11136
      *                 $scope.stopFight();                                                                            // 11137
      *               }                                                                                                // 11138
      *             }, 100);                                                                                           // 11139
      *           };                                                                                                   // 11140
      *                                                                                                                // 11141
      *           $scope.stopFight = function() {                                                                      // 11142
      *             if (angular.isDefined(stop)) {                                                                     // 11143
      *               $interval.cancel(stop);                                                                          // 11144
      *               stop = undefined;                                                                                // 11145
      *             }                                                                                                  // 11146
      *           };                                                                                                   // 11147
      *                                                                                                                // 11148
      *           $scope.resetFight = function() {                                                                     // 11149
      *             $scope.blood_1 = 100;                                                                              // 11150
      *             $scope.blood_2 = 120;                                                                              // 11151
      *           };                                                                                                   // 11152
      *                                                                                                                // 11153
      *           $scope.$on('$destroy', function() {                                                                  // 11154
      *             // Make sure that the interval is destroyed too                                                    // 11155
      *             $scope.stopFight();                                                                                // 11156
      *           });                                                                                                  // 11157
      *         }])                                                                                                    // 11158
      *       // Register the 'myCurrentTime' directive factory method.                                                // 11159
      *       // We inject $interval and dateFilter service since the factory method is DI.                            // 11160
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',                                                  // 11161
      *         function($interval, dateFilter) {                                                                      // 11162
      *           // return the directive link function. (compile function not needed)                                 // 11163
      *           return function(scope, element, attrs) {                                                             // 11164
      *             var format,  // date format                                                                        // 11165
      *                 stopTime; // so that we can cancel the time updates                                            // 11166
      *                                                                                                                // 11167
      *             // used to update the UI                                                                           // 11168
      *             function updateTime() {                                                                            // 11169
      *               element.text(dateFilter(new Date(), format));                                                    // 11170
      *             }                                                                                                  // 11171
      *                                                                                                                // 11172
      *             // watch the expression, and update the UI on change.                                              // 11173
      *             scope.$watch(attrs.myCurrentTime, function(value) {                                                // 11174
      *               format = value;                                                                                  // 11175
      *               updateTime();                                                                                    // 11176
      *             });                                                                                                // 11177
      *                                                                                                                // 11178
      *             stopTime = $interval(updateTime, 1000);                                                            // 11179
      *                                                                                                                // 11180
      *             // listen on DOM destroy (removal) event, and cancel the next UI update                            // 11181
      *             // to prevent updating time after the DOM element was removed.                                     // 11182
      *             element.on('$destroy', function() {                                                                // 11183
      *               $interval.cancel(stopTime);                                                                      // 11184
      *             });                                                                                                // 11185
      *           }                                                                                                    // 11186
      *         }]);                                                                                                   // 11187
      *   </script>                                                                                                    // 11188
      *                                                                                                                // 11189
      *   <div>                                                                                                        // 11190
      *     <div ng-controller="ExampleController">                                                                    // 11191
      *       <label>Date format: <input ng-model="format"></label> <hr/>                                              // 11192
      *       Current time is: <span my-current-time="format"></span>                                                  // 11193
      *       <hr/>                                                                                                    // 11194
      *       Blood 1 : <font color='red'>{{blood_1}}</font>                                                           // 11195
      *       Blood 2 : <font color='red'>{{blood_2}}</font>                                                           // 11196
      *       <button type="button" data-ng-click="fight()">Fight</button>                                             // 11197
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>                                     // 11198
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>                                   // 11199
      *     </div>                                                                                                     // 11200
      *   </div>                                                                                                       // 11201
      *                                                                                                                // 11202
      * </file>                                                                                                        // 11203
      * </example>                                                                                                     // 11204
      */                                                                                                               // 11205
    function interval(fn, delay, count, invokeApply) {                                                                 // 11206
      var hasParams = arguments.length > 4,                                                                            // 11207
          args = hasParams ? sliceArgs(arguments, 4) : [],                                                             // 11208
          setInterval = $window.setInterval,                                                                           // 11209
          clearInterval = $window.clearInterval,                                                                       // 11210
          iteration = 0,                                                                                               // 11211
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 11212
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 11213
          promise = deferred.promise;                                                                                  // 11214
                                                                                                                       // 11215
      count = isDefined(count) ? count : 0;                                                                            // 11216
                                                                                                                       // 11217
      promise.then(null, null, (!hasParams) ? fn : function() {                                                        // 11218
        fn.apply(null, args);                                                                                          // 11219
      });                                                                                                              // 11220
                                                                                                                       // 11221
      promise.$$intervalId = setInterval(function tick() {                                                             // 11222
        deferred.notify(iteration++);                                                                                  // 11223
                                                                                                                       // 11224
        if (count > 0 && iteration >= count) {                                                                         // 11225
          deferred.resolve(iteration);                                                                                 // 11226
          clearInterval(promise.$$intervalId);                                                                         // 11227
          delete intervals[promise.$$intervalId];                                                                      // 11228
        }                                                                                                              // 11229
                                                                                                                       // 11230
        if (!skipApply) $rootScope.$apply();                                                                           // 11231
                                                                                                                       // 11232
      }, delay);                                                                                                       // 11233
                                                                                                                       // 11234
      intervals[promise.$$intervalId] = deferred;                                                                      // 11235
                                                                                                                       // 11236
      return promise;                                                                                                  // 11237
    }                                                                                                                  // 11238
                                                                                                                       // 11239
                                                                                                                       // 11240
     /**                                                                                                               // 11241
      * @ngdoc method                                                                                                  // 11242
      * @name $interval#cancel                                                                                         // 11243
      *                                                                                                                // 11244
      * @description                                                                                                   // 11245
      * Cancels a task associated with the `promise`.                                                                  // 11246
      *                                                                                                                // 11247
      * @param {Promise=} promise returned by the `$interval` function.                                                // 11248
      * @returns {boolean} Returns `true` if the task was successfully canceled.                                       // 11249
      */                                                                                                               // 11250
    interval.cancel = function(promise) {                                                                              // 11251
      if (promise && promise.$$intervalId in intervals) {                                                              // 11252
        intervals[promise.$$intervalId].reject('canceled');                                                            // 11253
        $window.clearInterval(promise.$$intervalId);                                                                   // 11254
        delete intervals[promise.$$intervalId];                                                                        // 11255
        return true;                                                                                                   // 11256
      }                                                                                                                // 11257
      return false;                                                                                                    // 11258
    };                                                                                                                 // 11259
                                                                                                                       // 11260
    return interval;                                                                                                   // 11261
  }];                                                                                                                  // 11262
}                                                                                                                      // 11263
                                                                                                                       // 11264
/**                                                                                                                    // 11265
 * @ngdoc service                                                                                                      // 11266
 * @name $locale                                                                                                       // 11267
 *                                                                                                                     // 11268
 * @description                                                                                                        // 11269
 * $locale service provides localization rules for various Angular components. As of right now the                     // 11270
 * only public api is:                                                                                                 // 11271
 *                                                                                                                     // 11272
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)                                  // 11273
 */                                                                                                                    // 11274
                                                                                                                       // 11275
var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,                                                                    // 11276
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};                                                             // 11277
var $locationMinErr = minErr('$location');                                                                             // 11278
                                                                                                                       // 11279
                                                                                                                       // 11280
/**                                                                                                                    // 11281
 * Encode path using encodeUriSegment, ignoring forward slashes                                                        // 11282
 *                                                                                                                     // 11283
 * @param {string} path Path to encode                                                                                 // 11284
 * @returns {string}                                                                                                   // 11285
 */                                                                                                                    // 11286
function encodePath(path) {                                                                                            // 11287
  var segments = path.split('/'),                                                                                      // 11288
      i = segments.length;                                                                                             // 11289
                                                                                                                       // 11290
  while (i--) {                                                                                                        // 11291
    segments[i] = encodeUriSegment(segments[i]);                                                                       // 11292
  }                                                                                                                    // 11293
                                                                                                                       // 11294
  return segments.join('/');                                                                                           // 11295
}                                                                                                                      // 11296
                                                                                                                       // 11297
function parseAbsoluteUrl(absoluteUrl, locationObj) {                                                                  // 11298
  var parsedUrl = urlResolve(absoluteUrl);                                                                             // 11299
                                                                                                                       // 11300
  locationObj.$$protocol = parsedUrl.protocol;                                                                         // 11301
  locationObj.$$host = parsedUrl.hostname;                                                                             // 11302
  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;                             // 11303
}                                                                                                                      // 11304
                                                                                                                       // 11305
                                                                                                                       // 11306
function parseAppUrl(relativeUrl, locationObj) {                                                                       // 11307
  var prefixed = (relativeUrl.charAt(0) !== '/');                                                                      // 11308
  if (prefixed) {                                                                                                      // 11309
    relativeUrl = '/' + relativeUrl;                                                                                   // 11310
  }                                                                                                                    // 11311
  var match = urlResolve(relativeUrl);                                                                                 // 11312
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?                               // 11313
      match.pathname.substring(1) : match.pathname);                                                                   // 11314
  locationObj.$$search = parseKeyValue(match.search);                                                                  // 11315
  locationObj.$$hash = decodeURIComponent(match.hash);                                                                 // 11316
                                                                                                                       // 11317
  // make sure path starts with '/';                                                                                   // 11318
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {                                                     // 11319
    locationObj.$$path = '/' + locationObj.$$path;                                                                     // 11320
  }                                                                                                                    // 11321
}                                                                                                                      // 11322
                                                                                                                       // 11323
                                                                                                                       // 11324
/**                                                                                                                    // 11325
 *                                                                                                                     // 11326
 * @param {string} begin                                                                                               // 11327
 * @param {string} whole                                                                                               // 11328
 * @returns {string} returns text from whole after begin or undefined if it does not begin with                        // 11329
 *                   expected string.                                                                                  // 11330
 */                                                                                                                    // 11331
function beginsWith(begin, whole) {                                                                                    // 11332
  if (whole.indexOf(begin) === 0) {                                                                                    // 11333
    return whole.substr(begin.length);                                                                                 // 11334
  }                                                                                                                    // 11335
}                                                                                                                      // 11336
                                                                                                                       // 11337
                                                                                                                       // 11338
function stripHash(url) {                                                                                              // 11339
  var index = url.indexOf('#');                                                                                        // 11340
  return index == -1 ? url : url.substr(0, index);                                                                     // 11341
}                                                                                                                      // 11342
                                                                                                                       // 11343
function trimEmptyHash(url) {                                                                                          // 11344
  return url.replace(/(#.+)|#$/, '$1');                                                                                // 11345
}                                                                                                                      // 11346
                                                                                                                       // 11347
                                                                                                                       // 11348
function stripFile(url) {                                                                                              // 11349
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);                                                           // 11350
}                                                                                                                      // 11351
                                                                                                                       // 11352
/* return the server only (scheme://host:port) */                                                                      // 11353
function serverBase(url) {                                                                                             // 11354
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));                                                    // 11355
}                                                                                                                      // 11356
                                                                                                                       // 11357
                                                                                                                       // 11358
/**                                                                                                                    // 11359
 * LocationHtml5Url represents an url                                                                                  // 11360
 * This object is exposed as $location service when HTML5 mode is enabled and supported                                // 11361
 *                                                                                                                     // 11362
 * @constructor                                                                                                        // 11363
 * @param {string} appBase application base URL                                                                        // 11364
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11365
 * @param {string} basePrefix url path prefix                                                                          // 11366
 */                                                                                                                    // 11367
function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {                                                        // 11368
  this.$$html5 = true;                                                                                                 // 11369
  basePrefix = basePrefix || '';                                                                                       // 11370
  parseAbsoluteUrl(appBase, this);                                                                                     // 11371
                                                                                                                       // 11372
                                                                                                                       // 11373
  /**                                                                                                                  // 11374
   * Parse given html5 (regular) url string into properties                                                            // 11375
   * @param {string} url HTML5 url                                                                                     // 11376
   * @private                                                                                                          // 11377
   */                                                                                                                  // 11378
  this.$$parse = function(url) {                                                                                       // 11379
    var pathUrl = beginsWith(appBaseNoFile, url);                                                                      // 11380
    if (!isString(pathUrl)) {                                                                                          // 11381
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,                          // 11382
          appBaseNoFile);                                                                                              // 11383
    }                                                                                                                  // 11384
                                                                                                                       // 11385
    parseAppUrl(pathUrl, this);                                                                                        // 11386
                                                                                                                       // 11387
    if (!this.$$path) {                                                                                                // 11388
      this.$$path = '/';                                                                                               // 11389
    }                                                                                                                  // 11390
                                                                                                                       // 11391
    this.$$compose();                                                                                                  // 11392
  };                                                                                                                   // 11393
                                                                                                                       // 11394
  /**                                                                                                                  // 11395
   * Compose url and update `absUrl` property                                                                          // 11396
   * @private                                                                                                          // 11397
   */                                                                                                                  // 11398
  this.$$compose = function() {                                                                                        // 11399
    var search = toKeyValue(this.$$search),                                                                            // 11400
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11401
                                                                                                                       // 11402
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11403
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'                                  // 11404
  };                                                                                                                   // 11405
                                                                                                                       // 11406
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11407
    if (relHref && relHref[0] === '#') {                                                                               // 11408
      // special case for links to hash fragments:                                                                     // 11409
      // keep the old url and only replace the hash fragment                                                           // 11410
      this.hash(relHref.slice(1));                                                                                     // 11411
      return true;                                                                                                     // 11412
    }                                                                                                                  // 11413
    var appUrl, prevAppUrl;                                                                                            // 11414
    var rewrittenUrl;                                                                                                  // 11415
                                                                                                                       // 11416
    if ((appUrl = beginsWith(appBase, url)) !== undefined) {                                                           // 11417
      prevAppUrl = appUrl;                                                                                             // 11418
      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {                                                   // 11419
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);                                            // 11420
      } else {                                                                                                         // 11421
        rewrittenUrl = appBase + prevAppUrl;                                                                           // 11422
      }                                                                                                                // 11423
    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {                                              // 11424
      rewrittenUrl = appBaseNoFile + appUrl;                                                                           // 11425
    } else if (appBaseNoFile == url + '/') {                                                                           // 11426
      rewrittenUrl = appBaseNoFile;                                                                                    // 11427
    }                                                                                                                  // 11428
    if (rewrittenUrl) {                                                                                                // 11429
      this.$$parse(rewrittenUrl);                                                                                      // 11430
    }                                                                                                                  // 11431
    return !!rewrittenUrl;                                                                                             // 11432
  };                                                                                                                   // 11433
}                                                                                                                      // 11434
                                                                                                                       // 11435
                                                                                                                       // 11436
/**                                                                                                                    // 11437
 * LocationHashbangUrl represents url                                                                                  // 11438
 * This object is exposed as $location service when developer doesn't opt into html5 mode.                             // 11439
 * It also serves as the base class for html5 mode fallback on legacy browsers.                                        // 11440
 *                                                                                                                     // 11441
 * @constructor                                                                                                        // 11442
 * @param {string} appBase application base URL                                                                        // 11443
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11444
 * @param {string} hashPrefix hashbang prefix                                                                          // 11445
 */                                                                                                                    // 11446
function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {                                                     // 11447
                                                                                                                       // 11448
  parseAbsoluteUrl(appBase, this);                                                                                     // 11449
                                                                                                                       // 11450
                                                                                                                       // 11451
  /**                                                                                                                  // 11452
   * Parse given hashbang url into properties                                                                          // 11453
   * @param {string} url Hashbang url                                                                                  // 11454
   * @private                                                                                                          // 11455
   */                                                                                                                  // 11456
  this.$$parse = function(url) {                                                                                       // 11457
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);                                   // 11458
    var withoutHashUrl;                                                                                                // 11459
                                                                                                                       // 11460
    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {                                            // 11461
                                                                                                                       // 11462
      // The rest of the url starts with a hash so we have                                                             // 11463
      // got either a hashbang path or a plain hash fragment                                                           // 11464
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);                                                         // 11465
      if (isUndefined(withoutHashUrl)) {                                                                               // 11466
        // There was no hashbang prefix so we just have a hash fragment                                                // 11467
        withoutHashUrl = withoutBaseUrl;                                                                               // 11468
      }                                                                                                                // 11469
                                                                                                                       // 11470
    } else {                                                                                                           // 11471
      // There was no hashbang path nor hash fragment:                                                                 // 11472
      // If we are in HTML5 mode we use what is left as the path;                                                      // 11473
      // Otherwise we ignore what is left                                                                              // 11474
      if (this.$$html5) {                                                                                              // 11475
        withoutHashUrl = withoutBaseUrl;                                                                               // 11476
      } else {                                                                                                         // 11477
        withoutHashUrl = '';                                                                                           // 11478
        if (isUndefined(withoutBaseUrl)) {                                                                             // 11479
          appBase = url;                                                                                               // 11480
          this.replace();                                                                                              // 11481
        }                                                                                                              // 11482
      }                                                                                                                // 11483
    }                                                                                                                  // 11484
                                                                                                                       // 11485
    parseAppUrl(withoutHashUrl, this);                                                                                 // 11486
                                                                                                                       // 11487
    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);                                        // 11488
                                                                                                                       // 11489
    this.$$compose();                                                                                                  // 11490
                                                                                                                       // 11491
    /*                                                                                                                 // 11492
     * In Windows, on an anchor node on documents loaded from                                                          // 11493
     * the filesystem, the browser will return a pathname                                                              // 11494
     * prefixed with the drive name ('/C:/path') when a                                                                // 11495
     * pathname without a drive is set:                                                                                // 11496
     *  * a.setAttribute('href', '/foo')                                                                               // 11497
     *   * a.pathname === '/C:/foo' //true                                                                             // 11498
     *                                                                                                                 // 11499
     * Inside of Angular, we're always using pathnames that                                                            // 11500
     * do not include drive names for routing.                                                                         // 11501
     */                                                                                                                // 11502
    function removeWindowsDriveName(path, url, base) {                                                                 // 11503
      /*                                                                                                               // 11504
      Matches paths for file protocol on windows,                                                                      // 11505
      such as /C:/foo/bar, and captures only /foo/bar.                                                                 // 11506
      */                                                                                                               // 11507
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;                                                                      // 11508
                                                                                                                       // 11509
      var firstPathSegmentMatch;                                                                                       // 11510
                                                                                                                       // 11511
      //Get the relative path from the input URL.                                                                      // 11512
      if (url.indexOf(base) === 0) {                                                                                   // 11513
        url = url.replace(base, '');                                                                                   // 11514
      }                                                                                                                // 11515
                                                                                                                       // 11516
      // The input URL intentionally contains a first path segment that ends with a colon.                             // 11517
      if (windowsFilePathExp.exec(url)) {                                                                              // 11518
        return path;                                                                                                   // 11519
      }                                                                                                                // 11520
                                                                                                                       // 11521
      firstPathSegmentMatch = windowsFilePathExp.exec(path);                                                           // 11522
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;                                                  // 11523
    }                                                                                                                  // 11524
  };                                                                                                                   // 11525
                                                                                                                       // 11526
  /**                                                                                                                  // 11527
   * Compose hashbang url and update `absUrl` property                                                                 // 11528
   * @private                                                                                                          // 11529
   */                                                                                                                  // 11530
  this.$$compose = function() {                                                                                        // 11531
    var search = toKeyValue(this.$$search),                                                                            // 11532
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11533
                                                                                                                       // 11534
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11535
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');                                             // 11536
  };                                                                                                                   // 11537
                                                                                                                       // 11538
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11539
    if (stripHash(appBase) == stripHash(url)) {                                                                        // 11540
      this.$$parse(url);                                                                                               // 11541
      return true;                                                                                                     // 11542
    }                                                                                                                  // 11543
    return false;                                                                                                      // 11544
  };                                                                                                                   // 11545
}                                                                                                                      // 11546
                                                                                                                       // 11547
                                                                                                                       // 11548
/**                                                                                                                    // 11549
 * LocationHashbangUrl represents url                                                                                  // 11550
 * This object is exposed as $location service when html5 history api is enabled but the browser                       // 11551
 * does not support it.                                                                                                // 11552
 *                                                                                                                     // 11553
 * @constructor                                                                                                        // 11554
 * @param {string} appBase application base URL                                                                        // 11555
 * @param {string} appBaseNoFile application base URL stripped of any filename                                         // 11556
 * @param {string} hashPrefix hashbang prefix                                                                          // 11557
 */                                                                                                                    // 11558
function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {                                              // 11559
  this.$$html5 = true;                                                                                                 // 11560
  LocationHashbangUrl.apply(this, arguments);                                                                          // 11561
                                                                                                                       // 11562
  this.$$parseLinkUrl = function(url, relHref) {                                                                       // 11563
    if (relHref && relHref[0] === '#') {                                                                               // 11564
      // special case for links to hash fragments:                                                                     // 11565
      // keep the old url and only replace the hash fragment                                                           // 11566
      this.hash(relHref.slice(1));                                                                                     // 11567
      return true;                                                                                                     // 11568
    }                                                                                                                  // 11569
                                                                                                                       // 11570
    var rewrittenUrl;                                                                                                  // 11571
    var appUrl;                                                                                                        // 11572
                                                                                                                       // 11573
    if (appBase == stripHash(url)) {                                                                                   // 11574
      rewrittenUrl = url;                                                                                              // 11575
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {                                                            // 11576
      rewrittenUrl = appBase + hashPrefix + appUrl;                                                                    // 11577
    } else if (appBaseNoFile === url + '/') {                                                                          // 11578
      rewrittenUrl = appBaseNoFile;                                                                                    // 11579
    }                                                                                                                  // 11580
    if (rewrittenUrl) {                                                                                                // 11581
      this.$$parse(rewrittenUrl);                                                                                      // 11582
    }                                                                                                                  // 11583
    return !!rewrittenUrl;                                                                                             // 11584
  };                                                                                                                   // 11585
                                                                                                                       // 11586
  this.$$compose = function() {                                                                                        // 11587
    var search = toKeyValue(this.$$search),                                                                            // 11588
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';                                                 // 11589
                                                                                                                       // 11590
    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;                                        // 11591
    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'        // 11592
    this.$$absUrl = appBase + hashPrefix + this.$$url;                                                                 // 11593
  };                                                                                                                   // 11594
                                                                                                                       // 11595
}                                                                                                                      // 11596
                                                                                                                       // 11597
                                                                                                                       // 11598
var locationPrototype = {                                                                                              // 11599
                                                                                                                       // 11600
  /**                                                                                                                  // 11601
   * Are we in html5 mode?                                                                                             // 11602
   * @private                                                                                                          // 11603
   */                                                                                                                  // 11604
  $$html5: false,                                                                                                      // 11605
                                                                                                                       // 11606
  /**                                                                                                                  // 11607
   * Has any change been replacing?                                                                                    // 11608
   * @private                                                                                                          // 11609
   */                                                                                                                  // 11610
  $$replace: false,                                                                                                    // 11611
                                                                                                                       // 11612
  /**                                                                                                                  // 11613
   * @ngdoc method                                                                                                     // 11614
   * @name $location#absUrl                                                                                            // 11615
   *                                                                                                                   // 11616
   * @description                                                                                                      // 11617
   * This method is getter only.                                                                                       // 11618
   *                                                                                                                   // 11619
   * Return full url representation with all segments encoded according to rules specified in                          // 11620
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).                                                                  // 11621
   *                                                                                                                   // 11622
   *                                                                                                                   // 11623
   * ```js                                                                                                             // 11624
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11625
   * var absUrl = $location.absUrl();                                                                                  // 11626
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"                                                           // 11627
   * ```                                                                                                               // 11628
   *                                                                                                                   // 11629
   * @return {string} full url                                                                                         // 11630
   */                                                                                                                  // 11631
  absUrl: locationGetter('$$absUrl'),                                                                                  // 11632
                                                                                                                       // 11633
  /**                                                                                                                  // 11634
   * @ngdoc method                                                                                                     // 11635
   * @name $location#url                                                                                               // 11636
   *                                                                                                                   // 11637
   * @description                                                                                                      // 11638
   * This method is getter / setter.                                                                                   // 11639
   *                                                                                                                   // 11640
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.                                             // 11641
   *                                                                                                                   // 11642
   * Change path, search and hash, when called with parameter and return `$location`.                                  // 11643
   *                                                                                                                   // 11644
   *                                                                                                                   // 11645
   * ```js                                                                                                             // 11646
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11647
   * var url = $location.url();                                                                                        // 11648
   * // => "/some/path?foo=bar&baz=xoxo"                                                                               // 11649
   * ```                                                                                                               // 11650
   *                                                                                                                   // 11651
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)                                          // 11652
   * @return {string} url                                                                                              // 11653
   */                                                                                                                  // 11654
  url: function(url) {                                                                                                 // 11655
    if (isUndefined(url)) {                                                                                            // 11656
      return this.$$url;                                                                                               // 11657
    }                                                                                                                  // 11658
                                                                                                                       // 11659
    var match = PATH_MATCH.exec(url);                                                                                  // 11660
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));                                               // 11661
    if (match[2] || match[1] || url === '') this.search(match[3] || '');                                               // 11662
    this.hash(match[5] || '');                                                                                         // 11663
                                                                                                                       // 11664
    return this;                                                                                                       // 11665
  },                                                                                                                   // 11666
                                                                                                                       // 11667
  /**                                                                                                                  // 11668
   * @ngdoc method                                                                                                     // 11669
   * @name $location#protocol                                                                                          // 11670
   *                                                                                                                   // 11671
   * @description                                                                                                      // 11672
   * This method is getter only.                                                                                       // 11673
   *                                                                                                                   // 11674
   * Return protocol of current url.                                                                                   // 11675
   *                                                                                                                   // 11676
   *                                                                                                                   // 11677
   * ```js                                                                                                             // 11678
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11679
   * var protocol = $location.protocol();                                                                              // 11680
   * // => "http"                                                                                                      // 11681
   * ```                                                                                                               // 11682
   *                                                                                                                   // 11683
   * @return {string} protocol of current url                                                                          // 11684
   */                                                                                                                  // 11685
  protocol: locationGetter('$$protocol'),                                                                              // 11686
                                                                                                                       // 11687
  /**                                                                                                                  // 11688
   * @ngdoc method                                                                                                     // 11689
   * @name $location#host                                                                                              // 11690
   *                                                                                                                   // 11691
   * @description                                                                                                      // 11692
   * This method is getter only.                                                                                       // 11693
   *                                                                                                                   // 11694
   * Return host of current url.                                                                                       // 11695
   *                                                                                                                   // 11696
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *                                                                                                                   // 11698
   *                                                                                                                   // 11699
   * ```js                                                                                                             // 11700
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11701
   * var host = $location.host();                                                                                      // 11702
   * // => "example.com"                                                                                               // 11703
   *                                                                                                                   // 11704
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo                                   // 11705
   * host = $location.host();                                                                                          // 11706
   * // => "example.com"                                                                                               // 11707
   * host = location.host;                                                                                             // 11708
   * // => "example.com:8080"                                                                                          // 11709
   * ```                                                                                                               // 11710
   *                                                                                                                   // 11711
   * @return {string} host of current url.                                                                             // 11712
   */                                                                                                                  // 11713
  host: locationGetter('$$host'),                                                                                      // 11714
                                                                                                                       // 11715
  /**                                                                                                                  // 11716
   * @ngdoc method                                                                                                     // 11717
   * @name $location#port                                                                                              // 11718
   *                                                                                                                   // 11719
   * @description                                                                                                      // 11720
   * This method is getter only.                                                                                       // 11721
   *                                                                                                                   // 11722
   * Return port of current url.                                                                                       // 11723
   *                                                                                                                   // 11724
   *                                                                                                                   // 11725
   * ```js                                                                                                             // 11726
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11727
   * var port = $location.port();                                                                                      // 11728
   * // => 80                                                                                                          // 11729
   * ```                                                                                                               // 11730
   *                                                                                                                   // 11731
   * @return {Number} port                                                                                             // 11732
   */                                                                                                                  // 11733
  port: locationGetter('$$port'),                                                                                      // 11734
                                                                                                                       // 11735
  /**                                                                                                                  // 11736
   * @ngdoc method                                                                                                     // 11737
   * @name $location#path                                                                                              // 11738
   *                                                                                                                   // 11739
   * @description                                                                                                      // 11740
   * This method is getter / setter.                                                                                   // 11741
   *                                                                                                                   // 11742
   * Return path of current url when called without any parameter.                                                     // 11743
   *                                                                                                                   // 11744
   * Change path when called with parameter and return `$location`.                                                    // 11745
   *                                                                                                                   // 11746
   * Note: Path should always begin with forward slash (/), this method will add the forward slash                     // 11747
   * if it is missing.                                                                                                 // 11748
   *                                                                                                                   // 11749
   *                                                                                                                   // 11750
   * ```js                                                                                                             // 11751
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11752
   * var path = $location.path();                                                                                      // 11753
   * // => "/some/path"                                                                                                // 11754
   * ```                                                                                                               // 11755
   *                                                                                                                   // 11756
   * @param {(string|number)=} path New path                                                                           // 11757
   * @return {string} path                                                                                             // 11758
   */                                                                                                                  // 11759
  path: locationGetterSetter('$$path', function(path) {                                                                // 11760
    path = path !== null ? path.toString() : '';                                                                       // 11761
    return path.charAt(0) == '/' ? path : '/' + path;                                                                  // 11762
  }),                                                                                                                  // 11763
                                                                                                                       // 11764
  /**                                                                                                                  // 11765
   * @ngdoc method                                                                                                     // 11766
   * @name $location#search                                                                                            // 11767
   *                                                                                                                   // 11768
   * @description                                                                                                      // 11769
   * This method is getter / setter.                                                                                   // 11770
   *                                                                                                                   // 11771
   * Return search part (as object) of current url when called without any parameter.                                  // 11772
   *                                                                                                                   // 11773
   * Change search part when called with parameter and return `$location`.                                             // 11774
   *                                                                                                                   // 11775
   *                                                                                                                   // 11776
   * ```js                                                                                                             // 11777
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo                                                      // 11778
   * var searchObject = $location.search();                                                                            // 11779
   * // => {foo: 'bar', baz: 'xoxo'}                                                                                   // 11780
   *                                                                                                                   // 11781
   * // set foo to 'yipee'                                                                                             // 11782
   * $location.search('foo', 'yipee');                                                                                 // 11783
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}                                                              // 11784
   * ```                                                                                                               // 11785
   *                                                                                                                   // 11786
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or                      // 11787
   * hash object.                                                                                                      // 11788
   *                                                                                                                   // 11789
   * When called with a single argument the method acts as a setter, setting the `search` component                    // 11790
   * of `$location` to the specified value.                                                                            // 11791
   *                                                                                                                   // 11792
   * If the argument is a hash object containing an array of values, these values will be encoded                      // 11793
   * as duplicate search parameters in the url.                                                                        // 11794
   *                                                                                                                   // 11795
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`   // 11796
   * will override only a single search property.                                                                      // 11797
   *                                                                                                                   // 11798
   * If `paramValue` is an array, it will override the property of the `search` component of                           // 11799
   * `$location` specified via the first argument.                                                                     // 11800
   *                                                                                                                   // 11801
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.                         // 11802
   *                                                                                                                   // 11803
   * If `paramValue` is `true`, the property specified via the first argument will be added with no                    // 11804
   * value nor trailing equal sign.                                                                                    // 11805
   *                                                                                                                   // 11806
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with                   // 11807
   * one or more arguments returns `$location` object itself.                                                          // 11808
   */                                                                                                                  // 11809
  search: function(search, paramValue) {                                                                               // 11810
    switch (arguments.length) {                                                                                        // 11811
      case 0:                                                                                                          // 11812
        return this.$$search;                                                                                          // 11813
      case 1:                                                                                                          // 11814
        if (isString(search) || isNumber(search)) {                                                                    // 11815
          search = search.toString();                                                                                  // 11816
          this.$$search = parseKeyValue(search);                                                                       // 11817
        } else if (isObject(search)) {                                                                                 // 11818
          search = copy(search, {});                                                                                   // 11819
          // remove object undefined or null properties                                                                // 11820
          forEach(search, function(value, key) {                                                                       // 11821
            if (value == null) delete search[key];                                                                     // 11822
          });                                                                                                          // 11823
                                                                                                                       // 11824
          this.$$search = search;                                                                                      // 11825
        } else {                                                                                                       // 11826
          throw $locationMinErr('isrcharg',                                                                            // 11827
              'The first argument of the `$location#search()` call must be a string or an object.');                   // 11828
        }                                                                                                              // 11829
        break;                                                                                                         // 11830
      default:                                                                                                         // 11831
        if (isUndefined(paramValue) || paramValue === null) {                                                          // 11832
          delete this.$$search[search];                                                                                // 11833
        } else {                                                                                                       // 11834
          this.$$search[search] = paramValue;                                                                          // 11835
        }                                                                                                              // 11836
    }                                                                                                                  // 11837
                                                                                                                       // 11838
    this.$$compose();                                                                                                  // 11839
    return this;                                                                                                       // 11840
  },                                                                                                                   // 11841
                                                                                                                       // 11842
  /**                                                                                                                  // 11843
   * @ngdoc method                                                                                                     // 11844
   * @name $location#hash                                                                                              // 11845
   *                                                                                                                   // 11846
   * @description                                                                                                      // 11847
   * This method is getter / setter.                                                                                   // 11848
   *                                                                                                                   // 11849
   * Return hash fragment when called without any parameter.                                                           // 11850
   *                                                                                                                   // 11851
   * Change hash fragment when called with parameter and return `$location`.                                           // 11852
   *                                                                                                                   // 11853
   *                                                                                                                   // 11854
   * ```js                                                                                                             // 11855
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue                                            // 11856
   * var hash = $location.hash();                                                                                      // 11857
   * // => "hashValue"                                                                                                 // 11858
   * ```                                                                                                               // 11859
   *                                                                                                                   // 11860
   * @param {(string|number)=} hash New hash fragment                                                                  // 11861
   * @return {string} hash                                                                                             // 11862
   */                                                                                                                  // 11863
  hash: locationGetterSetter('$$hash', function(hash) {                                                                // 11864
    return hash !== null ? hash.toString() : '';                                                                       // 11865
  }),                                                                                                                  // 11866
                                                                                                                       // 11867
  /**                                                                                                                  // 11868
   * @ngdoc method                                                                                                     // 11869
   * @name $location#replace                                                                                           // 11870
   *                                                                                                                   // 11871
   * @description                                                                                                      // 11872
   * If called, all changes to $location during current `$digest` will be replacing current history                    // 11873
   * record, instead of adding new one.                                                                                // 11874
   */                                                                                                                  // 11875
  replace: function() {                                                                                                // 11876
    this.$$replace = true;                                                                                             // 11877
    return this;                                                                                                       // 11878
  }                                                                                                                    // 11879
};                                                                                                                     // 11880
                                                                                                                       // 11881
forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {                      // 11882
  Location.prototype = Object.create(locationPrototype);                                                               // 11883
                                                                                                                       // 11884
  /**                                                                                                                  // 11885
   * @ngdoc method                                                                                                     // 11886
   * @name $location#state                                                                                             // 11887
   *                                                                                                                   // 11888
   * @description                                                                                                      // 11889
   * This method is getter / setter.                                                                                   // 11890
   *                                                                                                                   // 11891
   * Return the history state object when called without any parameter.                                                // 11892
   *                                                                                                                   // 11893
   * Change the history state object when called with one parameter and return `$location`.                            // 11894
   * The state object is later passed to `pushState` or `replaceState`.                                                // 11895
   *                                                                                                                   // 11896
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting                                 // 11897
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support                       // 11898
   * older browsers (like IE9 or Android < 4.0), don't use this method.                                                // 11899
   *                                                                                                                   // 11900
   * @param {object=} state State object for pushState or replaceState                                                 // 11901
   * @return {object} state                                                                                            // 11902
   */                                                                                                                  // 11903
  Location.prototype.state = function(state) {                                                                         // 11904
    if (!arguments.length) {                                                                                           // 11905
      return this.$$state;                                                                                             // 11906
    }                                                                                                                  // 11907
                                                                                                                       // 11908
    if (Location !== LocationHtml5Url || !this.$$html5) {                                                              // 11909
      throw $locationMinErr('nostate', 'History API state support is available only ' +                                // 11910
        'in HTML5 mode and only in browsers supporting HTML5 History API');                                            // 11911
    }                                                                                                                  // 11912
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`                               // 11913
    // but we're changing the $$state reference to $browser.state() during the $digest                                 // 11914
    // so the modification window is narrow.                                                                           // 11915
    this.$$state = isUndefined(state) ? null : state;                                                                  // 11916
                                                                                                                       // 11917
    return this;                                                                                                       // 11918
  };                                                                                                                   // 11919
});                                                                                                                    // 11920
                                                                                                                       // 11921
                                                                                                                       // 11922
function locationGetter(property) {                                                                                    // 11923
  return function() {                                                                                                  // 11924
    return this[property];                                                                                             // 11925
  };                                                                                                                   // 11926
}                                                                                                                      // 11927
                                                                                                                       // 11928
                                                                                                                       // 11929
function locationGetterSetter(property, preprocess) {                                                                  // 11930
  return function(value) {                                                                                             // 11931
    if (isUndefined(value)) {                                                                                          // 11932
      return this[property];                                                                                           // 11933
    }                                                                                                                  // 11934
                                                                                                                       // 11935
    this[property] = preprocess(value);                                                                                // 11936
    this.$$compose();                                                                                                  // 11937
                                                                                                                       // 11938
    return this;                                                                                                       // 11939
  };                                                                                                                   // 11940
}                                                                                                                      // 11941
                                                                                                                       // 11942
                                                                                                                       // 11943
/**                                                                                                                    // 11944
 * @ngdoc service                                                                                                      // 11945
 * @name $location                                                                                                     // 11946
 *                                                                                                                     // 11947
 * @requires $rootElement                                                                                              // 11948
 *                                                                                                                     // 11949
 * @description                                                                                                        // 11950
 * The $location service parses the URL in the browser address bar (based on the                                       // 11951
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL                              // 11952
 * available to your application. Changes to the URL in the address bar are reflected into                             // 11953
 * $location service and changes to $location are reflected into the browser address bar.                              // 11954
 *                                                                                                                     // 11955
 * **The $location service:**                                                                                          // 11956
 *                                                                                                                     // 11957
 * - Exposes the current URL in the browser address bar, so you can                                                    // 11958
 *   - Watch and observe the URL.                                                                                      // 11959
 *   - Change the URL.                                                                                                 // 11960
 * - Synchronizes the URL with the browser when the user                                                               // 11961
 *   - Changes the address bar.                                                                                        // 11962
 *   - Clicks the back or forward button (or clicks a History link).                                                   // 11963
 *   - Clicks on a link.                                                                                               // 11964
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).                         // 11965
 *                                                                                                                     // 11966
 * For more information see {@link guide/$location Developer Guide: Using $location}                                   // 11967
 */                                                                                                                    // 11968
                                                                                                                       // 11969
/**                                                                                                                    // 11970
 * @ngdoc provider                                                                                                     // 11971
 * @name $locationProvider                                                                                             // 11972
 * @description                                                                                                        // 11973
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.                         // 11974
 */                                                                                                                    // 11975
function $LocationProvider() {                                                                                         // 11976
  var hashPrefix = '',                                                                                                 // 11977
      html5Mode = {                                                                                                    // 11978
        enabled: false,                                                                                                // 11979
        requireBase: true,                                                                                             // 11980
        rewriteLinks: true                                                                                             // 11981
      };                                                                                                               // 11982
                                                                                                                       // 11983
  /**                                                                                                                  // 11984
   * @ngdoc method                                                                                                     // 11985
   * @name $locationProvider#hashPrefix                                                                                // 11986
   * @description                                                                                                      // 11987
   * @param {string=} prefix Prefix for hash part (containing path and search)                                         // 11988
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 11989
   */                                                                                                                  // 11990
  this.hashPrefix = function(prefix) {                                                                                 // 11991
    if (isDefined(prefix)) {                                                                                           // 11992
      hashPrefix = prefix;                                                                                             // 11993
      return this;                                                                                                     // 11994
    } else {                                                                                                           // 11995
      return hashPrefix;                                                                                               // 11996
    }                                                                                                                  // 11997
  };                                                                                                                   // 11998
                                                                                                                       // 11999
  /**                                                                                                                  // 12000
   * @ngdoc method                                                                                                     // 12001
   * @name $locationProvider#html5Mode                                                                                 // 12002
   * @description                                                                                                      // 12003
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.                                    // 12004
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported                     // 12005
   *   properties:                                                                                                     // 12006
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to                     // 12007
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not                    // 12008
   *     support `pushState`.                                                                                          // 12009
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies                        // 12010
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are                     // 12011
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.                    // 12012
   *     See the {@link guide/$location $location guide for more information}                                          // 12013
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,                                 // 12014
   *     enables/disables url rewriting for relative links.                                                            // 12015
   *                                                                                                                   // 12016
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter                       // 12017
   */                                                                                                                  // 12018
  this.html5Mode = function(mode) {                                                                                    // 12019
    if (isBoolean(mode)) {                                                                                             // 12020
      html5Mode.enabled = mode;                                                                                        // 12021
      return this;                                                                                                     // 12022
    } else if (isObject(mode)) {                                                                                       // 12023
                                                                                                                       // 12024
      if (isBoolean(mode.enabled)) {                                                                                   // 12025
        html5Mode.enabled = mode.enabled;                                                                              // 12026
      }                                                                                                                // 12027
                                                                                                                       // 12028
      if (isBoolean(mode.requireBase)) {                                                                               // 12029
        html5Mode.requireBase = mode.requireBase;                                                                      // 12030
      }                                                                                                                // 12031
                                                                                                                       // 12032
      if (isBoolean(mode.rewriteLinks)) {                                                                              // 12033
        html5Mode.rewriteLinks = mode.rewriteLinks;                                                                    // 12034
      }                                                                                                                // 12035
                                                                                                                       // 12036
      return this;                                                                                                     // 12037
    } else {                                                                                                           // 12038
      return html5Mode;                                                                                                // 12039
    }                                                                                                                  // 12040
  };                                                                                                                   // 12041
                                                                                                                       // 12042
  /**                                                                                                                  // 12043
   * @ngdoc event                                                                                                      // 12044
   * @name $location#$locationChangeStart                                                                              // 12045
   * @eventType broadcast on root scope                                                                                // 12046
   * @description                                                                                                      // 12047
   * Broadcasted before a URL will change.                                                                             // 12048
   *                                                                                                                   // 12049
   * This change can be prevented by calling                                                                           // 12050
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more                                // 12051
   * details about event object. Upon successful change                                                                // 12052
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.                                      // 12053
   *                                                                                                                   // 12054
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12055
   * the browser supports the HTML5 History API.                                                                       // 12056
   *                                                                                                                   // 12057
   * @param {Object} angularEvent Synthetic event object.                                                              // 12058
   * @param {string} newUrl New URL                                                                                    // 12059
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12060
   * @param {string=} newState New history state object                                                                // 12061
   * @param {string=} oldState History state object that was before it was changed.                                    // 12062
   */                                                                                                                  // 12063
                                                                                                                       // 12064
  /**                                                                                                                  // 12065
   * @ngdoc event                                                                                                      // 12066
   * @name $location#$locationChangeSuccess                                                                            // 12067
   * @eventType broadcast on root scope                                                                                // 12068
   * @description                                                                                                      // 12069
   * Broadcasted after a URL was changed.                                                                              // 12070
   *                                                                                                                   // 12071
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when                               // 12072
   * the browser supports the HTML5 History API.                                                                       // 12073
   *                                                                                                                   // 12074
   * @param {Object} angularEvent Synthetic event object.                                                              // 12075
   * @param {string} newUrl New URL                                                                                    // 12076
   * @param {string=} oldUrl URL that was before it was changed.                                                       // 12077
   * @param {string=} newState New history state object                                                                // 12078
   * @param {string=} oldState History state object that was before it was changed.                                    // 12079
   */                                                                                                                  // 12080
                                                                                                                       // 12081
  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',                                        // 12082
      function($rootScope, $browser, $sniffer, $rootElement, $window) {                                                // 12083
    var $location,                                                                                                     // 12084
        LocationMode,                                                                                                  // 12085
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''                               // 12086
        initialUrl = $browser.url(),                                                                                   // 12087
        appBase;                                                                                                       // 12088
                                                                                                                       // 12089
    if (html5Mode.enabled) {                                                                                           // 12090
      if (!baseHref && html5Mode.requireBase) {                                                                        // 12091
        throw $locationMinErr('nobase',                                                                                // 12092
          "$location in HTML5 mode requires a <base> tag to be present!");                                             // 12093
      }                                                                                                                // 12094
      appBase = serverBase(initialUrl) + (baseHref || '/');                                                            // 12095
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;                                 // 12096
    } else {                                                                                                           // 12097
      appBase = stripHash(initialUrl);                                                                                 // 12098
      LocationMode = LocationHashbangUrl;                                                                              // 12099
    }                                                                                                                  // 12100
    var appBaseNoFile = stripFile(appBase);                                                                            // 12101
                                                                                                                       // 12102
    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);                                            // 12103
    $location.$$parseLinkUrl(initialUrl, initialUrl);                                                                  // 12104
                                                                                                                       // 12105
    $location.$$state = $browser.state();                                                                              // 12106
                                                                                                                       // 12107
    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;                                                               // 12108
                                                                                                                       // 12109
    function setBrowserUrlWithFallback(url, replace, state) {                                                          // 12110
      var oldUrl = $location.url();                                                                                    // 12111
      var oldState = $location.$$state;                                                                                // 12112
      try {                                                                                                            // 12113
        $browser.url(url, replace, state);                                                                             // 12114
                                                                                                                       // 12115
        // Make sure $location.state() returns referentially identical (not just deeply equal)                         // 12116
        // state object; this makes possible quick checking if the state changed in the digest                         // 12117
        // loop. Checking deep equality would be too expensive.                                                        // 12118
        $location.$$state = $browser.state();                                                                          // 12119
      } catch (e) {                                                                                                    // 12120
        // Restore old values if pushState fails                                                                       // 12121
        $location.url(oldUrl);                                                                                         // 12122
        $location.$$state = oldState;                                                                                  // 12123
                                                                                                                       // 12124
        throw e;                                                                                                       // 12125
      }                                                                                                                // 12126
    }                                                                                                                  // 12127
                                                                                                                       // 12128
    $rootElement.on('click', function(event) {                                                                         // 12129
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)                                  // 12130
      // currently we open nice url link and redirect then                                                             // 12131
                                                                                                                       // 12132
      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;
                                                                                                                       // 12134
      var elm = jqLite(event.target);                                                                                  // 12135
                                                                                                                       // 12136
      // traverse the DOM up to find first A tag                                                                       // 12137
      while (nodeName_(elm[0]) !== 'a') {                                                                              // 12138
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)                   // 12139
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;                                            // 12140
      }                                                                                                                // 12141
                                                                                                                       // 12142
      var absHref = elm.prop('href');                                                                                  // 12143
      // get the actual href attribute - see                                                                           // 12144
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx                                             // 12145
      var relHref = elm.attr('href') || elm.attr('xlink:href');                                                        // 12146
                                                                                                                       // 12147
      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {                                  // 12148
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during                   // 12149
        // an animation.                                                                                               // 12150
        absHref = urlResolve(absHref.animVal).href;                                                                    // 12151
      }                                                                                                                // 12152
                                                                                                                       // 12153
      // Ignore when url is started with javascript: or mailto:                                                        // 12154
      if (IGNORE_URI_REGEXP.test(absHref)) return;                                                                     // 12155
                                                                                                                       // 12156
      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {                                             // 12157
        if ($location.$$parseLinkUrl(absHref, relHref)) {                                                              // 12158
          // We do a preventDefault for all urls that are part of the angular application,                             // 12159
          // in html5mode and also without, so that we are able to abort navigation without                            // 12160
          // getting double entries in the location history.                                                           // 12161
          event.preventDefault();                                                                                      // 12162
          // update location manually                                                                                  // 12163
          if ($location.absUrl() != $browser.url()) {                                                                  // 12164
            $rootScope.$apply();                                                                                       // 12165
            // hack to work around FF6 bug 684208 when scenario runner clicks on links                                 // 12166
            $window.angular['ff-684208-preventDefault'] = true;                                                        // 12167
          }                                                                                                            // 12168
        }                                                                                                              // 12169
      }                                                                                                                // 12170
    });                                                                                                                // 12171
                                                                                                                       // 12172
                                                                                                                       // 12173
    // rewrite hashbang url <> html5 url                                                                               // 12174
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {                                              // 12175
      $browser.url($location.absUrl(), true);                                                                          // 12176
    }                                                                                                                  // 12177
                                                                                                                       // 12178
    var initializing = true;                                                                                           // 12179
                                                                                                                       // 12180
    // update $location when $browser url changes                                                                      // 12181
    $browser.onUrlChange(function(newUrl, newState) {                                                                  // 12182
                                                                                                                       // 12183
      if (isUndefined(beginsWith(appBaseNoFile, newUrl))) {                                                            // 12184
        // If we are navigating outside of the app then force a reload                                                 // 12185
        $window.location.href = newUrl;                                                                                // 12186
        return;                                                                                                        // 12187
      }                                                                                                                // 12188
                                                                                                                       // 12189
      $rootScope.$evalAsync(function() {                                                                               // 12190
        var oldUrl = $location.absUrl();                                                                               // 12191
        var oldState = $location.$$state;                                                                              // 12192
        var defaultPrevented;                                                                                          // 12193
                                                                                                                       // 12194
        $location.$$parse(newUrl);                                                                                     // 12195
        $location.$$state = newState;                                                                                  // 12196
                                                                                                                       // 12197
        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                               // 12198
            newState, oldState).defaultPrevented;                                                                      // 12199
                                                                                                                       // 12200
        // if the location was changed by a `$locationChangeStart` handler then stop                                   // 12201
        // processing this location change                                                                             // 12202
        if ($location.absUrl() !== newUrl) return;                                                                     // 12203
                                                                                                                       // 12204
        if (defaultPrevented) {                                                                                        // 12205
          $location.$$parse(oldUrl);                                                                                   // 12206
          $location.$$state = oldState;                                                                                // 12207
          setBrowserUrlWithFallback(oldUrl, false, oldState);                                                          // 12208
        } else {                                                                                                       // 12209
          initializing = false;                                                                                        // 12210
          afterLocationChange(oldUrl, oldState);                                                                       // 12211
        }                                                                                                              // 12212
      });                                                                                                              // 12213
      if (!$rootScope.$$phase) $rootScope.$digest();                                                                   // 12214
    });                                                                                                                // 12215
                                                                                                                       // 12216
    // update browser                                                                                                  // 12217
    $rootScope.$watch(function $locationWatch() {                                                                      // 12218
      var oldUrl = trimEmptyHash($browser.url());                                                                      // 12219
      var newUrl = trimEmptyHash($location.absUrl());                                                                  // 12220
      var oldState = $browser.state();                                                                                 // 12221
      var currentReplace = $location.$$replace;                                                                        // 12222
      var urlOrStateChanged = oldUrl !== newUrl ||                                                                     // 12223
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);                                     // 12224
                                                                                                                       // 12225
      if (initializing || urlOrStateChanged) {                                                                         // 12226
        initializing = false;                                                                                          // 12227
                                                                                                                       // 12228
        $rootScope.$evalAsync(function() {                                                                             // 12229
          var newUrl = $location.absUrl();                                                                             // 12230
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,                         // 12231
              $location.$$state, oldState).defaultPrevented;                                                           // 12232
                                                                                                                       // 12233
          // if the location was changed by a `$locationChangeStart` handler then stop                                 // 12234
          // processing this location change                                                                           // 12235
          if ($location.absUrl() !== newUrl) return;                                                                   // 12236
                                                                                                                       // 12237
          if (defaultPrevented) {                                                                                      // 12238
            $location.$$parse(oldUrl);                                                                                 // 12239
            $location.$$state = oldState;                                                                              // 12240
          } else {                                                                                                     // 12241
            if (urlOrStateChanged) {                                                                                   // 12242
              setBrowserUrlWithFallback(newUrl, currentReplace,                                                        // 12243
                                        oldState === $location.$$state ? null : $location.$$state);                    // 12244
            }                                                                                                          // 12245
            afterLocationChange(oldUrl, oldState);                                                                     // 12246
          }                                                                                                            // 12247
        });                                                                                                            // 12248
      }                                                                                                                // 12249
                                                                                                                       // 12250
      $location.$$replace = false;                                                                                     // 12251
                                                                                                                       // 12252
      // we don't need to return anything because $evalAsync will make the digest loop dirty when                      // 12253
      // there is a change                                                                                             // 12254
    });                                                                                                                // 12255
                                                                                                                       // 12256
    return $location;                                                                                                  // 12257
                                                                                                                       // 12258
    function afterLocationChange(oldUrl, oldState) {                                                                   // 12259
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,                                      // 12260
        $location.$$state, oldState);                                                                                  // 12261
    }                                                                                                                  // 12262
}];                                                                                                                    // 12263
}                                                                                                                      // 12264
                                                                                                                       // 12265
/**                                                                                                                    // 12266
 * @ngdoc service                                                                                                      // 12267
 * @name $log                                                                                                          // 12268
 * @requires $window                                                                                                   // 12269
 *                                                                                                                     // 12270
 * @description                                                                                                        // 12271
 * Simple service for logging. Default implementation safely writes the message                                        // 12272
 * into the browser's console (if present).                                                                            // 12273
 *                                                                                                                     // 12274
 * The main purpose of this service is to simplify debugging and troubleshooting.                                      // 12275
 *                                                                                                                     // 12276
 * The default is to log `debug` messages. You can use                                                                 // 12277
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.                                                // 12278
 *                                                                                                                     // 12279
 * @example                                                                                                            // 12280
   <example module="logExample">                                                                                       // 12281
     <file name="script.js">                                                                                           // 12282
       angular.module('logExample', [])                                                                                // 12283
         .controller('LogController', ['$scope', '$log', function($scope, $log) {                                      // 12284
           $scope.$log = $log;                                                                                         // 12285
           $scope.message = 'Hello World!';                                                                            // 12286
         }]);                                                                                                          // 12287
     </file>                                                                                                           // 12288
     <file name="index.html">                                                                                          // 12289
       <div ng-controller="LogController">                                                                             // 12290
         <p>Reload this page with open console, enter text and hit the log button...</p>                               // 12291
         <label>Message:                                                                                               // 12292
         <input type="text" ng-model="message" /></label>                                                              // 12293
         <button ng-click="$log.log(message)">log</button>                                                             // 12294
         <button ng-click="$log.warn(message)">warn</button>                                                           // 12295
         <button ng-click="$log.info(message)">info</button>                                                           // 12296
         <button ng-click="$log.error(message)">error</button>                                                         // 12297
         <button ng-click="$log.debug(message)">debug</button>                                                         // 12298
       </div>                                                                                                          // 12299
     </file>                                                                                                           // 12300
   </example>                                                                                                          // 12301
 */                                                                                                                    // 12302
                                                                                                                       // 12303
/**                                                                                                                    // 12304
 * @ngdoc provider                                                                                                     // 12305
 * @name $logProvider                                                                                                  // 12306
 * @description                                                                                                        // 12307
 * Use the `$logProvider` to configure how the application logs messages                                               // 12308
 */                                                                                                                    // 12309
function $LogProvider() {                                                                                              // 12310
  var debug = true,                                                                                                    // 12311
      self = this;                                                                                                     // 12312
                                                                                                                       // 12313
  /**                                                                                                                  // 12314
   * @ngdoc method                                                                                                     // 12315
   * @name $logProvider#debugEnabled                                                                                   // 12316
   * @description                                                                                                      // 12317
   * @param {boolean=} flag enable or disable debug level messages                                                     // 12318
   * @returns {*} current value if used as getter or itself (chaining) if used as setter                               // 12319
   */                                                                                                                  // 12320
  this.debugEnabled = function(flag) {                                                                                 // 12321
    if (isDefined(flag)) {                                                                                             // 12322
      debug = flag;                                                                                                    // 12323
    return this;                                                                                                       // 12324
    } else {                                                                                                           // 12325
      return debug;                                                                                                    // 12326
    }                                                                                                                  // 12327
  };                                                                                                                   // 12328
                                                                                                                       // 12329
  this.$get = ['$window', function($window) {                                                                          // 12330
    return {                                                                                                           // 12331
      /**                                                                                                              // 12332
       * @ngdoc method                                                                                                 // 12333
       * @name $log#log                                                                                                // 12334
       *                                                                                                               // 12335
       * @description                                                                                                  // 12336
       * Write a log message                                                                                           // 12337
       */                                                                                                              // 12338
      log: consoleLog('log'),                                                                                          // 12339
                                                                                                                       // 12340
      /**                                                                                                              // 12341
       * @ngdoc method                                                                                                 // 12342
       * @name $log#info                                                                                               // 12343
       *                                                                                                               // 12344
       * @description                                                                                                  // 12345
       * Write an information message                                                                                  // 12346
       */                                                                                                              // 12347
      info: consoleLog('info'),                                                                                        // 12348
                                                                                                                       // 12349
      /**                                                                                                              // 12350
       * @ngdoc method                                                                                                 // 12351
       * @name $log#warn                                                                                               // 12352
       *                                                                                                               // 12353
       * @description                                                                                                  // 12354
       * Write a warning message                                                                                       // 12355
       */                                                                                                              // 12356
      warn: consoleLog('warn'),                                                                                        // 12357
                                                                                                                       // 12358
      /**                                                                                                              // 12359
       * @ngdoc method                                                                                                 // 12360
       * @name $log#error                                                                                              // 12361
       *                                                                                                               // 12362
       * @description                                                                                                  // 12363
       * Write an error message                                                                                        // 12364
       */                                                                                                              // 12365
      error: consoleLog('error'),                                                                                      // 12366
                                                                                                                       // 12367
      /**                                                                                                              // 12368
       * @ngdoc method                                                                                                 // 12369
       * @name $log#debug                                                                                              // 12370
       *                                                                                                               // 12371
       * @description                                                                                                  // 12372
       * Write a debug message                                                                                         // 12373
       */                                                                                                              // 12374
      debug: (function() {                                                                                             // 12375
        var fn = consoleLog('debug');                                                                                  // 12376
                                                                                                                       // 12377
        return function() {                                                                                            // 12378
          if (debug) {                                                                                                 // 12379
            fn.apply(self, arguments);                                                                                 // 12380
          }                                                                                                            // 12381
        };                                                                                                             // 12382
      }())                                                                                                             // 12383
    };                                                                                                                 // 12384
                                                                                                                       // 12385
    function formatError(arg) {                                                                                        // 12386
      if (arg instanceof Error) {                                                                                      // 12387
        if (arg.stack) {                                                                                               // 12388
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)                                                 // 12389
              ? 'Error: ' + arg.message + '\n' + arg.stack                                                             // 12390
              : arg.stack;                                                                                             // 12391
        } else if (arg.sourceURL) {                                                                                    // 12392
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;                                                   // 12393
        }                                                                                                              // 12394
      }                                                                                                                // 12395
      return arg;                                                                                                      // 12396
    }                                                                                                                  // 12397
                                                                                                                       // 12398
    function consoleLog(type) {                                                                                        // 12399
      var console = $window.console || {},                                                                             // 12400
          logFn = console[type] || console.log || noop,                                                                // 12401
          hasApply = false;                                                                                            // 12402
                                                                                                                       // 12403
      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.                                       // 12404
      // The reason behind this is that console.log has type "object" in IE8...                                        // 12405
      try {                                                                                                            // 12406
        hasApply = !!logFn.apply;                                                                                      // 12407
      } catch (e) {}                                                                                                   // 12408
                                                                                                                       // 12409
      if (hasApply) {                                                                                                  // 12410
        return function() {                                                                                            // 12411
          var args = [];                                                                                               // 12412
          forEach(arguments, function(arg) {                                                                           // 12413
            args.push(formatError(arg));                                                                               // 12414
          });                                                                                                          // 12415
          return logFn.apply(console, args);                                                                           // 12416
        };                                                                                                             // 12417
      }                                                                                                                // 12418
                                                                                                                       // 12419
      // we are IE which either doesn't have window.console => this is noop and we do nothing,                         // 12420
      // or we are IE where console.log doesn't have apply so we log at least first 2 args                             // 12421
      return function(arg1, arg2) {                                                                                    // 12422
        logFn(arg1, arg2 == null ? '' : arg2);                                                                         // 12423
      };                                                                                                               // 12424
    }                                                                                                                  // 12425
  }];                                                                                                                  // 12426
}                                                                                                                      // 12427
                                                                                                                       // 12428
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 12429
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 12430
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 12431
 *          An approval from 2 Core members with history of modifying      *                                           // 12432
 *                         this file is required.                          *                                           // 12433
 *                                                                         *                                           // 12434
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 12435
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 12436
 *     Or gives undesired access to variables likes document or window?    *                                           // 12437
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 12438
                                                                                                                       // 12439
var $parseMinErr = minErr('$parse');                                                                                   // 12440
                                                                                                                       // 12441
// Sandboxing Angular Expressions                                                                                      // 12442
// ------------------------------                                                                                      // 12443
// Angular expressions are generally considered safe because these expressions only have direct                        // 12444
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by                  // 12445
// obtaining a reference to native JS functions such as the Function constructor.                                      // 12446
//                                                                                                                     // 12447
// As an example, consider the following Angular expression:                                                           // 12448
//                                                                                                                     // 12449
//   {}.toString.constructor('alert("evil JS code")')                                                                  // 12450
//                                                                                                                     // 12451
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits                     // 12452
// against the expression language, but not to prevent exploits that were enabled by exposing                          // 12453
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good                     // 12454
// practice and therefore we are not even trying to protect against interaction with an object                         // 12455
// explicitly exposed in this way.                                                                                     // 12456
//                                                                                                                     // 12457
// In general, it is not possible to access a Window object from an angular expression unless a                        // 12458
// window or some DOM object that has a reference to window is published onto a Scope.                                 // 12459
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to                       // 12460
// native objects.                                                                                                     // 12461
//                                                                                                                     // 12462
// See https://docs.angularjs.org/guide/security                                                                       // 12463
                                                                                                                       // 12464
                                                                                                                       // 12465
function ensureSafeMemberName(name, fullExpression) {                                                                  // 12466
  if (name === "__defineGetter__" || name === "__defineSetter__"                                                       // 12467
      || name === "__lookupGetter__" || name === "__lookupSetter__"                                                    // 12468
      || name === "__proto__") {                                                                                       // 12469
    throw $parseMinErr('isecfld',                                                                                      // 12470
        'Attempting to access a disallowed field in Angular expressions! '                                             // 12471
        + 'Expression: {0}', fullExpression);                                                                          // 12472
  }                                                                                                                    // 12473
  return name;                                                                                                         // 12474
}                                                                                                                      // 12475
                                                                                                                       // 12476
function ensureSafeObject(obj, fullExpression) {                                                                       // 12477
  // nifty check if obj is Function that is fast and works across iframes and other contexts                           // 12478
  if (obj) {                                                                                                           // 12479
    if (obj.constructor === obj) {                                                                                     // 12480
      throw $parseMinErr('isecfn',                                                                                     // 12481
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                // 12482
          fullExpression);                                                                                             // 12483
    } else if (// isWindow(obj)                                                                                        // 12484
        obj.window === obj) {                                                                                          // 12485
      throw $parseMinErr('isecwindow',                                                                                 // 12486
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',                              // 12487
          fullExpression);                                                                                             // 12488
    } else if (// isElement(obj)                                                                                       // 12489
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {                                        // 12490
      throw $parseMinErr('isecdom',                                                                                    // 12491
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',                               // 12492
          fullExpression);                                                                                             // 12493
    } else if (// block Object so that we can't get hold of dangerous Object.* methods                                 // 12494
        obj === Object) {                                                                                              // 12495
      throw $parseMinErr('isecobj',                                                                                    // 12496
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',                                  // 12497
          fullExpression);                                                                                             // 12498
    }                                                                                                                  // 12499
  }                                                                                                                    // 12500
  return obj;                                                                                                          // 12501
}                                                                                                                      // 12502
                                                                                                                       // 12503
var CALL = Function.prototype.call;                                                                                    // 12504
var APPLY = Function.prototype.apply;                                                                                  // 12505
var BIND = Function.prototype.bind;                                                                                    // 12506
                                                                                                                       // 12507
function ensureSafeFunction(obj, fullExpression) {                                                                     // 12508
  if (obj) {                                                                                                           // 12509
    if (obj.constructor === obj) {                                                                                     // 12510
      throw $parseMinErr('isecfn',                                                                                     // 12511
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',                                  // 12512
        fullExpression);                                                                                               // 12513
    } else if (obj === CALL || obj === APPLY || obj === BIND) {                                                        // 12514
      throw $parseMinErr('isecff',                                                                                     // 12515
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',                       // 12516
        fullExpression);                                                                                               // 12517
    }                                                                                                                  // 12518
  }                                                                                                                    // 12519
}                                                                                                                      // 12520
                                                                                                                       // 12521
var OPERATORS = createMap();                                                                                           // 12522
forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};                                     // 12524
                                                                                                                       // 12525
                                                                                                                       // 12526
/////////////////////////////////////////                                                                              // 12527
                                                                                                                       // 12528
                                                                                                                       // 12529
/**                                                                                                                    // 12530
 * @constructor                                                                                                        // 12531
 */                                                                                                                    // 12532
var Lexer = function(options) {                                                                                        // 12533
  this.options = options;                                                                                              // 12534
};                                                                                                                     // 12535
                                                                                                                       // 12536
Lexer.prototype = {                                                                                                    // 12537
  constructor: Lexer,                                                                                                  // 12538
                                                                                                                       // 12539
  lex: function(text) {                                                                                                // 12540
    this.text = text;                                                                                                  // 12541
    this.index = 0;                                                                                                    // 12542
    this.tokens = [];                                                                                                  // 12543
                                                                                                                       // 12544
    while (this.index < this.text.length) {                                                                            // 12545
      var ch = this.text.charAt(this.index);                                                                           // 12546
      if (ch === '"' || ch === "'") {                                                                                  // 12547
        this.readString(ch);                                                                                           // 12548
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {                                      // 12549
        this.readNumber();                                                                                             // 12550
      } else if (this.isIdent(ch)) {                                                                                   // 12551
        this.readIdent();                                                                                              // 12552
      } else if (this.is(ch, '(){}[].,;:?')) {                                                                         // 12553
        this.tokens.push({index: this.index, text: ch});                                                               // 12554
        this.index++;                                                                                                  // 12555
      } else if (this.isWhitespace(ch)) {                                                                              // 12556
        this.index++;                                                                                                  // 12557
      } else {                                                                                                         // 12558
        var ch2 = ch + this.peek();                                                                                    // 12559
        var ch3 = ch2 + this.peek(2);                                                                                  // 12560
        var op1 = OPERATORS[ch];                                                                                       // 12561
        var op2 = OPERATORS[ch2];                                                                                      // 12562
        var op3 = OPERATORS[ch3];                                                                                      // 12563
        if (op1 || op2 || op3) {                                                                                       // 12564
          var token = op3 ? ch3 : (op2 ? ch2 : ch);                                                                    // 12565
          this.tokens.push({index: this.index, text: token, operator: true});                                          // 12566
          this.index += token.length;                                                                                  // 12567
        } else {                                                                                                       // 12568
          this.throwError('Unexpected next character ', this.index, this.index + 1);                                   // 12569
        }                                                                                                              // 12570
      }                                                                                                                // 12571
    }                                                                                                                  // 12572
    return this.tokens;                                                                                                // 12573
  },                                                                                                                   // 12574
                                                                                                                       // 12575
  is: function(ch, chars) {                                                                                            // 12576
    return chars.indexOf(ch) !== -1;                                                                                   // 12577
  },                                                                                                                   // 12578
                                                                                                                       // 12579
  peek: function(i) {                                                                                                  // 12580
    var num = i || 1;                                                                                                  // 12581
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;                         // 12582
  },                                                                                                                   // 12583
                                                                                                                       // 12584
  isNumber: function(ch) {                                                                                             // 12585
    return ('0' <= ch && ch <= '9') && typeof ch === "string";                                                         // 12586
  },                                                                                                                   // 12587
                                                                                                                       // 12588
  isWhitespace: function(ch) {                                                                                         // 12589
    // IE treats non-breaking space as \u00A0                                                                          // 12590
    return (ch === ' ' || ch === '\r' || ch === '\t' ||                                                                // 12591
            ch === '\n' || ch === '\v' || ch === '\u00A0');                                                            // 12592
  },                                                                                                                   // 12593
                                                                                                                       // 12594
  isIdent: function(ch) {                                                                                              // 12595
    return ('a' <= ch && ch <= 'z' ||                                                                                  // 12596
            'A' <= ch && ch <= 'Z' ||                                                                                  // 12597
            '_' === ch || ch === '$');                                                                                 // 12598
  },                                                                                                                   // 12599
                                                                                                                       // 12600
  isExpOperator: function(ch) {                                                                                        // 12601
    return (ch === '-' || ch === '+' || this.isNumber(ch));                                                            // 12602
  },                                                                                                                   // 12603
                                                                                                                       // 12604
  throwError: function(error, start, end) {                                                                            // 12605
    end = end || this.index;                                                                                           // 12606
    var colStr = (isDefined(start)                                                                                     // 12607
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'                          // 12608
            : ' ' + end);                                                                                              // 12609
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',                                 // 12610
        error, colStr, this.text);                                                                                     // 12611
  },                                                                                                                   // 12612
                                                                                                                       // 12613
  readNumber: function() {                                                                                             // 12614
    var number = '';                                                                                                   // 12615
    var start = this.index;                                                                                            // 12616
    while (this.index < this.text.length) {                                                                            // 12617
      var ch = lowercase(this.text.charAt(this.index));                                                                // 12618
      if (ch == '.' || this.isNumber(ch)) {                                                                            // 12619
        number += ch;                                                                                                  // 12620
      } else {                                                                                                         // 12621
        var peekCh = this.peek();                                                                                      // 12622
        if (ch == 'e' && this.isExpOperator(peekCh)) {                                                                 // 12623
          number += ch;                                                                                                // 12624
        } else if (this.isExpOperator(ch) &&                                                                           // 12625
            peekCh && this.isNumber(peekCh) &&                                                                         // 12626
            number.charAt(number.length - 1) == 'e') {                                                                 // 12627
          number += ch;                                                                                                // 12628
        } else if (this.isExpOperator(ch) &&                                                                           // 12629
            (!peekCh || !this.isNumber(peekCh)) &&                                                                     // 12630
            number.charAt(number.length - 1) == 'e') {                                                                 // 12631
          this.throwError('Invalid exponent');                                                                         // 12632
        } else {                                                                                                       // 12633
          break;                                                                                                       // 12634
        }                                                                                                              // 12635
      }                                                                                                                // 12636
      this.index++;                                                                                                    // 12637
    }                                                                                                                  // 12638
    this.tokens.push({                                                                                                 // 12639
      index: start,                                                                                                    // 12640
      text: number,                                                                                                    // 12641
      constant: true,                                                                                                  // 12642
      value: Number(number)                                                                                            // 12643
    });                                                                                                                // 12644
  },                                                                                                                   // 12645
                                                                                                                       // 12646
  readIdent: function() {                                                                                              // 12647
    var start = this.index;                                                                                            // 12648
    while (this.index < this.text.length) {                                                                            // 12649
      var ch = this.text.charAt(this.index);                                                                           // 12650
      if (!(this.isIdent(ch) || this.isNumber(ch))) {                                                                  // 12651
        break;                                                                                                         // 12652
      }                                                                                                                // 12653
      this.index++;                                                                                                    // 12654
    }                                                                                                                  // 12655
    this.tokens.push({                                                                                                 // 12656
      index: start,                                                                                                    // 12657
      text: this.text.slice(start, this.index),                                                                        // 12658
      identifier: true                                                                                                 // 12659
    });                                                                                                                // 12660
  },                                                                                                                   // 12661
                                                                                                                       // 12662
  readString: function(quote) {                                                                                        // 12663
    var start = this.index;                                                                                            // 12664
    this.index++;                                                                                                      // 12665
    var string = '';                                                                                                   // 12666
    var rawString = quote;                                                                                             // 12667
    var escape = false;                                                                                                // 12668
    while (this.index < this.text.length) {                                                                            // 12669
      var ch = this.text.charAt(this.index);                                                                           // 12670
      rawString += ch;                                                                                                 // 12671
      if (escape) {                                                                                                    // 12672
        if (ch === 'u') {                                                                                              // 12673
          var hex = this.text.substring(this.index + 1, this.index + 5);                                               // 12674
          if (!hex.match(/[\da-f]{4}/i)) {                                                                             // 12675
            this.throwError('Invalid unicode escape [\\u' + hex + ']');                                                // 12676
          }                                                                                                            // 12677
          this.index += 4;                                                                                             // 12678
          string += String.fromCharCode(parseInt(hex, 16));                                                            // 12679
        } else {                                                                                                       // 12680
          var rep = ESCAPE[ch];                                                                                        // 12681
          string = string + (rep || ch);                                                                               // 12682
        }                                                                                                              // 12683
        escape = false;                                                                                                // 12684
      } else if (ch === '\\') {                                                                                        // 12685
        escape = true;                                                                                                 // 12686
      } else if (ch === quote) {                                                                                       // 12687
        this.index++;                                                                                                  // 12688
        this.tokens.push({                                                                                             // 12689
          index: start,                                                                                                // 12690
          text: rawString,                                                                                             // 12691
          constant: true,                                                                                              // 12692
          value: string                                                                                                // 12693
        });                                                                                                            // 12694
        return;                                                                                                        // 12695
      } else {                                                                                                         // 12696
        string += ch;                                                                                                  // 12697
      }                                                                                                                // 12698
      this.index++;                                                                                                    // 12699
    }                                                                                                                  // 12700
    this.throwError('Unterminated quote', start);                                                                      // 12701
  }                                                                                                                    // 12702
};                                                                                                                     // 12703
                                                                                                                       // 12704
var AST = function(lexer, options) {                                                                                   // 12705
  this.lexer = lexer;                                                                                                  // 12706
  this.options = options;                                                                                              // 12707
};                                                                                                                     // 12708
                                                                                                                       // 12709
AST.Program = 'Program';                                                                                               // 12710
AST.ExpressionStatement = 'ExpressionStatement';                                                                       // 12711
AST.AssignmentExpression = 'AssignmentExpression';                                                                     // 12712
AST.ConditionalExpression = 'ConditionalExpression';                                                                   // 12713
AST.LogicalExpression = 'LogicalExpression';                                                                           // 12714
AST.BinaryExpression = 'BinaryExpression';                                                                             // 12715
AST.UnaryExpression = 'UnaryExpression';                                                                               // 12716
AST.CallExpression = 'CallExpression';                                                                                 // 12717
AST.MemberExpression = 'MemberExpression';                                                                             // 12718
AST.Identifier = 'Identifier';                                                                                         // 12719
AST.Literal = 'Literal';                                                                                               // 12720
AST.ArrayExpression = 'ArrayExpression';                                                                               // 12721
AST.Property = 'Property';                                                                                             // 12722
AST.ObjectExpression = 'ObjectExpression';                                                                             // 12723
AST.ThisExpression = 'ThisExpression';                                                                                 // 12724
                                                                                                                       // 12725
// Internal use only                                                                                                   // 12726
AST.NGValueParameter = 'NGValueParameter';                                                                             // 12727
                                                                                                                       // 12728
AST.prototype = {                                                                                                      // 12729
  ast: function(text) {                                                                                                // 12730
    this.text = text;                                                                                                  // 12731
    this.tokens = this.lexer.lex(text);                                                                                // 12732
                                                                                                                       // 12733
    var value = this.program();                                                                                        // 12734
                                                                                                                       // 12735
    if (this.tokens.length !== 0) {                                                                                    // 12736
      this.throwError('is an unexpected token', this.tokens[0]);                                                       // 12737
    }                                                                                                                  // 12738
                                                                                                                       // 12739
    return value;                                                                                                      // 12740
  },                                                                                                                   // 12741
                                                                                                                       // 12742
  program: function() {                                                                                                // 12743
    var body = [];                                                                                                     // 12744
    while (true) {                                                                                                     // 12745
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))                                                    // 12746
        body.push(this.expressionStatement());                                                                         // 12747
      if (!this.expect(';')) {                                                                                         // 12748
        return { type: AST.Program, body: body};                                                                       // 12749
      }                                                                                                                // 12750
    }                                                                                                                  // 12751
  },                                                                                                                   // 12752
                                                                                                                       // 12753
  expressionStatement: function() {                                                                                    // 12754
    return { type: AST.ExpressionStatement, expression: this.filterChain() };                                          // 12755
  },                                                                                                                   // 12756
                                                                                                                       // 12757
  filterChain: function() {                                                                                            // 12758
    var left = this.expression();                                                                                      // 12759
    var token;                                                                                                         // 12760
    while ((token = this.expect('|'))) {                                                                               // 12761
      left = this.filter(left);                                                                                        // 12762
    }                                                                                                                  // 12763
    return left;                                                                                                       // 12764
  },                                                                                                                   // 12765
                                                                                                                       // 12766
  expression: function() {                                                                                             // 12767
    return this.assignment();                                                                                          // 12768
  },                                                                                                                   // 12769
                                                                                                                       // 12770
  assignment: function() {                                                                                             // 12771
    var result = this.ternary();                                                                                       // 12772
    if (this.expect('=')) {                                                                                            // 12773
      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};               // 12774
    }                                                                                                                  // 12775
    return result;                                                                                                     // 12776
  },                                                                                                                   // 12777
                                                                                                                       // 12778
  ternary: function() {                                                                                                // 12779
    var test = this.logicalOR();                                                                                       // 12780
    var alternate;                                                                                                     // 12781
    var consequent;                                                                                                    // 12782
    if (this.expect('?')) {                                                                                            // 12783
      alternate = this.expression();                                                                                   // 12784
      if (this.consume(':')) {                                                                                         // 12785
        consequent = this.expression();                                                                                // 12786
        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};           // 12787
      }                                                                                                                // 12788
    }                                                                                                                  // 12789
    return test;                                                                                                       // 12790
  },                                                                                                                   // 12791
                                                                                                                       // 12792
  logicalOR: function() {                                                                                              // 12793
    var left = this.logicalAND();                                                                                      // 12794
    while (this.expect('||')) {                                                                                        // 12795
      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };                    // 12796
    }                                                                                                                  // 12797
    return left;                                                                                                       // 12798
  },                                                                                                                   // 12799
                                                                                                                       // 12800
  logicalAND: function() {                                                                                             // 12801
    var left = this.equality();                                                                                        // 12802
    while (this.expect('&&')) {                                                                                        // 12803
      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};                       // 12804
    }                                                                                                                  // 12805
    return left;                                                                                                       // 12806
  },                                                                                                                   // 12807
                                                                                                                       // 12808
  equality: function() {                                                                                               // 12809
    var left = this.relational();                                                                                      // 12810
    var token;                                                                                                         // 12811
    while ((token = this.expect('==','!=','===','!=='))) {                                                             // 12812
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };               // 12813
    }                                                                                                                  // 12814
    return left;                                                                                                       // 12815
  },                                                                                                                   // 12816
                                                                                                                       // 12817
  relational: function() {                                                                                             // 12818
    var left = this.additive();                                                                                        // 12819
    var token;                                                                                                         // 12820
    while ((token = this.expect('<', '>', '<=', '>='))) {                                                              // 12821
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };                 // 12822
    }                                                                                                                  // 12823
    return left;                                                                                                       // 12824
  },                                                                                                                   // 12825
                                                                                                                       // 12826
  additive: function() {                                                                                               // 12827
    var left = this.multiplicative();                                                                                  // 12828
    var token;                                                                                                         // 12829
    while ((token = this.expect('+','-'))) {                                                                           // 12830
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };           // 12831
    }                                                                                                                  // 12832
    return left;                                                                                                       // 12833
  },                                                                                                                   // 12834
                                                                                                                       // 12835
  multiplicative: function() {                                                                                         // 12836
    var left = this.unary();                                                                                           // 12837
    var token;                                                                                                         // 12838
    while ((token = this.expect('*','/','%'))) {                                                                       // 12839
      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };                    // 12840
    }                                                                                                                  // 12841
    return left;                                                                                                       // 12842
  },                                                                                                                   // 12843
                                                                                                                       // 12844
  unary: function() {                                                                                                  // 12845
    var token;                                                                                                         // 12846
    if ((token = this.expect('+', '-', '!'))) {                                                                        // 12847
      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };                // 12848
    } else {                                                                                                           // 12849
      return this.primary();                                                                                           // 12850
    }                                                                                                                  // 12851
  },                                                                                                                   // 12852
                                                                                                                       // 12853
  primary: function() {                                                                                                // 12854
    var primary;                                                                                                       // 12855
    if (this.expect('(')) {                                                                                            // 12856
      primary = this.filterChain();                                                                                    // 12857
      this.consume(')');                                                                                               // 12858
    } else if (this.expect('[')) {                                                                                     // 12859
      primary = this.arrayDeclaration();                                                                               // 12860
    } else if (this.expect('{')) {                                                                                     // 12861
      primary = this.object();                                                                                         // 12862
    } else if (this.constants.hasOwnProperty(this.peek().text)) {                                                      // 12863
      primary = copy(this.constants[this.consume().text]);                                                             // 12864
    } else if (this.peek().identifier) {                                                                               // 12865
      primary = this.identifier();                                                                                     // 12866
    } else if (this.peek().constant) {                                                                                 // 12867
      primary = this.constant();                                                                                       // 12868
    } else {                                                                                                           // 12869
      this.throwError('not a primary expression', this.peek());                                                        // 12870
    }                                                                                                                  // 12871
                                                                                                                       // 12872
    var next;                                                                                                          // 12873
    while ((next = this.expect('(', '[', '.'))) {                                                                      // 12874
      if (next.text === '(') {                                                                                         // 12875
        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };                      // 12876
        this.consume(')');                                                                                             // 12877
      } else if (next.text === '[') {                                                                                  // 12878
        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };        // 12879
        this.consume(']');                                                                                             // 12880
      } else if (next.text === '.') {                                                                                  // 12881
        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };       // 12882
      } else {                                                                                                         // 12883
        this.throwError('IMPOSSIBLE');                                                                                 // 12884
      }                                                                                                                // 12885
    }                                                                                                                  // 12886
    return primary;                                                                                                    // 12887
  },                                                                                                                   // 12888
                                                                                                                       // 12889
  filter: function(baseExpression) {                                                                                   // 12890
    var args = [baseExpression];                                                                                       // 12891
    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};                 // 12892
                                                                                                                       // 12893
    while (this.expect(':')) {                                                                                         // 12894
      args.push(this.expression());                                                                                    // 12895
    }                                                                                                                  // 12896
                                                                                                                       // 12897
    return result;                                                                                                     // 12898
  },                                                                                                                   // 12899
                                                                                                                       // 12900
  parseArguments: function() {                                                                                         // 12901
    var args = [];                                                                                                     // 12902
    if (this.peekToken().text !== ')') {                                                                               // 12903
      do {                                                                                                             // 12904
        args.push(this.expression());                                                                                  // 12905
      } while (this.expect(','));                                                                                      // 12906
    }                                                                                                                  // 12907
    return args;                                                                                                       // 12908
  },                                                                                                                   // 12909
                                                                                                                       // 12910
  identifier: function() {                                                                                             // 12911
    var token = this.consume();                                                                                        // 12912
    if (!token.identifier) {                                                                                           // 12913
      this.throwError('is not a valid identifier', token);                                                             // 12914
    }                                                                                                                  // 12915
    return { type: AST.Identifier, name: token.text };                                                                 // 12916
  },                                                                                                                   // 12917
                                                                                                                       // 12918
  constant: function() {                                                                                               // 12919
    // TODO check that it is a constant                                                                                // 12920
    return { type: AST.Literal, value: this.consume().value };                                                         // 12921
  },                                                                                                                   // 12922
                                                                                                                       // 12923
  arrayDeclaration: function() {                                                                                       // 12924
    var elements = [];                                                                                                 // 12925
    if (this.peekToken().text !== ']') {                                                                               // 12926
      do {                                                                                                             // 12927
        if (this.peek(']')) {                                                                                          // 12928
          // Support trailing commas per ES5.1.                                                                        // 12929
          break;                                                                                                       // 12930
        }                                                                                                              // 12931
        elements.push(this.expression());                                                                              // 12932
      } while (this.expect(','));                                                                                      // 12933
    }                                                                                                                  // 12934
    this.consume(']');                                                                                                 // 12935
                                                                                                                       // 12936
    return { type: AST.ArrayExpression, elements: elements };                                                          // 12937
  },                                                                                                                   // 12938
                                                                                                                       // 12939
  object: function() {                                                                                                 // 12940
    var properties = [], property;                                                                                     // 12941
    if (this.peekToken().text !== '}') {                                                                               // 12942
      do {                                                                                                             // 12943
        if (this.peek('}')) {                                                                                          // 12944
          // Support trailing commas per ES5.1.                                                                        // 12945
          break;                                                                                                       // 12946
        }                                                                                                              // 12947
        property = {type: AST.Property, kind: 'init'};                                                                 // 12948
        if (this.peek().constant) {                                                                                    // 12949
          property.key = this.constant();                                                                              // 12950
        } else if (this.peek().identifier) {                                                                           // 12951
          property.key = this.identifier();                                                                            // 12952
        } else {                                                                                                       // 12953
          this.throwError("invalid key", this.peek());                                                                 // 12954
        }                                                                                                              // 12955
        this.consume(':');                                                                                             // 12956
        property.value = this.expression();                                                                            // 12957
        properties.push(property);                                                                                     // 12958
      } while (this.expect(','));                                                                                      // 12959
    }                                                                                                                  // 12960
    this.consume('}');                                                                                                 // 12961
                                                                                                                       // 12962
    return {type: AST.ObjectExpression, properties: properties };                                                      // 12963
  },                                                                                                                   // 12964
                                                                                                                       // 12965
  throwError: function(msg, token) {                                                                                   // 12966
    throw $parseMinErr('syntax',                                                                                       // 12967
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',                    // 12968
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));                            // 12969
  },                                                                                                                   // 12970
                                                                                                                       // 12971
  consume: function(e1) {                                                                                              // 12972
    if (this.tokens.length === 0) {                                                                                    // 12973
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 12974
    }                                                                                                                  // 12975
                                                                                                                       // 12976
    var token = this.expect(e1);                                                                                       // 12977
    if (!token) {                                                                                                      // 12978
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());                                           // 12979
    }                                                                                                                  // 12980
    return token;                                                                                                      // 12981
  },                                                                                                                   // 12982
                                                                                                                       // 12983
  peekToken: function() {                                                                                              // 12984
    if (this.tokens.length === 0) {                                                                                    // 12985
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);                                      // 12986
    }                                                                                                                  // 12987
    return this.tokens[0];                                                                                             // 12988
  },                                                                                                                   // 12989
                                                                                                                       // 12990
  peek: function(e1, e2, e3, e4) {                                                                                     // 12991
    return this.peekAhead(0, e1, e2, e3, e4);                                                                          // 12992
  },                                                                                                                   // 12993
                                                                                                                       // 12994
  peekAhead: function(i, e1, e2, e3, e4) {                                                                             // 12995
    if (this.tokens.length > i) {                                                                                      // 12996
      var token = this.tokens[i];                                                                                      // 12997
      var t = token.text;                                                                                              // 12998
      if (t === e1 || t === e2 || t === e3 || t === e4 ||                                                              // 12999
          (!e1 && !e2 && !e3 && !e4)) {                                                                                // 13000
        return token;                                                                                                  // 13001
      }                                                                                                                // 13002
    }                                                                                                                  // 13003
    return false;                                                                                                      // 13004
  },                                                                                                                   // 13005
                                                                                                                       // 13006
  expect: function(e1, e2, e3, e4) {                                                                                   // 13007
    var token = this.peek(e1, e2, e3, e4);                                                                             // 13008
    if (token) {                                                                                                       // 13009
      this.tokens.shift();                                                                                             // 13010
      return token;                                                                                                    // 13011
    }                                                                                                                  // 13012
    return false;                                                                                                      // 13013
  },                                                                                                                   // 13014
                                                                                                                       // 13015
                                                                                                                       // 13016
  /* `undefined` is not a constant, it is an identifier,                                                               // 13017
   * but using it as an identifier is not supported                                                                    // 13018
   */                                                                                                                  // 13019
  constants: {                                                                                                         // 13020
    'true': { type: AST.Literal, value: true },                                                                        // 13021
    'false': { type: AST.Literal, value: false },                                                                      // 13022
    'null': { type: AST.Literal, value: null },                                                                        // 13023
    'undefined': {type: AST.Literal, value: undefined },                                                               // 13024
    'this': {type: AST.ThisExpression }                                                                                // 13025
  }                                                                                                                    // 13026
};                                                                                                                     // 13027
                                                                                                                       // 13028
function ifDefined(v, d) {                                                                                             // 13029
  return typeof v !== 'undefined' ? v : d;                                                                             // 13030
}                                                                                                                      // 13031
                                                                                                                       // 13032
function plusFn(l, r) {                                                                                                // 13033
  if (typeof l === 'undefined') return r;                                                                              // 13034
  if (typeof r === 'undefined') return l;                                                                              // 13035
  return l + r;                                                                                                        // 13036
}                                                                                                                      // 13037
                                                                                                                       // 13038
function isStateless($filter, filterName) {                                                                            // 13039
  var fn = $filter(filterName);                                                                                        // 13040
  return !fn.$stateful;                                                                                                // 13041
}                                                                                                                      // 13042
                                                                                                                       // 13043
function findConstantAndWatchExpressions(ast, $filter) {                                                               // 13044
  var allConstants;                                                                                                    // 13045
  var argsToWatch;                                                                                                     // 13046
  switch (ast.type) {                                                                                                  // 13047
  case AST.Program:                                                                                                    // 13048
    allConstants = true;                                                                                               // 13049
    forEach(ast.body, function(expr) {                                                                                 // 13050
      findConstantAndWatchExpressions(expr.expression, $filter);                                                       // 13051
      allConstants = allConstants && expr.expression.constant;                                                         // 13052
    });                                                                                                                // 13053
    ast.constant = allConstants;                                                                                       // 13054
    break;                                                                                                             // 13055
  case AST.Literal:                                                                                                    // 13056
    ast.constant = true;                                                                                               // 13057
    ast.toWatch = [];                                                                                                  // 13058
    break;                                                                                                             // 13059
  case AST.UnaryExpression:                                                                                            // 13060
    findConstantAndWatchExpressions(ast.argument, $filter);                                                            // 13061
    ast.constant = ast.argument.constant;                                                                              // 13062
    ast.toWatch = ast.argument.toWatch;                                                                                // 13063
    break;                                                                                                             // 13064
  case AST.BinaryExpression:                                                                                           // 13065
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13066
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13067
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13068
    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);                                                          // 13069
    break;                                                                                                             // 13070
  case AST.LogicalExpression:                                                                                          // 13071
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13072
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13073
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13074
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13075
    break;                                                                                                             // 13076
  case AST.ConditionalExpression:                                                                                      // 13077
    findConstantAndWatchExpressions(ast.test, $filter);                                                                // 13078
    findConstantAndWatchExpressions(ast.alternate, $filter);                                                           // 13079
    findConstantAndWatchExpressions(ast.consequent, $filter);                                                          // 13080
    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;                             // 13081
    ast.toWatch = ast.constant ? [] : [ast];                                                                           // 13082
    break;                                                                                                             // 13083
  case AST.Identifier:                                                                                                 // 13084
    ast.constant = false;                                                                                              // 13085
    ast.toWatch = [ast];                                                                                               // 13086
    break;                                                                                                             // 13087
  case AST.MemberExpression:                                                                                           // 13088
    findConstantAndWatchExpressions(ast.object, $filter);                                                              // 13089
    if (ast.computed) {                                                                                                // 13090
      findConstantAndWatchExpressions(ast.property, $filter);                                                          // 13091
    }                                                                                                                  // 13092
    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);                                    // 13093
    ast.toWatch = [ast];                                                                                               // 13094
    break;                                                                                                             // 13095
  case AST.CallExpression:                                                                                             // 13096
    allConstants = ast.filter ? isStateless($filter, ast.callee.name) : false;                                         // 13097
    argsToWatch = [];                                                                                                  // 13098
    forEach(ast.arguments, function(expr) {                                                                            // 13099
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13100
      allConstants = allConstants && expr.constant;                                                                    // 13101
      if (!expr.constant) {                                                                                            // 13102
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13103
      }                                                                                                                // 13104
    });                                                                                                                // 13105
    ast.constant = allConstants;                                                                                       // 13106
    ast.toWatch = ast.filter && isStateless($filter, ast.callee.name) ? argsToWatch : [ast];                           // 13107
    break;                                                                                                             // 13108
  case AST.AssignmentExpression:                                                                                       // 13109
    findConstantAndWatchExpressions(ast.left, $filter);                                                                // 13110
    findConstantAndWatchExpressions(ast.right, $filter);                                                               // 13111
    ast.constant = ast.left.constant && ast.right.constant;                                                            // 13112
    ast.toWatch = [ast];                                                                                               // 13113
    break;                                                                                                             // 13114
  case AST.ArrayExpression:                                                                                            // 13115
    allConstants = true;                                                                                               // 13116
    argsToWatch = [];                                                                                                  // 13117
    forEach(ast.elements, function(expr) {                                                                             // 13118
      findConstantAndWatchExpressions(expr, $filter);                                                                  // 13119
      allConstants = allConstants && expr.constant;                                                                    // 13120
      if (!expr.constant) {                                                                                            // 13121
        argsToWatch.push.apply(argsToWatch, expr.toWatch);                                                             // 13122
      }                                                                                                                // 13123
    });                                                                                                                // 13124
    ast.constant = allConstants;                                                                                       // 13125
    ast.toWatch = argsToWatch;                                                                                         // 13126
    break;                                                                                                             // 13127
  case AST.ObjectExpression:                                                                                           // 13128
    allConstants = true;                                                                                               // 13129
    argsToWatch = [];                                                                                                  // 13130
    forEach(ast.properties, function(property) {                                                                       // 13131
      findConstantAndWatchExpressions(property.value, $filter);                                                        // 13132
      allConstants = allConstants && property.value.constant;                                                          // 13133
      if (!property.value.constant) {                                                                                  // 13134
        argsToWatch.push.apply(argsToWatch, property.value.toWatch);                                                   // 13135
      }                                                                                                                // 13136
    });                                                                                                                // 13137
    ast.constant = allConstants;                                                                                       // 13138
    ast.toWatch = argsToWatch;                                                                                         // 13139
    break;                                                                                                             // 13140
  case AST.ThisExpression:                                                                                             // 13141
    ast.constant = false;                                                                                              // 13142
    ast.toWatch = [];                                                                                                  // 13143
    break;                                                                                                             // 13144
  }                                                                                                                    // 13145
}                                                                                                                      // 13146
                                                                                                                       // 13147
function getInputs(body) {                                                                                             // 13148
  if (body.length != 1) return;                                                                                        // 13149
  var lastExpression = body[0].expression;                                                                             // 13150
  var candidate = lastExpression.toWatch;                                                                              // 13151
  if (candidate.length !== 1) return candidate;                                                                        // 13152
  return candidate[0] !== lastExpression ? candidate : undefined;                                                      // 13153
}                                                                                                                      // 13154
                                                                                                                       // 13155
function isAssignable(ast) {                                                                                           // 13156
  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;                                             // 13157
}                                                                                                                      // 13158
                                                                                                                       // 13159
function assignableAST(ast) {                                                                                          // 13160
  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {                                                 // 13161
    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
  }                                                                                                                    // 13163
}                                                                                                                      // 13164
                                                                                                                       // 13165
function isLiteral(ast) {                                                                                              // 13166
  return ast.body.length === 0 ||                                                                                      // 13167
      ast.body.length === 1 && (                                                                                       // 13168
      ast.body[0].expression.type === AST.Literal ||                                                                   // 13169
      ast.body[0].expression.type === AST.ArrayExpression ||                                                           // 13170
      ast.body[0].expression.type === AST.ObjectExpression);                                                           // 13171
}                                                                                                                      // 13172
                                                                                                                       // 13173
function isConstant(ast) {                                                                                             // 13174
  return ast.constant;                                                                                                 // 13175
}                                                                                                                      // 13176
                                                                                                                       // 13177
function ASTCompiler(astBuilder, $filter) {                                                                            // 13178
  this.astBuilder = astBuilder;                                                                                        // 13179
  this.$filter = $filter;                                                                                              // 13180
}                                                                                                                      // 13181
                                                                                                                       // 13182
ASTCompiler.prototype = {                                                                                              // 13183
  compile: function(expression, expensiveChecks) {                                                                     // 13184
    var self = this;                                                                                                   // 13185
    var ast = this.astBuilder.ast(expression);                                                                         // 13186
    this.state = {                                                                                                     // 13187
      nextId: 0,                                                                                                       // 13188
      filters: {},                                                                                                     // 13189
      expensiveChecks: expensiveChecks,                                                                                // 13190
      fn: {vars: [], body: [], own: {}},                                                                               // 13191
      assign: {vars: [], body: [], own: {}},                                                                           // 13192
      inputs: []                                                                                                       // 13193
    };                                                                                                                 // 13194
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13195
    var extra = '';                                                                                                    // 13196
    var assignable;                                                                                                    // 13197
    this.stage = 'assign';                                                                                             // 13198
    if ((assignable = assignableAST(ast))) {                                                                           // 13199
      this.state.computing = 'assign';                                                                                 // 13200
      var result = this.nextId();                                                                                      // 13201
      this.recurse(assignable, result);                                                                                // 13202
      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');                                                 // 13203
    }                                                                                                                  // 13204
    var toWatch = getInputs(ast.body);                                                                                 // 13205
    self.stage = 'inputs';                                                                                             // 13206
    forEach(toWatch, function(watch, key) {                                                                            // 13207
      var fnKey = 'fn' + key;                                                                                          // 13208
      self.state[fnKey] = {vars: [], body: [], own: {}};                                                               // 13209
      self.state.computing = fnKey;                                                                                    // 13210
      var intoId = self.nextId();                                                                                      // 13211
      self.recurse(watch, intoId);                                                                                     // 13212
      self.return_(intoId);                                                                                            // 13213
      self.state.inputs.push(fnKey);                                                                                   // 13214
      watch.watchId = key;                                                                                             // 13215
    });                                                                                                                // 13216
    this.state.computing = 'fn';                                                                                       // 13217
    this.stage = 'main';                                                                                               // 13218
    this.recurse(ast);                                                                                                 // 13219
    var fnString =                                                                                                     // 13220
      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
      // This is a workaround for this until we do a better job at only removing the prefix only when we should.       // 13222
      '"' + this.USE + ' ' + this.STRICT + '";\n' +                                                                    // 13223
      this.filterPrefix() +                                                                                            // 13224
      'var fn=' + this.generateFunction('fn', 's,l,a,i') +                                                             // 13225
      extra +                                                                                                          // 13226
      this.watchFns() +                                                                                                // 13227
      'return fn;';                                                                                                    // 13228
                                                                                                                       // 13229
    /* jshint -W054 */                                                                                                 // 13230
    var fn = (new Function('$filter',                                                                                  // 13231
        'ensureSafeMemberName',                                                                                        // 13232
        'ensureSafeObject',                                                                                            // 13233
        'ensureSafeFunction',                                                                                          // 13234
        'ifDefined',                                                                                                   // 13235
        'plus',                                                                                                        // 13236
        'text',                                                                                                        // 13237
        fnString))(                                                                                                    // 13238
          this.$filter,                                                                                                // 13239
          ensureSafeMemberName,                                                                                        // 13240
          ensureSafeObject,                                                                                            // 13241
          ensureSafeFunction,                                                                                          // 13242
          ifDefined,                                                                                                   // 13243
          plusFn,                                                                                                      // 13244
          expression);                                                                                                 // 13245
    /* jshint +W054 */                                                                                                 // 13246
    this.state = this.stage = undefined;                                                                               // 13247
    fn.literal = isLiteral(ast);                                                                                       // 13248
    fn.constant = isConstant(ast);                                                                                     // 13249
    return fn;                                                                                                         // 13250
  },                                                                                                                   // 13251
                                                                                                                       // 13252
  USE: 'use',                                                                                                          // 13253
                                                                                                                       // 13254
  STRICT: 'strict',                                                                                                    // 13255
                                                                                                                       // 13256
  watchFns: function() {                                                                                               // 13257
    var result = [];                                                                                                   // 13258
    var fns = this.state.inputs;                                                                                       // 13259
    var self = this;                                                                                                   // 13260
    forEach(fns, function(name) {                                                                                      // 13261
      result.push('var ' + name + '=' + self.generateFunction(name, 's'));                                             // 13262
    });                                                                                                                // 13263
    if (fns.length) {                                                                                                  // 13264
      result.push('fn.inputs=[' + fns.join(',') + '];');                                                               // 13265
    }                                                                                                                  // 13266
    return result.join('');                                                                                            // 13267
  },                                                                                                                   // 13268
                                                                                                                       // 13269
  generateFunction: function(name, params) {                                                                           // 13270
    return 'function(' + params + '){' +                                                                               // 13271
        this.varsPrefix(name) +                                                                                        // 13272
        this.body(name) +                                                                                              // 13273
        '};';                                                                                                          // 13274
  },                                                                                                                   // 13275
                                                                                                                       // 13276
  filterPrefix: function() {                                                                                           // 13277
    var parts = [];                                                                                                    // 13278
    var self = this;                                                                                                   // 13279
    forEach(this.state.filters, function(id, filter) {                                                                 // 13280
      parts.push(id + '=$filter(' + self.escape(filter) + ')');                                                        // 13281
    });                                                                                                                // 13282
    if (parts.length) return 'var ' + parts.join(',') + ';';                                                           // 13283
    return '';                                                                                                         // 13284
  },                                                                                                                   // 13285
                                                                                                                       // 13286
  varsPrefix: function(section) {                                                                                      // 13287
    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';                   // 13288
  },                                                                                                                   // 13289
                                                                                                                       // 13290
  body: function(section) {                                                                                            // 13291
    return this.state[section].body.join('');                                                                          // 13292
  },                                                                                                                   // 13293
                                                                                                                       // 13294
  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                      // 13295
    var left, right, self = this, args, expression;                                                                    // 13296
    recursionFn = recursionFn || noop;                                                                                 // 13297
    if (!skipWatchIdCheck && isDefined(ast.watchId)) {                                                                 // 13298
      intoId = intoId || this.nextId();                                                                                // 13299
      this.if_('i',                                                                                                    // 13300
        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),                                                // 13301
        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)                                               // 13302
      );                                                                                                               // 13303
      return;                                                                                                          // 13304
    }                                                                                                                  // 13305
    switch (ast.type) {                                                                                                // 13306
    case AST.Program:                                                                                                  // 13307
      forEach(ast.body, function(expression, pos) {                                                                    // 13308
        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });                   // 13309
        if (pos !== ast.body.length - 1) {                                                                             // 13310
          self.current().body.push(right, ';');                                                                        // 13311
        } else {                                                                                                       // 13312
          self.return_(right);                                                                                         // 13313
        }                                                                                                              // 13314
      });                                                                                                              // 13315
      break;                                                                                                           // 13316
    case AST.Literal:                                                                                                  // 13317
      expression = this.escape(ast.value);                                                                             // 13318
      this.assign(intoId, expression);                                                                                 // 13319
      recursionFn(expression);                                                                                         // 13320
      break;                                                                                                           // 13321
    case AST.UnaryExpression:                                                                                          // 13322
      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });                              // 13323
      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';                                                // 13324
      this.assign(intoId, expression);                                                                                 // 13325
      recursionFn(expression);                                                                                         // 13326
      break;                                                                                                           // 13327
    case AST.BinaryExpression:                                                                                         // 13328
      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });                                   // 13329
      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });                                 // 13330
      if (ast.operator === '+') {                                                                                      // 13331
        expression = this.plus(left, right);                                                                           // 13332
      } else if (ast.operator === '-') {                                                                               // 13333
        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);                                // 13334
      } else {                                                                                                         // 13335
        expression = '(' + left + ')' + ast.operator + '(' + right + ')';                                              // 13336
      }                                                                                                                // 13337
      this.assign(intoId, expression);                                                                                 // 13338
      recursionFn(expression);                                                                                         // 13339
      break;                                                                                                           // 13340
    case AST.LogicalExpression:                                                                                        // 13341
      intoId = intoId || this.nextId();                                                                                // 13342
      self.recurse(ast.left, intoId);                                                                                  // 13343
      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));                // 13344
      recursionFn(intoId);                                                                                             // 13345
      break;                                                                                                           // 13346
    case AST.ConditionalExpression:                                                                                    // 13347
      intoId = intoId || this.nextId();                                                                                // 13348
      self.recurse(ast.test, intoId);                                                                                  // 13349
      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));             // 13350
      recursionFn(intoId);                                                                                             // 13351
      break;                                                                                                           // 13352
    case AST.Identifier:                                                                                               // 13353
      intoId = intoId || this.nextId();                                                                                // 13354
      if (nameId) {                                                                                                    // 13355
        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
        nameId.computed = false;                                                                                       // 13357
        nameId.name = ast.name;                                                                                        // 13358
      }                                                                                                                // 13359
      ensureSafeMemberName(ast.name);                                                                                  // 13360
      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),                             // 13361
        function() {                                                                                                   // 13362
          self.if_(self.stage === 'inputs' || 's', function() {                                                        // 13363
            if (create && create !== 1) {                                                                              // 13364
              self.if_(                                                                                                // 13365
                self.not(self.nonComputedMember('s', ast.name)),                                                       // 13366
                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));                                         // 13367
            }                                                                                                          // 13368
            self.assign(intoId, self.nonComputedMember('s', ast.name));                                                // 13369
          });                                                                                                          // 13370
        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))                                    // 13371
        );                                                                                                             // 13372
      if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.name)) {                                     // 13373
        self.addEnsureSafeObject(intoId);                                                                              // 13374
      }                                                                                                                // 13375
      recursionFn(intoId);                                                                                             // 13376
      break;                                                                                                           // 13377
    case AST.MemberExpression:                                                                                         // 13378
      left = nameId && (nameId.context = this.nextId()) || this.nextId();                                              // 13379
      intoId = intoId || this.nextId();                                                                                // 13380
      self.recurse(ast.object, left, undefined, function() {                                                           // 13381
        self.if_(self.notNull(left), function() {                                                                      // 13382
          if (ast.computed) {                                                                                          // 13383
            right = self.nextId();                                                                                     // 13384
            self.recurse(ast.property, right);                                                                         // 13385
            self.addEnsureSafeMemberName(right);                                                                       // 13386
            if (create && create !== 1) {                                                                              // 13387
              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
            }                                                                                                          // 13389
            expression = self.ensureSafeObject(self.computedMember(left, right));                                      // 13390
            self.assign(intoId, expression);                                                                           // 13391
            if (nameId) {                                                                                              // 13392
              nameId.computed = true;                                                                                  // 13393
              nameId.name = right;                                                                                     // 13394
            }                                                                                                          // 13395
          } else {                                                                                                     // 13396
            ensureSafeMemberName(ast.property.name);                                                                   // 13397
            if (create && create !== 1) {                                                                              // 13398
              self.if_(self.not(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
            }                                                                                                          // 13400
            expression = self.nonComputedMember(left, ast.property.name);                                              // 13401
            if (self.state.expensiveChecks || isPossiblyDangerousMemberName(ast.property.name)) {                      // 13402
              expression = self.ensureSafeObject(expression);                                                          // 13403
            }                                                                                                          // 13404
            self.assign(intoId, expression);                                                                           // 13405
            if (nameId) {                                                                                              // 13406
              nameId.computed = false;                                                                                 // 13407
              nameId.name = ast.property.name;                                                                         // 13408
            }                                                                                                          // 13409
          }                                                                                                            // 13410
        }, function() {                                                                                                // 13411
          self.assign(intoId, 'undefined');                                                                            // 13412
        });                                                                                                            // 13413
        recursionFn(intoId);                                                                                           // 13414
      }, !!create);                                                                                                    // 13415
      break;                                                                                                           // 13416
    case AST.CallExpression:                                                                                           // 13417
      intoId = intoId || this.nextId();                                                                                // 13418
      if (ast.filter) {                                                                                                // 13419
        right = self.filter(ast.callee.name);                                                                          // 13420
        args = [];                                                                                                     // 13421
        forEach(ast.arguments, function(expr) {                                                                        // 13422
          var argument = self.nextId();                                                                                // 13423
          self.recurse(expr, argument);                                                                                // 13424
          args.push(argument);                                                                                         // 13425
        });                                                                                                            // 13426
        expression = right + '(' + args.join(',') + ')';                                                               // 13427
        self.assign(intoId, expression);                                                                               // 13428
        recursionFn(intoId);                                                                                           // 13429
      } else {                                                                                                         // 13430
        right = self.nextId();                                                                                         // 13431
        left = {};                                                                                                     // 13432
        args = [];                                                                                                     // 13433
        self.recurse(ast.callee, right, left, function() {                                                             // 13434
          self.if_(self.notNull(right), function() {                                                                   // 13435
            self.addEnsureSafeFunction(right);                                                                         // 13436
            forEach(ast.arguments, function(expr) {                                                                    // 13437
              self.recurse(expr, self.nextId(), undefined, function(argument) {                                        // 13438
                args.push(self.ensureSafeObject(argument));                                                            // 13439
              });                                                                                                      // 13440
            });                                                                                                        // 13441
            if (left.name) {                                                                                           // 13442
              if (!self.state.expensiveChecks) {                                                                       // 13443
                self.addEnsureSafeObject(left.context);                                                                // 13444
              }                                                                                                        // 13445
              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';           // 13446
            } else {                                                                                                   // 13447
              expression = right + '(' + args.join(',') + ')';                                                         // 13448
            }                                                                                                          // 13449
            expression = self.ensureSafeObject(expression);                                                            // 13450
            self.assign(intoId, expression);                                                                           // 13451
          }, function() {                                                                                              // 13452
            self.assign(intoId, 'undefined');                                                                          // 13453
          });                                                                                                          // 13454
          recursionFn(intoId);                                                                                         // 13455
        });                                                                                                            // 13456
      }                                                                                                                // 13457
      break;                                                                                                           // 13458
    case AST.AssignmentExpression:                                                                                     // 13459
      right = this.nextId();                                                                                           // 13460
      left = {};                                                                                                       // 13461
      if (!isAssignable(ast.left)) {                                                                                   // 13462
        throw $parseMinErr('lval', 'Trying to assing a value to a non l-value');                                       // 13463
      }                                                                                                                // 13464
      this.recurse(ast.left, undefined, left, function() {                                                             // 13465
        self.if_(self.notNull(left.context), function() {                                                              // 13466
          self.recurse(ast.right, right);                                                                              // 13467
          self.addEnsureSafeObject(self.member(left.context, left.name, left.computed));                               // 13468
          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;                     // 13469
          self.assign(intoId, expression);                                                                             // 13470
          recursionFn(intoId || expression);                                                                           // 13471
        });                                                                                                            // 13472
      }, 1);                                                                                                           // 13473
      break;                                                                                                           // 13474
    case AST.ArrayExpression:                                                                                          // 13475
      args = [];                                                                                                       // 13476
      forEach(ast.elements, function(expr) {                                                                           // 13477
        self.recurse(expr, self.nextId(), undefined, function(argument) {                                              // 13478
          args.push(argument);                                                                                         // 13479
        });                                                                                                            // 13480
      });                                                                                                              // 13481
      expression = '[' + args.join(',') + ']';                                                                         // 13482
      this.assign(intoId, expression);                                                                                 // 13483
      recursionFn(expression);                                                                                         // 13484
      break;                                                                                                           // 13485
    case AST.ObjectExpression:                                                                                         // 13486
      args = [];                                                                                                       // 13487
      forEach(ast.properties, function(property) {                                                                     // 13488
        self.recurse(property.value, self.nextId(), undefined, function(expr) {                                        // 13489
          args.push(self.escape(                                                                                       // 13490
              property.key.type === AST.Identifier ? property.key.name :                                               // 13491
                ('' + property.key.value)) +                                                                           // 13492
              ':' + expr);                                                                                             // 13493
        });                                                                                                            // 13494
      });                                                                                                              // 13495
      expression = '{' + args.join(',') + '}';                                                                         // 13496
      this.assign(intoId, expression);                                                                                 // 13497
      recursionFn(expression);                                                                                         // 13498
      break;                                                                                                           // 13499
    case AST.ThisExpression:                                                                                           // 13500
      this.assign(intoId, 's');                                                                                        // 13501
      recursionFn('s');                                                                                                // 13502
      break;                                                                                                           // 13503
    case AST.NGValueParameter:                                                                                         // 13504
      this.assign(intoId, 'v');                                                                                        // 13505
      recursionFn('v');                                                                                                // 13506
      break;                                                                                                           // 13507
    }                                                                                                                  // 13508
  },                                                                                                                   // 13509
                                                                                                                       // 13510
  getHasOwnProperty: function(element, property) {                                                                     // 13511
    var key = element + '.' + property;                                                                                // 13512
    var own = this.current().own;                                                                                      // 13513
    if (!own.hasOwnProperty(key)) {                                                                                    // 13514
      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');                 // 13515
    }                                                                                                                  // 13516
    return own[key];                                                                                                   // 13517
  },                                                                                                                   // 13518
                                                                                                                       // 13519
  assign: function(id, value) {                                                                                        // 13520
    if (!id) return;                                                                                                   // 13521
    this.current().body.push(id, '=', value, ';');                                                                     // 13522
    return id;                                                                                                         // 13523
  },                                                                                                                   // 13524
                                                                                                                       // 13525
  filter: function(filterName) {                                                                                       // 13526
    if (!this.state.filters.hasOwnProperty(filterName)) {                                                              // 13527
      this.state.filters[filterName] = this.nextId(true);                                                              // 13528
    }                                                                                                                  // 13529
    return this.state.filters[filterName];                                                                             // 13530
  },                                                                                                                   // 13531
                                                                                                                       // 13532
  ifDefined: function(id, defaultValue) {                                                                              // 13533
    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';                                                  // 13534
  },                                                                                                                   // 13535
                                                                                                                       // 13536
  plus: function(left, right) {                                                                                        // 13537
    return 'plus(' + left + ',' + right + ')';                                                                         // 13538
  },                                                                                                                   // 13539
                                                                                                                       // 13540
  return_: function(id) {                                                                                              // 13541
    this.current().body.push('return ', id, ';');                                                                      // 13542
  },                                                                                                                   // 13543
                                                                                                                       // 13544
  if_: function(test, alternate, consequent) {                                                                         // 13545
    if (test === true) {                                                                                               // 13546
      alternate();                                                                                                     // 13547
    } else {                                                                                                           // 13548
      var body = this.current().body;                                                                                  // 13549
      body.push('if(', test, '){');                                                                                    // 13550
      alternate();                                                                                                     // 13551
      body.push('}');                                                                                                  // 13552
      if (consequent) {                                                                                                // 13553
        body.push('else{');                                                                                            // 13554
        consequent();                                                                                                  // 13555
        body.push('}');                                                                                                // 13556
      }                                                                                                                // 13557
    }                                                                                                                  // 13558
  },                                                                                                                   // 13559
                                                                                                                       // 13560
  not: function(expression) {                                                                                          // 13561
    return '!(' + expression + ')';                                                                                    // 13562
  },                                                                                                                   // 13563
                                                                                                                       // 13564
  notNull: function(expression) {                                                                                      // 13565
    return expression + '!=null';                                                                                      // 13566
  },                                                                                                                   // 13567
                                                                                                                       // 13568
  nonComputedMember: function(left, right) {                                                                           // 13569
    return left + '.' + right;                                                                                         // 13570
  },                                                                                                                   // 13571
                                                                                                                       // 13572
  computedMember: function(left, right) {                                                                              // 13573
    return left + '[' + right + ']';                                                                                   // 13574
  },                                                                                                                   // 13575
                                                                                                                       // 13576
  member: function(left, right, computed) {                                                                            // 13577
    if (computed) return this.computedMember(left, right);                                                             // 13578
    return this.nonComputedMember(left, right);                                                                        // 13579
  },                                                                                                                   // 13580
                                                                                                                       // 13581
  addEnsureSafeObject: function(item) {                                                                                // 13582
    this.current().body.push(this.ensureSafeObject(item), ';');                                                        // 13583
  },                                                                                                                   // 13584
                                                                                                                       // 13585
  addEnsureSafeMemberName: function(item) {                                                                            // 13586
    this.current().body.push(this.ensureSafeMemberName(item), ';');                                                    // 13587
  },                                                                                                                   // 13588
                                                                                                                       // 13589
  addEnsureSafeFunction: function(item) {                                                                              // 13590
    this.current().body.push(this.ensureSafeFunction(item), ';');                                                      // 13591
  },                                                                                                                   // 13592
                                                                                                                       // 13593
  ensureSafeObject: function(item) {                                                                                   // 13594
    return 'ensureSafeObject(' + item + ',text)';                                                                      // 13595
  },                                                                                                                   // 13596
                                                                                                                       // 13597
  ensureSafeMemberName: function(item) {                                                                               // 13598
    return 'ensureSafeMemberName(' + item + ',text)';                                                                  // 13599
  },                                                                                                                   // 13600
                                                                                                                       // 13601
  ensureSafeFunction: function(item) {                                                                                 // 13602
    return 'ensureSafeFunction(' + item + ',text)';                                                                    // 13603
  },                                                                                                                   // 13604
                                                                                                                       // 13605
  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {                                  // 13606
    var self = this;                                                                                                   // 13607
    return function() {                                                                                                // 13608
      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);                                        // 13609
    };                                                                                                                 // 13610
  },                                                                                                                   // 13611
                                                                                                                       // 13612
  lazyAssign: function(id, value) {                                                                                    // 13613
    var self = this;                                                                                                   // 13614
    return function() {                                                                                                // 13615
      self.assign(id, value);                                                                                          // 13616
    };                                                                                                                 // 13617
  },                                                                                                                   // 13618
                                                                                                                       // 13619
  stringEscapeRegex: /[^ a-zA-Z0-9]/g,                                                                                 // 13620
                                                                                                                       // 13621
  stringEscapeFn: function(c) {                                                                                        // 13622
    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);                                                  // 13623
  },                                                                                                                   // 13624
                                                                                                                       // 13625
  escape: function(value) {                                                                                            // 13626
    if (isString(value)) return "'" + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + "'";                // 13627
    if (isNumber(value)) return value.toString();                                                                      // 13628
    if (value === true) return 'true';                                                                                 // 13629
    if (value === false) return 'false';                                                                               // 13630
    if (value === null) return 'null';                                                                                 // 13631
    if (typeof value === 'undefined') return 'undefined';                                                              // 13632
                                                                                                                       // 13633
    throw $parseMinErr('esc', 'IMPOSSIBLE');                                                                           // 13634
  },                                                                                                                   // 13635
                                                                                                                       // 13636
  nextId: function(skip, init) {                                                                                       // 13637
    var id = 'v' + (this.state.nextId++);                                                                              // 13638
    if (!skip) {                                                                                                       // 13639
      this.current().vars.push(id + (init ? '=' + init : ''));                                                         // 13640
    }                                                                                                                  // 13641
    return id;                                                                                                         // 13642
  },                                                                                                                   // 13643
                                                                                                                       // 13644
  current: function() {                                                                                                // 13645
    return this.state[this.state.computing];                                                                           // 13646
  }                                                                                                                    // 13647
};                                                                                                                     // 13648
                                                                                                                       // 13649
                                                                                                                       // 13650
function ASTInterpreter(astBuilder, $filter) {                                                                         // 13651
  this.astBuilder = astBuilder;                                                                                        // 13652
  this.$filter = $filter;                                                                                              // 13653
}                                                                                                                      // 13654
                                                                                                                       // 13655
ASTInterpreter.prototype = {                                                                                           // 13656
  compile: function(expression, expensiveChecks) {                                                                     // 13657
    var self = this;                                                                                                   // 13658
    var ast = this.astBuilder.ast(expression);                                                                         // 13659
    this.expression = expression;                                                                                      // 13660
    this.expensiveChecks = expensiveChecks;                                                                            // 13661
    findConstantAndWatchExpressions(ast, self.$filter);                                                                // 13662
    var assignable;                                                                                                    // 13663
    var assign;                                                                                                        // 13664
    if ((assignable = assignableAST(ast))) {                                                                           // 13665
      assign = this.recurse(assignable);                                                                               // 13666
    }                                                                                                                  // 13667
    var toWatch = getInputs(ast.body);                                                                                 // 13668
    var inputs;                                                                                                        // 13669
    if (toWatch) {                                                                                                     // 13670
      inputs = [];                                                                                                     // 13671
      forEach(toWatch, function(watch, key) {                                                                          // 13672
        var input = self.recurse(watch);                                                                               // 13673
        watch.input = input;                                                                                           // 13674
        inputs.push(input);                                                                                            // 13675
        watch.watchId = key;                                                                                           // 13676
      });                                                                                                              // 13677
    }                                                                                                                  // 13678
    var expressions = [];                                                                                              // 13679
    forEach(ast.body, function(expression) {                                                                           // 13680
      expressions.push(self.recurse(expression.expression));                                                           // 13681
    });                                                                                                                // 13682
    var fn = ast.body.length === 0 ? function() {} :                                                                   // 13683
             ast.body.length === 1 ? expressions[0] :                                                                  // 13684
             function(scope, locals) {                                                                                 // 13685
               var lastValue;                                                                                          // 13686
               forEach(expressions, function(exp) {                                                                    // 13687
                 lastValue = exp(scope, locals);                                                                       // 13688
               });                                                                                                     // 13689
               return lastValue;                                                                                       // 13690
             };                                                                                                        // 13691
    if (assign) {                                                                                                      // 13692
      fn.assign = function(scope, value, locals) {                                                                     // 13693
        return assign(scope, locals, value);                                                                           // 13694
      };                                                                                                               // 13695
    }                                                                                                                  // 13696
    if (inputs) {                                                                                                      // 13697
      fn.inputs = inputs;                                                                                              // 13698
    }                                                                                                                  // 13699
    fn.literal = isLiteral(ast);                                                                                       // 13700
    fn.constant = isConstant(ast);                                                                                     // 13701
    return fn;                                                                                                         // 13702
  },                                                                                                                   // 13703
                                                                                                                       // 13704
  recurse: function(ast, context, create) {                                                                            // 13705
    var left, right, self = this, args, expression;                                                                    // 13706
    if (ast.input) {                                                                                                   // 13707
      return this.inputs(ast.input, ast.watchId);                                                                      // 13708
    }                                                                                                                  // 13709
    switch (ast.type) {                                                                                                // 13710
    case AST.Literal:                                                                                                  // 13711
      return this.value(ast.value, context);                                                                           // 13712
    case AST.UnaryExpression:                                                                                          // 13713
      right = this.recurse(ast.argument);                                                                              // 13714
      return this['unary' + ast.operator](right, context);                                                             // 13715
    case AST.BinaryExpression:                                                                                         // 13716
      left = this.recurse(ast.left);                                                                                   // 13717
      right = this.recurse(ast.right);                                                                                 // 13718
      return this['binary' + ast.operator](left, right, context);                                                      // 13719
    case AST.LogicalExpression:                                                                                        // 13720
      left = this.recurse(ast.left);                                                                                   // 13721
      right = this.recurse(ast.right);                                                                                 // 13722
      return this['binary' + ast.operator](left, right, context);                                                      // 13723
    case AST.ConditionalExpression:                                                                                    // 13724
      return this['ternary?:'](                                                                                        // 13725
        this.recurse(ast.test),                                                                                        // 13726
        this.recurse(ast.alternate),                                                                                   // 13727
        this.recurse(ast.consequent),                                                                                  // 13728
        context                                                                                                        // 13729
      );                                                                                                               // 13730
    case AST.Identifier:                                                                                               // 13731
      ensureSafeMemberName(ast.name, self.expression);                                                                 // 13732
      return self.identifier(ast.name,                                                                                 // 13733
                             self.expensiveChecks || isPossiblyDangerousMemberName(ast.name),                          // 13734
                             context, create, self.expression);                                                        // 13735
    case AST.MemberExpression:                                                                                         // 13736
      left = this.recurse(ast.object, false, !!create);                                                                // 13737
      if (!ast.computed) {                                                                                             // 13738
        ensureSafeMemberName(ast.property.name, self.expression);                                                      // 13739
        right = ast.property.name;                                                                                     // 13740
      }                                                                                                                // 13741
      if (ast.computed) right = this.recurse(ast.property);                                                            // 13742
      return ast.computed ?                                                                                            // 13743
        this.computedMember(left, right, context, create, self.expression) :                                           // 13744
        this.nonComputedMember(left, right, self.expensiveChecks, context, create, self.expression);                   // 13745
    case AST.CallExpression:                                                                                           // 13746
      args = [];                                                                                                       // 13747
      forEach(ast.arguments, function(expr) {                                                                          // 13748
        args.push(self.recurse(expr));                                                                                 // 13749
      });                                                                                                              // 13750
      if (ast.filter) right = this.$filter(ast.callee.name);                                                           // 13751
      if (!ast.filter) right = this.recurse(ast.callee, true);                                                         // 13752
      return ast.filter ?                                                                                              // 13753
        function(scope, locals, assign, inputs) {                                                                      // 13754
          var values = [];                                                                                             // 13755
          for (var i = 0; i < args.length; ++i) {                                                                      // 13756
            values.push(args[i](scope, locals, assign, inputs));                                                       // 13757
          }                                                                                                            // 13758
          var value = right.apply(undefined, values, inputs);                                                          // 13759
          return context ? {context: undefined, name: undefined, value: value} : value;                                // 13760
        } :                                                                                                            // 13761
        function(scope, locals, assign, inputs) {                                                                      // 13762
          var rhs = right(scope, locals, assign, inputs);                                                              // 13763
          var value;                                                                                                   // 13764
          if (rhs.value != null) {                                                                                     // 13765
            ensureSafeObject(rhs.context, self.expression);                                                            // 13766
            ensureSafeFunction(rhs.value, self.expression);                                                            // 13767
            var values = [];                                                                                           // 13768
            for (var i = 0; i < args.length; ++i) {                                                                    // 13769
              values.push(ensureSafeObject(args[i](scope, locals, assign, inputs), self.expression));                  // 13770
            }                                                                                                          // 13771
            value = ensureSafeObject(rhs.value.apply(rhs.context, values), self.expression);                           // 13772
          }                                                                                                            // 13773
          return context ? {value: value} : value;                                                                     // 13774
        };                                                                                                             // 13775
    case AST.AssignmentExpression:                                                                                     // 13776
      left = this.recurse(ast.left, true, 1);                                                                          // 13777
      right = this.recurse(ast.right);                                                                                 // 13778
      return function(scope, locals, assign, inputs) {                                                                 // 13779
        var lhs = left(scope, locals, assign, inputs);                                                                 // 13780
        var rhs = right(scope, locals, assign, inputs);                                                                // 13781
        ensureSafeObject(lhs.value, self.expression);                                                                  // 13782
        lhs.context[lhs.name] = rhs;                                                                                   // 13783
        return context ? {value: rhs} : rhs;                                                                           // 13784
      };                                                                                                               // 13785
    case AST.ArrayExpression:                                                                                          // 13786
      args = [];                                                                                                       // 13787
      forEach(ast.elements, function(expr) {                                                                           // 13788
        args.push(self.recurse(expr));                                                                                 // 13789
      });                                                                                                              // 13790
      return function(scope, locals, assign, inputs) {                                                                 // 13791
        var value = [];                                                                                                // 13792
        for (var i = 0; i < args.length; ++i) {                                                                        // 13793
          value.push(args[i](scope, locals, assign, inputs));                                                          // 13794
        }                                                                                                              // 13795
        return context ? {value: value} : value;                                                                       // 13796
      };                                                                                                               // 13797
    case AST.ObjectExpression:                                                                                         // 13798
      args = [];                                                                                                       // 13799
      forEach(ast.properties, function(property) {                                                                     // 13800
        args.push({key: property.key.type === AST.Identifier ?                                                         // 13801
                        property.key.name :                                                                            // 13802
                        ('' + property.key.value),                                                                     // 13803
                   value: self.recurse(property.value)                                                                 // 13804
        });                                                                                                            // 13805
      });                                                                                                              // 13806
      return function(scope, locals, assign, inputs) {                                                                 // 13807
        var value = {};                                                                                                // 13808
        for (var i = 0; i < args.length; ++i) {                                                                        // 13809
          value[args[i].key] = args[i].value(scope, locals, assign, inputs);                                           // 13810
        }                                                                                                              // 13811
        return context ? {value: value} : value;                                                                       // 13812
      };                                                                                                               // 13813
    case AST.ThisExpression:                                                                                           // 13814
      return function(scope) {                                                                                         // 13815
        return context ? {value: scope} : scope;                                                                       // 13816
      };                                                                                                               // 13817
    case AST.NGValueParameter:                                                                                         // 13818
      return function(scope, locals, assign, inputs) {                                                                 // 13819
        return context ? {value: assign} : assign;                                                                     // 13820
      };                                                                                                               // 13821
    }                                                                                                                  // 13822
  },                                                                                                                   // 13823
                                                                                                                       // 13824
  'unary+': function(argument, context) {                                                                              // 13825
    return function(scope, locals, assign, inputs) {                                                                   // 13826
      var arg = argument(scope, locals, assign, inputs);                                                               // 13827
      if (isDefined(arg)) {                                                                                            // 13828
        arg = +arg;                                                                                                    // 13829
      } else {                                                                                                         // 13830
        arg = 0;                                                                                                       // 13831
      }                                                                                                                // 13832
      return context ? {value: arg} : arg;                                                                             // 13833
    };                                                                                                                 // 13834
  },                                                                                                                   // 13835
  'unary-': function(argument, context) {                                                                              // 13836
    return function(scope, locals, assign, inputs) {                                                                   // 13837
      var arg = argument(scope, locals, assign, inputs);                                                               // 13838
      if (isDefined(arg)) {                                                                                            // 13839
        arg = -arg;                                                                                                    // 13840
      } else {                                                                                                         // 13841
        arg = 0;                                                                                                       // 13842
      }                                                                                                                // 13843
      return context ? {value: arg} : arg;                                                                             // 13844
    };                                                                                                                 // 13845
  },                                                                                                                   // 13846
  'unary!': function(argument, context) {                                                                              // 13847
    return function(scope, locals, assign, inputs) {                                                                   // 13848
      var arg = !argument(scope, locals, assign, inputs);                                                              // 13849
      return context ? {value: arg} : arg;                                                                             // 13850
    };                                                                                                                 // 13851
  },                                                                                                                   // 13852
  'binary+': function(left, right, context) {                                                                          // 13853
    return function(scope, locals, assign, inputs) {                                                                   // 13854
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13855
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13856
      var arg = plusFn(lhs, rhs);                                                                                      // 13857
      return context ? {value: arg} : arg;                                                                             // 13858
    };                                                                                                                 // 13859
  },                                                                                                                   // 13860
  'binary-': function(left, right, context) {                                                                          // 13861
    return function(scope, locals, assign, inputs) {                                                                   // 13862
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13863
      var rhs = right(scope, locals, assign, inputs);                                                                  // 13864
      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);                                               // 13865
      return context ? {value: arg} : arg;                                                                             // 13866
    };                                                                                                                 // 13867
  },                                                                                                                   // 13868
  'binary*': function(left, right, context) {                                                                          // 13869
    return function(scope, locals, assign, inputs) {                                                                   // 13870
      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);                            // 13871
      return context ? {value: arg} : arg;                                                                             // 13872
    };                                                                                                                 // 13873
  },                                                                                                                   // 13874
  'binary/': function(left, right, context) {                                                                          // 13875
    return function(scope, locals, assign, inputs) {                                                                   // 13876
      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);                            // 13877
      return context ? {value: arg} : arg;                                                                             // 13878
    };                                                                                                                 // 13879
  },                                                                                                                   // 13880
  'binary%': function(left, right, context) {                                                                          // 13881
    return function(scope, locals, assign, inputs) {                                                                   // 13882
      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);                            // 13883
      return context ? {value: arg} : arg;                                                                             // 13884
    };                                                                                                                 // 13885
  },                                                                                                                   // 13886
  'binary===': function(left, right, context) {                                                                        // 13887
    return function(scope, locals, assign, inputs) {                                                                   // 13888
      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);                          // 13889
      return context ? {value: arg} : arg;                                                                             // 13890
    };                                                                                                                 // 13891
  },                                                                                                                   // 13892
  'binary!==': function(left, right, context) {                                                                        // 13893
    return function(scope, locals, assign, inputs) {                                                                   // 13894
      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);                          // 13895
      return context ? {value: arg} : arg;                                                                             // 13896
    };                                                                                                                 // 13897
  },                                                                                                                   // 13898
  'binary==': function(left, right, context) {                                                                         // 13899
    return function(scope, locals, assign, inputs) {                                                                   // 13900
      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);                           // 13901
      return context ? {value: arg} : arg;                                                                             // 13902
    };                                                                                                                 // 13903
  },                                                                                                                   // 13904
  'binary!=': function(left, right, context) {                                                                         // 13905
    return function(scope, locals, assign, inputs) {                                                                   // 13906
      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);                           // 13907
      return context ? {value: arg} : arg;                                                                             // 13908
    };                                                                                                                 // 13909
  },                                                                                                                   // 13910
  'binary<': function(left, right, context) {                                                                          // 13911
    return function(scope, locals, assign, inputs) {                                                                   // 13912
      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);                            // 13913
      return context ? {value: arg} : arg;                                                                             // 13914
    };                                                                                                                 // 13915
  },                                                                                                                   // 13916
  'binary>': function(left, right, context) {                                                                          // 13917
    return function(scope, locals, assign, inputs) {                                                                   // 13918
      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);                            // 13919
      return context ? {value: arg} : arg;                                                                             // 13920
    };                                                                                                                 // 13921
  },                                                                                                                   // 13922
  'binary<=': function(left, right, context) {                                                                         // 13923
    return function(scope, locals, assign, inputs) {                                                                   // 13924
      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);                           // 13925
      return context ? {value: arg} : arg;                                                                             // 13926
    };                                                                                                                 // 13927
  },                                                                                                                   // 13928
  'binary>=': function(left, right, context) {                                                                         // 13929
    return function(scope, locals, assign, inputs) {                                                                   // 13930
      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);                           // 13931
      return context ? {value: arg} : arg;                                                                             // 13932
    };                                                                                                                 // 13933
  },                                                                                                                   // 13934
  'binary&&': function(left, right, context) {                                                                         // 13935
    return function(scope, locals, assign, inputs) {                                                                   // 13936
      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);                           // 13937
      return context ? {value: arg} : arg;                                                                             // 13938
    };                                                                                                                 // 13939
  },                                                                                                                   // 13940
  'binary||': function(left, right, context) {                                                                         // 13941
    return function(scope, locals, assign, inputs) {                                                                   // 13942
      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);                           // 13943
      return context ? {value: arg} : arg;                                                                             // 13944
    };                                                                                                                 // 13945
  },                                                                                                                   // 13946
  'ternary?:': function(test, alternate, consequent, context) {                                                        // 13947
    return function(scope, locals, assign, inputs) {                                                                   // 13948
      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
      return context ? {value: arg} : arg;                                                                             // 13950
    };                                                                                                                 // 13951
  },                                                                                                                   // 13952
  value: function(value, context) {                                                                                    // 13953
    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };               // 13954
  },                                                                                                                   // 13955
  identifier: function(name, expensiveChecks, context, create, expression) {                                           // 13956
    return function(scope, locals, assign, inputs) {                                                                   // 13957
      var base = locals && (name in locals) ? locals : scope;                                                          // 13958
      if (create && create !== 1 && base && !(base[name])) {                                                           // 13959
        base[name] = {};                                                                                               // 13960
      }                                                                                                                // 13961
      var value = base ? base[name] : undefined;                                                                       // 13962
      if (expensiveChecks) {                                                                                           // 13963
        ensureSafeObject(value, expression);                                                                           // 13964
      }                                                                                                                // 13965
      if (context) {                                                                                                   // 13966
        return {context: base, name: name, value: value};                                                              // 13967
      } else {                                                                                                         // 13968
        return value;                                                                                                  // 13969
      }                                                                                                                // 13970
    };                                                                                                                 // 13971
  },                                                                                                                   // 13972
  computedMember: function(left, right, context, create, expression) {                                                 // 13973
    return function(scope, locals, assign, inputs) {                                                                   // 13974
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13975
      var rhs;                                                                                                         // 13976
      var value;                                                                                                       // 13977
      if (lhs != null) {                                                                                               // 13978
        rhs = right(scope, locals, assign, inputs);                                                                    // 13979
        ensureSafeMemberName(rhs, expression);                                                                         // 13980
        if (create && create !== 1 && lhs && !(lhs[rhs])) {                                                            // 13981
          lhs[rhs] = {};                                                                                               // 13982
        }                                                                                                              // 13983
        value = lhs[rhs];                                                                                              // 13984
        ensureSafeObject(value, expression);                                                                           // 13985
      }                                                                                                                // 13986
      if (context) {                                                                                                   // 13987
        return {context: lhs, name: rhs, value: value};                                                                // 13988
      } else {                                                                                                         // 13989
        return value;                                                                                                  // 13990
      }                                                                                                                // 13991
    };                                                                                                                 // 13992
  },                                                                                                                   // 13993
  nonComputedMember: function(left, right, expensiveChecks, context, create, expression) {                             // 13994
    return function(scope, locals, assign, inputs) {                                                                   // 13995
      var lhs = left(scope, locals, assign, inputs);                                                                   // 13996
      if (create && create !== 1 && lhs && !(lhs[right])) {                                                            // 13997
        lhs[right] = {};                                                                                               // 13998
      }                                                                                                                // 13999
      var value = lhs != null ? lhs[right] : undefined;                                                                // 14000
      if (expensiveChecks || isPossiblyDangerousMemberName(right)) {                                                   // 14001
        ensureSafeObject(value, expression);                                                                           // 14002
      }                                                                                                                // 14003
      if (context) {                                                                                                   // 14004
        return {context: lhs, name: right, value: value};                                                              // 14005
      } else {                                                                                                         // 14006
        return value;                                                                                                  // 14007
      }                                                                                                                // 14008
    };                                                                                                                 // 14009
  },                                                                                                                   // 14010
  inputs: function(input, watchId) {                                                                                   // 14011
    return function(scope, value, locals, inputs) {                                                                    // 14012
      if (inputs) return inputs[watchId];                                                                              // 14013
      return input(scope, value, locals);                                                                              // 14014
    };                                                                                                                 // 14015
  }                                                                                                                    // 14016
};                                                                                                                     // 14017
                                                                                                                       // 14018
/**                                                                                                                    // 14019
 * @constructor                                                                                                        // 14020
 */                                                                                                                    // 14021
var Parser = function(lexer, $filter, options) {                                                                       // 14022
  this.lexer = lexer;                                                                                                  // 14023
  this.$filter = $filter;                                                                                              // 14024
  this.options = options;                                                                                              // 14025
  this.ast = new AST(this.lexer);                                                                                      // 14026
  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :                                             // 14027
                                   new ASTCompiler(this.ast, $filter);                                                 // 14028
};                                                                                                                     // 14029
                                                                                                                       // 14030
Parser.prototype = {                                                                                                   // 14031
  constructor: Parser,                                                                                                 // 14032
                                                                                                                       // 14033
  parse: function(text) {                                                                                              // 14034
    return this.astCompiler.compile(text, this.options.expensiveChecks);                                               // 14035
  }                                                                                                                    // 14036
};                                                                                                                     // 14037
                                                                                                                       // 14038
var getterFnCacheDefault = createMap();                                                                                // 14039
var getterFnCacheExpensive = createMap();                                                                              // 14040
                                                                                                                       // 14041
function isPossiblyDangerousMemberName(name) {                                                                         // 14042
  return name == 'constructor';                                                                                        // 14043
}                                                                                                                      // 14044
                                                                                                                       // 14045
var objectValueOf = Object.prototype.valueOf;                                                                          // 14046
                                                                                                                       // 14047
function getValueOf(value) {                                                                                           // 14048
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);                                      // 14049
}                                                                                                                      // 14050
                                                                                                                       // 14051
///////////////////////////////////                                                                                    // 14052
                                                                                                                       // 14053
/**                                                                                                                    // 14054
 * @ngdoc service                                                                                                      // 14055
 * @name $parse                                                                                                        // 14056
 * @kind function                                                                                                      // 14057
 *                                                                                                                     // 14058
 * @description                                                                                                        // 14059
 *                                                                                                                     // 14060
 * Converts Angular {@link guide/expression expression} into a function.                                               // 14061
 *                                                                                                                     // 14062
 * ```js                                                                                                               // 14063
 *   var getter = $parse('user.name');                                                                                 // 14064
 *   var setter = getter.assign;                                                                                       // 14065
 *   var context = {user:{name:'angular'}};                                                                            // 14066
 *   var locals = {user:{name:'local'}};                                                                               // 14067
 *                                                                                                                     // 14068
 *   expect(getter(context)).toEqual('angular');                                                                       // 14069
 *   setter(context, 'newValue');                                                                                      // 14070
 *   expect(context.user.name).toEqual('newValue');                                                                    // 14071
 *   expect(getter(context, locals)).toEqual('local');                                                                 // 14072
 * ```                                                                                                                 // 14073
 *                                                                                                                     // 14074
 *                                                                                                                     // 14075
 * @param {string} expression String expression to compile.                                                            // 14076
 * @returns {function(context, locals)} a function which represents the compiled expression:                           // 14077
 *                                                                                                                     // 14078
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings                       // 14079
 *      are evaluated against (typically a scope object).                                                              // 14080
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                       // 14081
 *      `context`.                                                                                                     // 14082
 *                                                                                                                     // 14083
 *    The returned function also has the following properties:                                                         // 14084
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript                            // 14085
 *        literal.                                                                                                     // 14086
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript                             // 14087
 *        constant literals.                                                                                           // 14088
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be                     // 14089
 *        set to a function to change its value on the given context.                                                  // 14090
 *                                                                                                                     // 14091
 */                                                                                                                    // 14092
                                                                                                                       // 14093
                                                                                                                       // 14094
/**                                                                                                                    // 14095
 * @ngdoc provider                                                                                                     // 14096
 * @name $parseProvider                                                                                                // 14097
 *                                                                                                                     // 14098
 * @description                                                                                                        // 14099
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}                   // 14100
 *  service.                                                                                                           // 14101
 */                                                                                                                    // 14102
function $ParseProvider() {                                                                                            // 14103
  var cacheDefault = createMap();                                                                                      // 14104
  var cacheExpensive = createMap();                                                                                    // 14105
                                                                                                                       // 14106
  this.$get = ['$filter', function($filter) {                                                                          // 14107
    var noUnsafeEval = csp().noUnsafeEval;                                                                             // 14108
    var $parseOptions = {                                                                                              // 14109
          csp: noUnsafeEval,                                                                                           // 14110
          expensiveChecks: false                                                                                       // 14111
        },                                                                                                             // 14112
        $parseOptionsExpensive = {                                                                                     // 14113
          csp: noUnsafeEval,                                                                                           // 14114
          expensiveChecks: true                                                                                        // 14115
        };                                                                                                             // 14116
                                                                                                                       // 14117
    return function $parse(exp, interceptorFn, expensiveChecks) {                                                      // 14118
      var parsedExpression, oneTime, cacheKey;                                                                         // 14119
                                                                                                                       // 14120
      switch (typeof exp) {                                                                                            // 14121
        case 'string':                                                                                                 // 14122
          exp = exp.trim();                                                                                            // 14123
          cacheKey = exp;                                                                                              // 14124
                                                                                                                       // 14125
          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);                                               // 14126
          parsedExpression = cache[cacheKey];                                                                          // 14127
                                                                                                                       // 14128
          if (!parsedExpression) {                                                                                     // 14129
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {                                                      // 14130
              oneTime = true;                                                                                          // 14131
              exp = exp.substring(2);                                                                                  // 14132
            }                                                                                                          // 14133
            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;                               // 14134
            var lexer = new Lexer(parseOptions);                                                                       // 14135
            var parser = new Parser(lexer, $filter, parseOptions);                                                     // 14136
            parsedExpression = parser.parse(exp);                                                                      // 14137
            if (parsedExpression.constant) {                                                                           // 14138
              parsedExpression.$$watchDelegate = constantWatchDelegate;                                                // 14139
            } else if (oneTime) {                                                                                      // 14140
              parsedExpression.$$watchDelegate = parsedExpression.literal ?                                            // 14141
                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;                                                  // 14142
            } else if (parsedExpression.inputs) {                                                                      // 14143
              parsedExpression.$$watchDelegate = inputsWatchDelegate;                                                  // 14144
            }                                                                                                          // 14145
            cache[cacheKey] = parsedExpression;                                                                        // 14146
          }                                                                                                            // 14147
          return addInterceptor(parsedExpression, interceptorFn);                                                      // 14148
                                                                                                                       // 14149
        case 'function':                                                                                               // 14150
          return addInterceptor(exp, interceptorFn);                                                                   // 14151
                                                                                                                       // 14152
        default:                                                                                                       // 14153
          return noop;                                                                                                 // 14154
      }                                                                                                                // 14155
    };                                                                                                                 // 14156
                                                                                                                       // 14157
    function expressionInputDirtyCheck(newValue, oldValueOfValue) {                                                    // 14158
                                                                                                                       // 14159
      if (newValue == null || oldValueOfValue == null) { // null/undefined                                             // 14160
        return newValue === oldValueOfValue;                                                                           // 14161
      }                                                                                                                // 14162
                                                                                                                       // 14163
      if (typeof newValue === 'object') {                                                                              // 14164
                                                                                                                       // 14165
        // attempt to convert the value to a primitive type                                                            // 14166
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can                     // 14167
        //             be cheaply dirty-checked                                                                        // 14168
        newValue = getValueOf(newValue);                                                                               // 14169
                                                                                                                       // 14170
        if (typeof newValue === 'object') {                                                                            // 14171
          // objects/arrays are not supported - deep-watching them would be too expensive                              // 14172
          return false;                                                                                                // 14173
        }                                                                                                              // 14174
                                                                                                                       // 14175
        // fall-through to the primitive equality check                                                                // 14176
      }                                                                                                                // 14177
                                                                                                                       // 14178
      //Primitive or NaN                                                                                               // 14179
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);           // 14180
    }                                                                                                                  // 14181
                                                                                                                       // 14182
    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {           // 14183
      var inputExpressions = parsedExpression.inputs;                                                                  // 14184
      var lastResult;                                                                                                  // 14185
                                                                                                                       // 14186
      if (inputExpressions.length === 1) {                                                                             // 14187
        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails        // 14188
        inputExpressions = inputExpressions[0];                                                                        // 14189
        return scope.$watch(function expressionInputWatch(scope) {                                                     // 14190
          var newInputValue = inputExpressions(scope);                                                                 // 14191
          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {                                            // 14192
            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);                               // 14193
            oldInputValueOf = newInputValue && getValueOf(newInputValue);                                              // 14194
          }                                                                                                            // 14195
          return lastResult;                                                                                           // 14196
        }, listener, objectEquality, prettyPrintExpression);                                                           // 14197
      }                                                                                                                // 14198
                                                                                                                       // 14199
      var oldInputValueOfValues = [];                                                                                  // 14200
      var oldInputValues = [];                                                                                         // 14201
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                     // 14202
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails   // 14203
        oldInputValues[i] = null;                                                                                      // 14204
      }                                                                                                                // 14205
                                                                                                                       // 14206
      return scope.$watch(function expressionInputsWatch(scope) {                                                      // 14207
        var changed = false;                                                                                           // 14208
                                                                                                                       // 14209
        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {                                                   // 14210
          var newInputValue = inputExpressions[i](scope);                                                              // 14211
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {            // 14212
            oldInputValues[i] = newInputValue;                                                                         // 14213
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);                                     // 14214
          }                                                                                                            // 14215
        }                                                                                                              // 14216
                                                                                                                       // 14217
        if (changed) {                                                                                                 // 14218
          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);                                  // 14219
        }                                                                                                              // 14220
                                                                                                                       // 14221
        return lastResult;                                                                                             // 14222
      }, listener, objectEquality, prettyPrintExpression);                                                             // 14223
    }                                                                                                                  // 14224
                                                                                                                       // 14225
    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                 // 14226
      var unwatch, lastValue;                                                                                          // 14227
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14228
        return parsedExpression(scope);                                                                                // 14229
      }, function oneTimeListener(value, old, scope) {                                                                 // 14230
        lastValue = value;                                                                                             // 14231
        if (isFunction(listener)) {                                                                                    // 14232
          listener.apply(this, arguments);                                                                             // 14233
        }                                                                                                              // 14234
        if (isDefined(value)) {                                                                                        // 14235
          scope.$$postDigest(function() {                                                                              // 14236
            if (isDefined(lastValue)) {                                                                                // 14237
              unwatch();                                                                                               // 14238
            }                                                                                                          // 14239
          });                                                                                                          // 14240
        }                                                                                                              // 14241
      }, objectEquality);                                                                                              // 14242
    }                                                                                                                  // 14243
                                                                                                                       // 14244
    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {                          // 14245
      var unwatch, lastValue;                                                                                          // 14246
      return unwatch = scope.$watch(function oneTimeWatch(scope) {                                                     // 14247
        return parsedExpression(scope);                                                                                // 14248
      }, function oneTimeListener(value, old, scope) {                                                                 // 14249
        lastValue = value;                                                                                             // 14250
        if (isFunction(listener)) {                                                                                    // 14251
          listener.call(this, value, old, scope);                                                                      // 14252
        }                                                                                                              // 14253
        if (isAllDefined(value)) {                                                                                     // 14254
          scope.$$postDigest(function() {                                                                              // 14255
            if (isAllDefined(lastValue)) unwatch();                                                                    // 14256
          });                                                                                                          // 14257
        }                                                                                                              // 14258
      }, objectEquality);                                                                                              // 14259
                                                                                                                       // 14260
      function isAllDefined(value) {                                                                                   // 14261
        var allDefined = true;                                                                                         // 14262
        forEach(value, function(val) {                                                                                 // 14263
          if (!isDefined(val)) allDefined = false;                                                                     // 14264
        });                                                                                                            // 14265
        return allDefined;                                                                                             // 14266
      }                                                                                                                // 14267
    }                                                                                                                  // 14268
                                                                                                                       // 14269
    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {                                // 14270
      var unwatch;                                                                                                     // 14271
      return unwatch = scope.$watch(function constantWatch(scope) {                                                    // 14272
        return parsedExpression(scope);                                                                                // 14273
      }, function constantListener(value, old, scope) {                                                                // 14274
        if (isFunction(listener)) {                                                                                    // 14275
          listener.apply(this, arguments);                                                                             // 14276
        }                                                                                                              // 14277
        unwatch();                                                                                                     // 14278
      }, objectEquality);                                                                                              // 14279
    }                                                                                                                  // 14280
                                                                                                                       // 14281
    function addInterceptor(parsedExpression, interceptorFn) {                                                         // 14282
      if (!interceptorFn) return parsedExpression;                                                                     // 14283
      var watchDelegate = parsedExpression.$$watchDelegate;                                                            // 14284
                                                                                                                       // 14285
      var regularWatch =                                                                                               // 14286
          watchDelegate !== oneTimeLiteralWatchDelegate &&                                                             // 14287
          watchDelegate !== oneTimeWatchDelegate;                                                                      // 14288
                                                                                                                       // 14289
      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {                   // 14290
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14291
        return interceptorFn(value, scope, locals);                                                                    // 14292
      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {                                       // 14293
        var value = parsedExpression(scope, locals, assign, inputs);                                                   // 14294
        var result = interceptorFn(value, scope, locals);                                                              // 14295
        // we only return the interceptor's result if the                                                              // 14296
        // initial value is defined (for bind-once)                                                                    // 14297
        return isDefined(value) ? result : value;                                                                      // 14298
      };                                                                                                               // 14299
                                                                                                                       // 14300
      // Propagate $$watchDelegates other then inputsWatchDelegate                                                     // 14301
      if (parsedExpression.$$watchDelegate &&                                                                          // 14302
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {                                                  // 14303
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;                                                         // 14304
      } else if (!interceptorFn.$stateful) {                                                                           // 14305
        // If there is an interceptor, but no watchDelegate then treat the interceptor like                            // 14306
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful                        // 14307
        fn.$$watchDelegate = inputsWatchDelegate;                                                                      // 14308
        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];                            // 14309
      }                                                                                                                // 14310
                                                                                                                       // 14311
      return fn;                                                                                                       // 14312
    }                                                                                                                  // 14313
  }];                                                                                                                  // 14314
}                                                                                                                      // 14315
                                                                                                                       // 14316
/**                                                                                                                    // 14317
 * @ngdoc service                                                                                                      // 14318
 * @name $q                                                                                                            // 14319
 * @requires $rootScope                                                                                                // 14320
 *                                                                                                                     // 14321
 * @description                                                                                                        // 14322
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)                  // 14323
 * when they are done processing.                                                                                      // 14324
 *                                                                                                                     // 14325
 * This is an implementation of promises/deferred objects inspired by                                                  // 14326
 * [Kris Kowal's Q](https://github.com/kriskowal/q).                                                                   // 14327
 *                                                                                                                     // 14328
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred                 // 14329
 * implementations, and the other which resembles ES6 promises to some degree.                                         // 14330
 *                                                                                                                     // 14331
 * # $q constructor                                                                                                    // 14332
 *                                                                                                                     // 14333
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`            // 14334
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,              // 14335
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).                // 14336
 *                                                                                                                     // 14337
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are       // 14338
 * available yet.                                                                                                      // 14339
 *                                                                                                                     // 14340
 * It can be used like so:                                                                                             // 14341
 *                                                                                                                     // 14342
 * ```js                                                                                                               // 14343
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14344
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14345
 *                                                                                                                     // 14346
 *   function asyncGreet(name) {                                                                                       // 14347
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.                         // 14348
 *     return $q(function(resolve, reject) {                                                                           // 14349
 *       setTimeout(function() {                                                                                       // 14350
 *         if (okToGreet(name)) {                                                                                      // 14351
 *           resolve('Hello, ' + name + '!');                                                                          // 14352
 *         } else {                                                                                                    // 14353
 *           reject('Greeting ' + name + ' is not allowed.');                                                          // 14354
 *         }                                                                                                           // 14355
 *       }, 1000);                                                                                                     // 14356
 *     });                                                                                                             // 14357
 *   }                                                                                                                 // 14358
 *                                                                                                                     // 14359
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14360
 *   promise.then(function(greeting) {                                                                                 // 14361
 *     alert('Success: ' + greeting);                                                                                  // 14362
 *   }, function(reason) {                                                                                             // 14363
 *     alert('Failed: ' + reason);                                                                                     // 14364
 *   });                                                                                                               // 14365
 * ```                                                                                                                 // 14366
 *                                                                                                                     // 14367
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.                            // 14368
 *                                                                                                                     // 14369
 * However, the more traditional CommonJS-style usage is still available, and documented below.                        // 14370
 *                                                                                                                     // 14371
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an                   // 14372
 * interface for interacting with an object that represents the result of an action that is                            // 14373
 * performed asynchronously, and may or may not be finished at any given point in time.                                // 14374
 *                                                                                                                     // 14375
 * From the perspective of dealing with error handling, deferred and promise APIs are to                               // 14376
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.                   // 14377
 *                                                                                                                     // 14378
 * ```js                                                                                                               // 14379
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`                               // 14380
 *   // are available in the current lexical scope (they could have been injected or passed in).                       // 14381
 *                                                                                                                     // 14382
 *   function asyncGreet(name) {                                                                                       // 14383
 *     var deferred = $q.defer();                                                                                      // 14384
 *                                                                                                                     // 14385
 *     setTimeout(function() {                                                                                         // 14386
 *       deferred.notify('About to greet ' + name + '.');                                                              // 14387
 *                                                                                                                     // 14388
 *       if (okToGreet(name)) {                                                                                        // 14389
 *         deferred.resolve('Hello, ' + name + '!');                                                                   // 14390
 *       } else {                                                                                                      // 14391
 *         deferred.reject('Greeting ' + name + ' is not allowed.');                                                   // 14392
 *       }                                                                                                             // 14393
 *     }, 1000);                                                                                                       // 14394
 *                                                                                                                     // 14395
 *     return deferred.promise;                                                                                        // 14396
 *   }                                                                                                                 // 14397
 *                                                                                                                     // 14398
 *   var promise = asyncGreet('Robin Hood');                                                                           // 14399
 *   promise.then(function(greeting) {                                                                                 // 14400
 *     alert('Success: ' + greeting);                                                                                  // 14401
 *   }, function(reason) {                                                                                             // 14402
 *     alert('Failed: ' + reason);                                                                                     // 14403
 *   }, function(update) {                                                                                             // 14404
 *     alert('Got notification: ' + update);                                                                           // 14405
 *   });                                                                                                               // 14406
 * ```                                                                                                                 // 14407
 *                                                                                                                     // 14408
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff                         // 14409
 * comes in the way of guarantees that promise and deferred APIs make, see                                             // 14410
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.                                      // 14411
 *                                                                                                                     // 14412
 * Additionally the promise api allows for composition that is very hard to do with the                                // 14413
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.                     // 14414
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the                    // 14415
 * section on serial or parallel joining of promises.                                                                  // 14416
 *                                                                                                                     // 14417
 * # The Deferred API                                                                                                  // 14418
 *                                                                                                                     // 14419
 * A new instance of deferred is constructed by calling `$q.defer()`.                                                  // 14420
 *                                                                                                                     // 14421
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs                     // 14422
 * that can be used for signaling the successful or unsuccessful completion, as well as the status                     // 14423
 * of the task.                                                                                                        // 14424
 *                                                                                                                     // 14425
 * **Methods**                                                                                                         // 14426
 *                                                                                                                     // 14427
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection                     // 14428
 *   constructed via `$q.reject`, the promise will be rejected instead.                                                // 14429
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to                           // 14430
 *   resolving it with a rejection constructed via `$q.reject`.                                                        // 14431
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called                   // 14432
 *   multiple times before the promise is either resolved or rejected.                                                 // 14433
 *                                                                                                                     // 14434
 * **Properties**                                                                                                      // 14435
 *                                                                                                                     // 14436
 * - promise – `{Promise}` – promise object associated with this deferred.                                             // 14437
 *                                                                                                                     // 14438
 *                                                                                                                     // 14439
 * # The Promise API                                                                                                   // 14440
 *                                                                                                                     // 14441
 * A new promise instance is created when a deferred instance is created and can be retrieved by                       // 14442
 * calling `deferred.promise`.                                                                                         // 14443
 *                                                                                                                     // 14444
 * The purpose of the promise object is to allow for interested parties to get access to the result                    // 14445
 * of the deferred task when it completes.                                                                             // 14446
 *                                                                                                                     // 14447
 * **Methods**                                                                                                         // 14448
 *                                                                                                                     // 14449
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or                    // 14450
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously                   // 14451
 *   as soon as the result is available. The callbacks are called with a single argument: the result                   // 14452
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to                        // 14453
 *   provide a progress indication, before the promise is resolved or rejected.                                        // 14454
 *                                                                                                                     // 14455
 *   This method *returns a new promise* which is resolved or rejected via the return value of the                     // 14456
 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved                  // 14457
 *   with the value which is resolved in that promise using                                                            // 14458
 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).                    // 14459
 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be                       // 14460
 *   resolved or rejected from the notifyCallback method.                                                              // 14461
 *                                                                                                                     // 14462
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`                                        // 14463
 *                                                                                                                     // 14464
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,     // 14465
 *   but to do so without modifying the final value. This is useful to release resources or do some                    // 14466
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full                        // 14467
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for                      // 14468
 *   more information.                                                                                                 // 14469
 *                                                                                                                     // 14470
 * # Chaining promises                                                                                                 // 14471
 *                                                                                                                     // 14472
 * Because calling the `then` method of a promise returns a new derived promise, it is easily                          // 14473
 * possible to create a chain of promises:                                                                             // 14474
 *                                                                                                                     // 14475
 * ```js                                                                                                               // 14476
 *   promiseB = promiseA.then(function(result) {                                                                       // 14477
 *     return result + 1;                                                                                              // 14478
 *   });                                                                                                               // 14479
 *                                                                                                                     // 14480
 *   // promiseB will be resolved immediately after promiseA is resolved and its value                                 // 14481
 *   // will be the result of promiseA incremented by 1                                                                // 14482
 * ```                                                                                                                 // 14483
 *                                                                                                                     // 14484
 * It is possible to create chains of any length and since a promise can be resolved with another                      // 14485
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of                      // 14486
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like                      // 14487
 * $http's response interceptors.                                                                                      // 14488
 *                                                                                                                     // 14489
 *                                                                                                                     // 14490
 * # Differences between Kris Kowal's Q and $q                                                                         // 14491
 *                                                                                                                     // 14492
 *  There are two main differences:                                                                                    // 14493
 *                                                                                                                     // 14494
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation                                     // 14495
 *   mechanism in angular, which means faster propagation of resolution or rejection into your                         // 14496
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.                            // 14497
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains                     // 14498
 *   all the important functionality needed for common async tasks.                                                    // 14499
 *                                                                                                                     // 14500
 *  # Testing                                                                                                          // 14501
 *                                                                                                                     // 14502
 *  ```js                                                                                                              // 14503
 *    it('should simulate promise', inject(function($q, $rootScope) {                                                  // 14504
 *      var deferred = $q.defer();                                                                                     // 14505
 *      var promise = deferred.promise;                                                                                // 14506
 *      var resolvedValue;                                                                                             // 14507
 *                                                                                                                     // 14508
 *      promise.then(function(value) { resolvedValue = value; });                                                      // 14509
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14510
 *                                                                                                                     // 14511
 *      // Simulate resolving of promise                                                                               // 14512
 *      deferred.resolve(123);                                                                                         // 14513
 *      // Note that the 'then' function does not get called synchronously.                                            // 14514
 *      // This is because we want the promise API to always be async, whether or not                                  // 14515
 *      // it got called synchronously or asynchronously.                                                              // 14516
 *      expect(resolvedValue).toBeUndefined();                                                                         // 14517
 *                                                                                                                     // 14518
 *      // Propagate promise resolution to 'then' functions using $apply().                                            // 14519
 *      $rootScope.$apply();                                                                                           // 14520
 *      expect(resolvedValue).toEqual(123);                                                                            // 14521
 *    }));                                                                                                             // 14522
 *  ```                                                                                                                // 14523
 *                                                                                                                     // 14524
 * @param {function(function, function)} resolver Function which is responsible for resolving or                       // 14525
 *   rejecting the newly created promise. The first parameter is a function which resolves the                         // 14526
 *   promise, the second parameter is a function which rejects the promise.                                            // 14527
 *                                                                                                                     // 14528
 * @returns {Promise} The newly created promise.                                                                       // 14529
 */                                                                                                                    // 14530
function $QProvider() {                                                                                                // 14531
                                                                                                                       // 14532
  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {                            // 14533
    return qFactory(function(callback) {                                                                               // 14534
      $rootScope.$evalAsync(callback);                                                                                 // 14535
    }, $exceptionHandler);                                                                                             // 14536
  }];                                                                                                                  // 14537
}                                                                                                                      // 14538
                                                                                                                       // 14539
function $$QProvider() {                                                                                               // 14540
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {                                // 14541
    return qFactory(function(callback) {                                                                               // 14542
      $browser.defer(callback);                                                                                        // 14543
    }, $exceptionHandler);                                                                                             // 14544
  }];                                                                                                                  // 14545
}                                                                                                                      // 14546
                                                                                                                       // 14547
/**                                                                                                                    // 14548
 * Constructs a promise manager.                                                                                       // 14549
 *                                                                                                                     // 14550
 * @param {function(function)} nextTick Function for executing functions in the next turn.                             // 14551
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for                   // 14552
 *     debugging purposes.                                                                                             // 14553
 * @returns {object} Promise manager.                                                                                  // 14554
 */                                                                                                                    // 14555
function qFactory(nextTick, exceptionHandler) {                                                                        // 14556
  var $qMinErr = minErr('$q', TypeError);                                                                              // 14557
  function callOnce(self, resolveFn, rejectFn) {                                                                       // 14558
    var called = false;                                                                                                // 14559
    function wrap(fn) {                                                                                                // 14560
      return function(value) {                                                                                         // 14561
        if (called) return;                                                                                            // 14562
        called = true;                                                                                                 // 14563
        fn.call(self, value);                                                                                          // 14564
      };                                                                                                               // 14565
    }                                                                                                                  // 14566
                                                                                                                       // 14567
    return [wrap(resolveFn), wrap(rejectFn)];                                                                          // 14568
  }                                                                                                                    // 14569
                                                                                                                       // 14570
  /**                                                                                                                  // 14571
   * @ngdoc method                                                                                                     // 14572
   * @name ng.$q#defer                                                                                                 // 14573
   * @kind function                                                                                                    // 14574
   *                                                                                                                   // 14575
   * @description                                                                                                      // 14576
   * Creates a `Deferred` object which represents a task which will finish in the future.                              // 14577
   *                                                                                                                   // 14578
   * @returns {Deferred} Returns a new instance of deferred.                                                           // 14579
   */                                                                                                                  // 14580
  var defer = function() {                                                                                             // 14581
    return new Deferred();                                                                                             // 14582
  };                                                                                                                   // 14583
                                                                                                                       // 14584
  function Promise() {                                                                                                 // 14585
    this.$$state = { status: 0 };                                                                                      // 14586
  }                                                                                                                    // 14587
                                                                                                                       // 14588
  extend(Promise.prototype, {                                                                                          // 14589
    then: function(onFulfilled, onRejected, progressBack) {                                                            // 14590
      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {                          // 14591
        return this;                                                                                                   // 14592
      }                                                                                                                // 14593
      var result = new Deferred();                                                                                     // 14594
                                                                                                                       // 14595
      this.$$state.pending = this.$$state.pending || [];                                                               // 14596
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);                                      // 14597
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);                                                 // 14598
                                                                                                                       // 14599
      return result.promise;                                                                                           // 14600
    },                                                                                                                 // 14601
                                                                                                                       // 14602
    "catch": function(callback) {                                                                                      // 14603
      return this.then(null, callback);                                                                                // 14604
    },                                                                                                                 // 14605
                                                                                                                       // 14606
    "finally": function(callback, progressBack) {                                                                      // 14607
      return this.then(function(value) {                                                                               // 14608
        return handleCallback(value, true, callback);                                                                  // 14609
      }, function(error) {                                                                                             // 14610
        return handleCallback(error, false, callback);                                                                 // 14611
      }, progressBack);                                                                                                // 14612
    }                                                                                                                  // 14613
  });                                                                                                                  // 14614
                                                                                                                       // 14615
  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native                            // 14616
  function simpleBind(context, fn) {                                                                                   // 14617
    return function(value) {                                                                                           // 14618
      fn.call(context, value);                                                                                         // 14619
    };                                                                                                                 // 14620
  }                                                                                                                    // 14621
                                                                                                                       // 14622
  function processQueue(state) {                                                                                       // 14623
    var fn, deferred, pending;                                                                                         // 14624
                                                                                                                       // 14625
    pending = state.pending;                                                                                           // 14626
    state.processScheduled = false;                                                                                    // 14627
    state.pending = undefined;                                                                                         // 14628
    for (var i = 0, ii = pending.length; i < ii; ++i) {                                                                // 14629
      deferred = pending[i][0];                                                                                        // 14630
      fn = pending[i][state.status];                                                                                   // 14631
      try {                                                                                                            // 14632
        if (isFunction(fn)) {                                                                                          // 14633
          deferred.resolve(fn(state.value));                                                                           // 14634
        } else if (state.status === 1) {                                                                               // 14635
          deferred.resolve(state.value);                                                                               // 14636
        } else {                                                                                                       // 14637
          deferred.reject(state.value);                                                                                // 14638
        }                                                                                                              // 14639
      } catch (e) {                                                                                                    // 14640
        deferred.reject(e);                                                                                            // 14641
        exceptionHandler(e);                                                                                           // 14642
      }                                                                                                                // 14643
    }                                                                                                                  // 14644
  }                                                                                                                    // 14645
                                                                                                                       // 14646
  function scheduleProcessQueue(state) {                                                                               // 14647
    if (state.processScheduled || !state.pending) return;                                                              // 14648
    state.processScheduled = true;                                                                                     // 14649
    nextTick(function() { processQueue(state); });                                                                     // 14650
  }                                                                                                                    // 14651
                                                                                                                       // 14652
  function Deferred() {                                                                                                // 14653
    this.promise = new Promise();                                                                                      // 14654
    //Necessary to support unbound execution :/                                                                        // 14655
    this.resolve = simpleBind(this, this.resolve);                                                                     // 14656
    this.reject = simpleBind(this, this.reject);                                                                       // 14657
    this.notify = simpleBind(this, this.notify);                                                                       // 14658
  }                                                                                                                    // 14659
                                                                                                                       // 14660
  extend(Deferred.prototype, {                                                                                         // 14661
    resolve: function(val) {                                                                                           // 14662
      if (this.promise.$$state.status) return;                                                                         // 14663
      if (val === this.promise) {                                                                                      // 14664
        this.$$reject($qMinErr(                                                                                        // 14665
          'qcycle',                                                                                                    // 14666
          "Expected promise to be resolved with value other than itself '{0}'",                                        // 14667
          val));                                                                                                       // 14668
      } else {                                                                                                         // 14669
        this.$$resolve(val);                                                                                           // 14670
      }                                                                                                                // 14671
                                                                                                                       // 14672
    },                                                                                                                 // 14673
                                                                                                                       // 14674
    $$resolve: function(val) {                                                                                         // 14675
      var then, fns;                                                                                                   // 14676
                                                                                                                       // 14677
      fns = callOnce(this, this.$$resolve, this.$$reject);                                                             // 14678
      try {                                                                                                            // 14679
        if ((isObject(val) || isFunction(val))) then = val && val.then;                                                // 14680
        if (isFunction(then)) {                                                                                        // 14681
          this.promise.$$state.status = -1;                                                                            // 14682
          then.call(val, fns[0], fns[1], this.notify);                                                                 // 14683
        } else {                                                                                                       // 14684
          this.promise.$$state.value = val;                                                                            // 14685
          this.promise.$$state.status = 1;                                                                             // 14686
          scheduleProcessQueue(this.promise.$$state);                                                                  // 14687
        }                                                                                                              // 14688
      } catch (e) {                                                                                                    // 14689
        fns[1](e);                                                                                                     // 14690
        exceptionHandler(e);                                                                                           // 14691
      }                                                                                                                // 14692
    },                                                                                                                 // 14693
                                                                                                                       // 14694
    reject: function(reason) {                                                                                         // 14695
      if (this.promise.$$state.status) return;                                                                         // 14696
      this.$$reject(reason);                                                                                           // 14697
    },                                                                                                                 // 14698
                                                                                                                       // 14699
    $$reject: function(reason) {                                                                                       // 14700
      this.promise.$$state.value = reason;                                                                             // 14701
      this.promise.$$state.status = 2;                                                                                 // 14702
      scheduleProcessQueue(this.promise.$$state);                                                                      // 14703
    },                                                                                                                 // 14704
                                                                                                                       // 14705
    notify: function(progress) {                                                                                       // 14706
      var callbacks = this.promise.$$state.pending;                                                                    // 14707
                                                                                                                       // 14708
      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {                                       // 14709
        nextTick(function() {                                                                                          // 14710
          var callback, result;                                                                                        // 14711
          for (var i = 0, ii = callbacks.length; i < ii; i++) {                                                        // 14712
            result = callbacks[i][0];                                                                                  // 14713
            callback = callbacks[i][3];                                                                                // 14714
            try {                                                                                                      // 14715
              result.notify(isFunction(callback) ? callback(progress) : progress);                                     // 14716
            } catch (e) {                                                                                              // 14717
              exceptionHandler(e);                                                                                     // 14718
            }                                                                                                          // 14719
          }                                                                                                            // 14720
        });                                                                                                            // 14721
      }                                                                                                                // 14722
    }                                                                                                                  // 14723
  });                                                                                                                  // 14724
                                                                                                                       // 14725
  /**                                                                                                                  // 14726
   * @ngdoc method                                                                                                     // 14727
   * @name $q#reject                                                                                                   // 14728
   * @kind function                                                                                                    // 14729
   *                                                                                                                   // 14730
   * @description                                                                                                      // 14731
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be                    // 14732
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in                     // 14733
   * a promise chain, you don't need to worry about it.                                                                // 14734
   *                                                                                                                   // 14735
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of                           // 14736
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via                   // 14737
   * a promise error callback and you want to forward the error to the promise derived from the                        // 14738
   * current promise, you have to "rethrow" the error by returning a rejection constructed via                         // 14739
   * `reject`.                                                                                                         // 14740
   *                                                                                                                   // 14741
   * ```js                                                                                                             // 14742
   *   promiseB = promiseA.then(function(result) {                                                                     // 14743
   *     // success: do something and resolve promiseB                                                                 // 14744
   *     //          with the old or a new result                                                                      // 14745
   *     return result;                                                                                                // 14746
   *   }, function(reason) {                                                                                           // 14747
   *     // error: handle the error if possible and                                                                    // 14748
   *     //        resolve promiseB with newPromiseOrValue,                                                            // 14749
   *     //        otherwise forward the rejection to promiseB                                                         // 14750
   *     if (canHandle(reason)) {                                                                                      // 14751
   *      // handle the error and recover                                                                              // 14752
   *      return newPromiseOrValue;                                                                                    // 14753
   *     }                                                                                                             // 14754
   *     return $q.reject(reason);                                                                                     // 14755
   *   });                                                                                                             // 14756
   * ```                                                                                                               // 14757
   *                                                                                                                   // 14758
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.                    // 14759
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.                     // 14760
   */                                                                                                                  // 14761
  var reject = function(reason) {                                                                                      // 14762
    var result = new Deferred();                                                                                       // 14763
    result.reject(reason);                                                                                             // 14764
    return result.promise;                                                                                             // 14765
  };                                                                                                                   // 14766
                                                                                                                       // 14767
  var makePromise = function makePromise(value, resolved) {                                                            // 14768
    var result = new Deferred();                                                                                       // 14769
    if (resolved) {                                                                                                    // 14770
      result.resolve(value);                                                                                           // 14771
    } else {                                                                                                           // 14772
      result.reject(value);                                                                                            // 14773
    }                                                                                                                  // 14774
    return result.promise;                                                                                             // 14775
  };                                                                                                                   // 14776
                                                                                                                       // 14777
  var handleCallback = function handleCallback(value, isResolved, callback) {                                          // 14778
    var callbackOutput = null;                                                                                         // 14779
    try {                                                                                                              // 14780
      if (isFunction(callback)) callbackOutput = callback();                                                           // 14781
    } catch (e) {                                                                                                      // 14782
      return makePromise(e, false);                                                                                    // 14783
    }                                                                                                                  // 14784
    if (isPromiseLike(callbackOutput)) {                                                                               // 14785
      return callbackOutput.then(function() {                                                                          // 14786
        return makePromise(value, isResolved);                                                                         // 14787
      }, function(error) {                                                                                             // 14788
        return makePromise(error, false);                                                                              // 14789
      });                                                                                                              // 14790
    } else {                                                                                                           // 14791
      return makePromise(value, isResolved);                                                                           // 14792
    }                                                                                                                  // 14793
  };                                                                                                                   // 14794
                                                                                                                       // 14795
  /**                                                                                                                  // 14796
   * @ngdoc method                                                                                                     // 14797
   * @name $q#when                                                                                                     // 14798
   * @kind function                                                                                                    // 14799
   *                                                                                                                   // 14800
   * @description                                                                                                      // 14801
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.                       // 14802
   * This is useful when you are dealing with an object that might or might not be a promise, or if                    // 14803
   * the promise comes from a source that can't be trusted.                                                            // 14804
   *                                                                                                                   // 14805
   * @param {*} value Value or a promise                                                                               // 14806
   * @param {Function=} successCallback                                                                                // 14807
   * @param {Function=} errorCallback                                                                                  // 14808
   * @param {Function=} progressCallback                                                                               // 14809
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14810
   */                                                                                                                  // 14811
                                                                                                                       // 14812
                                                                                                                       // 14813
  var when = function(value, callback, errback, progressBack) {                                                        // 14814
    var result = new Deferred();                                                                                       // 14815
    result.resolve(value);                                                                                             // 14816
    return result.promise.then(callback, errback, progressBack);                                                       // 14817
  };                                                                                                                   // 14818
                                                                                                                       // 14819
  /**                                                                                                                  // 14820
   * @ngdoc method                                                                                                     // 14821
   * @name $q#resolve                                                                                                  // 14822
   * @kind function                                                                                                    // 14823
   *                                                                                                                   // 14824
   * @description                                                                                                      // 14825
   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.                                         // 14826
   *                                                                                                                   // 14827
   * @param {*} value Value or a promise                                                                               // 14828
   * @param {Function=} successCallback                                                                                // 14829
   * @param {Function=} errorCallback                                                                                  // 14830
   * @param {Function=} progressCallback                                                                               // 14831
   * @returns {Promise} Returns a promise of the passed value or promise                                               // 14832
   */                                                                                                                  // 14833
  var resolve = when;                                                                                                  // 14834
                                                                                                                       // 14835
  /**                                                                                                                  // 14836
   * @ngdoc method                                                                                                     // 14837
   * @name $q#all                                                                                                      // 14838
   * @kind function                                                                                                    // 14839
   *                                                                                                                   // 14840
   * @description                                                                                                      // 14841
   * Combines multiple promises into a single promise that is resolved when all of the input                           // 14842
   * promises are resolved.                                                                                            // 14843
   *                                                                                                                   // 14844
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.                                  // 14845
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,                   // 14846
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.                     // 14847
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected                    // 14848
   *   with the same rejection value.                                                                                  // 14849
   */                                                                                                                  // 14850
                                                                                                                       // 14851
  function all(promises) {                                                                                             // 14852
    var deferred = new Deferred(),                                                                                     // 14853
        counter = 0,                                                                                                   // 14854
        results = isArray(promises) ? [] : {};                                                                         // 14855
                                                                                                                       // 14856
    forEach(promises, function(promise, key) {                                                                         // 14857
      counter++;                                                                                                       // 14858
      when(promise).then(function(value) {                                                                             // 14859
        if (results.hasOwnProperty(key)) return;                                                                       // 14860
        results[key] = value;                                                                                          // 14861
        if (!(--counter)) deferred.resolve(results);                                                                   // 14862
      }, function(reason) {                                                                                            // 14863
        if (results.hasOwnProperty(key)) return;                                                                       // 14864
        deferred.reject(reason);                                                                                       // 14865
      });                                                                                                              // 14866
    });                                                                                                                // 14867
                                                                                                                       // 14868
    if (counter === 0) {                                                                                               // 14869
      deferred.resolve(results);                                                                                       // 14870
    }                                                                                                                  // 14871
                                                                                                                       // 14872
    return deferred.promise;                                                                                           // 14873
  }                                                                                                                    // 14874
                                                                                                                       // 14875
  var $Q = function Q(resolver) {                                                                                      // 14876
    if (!isFunction(resolver)) {                                                                                       // 14877
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);                                           // 14878
    }                                                                                                                  // 14879
                                                                                                                       // 14880
    if (!(this instanceof Q)) {                                                                                        // 14881
      // More useful when $Q is the Promise itself.                                                                    // 14882
      return new Q(resolver);                                                                                          // 14883
    }                                                                                                                  // 14884
                                                                                                                       // 14885
    var deferred = new Deferred();                                                                                     // 14886
                                                                                                                       // 14887
    function resolveFn(value) {                                                                                        // 14888
      deferred.resolve(value);                                                                                         // 14889
    }                                                                                                                  // 14890
                                                                                                                       // 14891
    function rejectFn(reason) {                                                                                        // 14892
      deferred.reject(reason);                                                                                         // 14893
    }                                                                                                                  // 14894
                                                                                                                       // 14895
    resolver(resolveFn, rejectFn);                                                                                     // 14896
                                                                                                                       // 14897
    return deferred.promise;                                                                                           // 14898
  };                                                                                                                   // 14899
                                                                                                                       // 14900
  $Q.defer = defer;                                                                                                    // 14901
  $Q.reject = reject;                                                                                                  // 14902
  $Q.when = when;                                                                                                      // 14903
  $Q.resolve = resolve;                                                                                                // 14904
  $Q.all = all;                                                                                                        // 14905
                                                                                                                       // 14906
  return $Q;                                                                                                           // 14907
}                                                                                                                      // 14908
                                                                                                                       // 14909
function $$RAFProvider() { //rAF                                                                                       // 14910
  this.$get = ['$window', '$timeout', function($window, $timeout) {                                                    // 14911
    var requestAnimationFrame = $window.requestAnimationFrame ||                                                       // 14912
                                $window.webkitRequestAnimationFrame;                                                   // 14913
                                                                                                                       // 14914
    var cancelAnimationFrame = $window.cancelAnimationFrame ||                                                         // 14915
                               $window.webkitCancelAnimationFrame ||                                                   // 14916
                               $window.webkitCancelRequestAnimationFrame;                                              // 14917
                                                                                                                       // 14918
    var rafSupported = !!requestAnimationFrame;                                                                        // 14919
    var raf = rafSupported                                                                                             // 14920
      ? function(fn) {                                                                                                 // 14921
          var id = requestAnimationFrame(fn);                                                                          // 14922
          return function() {                                                                                          // 14923
            cancelAnimationFrame(id);                                                                                  // 14924
          };                                                                                                           // 14925
        }                                                                                                              // 14926
      : function(fn) {                                                                                                 // 14927
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666                                                // 14928
          return function() {                                                                                          // 14929
            $timeout.cancel(timer);                                                                                    // 14930
          };                                                                                                           // 14931
        };                                                                                                             // 14932
                                                                                                                       // 14933
    raf.supported = rafSupported;                                                                                      // 14934
                                                                                                                       // 14935
    return raf;                                                                                                        // 14936
  }];                                                                                                                  // 14937
}                                                                                                                      // 14938
                                                                                                                       // 14939
/**                                                                                                                    // 14940
 * DESIGN NOTES                                                                                                        // 14941
 *                                                                                                                     // 14942
 * The design decisions behind the scope are heavily favored for speed and memory consumption.                         // 14943
 *                                                                                                                     // 14944
 * The typical use of scope is to watch the expressions, which most of the time return the same                        // 14945
 * value as last time so we optimize the operation.                                                                    // 14946
 *                                                                                                                     // 14947
 * Closures construction is expensive in terms of speed as well as memory:                                             // 14948
 *   - No closures, instead use prototypical inheritance for API                                                       // 14949
 *   - Internal state needs to be stored on scope directly, which means that private state is                          // 14950
 *     exposed as $$____ properties                                                                                    // 14951
 *                                                                                                                     // 14952
 * Loop operations are optimized by using while(count--) { ... }                                                       // 14953
 *   - this means that in order to keep the same order of execution as addition we have to add                         // 14954
 *     items to the array at the beginning (unshift) instead of at the end (push)                                      // 14955
 *                                                                                                                     // 14956
 * Child scopes are created and removed often                                                                          // 14957
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list                        // 14958
 *                                                                                                                     // 14959
 * There are few watches then a lot of observers. This is why you don't want the observer to be                        // 14960
 * implemented in the same way as watch. Watch requires return of initialization function which                        // 14961
 * are expensive to construct.                                                                                         // 14962
 */                                                                                                                    // 14963
                                                                                                                       // 14964
                                                                                                                       // 14965
/**                                                                                                                    // 14966
 * @ngdoc provider                                                                                                     // 14967
 * @name $rootScopeProvider                                                                                            // 14968
 * @description                                                                                                        // 14969
 *                                                                                                                     // 14970
 * Provider for the $rootScope service.                                                                                // 14971
 */                                                                                                                    // 14972
                                                                                                                       // 14973
/**                                                                                                                    // 14974
 * @ngdoc method                                                                                                       // 14975
 * @name $rootScopeProvider#digestTtl                                                                                  // 14976
 * @description                                                                                                        // 14977
 *                                                                                                                     // 14978
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and                    // 14979
 * assuming that the model is unstable.                                                                                // 14980
 *                                                                                                                     // 14981
 * The current default is 10 iterations.                                                                               // 14982
 *                                                                                                                     // 14983
 * In complex applications it's possible that the dependencies between `$watch`s will result in                        // 14984
 * several digest iterations. However if an application needs more than the default 10 digest                          // 14985
 * iterations for its model to stabilize then you should investigate what is causing the model to                      // 14986
 * continuously change during the digest.                                                                              // 14987
 *                                                                                                                     // 14988
 * Increasing the TTL could have performance implications, so you should not change it without                         // 14989
 * proper justification.                                                                                               // 14990
 *                                                                                                                     // 14991
 * @param {number} limit The number of digest iterations.                                                              // 14992
 */                                                                                                                    // 14993
                                                                                                                       // 14994
                                                                                                                       // 14995
/**                                                                                                                    // 14996
 * @ngdoc service                                                                                                      // 14997
 * @name $rootScope                                                                                                    // 14998
 * @description                                                                                                        // 14999
 *                                                                                                                     // 15000
 * Every application has a single root {@link ng.$rootScope.Scope scope}.                                              // 15001
 * All other scopes are descendant scopes of the root scope. Scopes provide separation                                 // 15002
 * between the model and the view, via a mechanism for watching the model for changes.                                 // 15003
 * They also provide an event emission/broadcast and subscription facility. See the                                    // 15004
 * {@link guide/scope developer guide on scopes}.                                                                      // 15005
 */                                                                                                                    // 15006
function $RootScopeProvider() {                                                                                        // 15007
  var TTL = 10;                                                                                                        // 15008
  var $rootScopeMinErr = minErr('$rootScope');                                                                         // 15009
  var lastDirtyWatch = null;                                                                                           // 15010
  var applyAsyncId = null;                                                                                             // 15011
                                                                                                                       // 15012
  this.digestTtl = function(value) {                                                                                   // 15013
    if (arguments.length) {                                                                                            // 15014
      TTL = value;                                                                                                     // 15015
    }                                                                                                                  // 15016
    return TTL;                                                                                                        // 15017
  };                                                                                                                   // 15018
                                                                                                                       // 15019
  function createChildScopeClass(parent) {                                                                             // 15020
    function ChildScope() {                                                                                            // 15021
      this.$$watchers = this.$$nextSibling =                                                                           // 15022
          this.$$childHead = this.$$childTail = null;                                                                  // 15023
      this.$$listeners = {};                                                                                           // 15024
      this.$$listenerCount = {};                                                                                       // 15025
      this.$$watchersCount = 0;                                                                                        // 15026
      this.$id = nextUid();                                                                                            // 15027
      this.$$ChildScope = null;                                                                                        // 15028
    }                                                                                                                  // 15029
    ChildScope.prototype = parent;                                                                                     // 15030
    return ChildScope;                                                                                                 // 15031
  }                                                                                                                    // 15032
                                                                                                                       // 15033
  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',                                                 // 15034
      function($injector, $exceptionHandler, $parse, $browser) {                                                       // 15035
                                                                                                                       // 15036
    function destroyChildScope($event) {                                                                               // 15037
        $event.currentScope.$$destroyed = true;                                                                        // 15038
    }                                                                                                                  // 15039
                                                                                                                       // 15040
    /**                                                                                                                // 15041
     * @ngdoc type                                                                                                     // 15042
     * @name $rootScope.Scope                                                                                          // 15043
     *                                                                                                                 // 15044
     * @description                                                                                                    // 15045
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the                           // 15046
     * {@link auto.$injector $injector}. Child scopes are created using the                                            // 15047
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when                     // 15048
     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for                          // 15049
     * an in-depth introduction and usage examples.                                                                    // 15050
     *                                                                                                                 // 15051
     *                                                                                                                 // 15052
     * # Inheritance                                                                                                   // 15053
     * A scope can inherit from a parent scope, as in this example:                                                    // 15054
     * ```js                                                                                                           // 15055
         var parent = $rootScope;                                                                                      // 15056
         var child = parent.$new();                                                                                    // 15057
                                                                                                                       // 15058
         parent.salutation = "Hello";                                                                                  // 15059
         expect(child.salutation).toEqual('Hello');                                                                    // 15060
                                                                                                                       // 15061
         child.salutation = "Welcome";                                                                                 // 15062
         expect(child.salutation).toEqual('Welcome');                                                                  // 15063
         expect(parent.salutation).toEqual('Hello');                                                                   // 15064
     * ```                                                                                                             // 15065
     *                                                                                                                 // 15066
     * When interacting with `Scope` in tests, additional helper methods are available on the                          // 15067
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional                      // 15068
     * details.                                                                                                        // 15069
     *                                                                                                                 // 15070
     *                                                                                                                 // 15071
     * @param {Object.<string, function()>=} providers Map of service factory which need to be                         // 15072
     *                                       provided for the current scope. Defaults to {@link ng}.                   // 15073
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should                      // 15074
     *                              append/override services provided by `providers`. This is handy                    // 15075
     *                              when unit-testing and having the need to override a default                        // 15076
     *                              service.                                                                           // 15077
     * @returns {Object} Newly created scope.                                                                          // 15078
     *                                                                                                                 // 15079
     */                                                                                                                // 15080
    function Scope() {                                                                                                 // 15081
      this.$id = nextUid();                                                                                            // 15082
      this.$$phase = this.$parent = this.$$watchers =                                                                  // 15083
                     this.$$nextSibling = this.$$prevSibling =                                                         // 15084
                     this.$$childHead = this.$$childTail = null;                                                       // 15085
      this.$root = this;                                                                                               // 15086
      this.$$destroyed = false;                                                                                        // 15087
      this.$$listeners = {};                                                                                           // 15088
      this.$$listenerCount = {};                                                                                       // 15089
      this.$$watchersCount = 0;                                                                                        // 15090
      this.$$isolateBindings = null;                                                                                   // 15091
    }                                                                                                                  // 15092
                                                                                                                       // 15093
    /**                                                                                                                // 15094
     * @ngdoc property                                                                                                 // 15095
     * @name $rootScope.Scope#$id                                                                                      // 15096
     *                                                                                                                 // 15097
     * @description                                                                                                    // 15098
     * Unique scope ID (monotonically increasing) useful for debugging.                                                // 15099
     */                                                                                                                // 15100
                                                                                                                       // 15101
     /**                                                                                                               // 15102
      * @ngdoc property                                                                                                // 15103
      * @name $rootScope.Scope#$parent                                                                                 // 15104
      *                                                                                                                // 15105
      * @description                                                                                                   // 15106
      * Reference to the parent scope.                                                                                 // 15107
      */                                                                                                               // 15108
                                                                                                                       // 15109
      /**                                                                                                              // 15110
       * @ngdoc property                                                                                               // 15111
       * @name $rootScope.Scope#$root                                                                                  // 15112
       *                                                                                                               // 15113
       * @description                                                                                                  // 15114
       * Reference to the root scope.                                                                                  // 15115
       */                                                                                                              // 15116
                                                                                                                       // 15117
    Scope.prototype = {                                                                                                // 15118
      constructor: Scope,                                                                                              // 15119
      /**                                                                                                              // 15120
       * @ngdoc method                                                                                                 // 15121
       * @name $rootScope.Scope#$new                                                                                   // 15122
       * @kind function                                                                                                // 15123
       *                                                                                                               // 15124
       * @description                                                                                                  // 15125
       * Creates a new child {@link ng.$rootScope.Scope scope}.                                                        // 15126
       *                                                                                                               // 15127
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.                      // 15128
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.      // 15129
       *                                                                                                               // 15130
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is                          // 15131
       * desired for the scope and its child scopes to be permanently detached from the parent and                     // 15132
       * thus stop participating in model change detection and listener notification by invoking.                      // 15133
       *                                                                                                               // 15134
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the                     // 15135
       *         parent scope. The scope is isolated, as it can not see parent scope properties.                       // 15136
       *         When creating widgets, it is useful for the widget to not accidentally read parent                    // 15137
       *         state.                                                                                                // 15138
       *                                                                                                               // 15139
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`               // 15140
       *                              of the newly created scope. Defaults to `this` scope if not provided.            // 15141
       *                              This is used when creating a transclude scope to correctly place it              // 15142
       *                              in the scope hierarchy while maintaining the correct prototypical                // 15143
       *                              inheritance.                                                                     // 15144
       *                                                                                                               // 15145
       * @returns {Object} The newly created child scope.                                                              // 15146
       *                                                                                                               // 15147
       */                                                                                                              // 15148
      $new: function(isolate, parent) {                                                                                // 15149
        var child;                                                                                                     // 15150
                                                                                                                       // 15151
        parent = parent || this;                                                                                       // 15152
                                                                                                                       // 15153
        if (isolate) {                                                                                                 // 15154
          child = new Scope();                                                                                         // 15155
          child.$root = this.$root;                                                                                    // 15156
        } else {                                                                                                       // 15157
          // Only create a child scope class if somebody asks for one,                                                 // 15158
          // but cache it to allow the VM to optimize lookups.                                                         // 15159
          if (!this.$$ChildScope) {                                                                                    // 15160
            this.$$ChildScope = createChildScopeClass(this);                                                           // 15161
          }                                                                                                            // 15162
          child = new this.$$ChildScope();                                                                             // 15163
        }                                                                                                              // 15164
        child.$parent = parent;                                                                                        // 15165
        child.$$prevSibling = parent.$$childTail;                                                                      // 15166
        if (parent.$$childHead) {                                                                                      // 15167
          parent.$$childTail.$$nextSibling = child;                                                                    // 15168
          parent.$$childTail = child;                                                                                  // 15169
        } else {                                                                                                       // 15170
          parent.$$childHead = parent.$$childTail = child;                                                             // 15171
        }                                                                                                              // 15172
                                                                                                                       // 15173
        // When the new scope is not isolated or we inherit from `this`, and                                           // 15174
        // the parent scope is destroyed, the property `$$destroyed` is inherited                                      // 15175
        // prototypically. In all other cases, this property needs to be set                                           // 15176
        // when the parent scope is destroyed.                                                                         // 15177
        // The listener needs to be added after the parent is set                                                      // 15178
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);                                       // 15179
                                                                                                                       // 15180
        return child;                                                                                                  // 15181
      },                                                                                                               // 15182
                                                                                                                       // 15183
      /**                                                                                                              // 15184
       * @ngdoc method                                                                                                 // 15185
       * @name $rootScope.Scope#$watch                                                                                 // 15186
       * @kind function                                                                                                // 15187
       *                                                                                                               // 15188
       * @description                                                                                                  // 15189
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.                        // 15190
       *                                                                                                               // 15191
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest                         // 15192
       *   $digest()} and should return the value that will be watched. (Since                                         // 15193
       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the                            // 15194
       *   `watchExpression` can execute multiple times per                                                            // 15195
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)                                    // 15196
       * - The `listener` is called only when the value from the current `watchExpression` and the                     // 15197
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,                    // 15198
       *   see below). Inequality is determined according to reference inequality,                                     // 15199
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`                                         // 15201
       *   (see next point)                                                                                            // 15202
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined                            // 15203
       *   according to the {@link angular.equals} function. To save the value of the object for                       // 15204
       *   later comparison, the {@link angular.copy} function is used. This therefore means that                      // 15205
       *   watching complex objects will have adverse memory and performance implications.                             // 15206
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.                     // 15207
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun                         // 15208
       *   iteration limit is 10 to prevent an infinite loop deadlock.                                                 // 15209
       *                                                                                                               // 15210
       *                                                                                                               // 15211
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,                    // 15212
       * you can register a `watchExpression` function with no `listener`. (Be prepared for                            // 15213
       * multiple calls to your `watchExpression` because it will execute multiple times in a                          // 15214
       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)                            // 15215
       *                                                                                                               // 15216
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously                      // 15217
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the                                     // 15218
       * watcher. In rare cases, this is undesirable because the listener is called when the result                    // 15219
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you                     // 15220
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the                     // 15221
       * listener was called due to initialization.                                                                    // 15222
       *                                                                                                               // 15223
       *                                                                                                               // 15224
       *                                                                                                               // 15225
       * # Example                                                                                                     // 15226
       * ```js                                                                                                         // 15227
           // let's assume that scope was dependency injected as the $rootScope                                        // 15228
           var scope = $rootScope;                                                                                     // 15229
           scope.name = 'misko';                                                                                       // 15230
           scope.counter = 0;                                                                                          // 15231
                                                                                                                       // 15232
           expect(scope.counter).toEqual(0);                                                                           // 15233
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15234
             scope.counter = scope.counter + 1;                                                                        // 15235
           });                                                                                                         // 15236
           expect(scope.counter).toEqual(0);                                                                           // 15237
                                                                                                                       // 15238
           scope.$digest();                                                                                            // 15239
           // the listener is always called during the first $digest loop after it was registered                      // 15240
           expect(scope.counter).toEqual(1);                                                                           // 15241
                                                                                                                       // 15242
           scope.$digest();                                                                                            // 15243
           // but now it will not be called unless the value changes                                                   // 15244
           expect(scope.counter).toEqual(1);                                                                           // 15245
                                                                                                                       // 15246
           scope.name = 'adam';                                                                                        // 15247
           scope.$digest();                                                                                            // 15248
           expect(scope.counter).toEqual(2);                                                                           // 15249
                                                                                                                       // 15250
                                                                                                                       // 15251
                                                                                                                       // 15252
           // Using a function as a watchExpression                                                                    // 15253
           var food;                                                                                                   // 15254
           scope.foodCounter = 0;                                                                                      // 15255
           expect(scope.foodCounter).toEqual(0);                                                                       // 15256
           scope.$watch(                                                                                               // 15257
             // This function returns the value being watched. It is called for each turn of the $digest loop          // 15258
             function() { return food; },                                                                              // 15259
             // This is the change listener, called when the value returned from the above function changes            // 15260
             function(newValue, oldValue) {                                                                            // 15261
               if ( newValue !== oldValue ) {                                                                          // 15262
                 // Only increment the counter if the value changed                                                    // 15263
                 scope.foodCounter = scope.foodCounter + 1;                                                            // 15264
               }                                                                                                       // 15265
             }                                                                                                         // 15266
           );                                                                                                          // 15267
           // No digest has been run so the counter will be zero                                                       // 15268
           expect(scope.foodCounter).toEqual(0);                                                                       // 15269
                                                                                                                       // 15270
           // Run the digest but since food has not changed count will still be zero                                   // 15271
           scope.$digest();                                                                                            // 15272
           expect(scope.foodCounter).toEqual(0);                                                                       // 15273
                                                                                                                       // 15274
           // Update food and run digest.  Now the counter will increment                                              // 15275
           food = 'cheeseburger';                                                                                      // 15276
           scope.$digest();                                                                                            // 15277
           expect(scope.foodCounter).toEqual(1);                                                                       // 15278
                                                                                                                       // 15279
       * ```                                                                                                           // 15280
       *                                                                                                               // 15281
       *                                                                                                               // 15282
       *                                                                                                               // 15283
       * @param {(function()|string)} watchExpression Expression that is evaluated on each                             // 15284
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers                   // 15285
       *    a call to the `listener`.                                                                                  // 15286
       *                                                                                                               // 15287
       *    - `string`: Evaluated as {@link guide/expression expression}                                               // 15288
       *    - `function(scope)`: called with current `scope` as a parameter.                                           // 15289
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value                          // 15290
       *    of `watchExpression` changes.                                                                              // 15291
       *                                                                                                               // 15292
       *    - `newVal` contains the current value of the `watchExpression`                                             // 15293
       *    - `oldVal` contains the previous value of the `watchExpression`                                            // 15294
       *    - `scope` refers to the current scope                                                                      // 15295
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of          // 15296
       *     comparing for reference equality.                                                                         // 15297
       * @returns {function()} Returns a deregistration function for this listener.                                    // 15298
       */                                                                                                              // 15299
      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {                                    // 15300
        var get = $parse(watchExp);                                                                                    // 15301
                                                                                                                       // 15302
        if (get.$$watchDelegate) {                                                                                     // 15303
          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);                                   // 15304
        }                                                                                                              // 15305
        var scope = this,                                                                                              // 15306
            array = scope.$$watchers,                                                                                  // 15307
            watcher = {                                                                                                // 15308
              fn: listener,                                                                                            // 15309
              last: initWatchVal,                                                                                      // 15310
              get: get,                                                                                                // 15311
              exp: prettyPrintExpression || watchExp,                                                                  // 15312
              eq: !!objectEquality                                                                                     // 15313
            };                                                                                                         // 15314
                                                                                                                       // 15315
        lastDirtyWatch = null;                                                                                         // 15316
                                                                                                                       // 15317
        if (!isFunction(listener)) {                                                                                   // 15318
          watcher.fn = noop;                                                                                           // 15319
        }                                                                                                              // 15320
                                                                                                                       // 15321
        if (!array) {                                                                                                  // 15322
          array = scope.$$watchers = [];                                                                               // 15323
        }                                                                                                              // 15324
        // we use unshift since we use a while loop in $digest for speed.                                              // 15325
        // the while loop reads in reverse order.                                                                      // 15326
        array.unshift(watcher);                                                                                        // 15327
        incrementWatchersCount(this, 1);                                                                               // 15328
                                                                                                                       // 15329
        return function deregisterWatch() {                                                                            // 15330
          if (arrayRemove(array, watcher) >= 0) {                                                                      // 15331
            incrementWatchersCount(scope, -1);                                                                         // 15332
          }                                                                                                            // 15333
          lastDirtyWatch = null;                                                                                       // 15334
        };                                                                                                             // 15335
      },                                                                                                               // 15336
                                                                                                                       // 15337
      /**                                                                                                              // 15338
       * @ngdoc method                                                                                                 // 15339
       * @name $rootScope.Scope#$watchGroup                                                                            // 15340
       * @kind function                                                                                                // 15341
       *                                                                                                               // 15342
       * @description                                                                                                  // 15343
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.     // 15344
       * If any one expression in the collection changes the `listener` is executed.                                   // 15345
       *                                                                                                               // 15346
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.                                                              // 15348
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.                   // 15349
       *                                                                                                               // 15350
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually       // 15351
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}                                                     // 15352
       *                                                                                                               // 15353
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any      // 15354
       *    expression in `watchExpressions` changes                                                                   // 15355
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching     // 15356
       *    those of `watchExpression`                                                                                 // 15357
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`                                                                                 // 15359
       *    The `scope` refers to the current scope.                                                                   // 15360
       * @returns {function()} Returns a de-registration function for all listeners.                                   // 15361
       */                                                                                                              // 15362
      $watchGroup: function(watchExpressions, listener) {                                                              // 15363
        var oldValues = new Array(watchExpressions.length);                                                            // 15364
        var newValues = new Array(watchExpressions.length);                                                            // 15365
        var deregisterFns = [];                                                                                        // 15366
        var self = this;                                                                                               // 15367
        var changeReactionScheduled = false;                                                                           // 15368
        var firstRun = true;                                                                                           // 15369
                                                                                                                       // 15370
        if (!watchExpressions.length) {                                                                                // 15371
          // No expressions means we call the listener ASAP                                                            // 15372
          var shouldCall = true;                                                                                       // 15373
          self.$evalAsync(function() {                                                                                 // 15374
            if (shouldCall) listener(newValues, newValues, self);                                                      // 15375
          });                                                                                                          // 15376
          return function deregisterWatchGroup() {                                                                     // 15377
            shouldCall = false;                                                                                        // 15378
          };                                                                                                           // 15379
        }                                                                                                              // 15380
                                                                                                                       // 15381
        if (watchExpressions.length === 1) {                                                                           // 15382
          // Special case size of one                                                                                  // 15383
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {                  // 15384
            newValues[0] = value;                                                                                      // 15385
            oldValues[0] = oldValue;                                                                                   // 15386
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);                                  // 15387
          });                                                                                                          // 15388
        }                                                                                                              // 15389
                                                                                                                       // 15390
        forEach(watchExpressions, function(expr, i) {                                                                  // 15391
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {                            // 15392
            newValues[i] = value;                                                                                      // 15393
            oldValues[i] = oldValue;                                                                                   // 15394
            if (!changeReactionScheduled) {                                                                            // 15395
              changeReactionScheduled = true;                                                                          // 15396
              self.$evalAsync(watchGroupAction);                                                                       // 15397
            }                                                                                                          // 15398
          });                                                                                                          // 15399
          deregisterFns.push(unwatchFn);                                                                               // 15400
        });                                                                                                            // 15401
                                                                                                                       // 15402
        function watchGroupAction() {                                                                                  // 15403
          changeReactionScheduled = false;                                                                             // 15404
                                                                                                                       // 15405
          if (firstRun) {                                                                                              // 15406
            firstRun = false;                                                                                          // 15407
            listener(newValues, newValues, self);                                                                      // 15408
          } else {                                                                                                     // 15409
            listener(newValues, oldValues, self);                                                                      // 15410
          }                                                                                                            // 15411
        }                                                                                                              // 15412
                                                                                                                       // 15413
        return function deregisterWatchGroup() {                                                                       // 15414
          while (deregisterFns.length) {                                                                               // 15415
            deregisterFns.shift()();                                                                                   // 15416
          }                                                                                                            // 15417
        };                                                                                                             // 15418
      },                                                                                                               // 15419
                                                                                                                       // 15420
                                                                                                                       // 15421
      /**                                                                                                              // 15422
       * @ngdoc method                                                                                                 // 15423
       * @name $rootScope.Scope#$watchCollection                                                                       // 15424
       * @kind function                                                                                                // 15425
       *                                                                                                               // 15426
       * @description                                                                                                  // 15427
       * Shallow watches the properties of an object and fires whenever any of the properties change                   // 15428
       * (for arrays, this implies watching the array items; for object maps, this implies watching                    // 15429
       * the properties). If a change is detected, the `listener` callback is fired.                                   // 15430
       *                                                                                                               // 15431
       * - The `obj` collection is observed via standard $watch operation and is examined on every                     // 15432
       *   call to $digest() to see if any items have been added, removed, or moved.                                   // 15433
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include                   // 15434
       *   adding, removing, and moving items belonging to an object or array.                                         // 15435
       *                                                                                                               // 15436
       *                                                                                                               // 15437
       * # Example                                                                                                     // 15438
       * ```js                                                                                                         // 15439
          $scope.names = ['igor', 'matias', 'misko', 'james'];                                                         // 15440
          $scope.dataCount = 4;                                                                                        // 15441
                                                                                                                       // 15442
          $scope.$watchCollection('names', function(newNames, oldNames) {                                              // 15443
            $scope.dataCount = newNames.length;                                                                        // 15444
          });                                                                                                          // 15445
                                                                                                                       // 15446
          expect($scope.dataCount).toEqual(4);                                                                         // 15447
          $scope.$digest();                                                                                            // 15448
                                                                                                                       // 15449
          //still at 4 ... no changes                                                                                  // 15450
          expect($scope.dataCount).toEqual(4);                                                                         // 15451
                                                                                                                       // 15452
          $scope.names.pop();                                                                                          // 15453
          $scope.$digest();                                                                                            // 15454
                                                                                                                       // 15455
          //now there's been a change                                                                                  // 15456
          expect($scope.dataCount).toEqual(3);                                                                         // 15457
       * ```                                                                                                           // 15458
       *                                                                                                               // 15459
       *                                                                                                               // 15460
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The                     // 15461
       *    expression value should evaluate to an object or an array which is observed on each                        // 15462
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the                           // 15463
       *    collection will trigger a call to the `listener`.                                                          // 15464
       *                                                                                                               // 15465
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called                    // 15466
       *    when a change is detected.                                                                                 // 15467
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression                 // 15468
       *    - The `oldCollection` object is a copy of the former collection data.                                      // 15469
       *      Due to performance considerations, the`oldCollection` value is computed only if the                      // 15470
       *      `listener` function declares two or more arguments.                                                      // 15471
       *    - The `scope` argument refers to the current scope.                                                        // 15472
       *                                                                                                               // 15473
       * @returns {function()} Returns a de-registration function for this listener. When the                          // 15474
       *    de-registration function is executed, the internal watch operation is terminated.                          // 15475
       */                                                                                                              // 15476
      $watchCollection: function(obj, listener) {                                                                      // 15477
        $watchCollectionInterceptor.$stateful = true;                                                                  // 15478
                                                                                                                       // 15479
        var self = this;                                                                                               // 15480
        // the current value, updated on each dirty-check run                                                          // 15481
        var newValue;                                                                                                  // 15482
        // a shallow copy of the newValue from the last dirty-check run,                                               // 15483
        // updated to match newValue during dirty-check run                                                            // 15484
        var oldValue;                                                                                                  // 15485
        // a shallow copy of the newValue from when the last change happened                                           // 15486
        var veryOldValue;                                                                                              // 15487
        // only track veryOldValue if the listener is asking for it                                                    // 15488
        var trackVeryOldValue = (listener.length > 1);                                                                 // 15489
        var changeDetected = 0;                                                                                        // 15490
        var changeDetector = $parse(obj, $watchCollectionInterceptor);                                                 // 15491
        var internalArray = [];                                                                                        // 15492
        var internalObject = {};                                                                                       // 15493
        var initRun = true;                                                                                            // 15494
        var oldLength = 0;                                                                                             // 15495
                                                                                                                       // 15496
        function $watchCollectionInterceptor(_value) {                                                                 // 15497
          newValue = _value;                                                                                           // 15498
          var newLength, key, bothNaN, newItem, oldItem;                                                               // 15499
                                                                                                                       // 15500
          // If the new value is undefined, then return undefined as the watch may be a one-time watch                 // 15501
          if (isUndefined(newValue)) return;                                                                           // 15502
                                                                                                                       // 15503
          if (!isObject(newValue)) { // if primitive                                                                   // 15504
            if (oldValue !== newValue) {                                                                               // 15505
              oldValue = newValue;                                                                                     // 15506
              changeDetected++;                                                                                        // 15507
            }                                                                                                          // 15508
          } else if (isArrayLike(newValue)) {                                                                          // 15509
            if (oldValue !== internalArray) {                                                                          // 15510
              // we are transitioning from something which was not an array into array.                                // 15511
              oldValue = internalArray;                                                                                // 15512
              oldLength = oldValue.length = 0;                                                                         // 15513
              changeDetected++;                                                                                        // 15514
            }                                                                                                          // 15515
                                                                                                                       // 15516
            newLength = newValue.length;                                                                               // 15517
                                                                                                                       // 15518
            if (oldLength !== newLength) {                                                                             // 15519
              // if lengths do not match we need to trigger change notification                                        // 15520
              changeDetected++;                                                                                        // 15521
              oldValue.length = oldLength = newLength;                                                                 // 15522
            }                                                                                                          // 15523
            // copy the items to oldValue and look for changes.                                                        // 15524
            for (var i = 0; i < newLength; i++) {                                                                      // 15525
              oldItem = oldValue[i];                                                                                   // 15526
              newItem = newValue[i];                                                                                   // 15527
                                                                                                                       // 15528
              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                                // 15529
              if (!bothNaN && (oldItem !== newItem)) {                                                                 // 15530
                changeDetected++;                                                                                      // 15531
                oldValue[i] = newItem;                                                                                 // 15532
              }                                                                                                        // 15533
            }                                                                                                          // 15534
          } else {                                                                                                     // 15535
            if (oldValue !== internalObject) {                                                                         // 15536
              // we are transitioning from something which was not an object into object.                              // 15537
              oldValue = internalObject = {};                                                                          // 15538
              oldLength = 0;                                                                                           // 15539
              changeDetected++;                                                                                        // 15540
            }                                                                                                          // 15541
            // copy the items to oldValue and look for changes.                                                        // 15542
            newLength = 0;                                                                                             // 15543
            for (key in newValue) {                                                                                    // 15544
              if (newValue.hasOwnProperty(key)) {                                                                      // 15545
                newLength++;                                                                                           // 15546
                newItem = newValue[key];                                                                               // 15547
                oldItem = oldValue[key];                                                                               // 15548
                                                                                                                       // 15549
                if (key in oldValue) {                                                                                 // 15550
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);                                            // 15551
                  if (!bothNaN && (oldItem !== newItem)) {                                                             // 15552
                    changeDetected++;                                                                                  // 15553
                    oldValue[key] = newItem;                                                                           // 15554
                  }                                                                                                    // 15555
                } else {                                                                                               // 15556
                  oldLength++;                                                                                         // 15557
                  oldValue[key] = newItem;                                                                             // 15558
                  changeDetected++;                                                                                    // 15559
                }                                                                                                      // 15560
              }                                                                                                        // 15561
            }                                                                                                          // 15562
            if (oldLength > newLength) {                                                                               // 15563
              // we used to have more keys, need to find them and destroy them.                                        // 15564
              changeDetected++;                                                                                        // 15565
              for (key in oldValue) {                                                                                  // 15566
                if (!newValue.hasOwnProperty(key)) {                                                                   // 15567
                  oldLength--;                                                                                         // 15568
                  delete oldValue[key];                                                                                // 15569
                }                                                                                                      // 15570
              }                                                                                                        // 15571
            }                                                                                                          // 15572
          }                                                                                                            // 15573
          return changeDetected;                                                                                       // 15574
        }                                                                                                              // 15575
                                                                                                                       // 15576
        function $watchCollectionAction() {                                                                            // 15577
          if (initRun) {                                                                                               // 15578
            initRun = false;                                                                                           // 15579
            listener(newValue, newValue, self);                                                                        // 15580
          } else {                                                                                                     // 15581
            listener(newValue, veryOldValue, self);                                                                    // 15582
          }                                                                                                            // 15583
                                                                                                                       // 15584
          // make a copy for the next time a collection is changed                                                     // 15585
          if (trackVeryOldValue) {                                                                                     // 15586
            if (!isObject(newValue)) {                                                                                 // 15587
              //primitive                                                                                              // 15588
              veryOldValue = newValue;                                                                                 // 15589
            } else if (isArrayLike(newValue)) {                                                                        // 15590
              veryOldValue = new Array(newValue.length);                                                               // 15591
              for (var i = 0; i < newValue.length; i++) {                                                              // 15592
                veryOldValue[i] = newValue[i];                                                                         // 15593
              }                                                                                                        // 15594
            } else { // if object                                                                                      // 15595
              veryOldValue = {};                                                                                       // 15596
              for (var key in newValue) {                                                                              // 15597
                if (hasOwnProperty.call(newValue, key)) {                                                              // 15598
                  veryOldValue[key] = newValue[key];                                                                   // 15599
                }                                                                                                      // 15600
              }                                                                                                        // 15601
            }                                                                                                          // 15602
          }                                                                                                            // 15603
        }                                                                                                              // 15604
                                                                                                                       // 15605
        return this.$watch(changeDetector, $watchCollectionAction);                                                    // 15606
      },                                                                                                               // 15607
                                                                                                                       // 15608
      /**                                                                                                              // 15609
       * @ngdoc method                                                                                                 // 15610
       * @name $rootScope.Scope#$digest                                                                                // 15611
       * @kind function                                                                                                // 15612
       *                                                                                                               // 15613
       * @description                                                                                                  // 15614
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and                     // 15615
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change                      // 15616
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}                      // 15617
       * until no more listeners are firing. This means that it is possible to get into an infinite                    // 15618
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of                         // 15619
       * iterations exceeds 10.                                                                                        // 15620
       *                                                                                                               // 15621
       * Usually, you don't call `$digest()` directly in                                                               // 15622
       * {@link ng.directive:ngController controllers} or in                                                           // 15623
       * {@link ng.$compileProvider#directive directives}.                                                             // 15624
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within                   // 15625
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.                           // 15626
       *                                                                                                               // 15627
       * If you want to be notified whenever `$digest()` is called,                                                    // 15628
       * you can register a `watchExpression` function with                                                            // 15629
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.                                               // 15630
       *                                                                                                               // 15631
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.                             // 15632
       *                                                                                                               // 15633
       * # Example                                                                                                     // 15634
       * ```js                                                                                                         // 15635
           var scope = ...;                                                                                            // 15636
           scope.name = 'misko';                                                                                       // 15637
           scope.counter = 0;                                                                                          // 15638
                                                                                                                       // 15639
           expect(scope.counter).toEqual(0);                                                                           // 15640
           scope.$watch('name', function(newValue, oldValue) {                                                         // 15641
             scope.counter = scope.counter + 1;                                                                        // 15642
           });                                                                                                         // 15643
           expect(scope.counter).toEqual(0);                                                                           // 15644
                                                                                                                       // 15645
           scope.$digest();                                                                                            // 15646
           // the listener is always called during the first $digest loop after it was registered                      // 15647
           expect(scope.counter).toEqual(1);                                                                           // 15648
                                                                                                                       // 15649
           scope.$digest();                                                                                            // 15650
           // but now it will not be called unless the value changes                                                   // 15651
           expect(scope.counter).toEqual(1);                                                                           // 15652
                                                                                                                       // 15653
           scope.name = 'adam';                                                                                        // 15654
           scope.$digest();                                                                                            // 15655
           expect(scope.counter).toEqual(2);                                                                           // 15656
       * ```                                                                                                           // 15657
       *                                                                                                               // 15658
       */                                                                                                              // 15659
      $digest: function() {                                                                                            // 15660
        var watch, value, last,                                                                                        // 15661
            watchers,                                                                                                  // 15662
            length,                                                                                                    // 15663
            dirty, ttl = TTL,                                                                                          // 15664
            next, current, target = this,                                                                              // 15665
            watchLog = [],                                                                                             // 15666
            logIdx, logMsg, asyncTask;                                                                                 // 15667
                                                                                                                       // 15668
        beginPhase('$digest');                                                                                         // 15669
        // Check for changes to browser url that happened in sync before the call to $digest                           // 15670
        $browser.$$checkUrlChange();                                                                                   // 15671
                                                                                                                       // 15672
        if (this === $rootScope && applyAsyncId !== null) {                                                            // 15673
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then                        // 15674
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.                           // 15675
          $browser.defer.cancel(applyAsyncId);                                                                         // 15676
          flushApplyAsync();                                                                                           // 15677
        }                                                                                                              // 15678
                                                                                                                       // 15679
        lastDirtyWatch = null;                                                                                         // 15680
                                                                                                                       // 15681
        do { // "while dirty" loop                                                                                     // 15682
          dirty = false;                                                                                               // 15683
          current = target;                                                                                            // 15684
                                                                                                                       // 15685
          while (asyncQueue.length) {                                                                                  // 15686
            try {                                                                                                      // 15687
              asyncTask = asyncQueue.shift();                                                                          // 15688
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);                                           // 15689
            } catch (e) {                                                                                              // 15690
              $exceptionHandler(e);                                                                                    // 15691
            }                                                                                                          // 15692
            lastDirtyWatch = null;                                                                                     // 15693
          }                                                                                                            // 15694
                                                                                                                       // 15695
          traverseScopesLoop:                                                                                          // 15696
          do { // "traverse the scopes" loop                                                                           // 15697
            if ((watchers = current.$$watchers)) {                                                                     // 15698
              // process our watches                                                                                   // 15699
              length = watchers.length;                                                                                // 15700
              while (length--) {                                                                                       // 15701
                try {                                                                                                  // 15702
                  watch = watchers[length];                                                                            // 15703
                  // Most common watches are on primitives, in which case we can short                                 // 15704
                  // circuit it with === operator, only when === fails do we use .equals                               // 15705
                  if (watch) {                                                                                         // 15706
                    if ((value = watch.get(current)) !== (last = watch.last) &&                                        // 15707
                        !(watch.eq                                                                                     // 15708
                            ? equals(value, last)                                                                      // 15709
                            : (typeof value === 'number' && typeof last === 'number'                                   // 15710
                               && isNaN(value) && isNaN(last)))) {                                                     // 15711
                      dirty = true;                                                                                    // 15712
                      lastDirtyWatch = watch;                                                                          // 15713
                      watch.last = watch.eq ? copy(value, null) : value;                                               // 15714
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);                              // 15715
                      if (ttl < 5) {                                                                                   // 15716
                        logIdx = 4 - ttl;                                                                              // 15717
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];                                                  // 15718
                        watchLog[logIdx].push({                                                                        // 15719
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,  // 15720
                          newVal: value,                                                                               // 15721
                          oldVal: last                                                                                 // 15722
                        });                                                                                            // 15723
                      }                                                                                                // 15724
                    } else if (watch === lastDirtyWatch) {                                                             // 15725
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers   // 15726
                      // have already been tested.                                                                     // 15727
                      dirty = false;                                                                                   // 15728
                      break traverseScopesLoop;                                                                        // 15729
                    }                                                                                                  // 15730
                  }                                                                                                    // 15731
                } catch (e) {                                                                                          // 15732
                  $exceptionHandler(e);                                                                                // 15733
                }                                                                                                      // 15734
              }                                                                                                        // 15735
            }                                                                                                          // 15736
                                                                                                                       // 15737
            // Insanity Warning: scope depth-first traversal                                                           // 15738
            // yes, this code is a bit crazy, but it works and we have tests to prove it!                              // 15739
            // this piece should be kept in sync with the traversal in $broadcast                                      // 15740
            if (!(next = ((current.$$watchersCount && current.$$childHead) ||                                          // 15741
                (current !== target && current.$$nextSibling)))) {                                                     // 15742
              while (current !== target && !(next = current.$$nextSibling)) {                                          // 15743
                current = current.$parent;                                                                             // 15744
              }                                                                                                        // 15745
            }                                                                                                          // 15746
          } while ((current = next));                                                                                  // 15747
                                                                                                                       // 15748
          // `break traverseScopesLoop;` takes us to here                                                              // 15749
                                                                                                                       // 15750
          if ((dirty || asyncQueue.length) && !(ttl--)) {                                                              // 15751
            clearPhase();                                                                                              // 15752
            throw $rootScopeMinErr('infdig',                                                                           // 15753
                '{0} $digest() iterations reached. Aborting!\n' +                                                      // 15754
                'Watchers fired in the last 5 iterations: {1}',                                                        // 15755
                TTL, watchLog);                                                                                        // 15756
          }                                                                                                            // 15757
                                                                                                                       // 15758
        } while (dirty || asyncQueue.length);                                                                          // 15759
                                                                                                                       // 15760
        clearPhase();                                                                                                  // 15761
                                                                                                                       // 15762
        while (postDigestQueue.length) {                                                                               // 15763
          try {                                                                                                        // 15764
            postDigestQueue.shift()();                                                                                 // 15765
          } catch (e) {                                                                                                // 15766
            $exceptionHandler(e);                                                                                      // 15767
          }                                                                                                            // 15768
        }                                                                                                              // 15769
      },                                                                                                               // 15770
                                                                                                                       // 15771
                                                                                                                       // 15772
      /**                                                                                                              // 15773
       * @ngdoc event                                                                                                  // 15774
       * @name $rootScope.Scope#$destroy                                                                               // 15775
       * @eventType broadcast on scope being destroyed                                                                 // 15776
       *                                                                                                               // 15777
       * @description                                                                                                  // 15778
       * Broadcasted when a scope and its children are being destroyed.                                                // 15779
       *                                                                                                               // 15780
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15781
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15782
       */                                                                                                              // 15783
                                                                                                                       // 15784
      /**                                                                                                              // 15785
       * @ngdoc method                                                                                                 // 15786
       * @name $rootScope.Scope#$destroy                                                                               // 15787
       * @kind function                                                                                                // 15788
       *                                                                                                               // 15789
       * @description                                                                                                  // 15790
       * Removes the current scope (and all of its children) from the parent scope. Removal implies                    // 15791
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer                                    // 15792
       * propagate to the current scope and its children. Removal also implies that the current                        // 15793
       * scope is eligible for garbage collection.                                                                     // 15794
       *                                                                                                               // 15795
       * The `$destroy()` is usually used by directives such as                                                        // 15796
       * {@link ng.directive:ngRepeat ngRepeat} for managing the                                                       // 15797
       * unrolling of the loop.                                                                                        // 15798
       *                                                                                                               // 15799
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.                            // 15800
       * Application code can register a `$destroy` event handler that will give it a chance to                        // 15801
       * perform any necessary cleanup.                                                                                // 15802
       *                                                                                                               // 15803
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to                        // 15804
       * clean up DOM bindings before an element is removed from the DOM.                                              // 15805
       */                                                                                                              // 15806
      $destroy: function() {                                                                                           // 15807
        // We can't destroy a scope that has been already destroyed.                                                   // 15808
        if (this.$$destroyed) return;                                                                                  // 15809
        var parent = this.$parent;                                                                                     // 15810
                                                                                                                       // 15811
        this.$broadcast('$destroy');                                                                                   // 15812
        this.$$destroyed = true;                                                                                       // 15813
                                                                                                                       // 15814
        if (this === $rootScope) {                                                                                     // 15815
          //Remove handlers attached to window when $rootScope is removed                                              // 15816
          $browser.$$applicationDestroyed();                                                                           // 15817
        }                                                                                                              // 15818
                                                                                                                       // 15819
        incrementWatchersCount(this, -this.$$watchersCount);                                                           // 15820
        for (var eventName in this.$$listenerCount) {                                                                  // 15821
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);                                    // 15822
        }                                                                                                              // 15823
                                                                                                                       // 15824
        // sever all the references to parent scopes (after this cleanup, the current scope should                     // 15825
        // not be retained by any of our references and should be eligible for garbage collection)                     // 15826
        if (parent && parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;                             // 15827
        if (parent && parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;                             // 15828
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;                                 // 15829
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;                                 // 15830
                                                                                                                       // 15831
        // Disable listeners, watchers and apply/digest methods                                                        // 15832
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;                        // 15833
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };                                       // 15834
        this.$$listeners = {};                                                                                         // 15835
                                                                                                                       // 15836
        // All of the code below is bogus code that works around V8's memory leak via optimized code                   // 15837
        // and inline caches.                                                                                          // 15838
        //                                                                                                             // 15839
        // see:                                                                                                        // 15840
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26                                                    // 15841
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909                                   // 15842
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451                                   // 15843
                                                                                                                       // 15844
        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =                                    // 15845
            this.$$childTail = this.$root = this.$$watchers = null;                                                    // 15846
      },                                                                                                               // 15847
                                                                                                                       // 15848
      /**                                                                                                              // 15849
       * @ngdoc method                                                                                                 // 15850
       * @name $rootScope.Scope#$eval                                                                                  // 15851
       * @kind function                                                                                                // 15852
       *                                                                                                               // 15853
       * @description                                                                                                  // 15854
       * Executes the `expression` on the current scope and returns the result. Any exceptions in                      // 15855
       * the expression are propagated (uncaught). This is useful when evaluating Angular                              // 15856
       * expressions.                                                                                                  // 15857
       *                                                                                                               // 15858
       * # Example                                                                                                     // 15859
       * ```js                                                                                                         // 15860
           var scope = ng.$rootScope.Scope();                                                                          // 15861
           scope.a = 1;                                                                                                // 15862
           scope.b = 2;                                                                                                // 15863
                                                                                                                       // 15864
           expect(scope.$eval('a+b')).toEqual(3);                                                                      // 15865
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);                               // 15866
       * ```                                                                                                           // 15867
       *                                                                                                               // 15868
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15869
       *                                                                                                               // 15870
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.                    // 15871
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15872
       *                                                                                                               // 15873
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15874
       * @returns {*} The result of evaluating the expression.                                                         // 15875
       */                                                                                                              // 15876
      $eval: function(expr, locals) {                                                                                  // 15877
        return $parse(expr)(this, locals);                                                                             // 15878
      },                                                                                                               // 15879
                                                                                                                       // 15880
      /**                                                                                                              // 15881
       * @ngdoc method                                                                                                 // 15882
       * @name $rootScope.Scope#$evalAsync                                                                             // 15883
       * @kind function                                                                                                // 15884
       *                                                                                                               // 15885
       * @description                                                                                                  // 15886
       * Executes the expression on the current scope at a later point in time.                                        // 15887
       *                                                                                                               // 15888
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only                       // 15889
       * that:                                                                                                         // 15890
       *                                                                                                               // 15891
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM                   // 15892
       *     rendering).                                                                                               // 15893
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after                    // 15894
       *     `expression` execution.                                                                                   // 15895
       *                                                                                                               // 15896
       * Any exceptions from the execution of the expression are forwarded to the                                      // 15897
       * {@link ng.$exceptionHandler $exceptionHandler} service.                                                       // 15898
       *                                                                                                               // 15899
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle                      // 15900
       * will be scheduled. However, it is encouraged to always call code that changes the model                       // 15901
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.                                  // 15902
       *                                                                                                               // 15903
       * @param {(string|function())=} expression An angular expression to be executed.                                // 15904
       *                                                                                                               // 15905
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 15906
       *    - `function(scope)`: execute the function with the current `scope` parameter.                              // 15907
       *                                                                                                               // 15908
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.                      // 15909
       */                                                                                                              // 15910
      $evalAsync: function(expr, locals) {                                                                             // 15911
        // if we are outside of an $digest loop and this is the first time we are scheduling async                     // 15912
        // task also schedule async auto-flush                                                                         // 15913
        if (!$rootScope.$$phase && !asyncQueue.length) {                                                               // 15914
          $browser.defer(function() {                                                                                  // 15915
            if (asyncQueue.length) {                                                                                   // 15916
              $rootScope.$digest();                                                                                    // 15917
            }                                                                                                          // 15918
          });                                                                                                          // 15919
        }                                                                                                              // 15920
                                                                                                                       // 15921
        asyncQueue.push({scope: this, expression: expr, locals: locals});                                              // 15922
      },                                                                                                               // 15923
                                                                                                                       // 15924
      $$postDigest: function(fn) {                                                                                     // 15925
        postDigestQueue.push(fn);                                                                                      // 15926
      },                                                                                                               // 15927
                                                                                                                       // 15928
      /**                                                                                                              // 15929
       * @ngdoc method                                                                                                 // 15930
       * @name $rootScope.Scope#$apply                                                                                 // 15931
       * @kind function                                                                                                // 15932
       *                                                                                                               // 15933
       * @description                                                                                                  // 15934
       * `$apply()` is used to execute an expression in angular from outside of the angular                            // 15935
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).                   // 15936
       * Because we are calling into the angular framework we need to perform proper scope life                        // 15937
       * cycle of {@link ng.$exceptionHandler exception handling},                                                     // 15938
       * {@link ng.$rootScope.Scope#$digest executing watches}.                                                        // 15939
       *                                                                                                               // 15940
       * ## Life cycle                                                                                                 // 15941
       *                                                                                                               // 15942
       * # Pseudo-Code of `$apply()`                                                                                   // 15943
       * ```js                                                                                                         // 15944
           function $apply(expr) {                                                                                     // 15945
             try {                                                                                                     // 15946
               return $eval(expr);                                                                                     // 15947
             } catch (e) {                                                                                             // 15948
               $exceptionHandler(e);                                                                                   // 15949
             } finally {                                                                                               // 15950
               $root.$digest();                                                                                        // 15951
             }                                                                                                         // 15952
           }                                                                                                           // 15953
       * ```                                                                                                           // 15954
       *                                                                                                               // 15955
       *                                                                                                               // 15956
       * Scope's `$apply()` method transitions through the following stages:                                           // 15957
       *                                                                                                               // 15958
       * 1. The {@link guide/expression expression} is executed using the                                              // 15959
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.                                                          // 15960
       * 2. Any exceptions from the execution of the expression are forwarded to the                                   // 15961
       *    {@link ng.$exceptionHandler $exceptionHandler} service.                                                    // 15962
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the                     // 15963
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.                    // 15964
       *                                                                                                               // 15965
       *                                                                                                               // 15966
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 15967
       *                                                                                                               // 15968
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 15969
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 15970
       *                                                                                                               // 15971
       * @returns {*} The result of evaluating the expression.                                                         // 15972
       */                                                                                                              // 15973
      $apply: function(expr) {                                                                                         // 15974
        try {                                                                                                          // 15975
          beginPhase('$apply');                                                                                        // 15976
          try {                                                                                                        // 15977
            return this.$eval(expr);                                                                                   // 15978
          } finally {                                                                                                  // 15979
            clearPhase();                                                                                              // 15980
          }                                                                                                            // 15981
        } catch (e) {                                                                                                  // 15982
          $exceptionHandler(e);                                                                                        // 15983
        } finally {                                                                                                    // 15984
          try {                                                                                                        // 15985
            $rootScope.$digest();                                                                                      // 15986
          } catch (e) {                                                                                                // 15987
            $exceptionHandler(e);                                                                                      // 15988
            throw e;                                                                                                   // 15989
          }                                                                                                            // 15990
        }                                                                                                              // 15991
      },                                                                                                               // 15992
                                                                                                                       // 15993
      /**                                                                                                              // 15994
       * @ngdoc method                                                                                                 // 15995
       * @name $rootScope.Scope#$applyAsync                                                                            // 15996
       * @kind function                                                                                                // 15997
       *                                                                                                               // 15998
       * @description                                                                                                  // 15999
       * Schedule the invocation of $apply to occur at a later time. The actual time difference                        // 16000
       * varies across browsers, but is typically around ~10 milliseconds.                                             // 16001
       *                                                                                                               // 16002
       * This can be used to queue up multiple expressions which need to be evaluated in the same                      // 16003
       * digest.                                                                                                       // 16004
       *                                                                                                               // 16005
       * @param {(string|function())=} exp An angular expression to be executed.                                       // 16006
       *                                                                                                               // 16007
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.                     // 16008
       *    - `function(scope)`: execute the function with current `scope` parameter.                                  // 16009
       */                                                                                                              // 16010
      $applyAsync: function(expr) {                                                                                    // 16011
        var scope = this;                                                                                              // 16012
        expr && applyAsyncQueue.push($applyAsyncExpression);                                                           // 16013
        scheduleApplyAsync();                                                                                          // 16014
                                                                                                                       // 16015
        function $applyAsyncExpression() {                                                                             // 16016
          scope.$eval(expr);                                                                                           // 16017
        }                                                                                                              // 16018
      },                                                                                                               // 16019
                                                                                                                       // 16020
      /**                                                                                                              // 16021
       * @ngdoc method                                                                                                 // 16022
       * @name $rootScope.Scope#$on                                                                                    // 16023
       * @kind function                                                                                                // 16024
       *                                                                                                               // 16025
       * @description                                                                                                  // 16026
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for                            // 16027
       * discussion of event life cycle.                                                                               // 16028
       *                                                                                                               // 16029
       * The event listener function format is: `function(event, args...)`. The `event` object                         // 16030
       * passed into the listener has the following attributes:                                                        // 16031
       *                                                                                                               // 16032
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or                                 // 16033
       *     `$broadcast`-ed.                                                                                          // 16034
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the                      // 16035
       *     event propagates through the scope hierarchy, this property is set to null.                               // 16036
       *   - `name` - `{string}`: name of the event.                                                                   // 16037
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel                         // 16038
       *     further event propagation (available only for events that were `$emit`-ed).                               // 16039
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag                    // 16040
       *     to true.                                                                                                  // 16041
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.                                    // 16042
       *                                                                                                               // 16043
       * @param {string} name Event name to listen on.                                                                 // 16044
       * @param {function(event, ...args)} listener Function to call when the event is emitted.                        // 16045
       * @returns {function()} Returns a deregistration function for this listener.                                    // 16046
       */                                                                                                              // 16047
      $on: function(name, listener) {                                                                                  // 16048
        var namedListeners = this.$$listeners[name];                                                                   // 16049
        if (!namedListeners) {                                                                                         // 16050
          this.$$listeners[name] = namedListeners = [];                                                                // 16051
        }                                                                                                              // 16052
        namedListeners.push(listener);                                                                                 // 16053
                                                                                                                       // 16054
        var current = this;                                                                                            // 16055
        do {                                                                                                           // 16056
          if (!current.$$listenerCount[name]) {                                                                        // 16057
            current.$$listenerCount[name] = 0;                                                                         // 16058
          }                                                                                                            // 16059
          current.$$listenerCount[name]++;                                                                             // 16060
        } while ((current = current.$parent));                                                                         // 16061
                                                                                                                       // 16062
        var self = this;                                                                                               // 16063
        return function() {                                                                                            // 16064
          var indexOfListener = namedListeners.indexOf(listener);                                                      // 16065
          if (indexOfListener !== -1) {                                                                                // 16066
            namedListeners[indexOfListener] = null;                                                                    // 16067
            decrementListenerCount(self, 1, name);                                                                     // 16068
          }                                                                                                            // 16069
        };                                                                                                             // 16070
      },                                                                                                               // 16071
                                                                                                                       // 16072
                                                                                                                       // 16073
      /**                                                                                                              // 16074
       * @ngdoc method                                                                                                 // 16075
       * @name $rootScope.Scope#$emit                                                                                  // 16076
       * @kind function                                                                                                // 16077
       *                                                                                                               // 16078
       * @description                                                                                                  // 16079
       * Dispatches an event `name` upwards through the scope hierarchy notifying the                                  // 16080
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16081
       *                                                                                                               // 16082
       * The event life cycle starts at the scope on which `$emit` was called. All                                     // 16083
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16084
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all                         // 16085
       * registered listeners along the way. The event will stop propagating if one of the listeners                   // 16086
       * cancels it.                                                                                                   // 16087
       *                                                                                                               // 16088
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16089
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16090
       *                                                                                                               // 16091
       * @param {string} name Event name to emit.                                                                      // 16092
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16093
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).                                          // 16094
       */                                                                                                              // 16095
      $emit: function(name, args) {                                                                                    // 16096
        var empty = [],                                                                                                // 16097
            namedListeners,                                                                                            // 16098
            scope = this,                                                                                              // 16099
            stopPropagation = false,                                                                                   // 16100
            event = {                                                                                                  // 16101
              name: name,                                                                                              // 16102
              targetScope: scope,                                                                                      // 16103
              stopPropagation: function() {stopPropagation = true;},                                                   // 16104
              preventDefault: function() {                                                                             // 16105
                event.defaultPrevented = true;                                                                         // 16106
              },                                                                                                       // 16107
              defaultPrevented: false                                                                                  // 16108
            },                                                                                                         // 16109
            listenerArgs = concat([event], arguments, 1),                                                              // 16110
            i, length;                                                                                                 // 16111
                                                                                                                       // 16112
        do {                                                                                                           // 16113
          namedListeners = scope.$$listeners[name] || empty;                                                           // 16114
          event.currentScope = scope;                                                                                  // 16115
          for (i = 0, length = namedListeners.length; i < length; i++) {                                               // 16116
                                                                                                                       // 16117
            // if listeners were deregistered, defragment the array                                                    // 16118
            if (!namedListeners[i]) {                                                                                  // 16119
              namedListeners.splice(i, 1);                                                                             // 16120
              i--;                                                                                                     // 16121
              length--;                                                                                                // 16122
              continue;                                                                                                // 16123
            }                                                                                                          // 16124
            try {                                                                                                      // 16125
              //allow all listeners attached to the current scope to run                                               // 16126
              namedListeners[i].apply(null, listenerArgs);                                                             // 16127
            } catch (e) {                                                                                              // 16128
              $exceptionHandler(e);                                                                                    // 16129
            }                                                                                                          // 16130
          }                                                                                                            // 16131
          //if any listener on the current scope stops propagation, prevent bubbling                                   // 16132
          if (stopPropagation) {                                                                                       // 16133
            event.currentScope = null;                                                                                 // 16134
            return event;                                                                                              // 16135
          }                                                                                                            // 16136
          //traverse upwards                                                                                           // 16137
          scope = scope.$parent;                                                                                       // 16138
        } while (scope);                                                                                               // 16139
                                                                                                                       // 16140
        event.currentScope = null;                                                                                     // 16141
                                                                                                                       // 16142
        return event;                                                                                                  // 16143
      },                                                                                                               // 16144
                                                                                                                       // 16145
                                                                                                                       // 16146
      /**                                                                                                              // 16147
       * @ngdoc method                                                                                                 // 16148
       * @name $rootScope.Scope#$broadcast                                                                             // 16149
       * @kind function                                                                                                // 16150
       *                                                                                                               // 16151
       * @description                                                                                                  // 16152
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the                   // 16153
       * registered {@link ng.$rootScope.Scope#$on} listeners.                                                         // 16154
       *                                                                                                               // 16155
       * The event life cycle starts at the scope on which `$broadcast` was called. All                                // 16156
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get                        // 16157
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current                   // 16158
       * scope and calls all registered listeners along the way. The event cannot be canceled.                         // 16159
       *                                                                                                               // 16160
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed                       // 16161
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.                                              // 16162
       *                                                                                                               // 16163
       * @param {string} name Event name to broadcast.                                                                 // 16164
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.              // 16165
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}                                            // 16166
       */                                                                                                              // 16167
      $broadcast: function(name, args) {                                                                               // 16168
        var target = this,                                                                                             // 16169
            current = target,                                                                                          // 16170
            next = target,                                                                                             // 16171
            event = {                                                                                                  // 16172
              name: name,                                                                                              // 16173
              targetScope: target,                                                                                     // 16174
              preventDefault: function() {                                                                             // 16175
                event.defaultPrevented = true;                                                                         // 16176
              },                                                                                                       // 16177
              defaultPrevented: false                                                                                  // 16178
            };                                                                                                         // 16179
                                                                                                                       // 16180
        if (!target.$$listenerCount[name]) return event;                                                               // 16181
                                                                                                                       // 16182
        var listenerArgs = concat([event], arguments, 1),                                                              // 16183
            listeners, i, length;                                                                                      // 16184
                                                                                                                       // 16185
        //down while you can, then up and next sibling or up and next sibling until back at root                       // 16186
        while ((current = next)) {                                                                                     // 16187
          event.currentScope = current;                                                                                // 16188
          listeners = current.$$listeners[name] || [];                                                                 // 16189
          for (i = 0, length = listeners.length; i < length; i++) {                                                    // 16190
            // if listeners were deregistered, defragment the array                                                    // 16191
            if (!listeners[i]) {                                                                                       // 16192
              listeners.splice(i, 1);                                                                                  // 16193
              i--;                                                                                                     // 16194
              length--;                                                                                                // 16195
              continue;                                                                                                // 16196
            }                                                                                                          // 16197
                                                                                                                       // 16198
            try {                                                                                                      // 16199
              listeners[i].apply(null, listenerArgs);                                                                  // 16200
            } catch (e) {                                                                                              // 16201
              $exceptionHandler(e);                                                                                    // 16202
            }                                                                                                          // 16203
          }                                                                                                            // 16204
                                                                                                                       // 16205
          // Insanity Warning: scope depth-first traversal                                                             // 16206
          // yes, this code is a bit crazy, but it works and we have tests to prove it!                                // 16207
          // this piece should be kept in sync with the traversal in $digest                                           // 16208
          // (though it differs due to having the extra check for $$listenerCount)                                     // 16209
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||                                      // 16210
              (current !== target && current.$$nextSibling)))) {                                                       // 16211
            while (current !== target && !(next = current.$$nextSibling)) {                                            // 16212
              current = current.$parent;                                                                               // 16213
            }                                                                                                          // 16214
          }                                                                                                            // 16215
        }                                                                                                              // 16216
                                                                                                                       // 16217
        event.currentScope = null;                                                                                     // 16218
        return event;                                                                                                  // 16219
      }                                                                                                                // 16220
    };                                                                                                                 // 16221
                                                                                                                       // 16222
    var $rootScope = new Scope();                                                                                      // 16223
                                                                                                                       // 16224
    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.                               // 16225
    var asyncQueue = $rootScope.$$asyncQueue = [];                                                                     // 16226
    var postDigestQueue = $rootScope.$$postDigestQueue = [];                                                           // 16227
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];                                                           // 16228
                                                                                                                       // 16229
    return $rootScope;                                                                                                 // 16230
                                                                                                                       // 16231
                                                                                                                       // 16232
    function beginPhase(phase) {                                                                                       // 16233
      if ($rootScope.$$phase) {                                                                                        // 16234
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);                               // 16235
      }                                                                                                                // 16236
                                                                                                                       // 16237
      $rootScope.$$phase = phase;                                                                                      // 16238
    }                                                                                                                  // 16239
                                                                                                                       // 16240
    function clearPhase() {                                                                                            // 16241
      $rootScope.$$phase = null;                                                                                       // 16242
    }                                                                                                                  // 16243
                                                                                                                       // 16244
    function incrementWatchersCount(current, count) {                                                                  // 16245
      do {                                                                                                             // 16246
        current.$$watchersCount += count;                                                                              // 16247
      } while ((current = current.$parent));                                                                           // 16248
    }                                                                                                                  // 16249
                                                                                                                       // 16250
    function decrementListenerCount(current, count, name) {                                                            // 16251
      do {                                                                                                             // 16252
        current.$$listenerCount[name] -= count;                                                                        // 16253
                                                                                                                       // 16254
        if (current.$$listenerCount[name] === 0) {                                                                     // 16255
          delete current.$$listenerCount[name];                                                                        // 16256
        }                                                                                                              // 16257
      } while ((current = current.$parent));                                                                           // 16258
    }                                                                                                                  // 16259
                                                                                                                       // 16260
    /**                                                                                                                // 16261
     * function used as an initial value for watchers.                                                                 // 16262
     * because it's unique we can easily tell it apart from other values                                               // 16263
     */                                                                                                                // 16264
    function initWatchVal() {}                                                                                         // 16265
                                                                                                                       // 16266
    function flushApplyAsync() {                                                                                       // 16267
      while (applyAsyncQueue.length) {                                                                                 // 16268
        try {                                                                                                          // 16269
          applyAsyncQueue.shift()();                                                                                   // 16270
        } catch (e) {                                                                                                  // 16271
          $exceptionHandler(e);                                                                                        // 16272
        }                                                                                                              // 16273
      }                                                                                                                // 16274
      applyAsyncId = null;                                                                                             // 16275
    }                                                                                                                  // 16276
                                                                                                                       // 16277
    function scheduleApplyAsync() {                                                                                    // 16278
      if (applyAsyncId === null) {                                                                                     // 16279
        applyAsyncId = $browser.defer(function() {                                                                     // 16280
          $rootScope.$apply(flushApplyAsync);                                                                          // 16281
        });                                                                                                            // 16282
      }                                                                                                                // 16283
    }                                                                                                                  // 16284
  }];                                                                                                                  // 16285
}                                                                                                                      // 16286
                                                                                                                       // 16287
/**                                                                                                                    // 16288
 * @description                                                                                                        // 16289
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.                              // 16290
 */                                                                                                                    // 16291
function $$SanitizeUriProvider() {                                                                                     // 16292
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,                                                // 16293
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;                                        // 16294
                                                                                                                       // 16295
  /**                                                                                                                  // 16296
   * @description                                                                                                      // 16297
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16298
   * urls during a[href] sanitization.                                                                                 // 16299
   *                                                                                                                   // 16300
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16301
   *                                                                                                                   // 16302
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into                      // 16303
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`                          // 16304
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16305
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16306
   *                                                                                                                   // 16307
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16308
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16309
   *    chaining otherwise.                                                                                            // 16310
   */                                                                                                                  // 16311
  this.aHrefSanitizationWhitelist = function(regexp) {                                                                 // 16312
    if (isDefined(regexp)) {                                                                                           // 16313
      aHrefSanitizationWhitelist = regexp;                                                                             // 16314
      return this;                                                                                                     // 16315
    }                                                                                                                  // 16316
    return aHrefSanitizationWhitelist;                                                                                 // 16317
  };                                                                                                                   // 16318
                                                                                                                       // 16319
                                                                                                                       // 16320
  /**                                                                                                                  // 16321
   * @description                                                                                                      // 16322
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe                       // 16323
   * urls during img[src] sanitization.                                                                                // 16324
   *                                                                                                                   // 16325
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.                               // 16326
   *                                                                                                                   // 16327
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into                     // 16328
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`                         // 16329
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,                     // 16330
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.                    // 16331
   *                                                                                                                   // 16332
   * @param {RegExp=} regexp New regexp to whitelist urls with.                                                        // 16333
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for                          // 16334
   *    chaining otherwise.                                                                                            // 16335
   */                                                                                                                  // 16336
  this.imgSrcSanitizationWhitelist = function(regexp) {                                                                // 16337
    if (isDefined(regexp)) {                                                                                           // 16338
      imgSrcSanitizationWhitelist = regexp;                                                                            // 16339
      return this;                                                                                                     // 16340
    }                                                                                                                  // 16341
    return imgSrcSanitizationWhitelist;                                                                                // 16342
  };                                                                                                                   // 16343
                                                                                                                       // 16344
  this.$get = function() {                                                                                             // 16345
    return function sanitizeUri(uri, isImage) {                                                                        // 16346
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;                                  // 16347
      var normalizedVal;                                                                                               // 16348
      normalizedVal = urlResolve(uri).href;                                                                            // 16349
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {                                                       // 16350
        return 'unsafe:' + normalizedVal;                                                                              // 16351
      }                                                                                                                // 16352
      return uri;                                                                                                      // 16353
    };                                                                                                                 // 16354
  };                                                                                                                   // 16355
}                                                                                                                      // 16356
                                                                                                                       // 16357
/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *                                           // 16358
 *     Any commits to this file should be reviewed with security in mind.  *                                           // 16359
 *   Changes to this file can potentially create security vulnerabilities. *                                           // 16360
 *          An approval from 2 Core members with history of modifying      *                                           // 16361
 *                         this file is required.                          *                                           // 16362
 *                                                                         *                                           // 16363
 *  Does the change somehow allow for arbitrary javascript to be executed? *                                           // 16364
 *    Or allows for someone to change the prototype of built-in objects?   *                                           // 16365
 *     Or gives undesired access to variables likes document or window?    *                                           // 16366
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */                                          // 16367
                                                                                                                       // 16368
var $sceMinErr = minErr('$sce');                                                                                       // 16369
                                                                                                                       // 16370
var SCE_CONTEXTS = {                                                                                                   // 16371
  HTML: 'html',                                                                                                        // 16372
  CSS: 'css',                                                                                                          // 16373
  URL: 'url',                                                                                                          // 16374
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a                   // 16375
  // url.  (e.g. ng-include, script src, templateUrl)                                                                  // 16376
  RESOURCE_URL: 'resourceUrl',                                                                                         // 16377
  JS: 'js'                                                                                                             // 16378
};                                                                                                                     // 16379
                                                                                                                       // 16380
// Helper functions follow.                                                                                            // 16381
                                                                                                                       // 16382
function adjustMatcher(matcher) {                                                                                      // 16383
  if (matcher === 'self') {                                                                                            // 16384
    return matcher;                                                                                                    // 16385
  } else if (isString(matcher)) {                                                                                      // 16386
    // Strings match exactly except for 2 wildcards - '*' and '**'.                                                    // 16387
    // '*' matches any character except those from the set ':/.?&'.                                                    // 16388
    // '**' matches any character (like .* in a RegExp).                                                               // 16389
    // More than 2 *'s raises an error as it's ill defined.                                                            // 16390
    if (matcher.indexOf('***') > -1) {                                                                                 // 16391
      throw $sceMinErr('iwcard',                                                                                       // 16392
          'Illegal sequence *** in string matcher.  String: {0}', matcher);                                            // 16393
    }                                                                                                                  // 16394
    matcher = escapeForRegexp(matcher).                                                                                // 16395
                  replace('\\*\\*', '.*').                                                                             // 16396
                  replace('\\*', '[^:/.?&;]*');                                                                        // 16397
    return new RegExp('^' + matcher + '$');                                                                            // 16398
  } else if (isRegExp(matcher)) {                                                                                      // 16399
    // The only other type of matcher allowed is a Regexp.                                                             // 16400
    // Match entire URL / disallow partial matches.                                                                    // 16401
    // Flags are reset (i.e. no global, ignoreCase or multiline)                                                       // 16402
    return new RegExp('^' + matcher.source + '$');                                                                     // 16403
  } else {                                                                                                             // 16404
    throw $sceMinErr('imatcher',                                                                                       // 16405
        'Matchers may only be "self", string patterns or RegExp objects');                                             // 16406
  }                                                                                                                    // 16407
}                                                                                                                      // 16408
                                                                                                                       // 16409
                                                                                                                       // 16410
function adjustMatchers(matchers) {                                                                                    // 16411
  var adjustedMatchers = [];                                                                                           // 16412
  if (isDefined(matchers)) {                                                                                           // 16413
    forEach(matchers, function(matcher) {                                                                              // 16414
      adjustedMatchers.push(adjustMatcher(matcher));                                                                   // 16415
    });                                                                                                                // 16416
  }                                                                                                                    // 16417
  return adjustedMatchers;                                                                                             // 16418
}                                                                                                                      // 16419
                                                                                                                       // 16420
                                                                                                                       // 16421
/**                                                                                                                    // 16422
 * @ngdoc service                                                                                                      // 16423
 * @name $sceDelegate                                                                                                  // 16424
 * @kind function                                                                                                      // 16425
 *                                                                                                                     // 16426
 * @description                                                                                                        // 16427
 *                                                                                                                     // 16428
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict                     // 16429
 * Contextual Escaping (SCE)} services to AngularJS.                                                                   // 16430
 *                                                                                                                     // 16431
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of                      // 16432
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is                     // 16433
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to                        // 16434
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things                         // 16435
 * work because `$sce` delegates to `$sceDelegate` for these operations.                                               // 16436
 *                                                                                                                     // 16437
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.                               // 16438
 *                                                                                                                     // 16439
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you                      // 16440
 * can override it completely to change the behavior of `$sce`, the common case would                                  // 16441
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting                     // 16442
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as                   // 16443
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist                                               // 16444
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link                                                               // 16445
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                             // 16446
 */                                                                                                                    // 16447
                                                                                                                       // 16448
/**                                                                                                                    // 16449
 * @ngdoc provider                                                                                                     // 16450
 * @name $sceDelegateProvider                                                                                          // 16451
 * @description                                                                                                        // 16452
 *                                                                                                                     // 16453
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate                       // 16454
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure                     // 16455
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link                                           // 16456
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and                         // 16457
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}                      // 16458
 *                                                                                                                     // 16459
 * For the general details about this service in Angular, read the main page for {@link ng.$sce                        // 16460
 * Strict Contextual Escaping (SCE)}.                                                                                  // 16461
 *                                                                                                                     // 16462
 * **Example**:  Consider the following case. <a name="example"></a>                                                   // 16463
 *                                                                                                                     // 16464
 * - your app is hosted at url `http://myapp.example.com/`                                                             // 16465
 * - but some of your templates are hosted on other domains you control such as                                        // 16466
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.                                     // 16467
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.                                        // 16468
 *                                                                                                                     // 16469
 * Here is what a secure configuration for this scenario might look like:                                              // 16470
 *                                                                                                                     // 16471
 * ```                                                                                                                 // 16472
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {                                                // 16473
 *    $sceDelegateProvider.resourceUrlWhitelist([                                                                      // 16474
 *      // Allow same origin resource loads.                                                                           // 16475
 *      'self',                                                                                                        // 16476
 *      // Allow loading from our assets domain.  Notice the difference between * and **.                              // 16477
 *      'http://srv*.assets.example.com/**'                                                                            // 16478
 *    ]);                                                                                                              // 16479
 *                                                                                                                     // 16480
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.                                   // 16481
 *    $sceDelegateProvider.resourceUrlBlacklist([                                                                      // 16482
 *      'http://myapp.example.com/clickThru**'                                                                         // 16483
 *    ]);                                                                                                              // 16484
 *  });                                                                                                                // 16485
 * ```                                                                                                                 // 16486
 */                                                                                                                    // 16487
                                                                                                                       // 16488
function $SceDelegateProvider() {                                                                                      // 16489
  this.SCE_CONTEXTS = SCE_CONTEXTS;                                                                                    // 16490
                                                                                                                       // 16491
  // Resource URLs can also be trusted by policy.                                                                      // 16492
  var resourceUrlWhitelist = ['self'],                                                                                 // 16493
      resourceUrlBlacklist = [];                                                                                       // 16494
                                                                                                                       // 16495
  /**                                                                                                                  // 16496
   * @ngdoc method                                                                                                     // 16497
   * @name $sceDelegateProvider#resourceUrlWhitelist                                                                   // 16498
   * @kind function                                                                                                    // 16499
   *                                                                                                                   // 16500
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value                         // 16501
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16502
   *     changes to the array are ignored.                                                                             // 16503
   *                                                                                                                   // 16504
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16505
   *     allowed in this array.                                                                                        // 16506
   *                                                                                                                   // 16507
   *     Note: **an empty whitelist array will block all URLs**!                                                       // 16508
   *                                                                                                                   // 16509
   * @return {Array} the currently set whitelist array.                                                                // 16510
   *                                                                                                                   // 16511
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only                       // 16512
   * same origin resource requests.                                                                                    // 16513
   *                                                                                                                   // 16514
   * @description                                                                                                      // 16515
   * Sets/Gets the whitelist of trusted resource URLs.                                                                 // 16516
   */                                                                                                                  // 16517
  this.resourceUrlWhitelist = function(value) {                                                                        // 16518
    if (arguments.length) {                                                                                            // 16519
      resourceUrlWhitelist = adjustMatchers(value);                                                                    // 16520
    }                                                                                                                  // 16521
    return resourceUrlWhitelist;                                                                                       // 16522
  };                                                                                                                   // 16523
                                                                                                                       // 16524
  /**                                                                                                                  // 16525
   * @ngdoc method                                                                                                     // 16526
   * @name $sceDelegateProvider#resourceUrlBlacklist                                                                   // 16527
   * @kind function                                                                                                    // 16528
   *                                                                                                                   // 16529
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value                         // 16530
   *     provided.  This must be an array or null.  A snapshot of this array is used so further                        // 16531
   *     changes to the array are ignored.                                                                             // 16532
   *                                                                                                                   // 16533
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items                        // 16534
   *     allowed in this array.                                                                                        // 16535
   *                                                                                                                   // 16536
   *     The typical usage for the blacklist is to **block                                                             // 16537
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as                   // 16538
   *     these would otherwise be trusted but actually return content from the redirected domain.                      // 16539
   *                                                                                                                   // 16540
   *     Finally, **the blacklist overrides the whitelist** and has the final say.                                     // 16541
   *                                                                                                                   // 16542
   * @return {Array} the currently set blacklist array.                                                                // 16543
   *                                                                                                                   // 16544
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there                    // 16545
   * is no blacklist.)                                                                                                 // 16546
   *                                                                                                                   // 16547
   * @description                                                                                                      // 16548
   * Sets/Gets the blacklist of trusted resource URLs.                                                                 // 16549
   */                                                                                                                  // 16550
                                                                                                                       // 16551
  this.resourceUrlBlacklist = function(value) {                                                                        // 16552
    if (arguments.length) {                                                                                            // 16553
      resourceUrlBlacklist = adjustMatchers(value);                                                                    // 16554
    }                                                                                                                  // 16555
    return resourceUrlBlacklist;                                                                                       // 16556
  };                                                                                                                   // 16557
                                                                                                                       // 16558
  this.$get = ['$injector', function($injector) {                                                                      // 16559
                                                                                                                       // 16560
    var htmlSanitizer = function htmlSanitizer(html) {                                                                 // 16561
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16562
    };                                                                                                                 // 16563
                                                                                                                       // 16564
    if ($injector.has('$sanitize')) {                                                                                  // 16565
      htmlSanitizer = $injector.get('$sanitize');                                                                      // 16566
    }                                                                                                                  // 16567
                                                                                                                       // 16568
                                                                                                                       // 16569
    function matchUrl(matcher, parsedUrl) {                                                                            // 16570
      if (matcher === 'self') {                                                                                        // 16571
        return urlIsSameOrigin(parsedUrl);                                                                             // 16572
      } else {                                                                                                         // 16573
        // definitely a regex.  See adjustMatchers()                                                                   // 16574
        return !!matcher.exec(parsedUrl.href);                                                                         // 16575
      }                                                                                                                // 16576
    }                                                                                                                  // 16577
                                                                                                                       // 16578
    function isResourceUrlAllowedByPolicy(url) {                                                                       // 16579
      var parsedUrl = urlResolve(url.toString());                                                                      // 16580
      var i, n, allowed = false;                                                                                       // 16581
      // Ensure that at least one item from the whitelist allows this url.                                             // 16582
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {                                                       // 16583
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {                                                            // 16584
          allowed = true;                                                                                              // 16585
          break;                                                                                                       // 16586
        }                                                                                                              // 16587
      }                                                                                                                // 16588
      if (allowed) {                                                                                                   // 16589
        // Ensure that no item from the blacklist blocked this url.                                                    // 16590
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {                                                     // 16591
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {                                                          // 16592
            allowed = false;                                                                                           // 16593
            break;                                                                                                     // 16594
          }                                                                                                            // 16595
        }                                                                                                              // 16596
      }                                                                                                                // 16597
      return allowed;                                                                                                  // 16598
    }                                                                                                                  // 16599
                                                                                                                       // 16600
    function generateHolderType(Base) {                                                                                // 16601
      var holderType = function TrustedValueHolderType(trustedValue) {                                                 // 16602
        this.$$unwrapTrustedValue = function() {                                                                       // 16603
          return trustedValue;                                                                                         // 16604
        };                                                                                                             // 16605
      };                                                                                                               // 16606
      if (Base) {                                                                                                      // 16607
        holderType.prototype = new Base();                                                                             // 16608
      }                                                                                                                // 16609
      holderType.prototype.valueOf = function sceValueOf() {                                                           // 16610
        return this.$$unwrapTrustedValue();                                                                            // 16611
      };                                                                                                               // 16612
      holderType.prototype.toString = function sceToString() {                                                         // 16613
        return this.$$unwrapTrustedValue().toString();                                                                 // 16614
      };                                                                                                               // 16615
      return holderType;                                                                                               // 16616
    }                                                                                                                  // 16617
                                                                                                                       // 16618
    var trustedValueHolderBase = generateHolderType(),                                                                 // 16619
        byType = {};                                                                                                   // 16620
                                                                                                                       // 16621
    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);                                            // 16622
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);                                             // 16623
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);                                             // 16624
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);                                              // 16625
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);                                  // 16626
                                                                                                                       // 16627
    /**                                                                                                                // 16628
     * @ngdoc method                                                                                                   // 16629
     * @name $sceDelegate#trustAs                                                                                      // 16630
     *                                                                                                                 // 16631
     * @description                                                                                                    // 16632
     * Returns an object that is trusted by angular for use in specified strict                                        // 16633
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src                                         // 16634
     * attribute interpolation, any dom event binding attribute interpolation                                          // 16635
     * such as for onclick,  etc.) that uses the provided value.                                                       // 16636
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.                                               // 16637
     *                                                                                                                 // 16638
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 16639
     *   resourceUrl, html, js and css.                                                                                // 16640
     * @param {*} value The value that that should be considered trusted/safe.                                         // 16641
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 16642
     * where Angular expects a $sce.trustAs() return value.                                                            // 16643
     */                                                                                                                // 16644
    function trustAs(type, trustedValue) {                                                                             // 16645
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16646
      if (!Constructor) {                                                                                              // 16647
        throw $sceMinErr('icontext',                                                                                   // 16648
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',                                 // 16649
            type, trustedValue);                                                                                       // 16650
      }                                                                                                                // 16651
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {                                // 16652
        return trustedValue;                                                                                           // 16653
      }                                                                                                                // 16654
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting                    // 16655
      // mutable objects, we ensure here that the value passed in is actually a string.                                // 16656
      if (typeof trustedValue !== 'string') {                                                                          // 16657
        throw $sceMinErr('itype',                                                                                      // 16658
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',                     // 16659
            type);                                                                                                     // 16660
      }                                                                                                                // 16661
      return new Constructor(trustedValue);                                                                            // 16662
    }                                                                                                                  // 16663
                                                                                                                       // 16664
    /**                                                                                                                // 16665
     * @ngdoc method                                                                                                   // 16666
     * @name $sceDelegate#valueOf                                                                                      // 16667
     *                                                                                                                 // 16668
     * @description                                                                                                    // 16669
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs                     // 16670
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link                                       // 16671
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.                                                                // 16672
     *                                                                                                                 // 16673
     * If the passed parameter is not a value that had been returned by {@link                                         // 16674
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.                                              // 16675
     *                                                                                                                 // 16676
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}                   // 16677
     *      call or anything else.                                                                                     // 16678
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs                         // 16679
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns                        // 16680
     *     `value` unchanged.                                                                                          // 16681
     */                                                                                                                // 16682
    function valueOf(maybeTrusted) {                                                                                   // 16683
      if (maybeTrusted instanceof trustedValueHolderBase) {                                                            // 16684
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16685
      } else {                                                                                                         // 16686
        return maybeTrusted;                                                                                           // 16687
      }                                                                                                                // 16688
    }                                                                                                                  // 16689
                                                                                                                       // 16690
    /**                                                                                                                // 16691
     * @ngdoc method                                                                                                   // 16692
     * @name $sceDelegate#getTrusted                                                                                   // 16693
     *                                                                                                                 // 16694
     * @description                                                                                                    // 16695
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and                           // 16696
     * returns the originally supplied value if the queried context type is a supertype of the                         // 16697
     * created type.  If this condition isn't satisfied, throws an exception.                                          // 16698
     *                                                                                                                 // 16699
     * @param {string} type The kind of context in which this value is to be used.                                     // 16700
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs                                    // 16701
     *     `$sceDelegate.trustAs`} call.                                                                               // 16702
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs                            // 16703
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.                          // 16704
     */                                                                                                                // 16705
    function getTrusted(type, maybeTrusted) {                                                                          // 16706
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {                                // 16707
        return maybeTrusted;                                                                                           // 16708
      }                                                                                                                // 16709
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);                                           // 16710
      if (constructor && maybeTrusted instanceof constructor) {                                                        // 16711
        return maybeTrusted.$$unwrapTrustedValue();                                                                    // 16712
      }                                                                                                                // 16713
      // If we get here, then we may only take one of two actions.                                                     // 16714
      // 1. sanitize the value for the requested type, or                                                              // 16715
      // 2. throw an exception.                                                                                        // 16716
      if (type === SCE_CONTEXTS.RESOURCE_URL) {                                                                        // 16717
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {                                                              // 16718
          return maybeTrusted;                                                                                         // 16719
        } else {                                                                                                       // 16720
          throw $sceMinErr('insecurl',                                                                                 // 16721
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',                       // 16722
              maybeTrusted.toString());                                                                                // 16723
        }                                                                                                              // 16724
      } else if (type === SCE_CONTEXTS.HTML) {                                                                         // 16725
        return htmlSanitizer(maybeTrusted);                                                                            // 16726
      }                                                                                                                // 16727
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');                              // 16728
    }                                                                                                                  // 16729
                                                                                                                       // 16730
    return { trustAs: trustAs,                                                                                         // 16731
             getTrusted: getTrusted,                                                                                   // 16732
             valueOf: valueOf };                                                                                       // 16733
  }];                                                                                                                  // 16734
}                                                                                                                      // 16735
                                                                                                                       // 16736
                                                                                                                       // 16737
/**                                                                                                                    // 16738
 * @ngdoc provider                                                                                                     // 16739
 * @name $sceProvider                                                                                                  // 16740
 * @description                                                                                                        // 16741
 *                                                                                                                     // 16742
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.                          // 16743
 * -   enable/disable Strict Contextual Escaping (SCE) in a module                                                     // 16744
 * -   override the default implementation with a custom delegate                                                      // 16745
 *                                                                                                                     // 16746
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.                                                   // 16747
 */                                                                                                                    // 16748
                                                                                                                       // 16749
/* jshint maxlen: false*/                                                                                              // 16750
                                                                                                                       // 16751
/**                                                                                                                    // 16752
 * @ngdoc service                                                                                                      // 16753
 * @name $sce                                                                                                          // 16754
 * @kind function                                                                                                      // 16755
 *                                                                                                                     // 16756
 * @description                                                                                                        // 16757
 *                                                                                                                     // 16758
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.                                 // 16759
 *                                                                                                                     // 16760
 * # Strict Contextual Escaping                                                                                        // 16761
 *                                                                                                                     // 16762
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain                          // 16763
 * contexts to result in a value that is marked as safe to use for that context.  One example of                       // 16764
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer                       // 16765
 * to these contexts as privileged or SCE contexts.                                                                    // 16766
 *                                                                                                                     // 16767
 * As of version 1.2, Angular ships with SCE enabled by default.                                                       // 16768
 *                                                                                                                     // 16769
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow                // 16770
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer                                   // 16771
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.                   // 16772
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`                   // 16773
 * to the top of your HTML document.                                                                                   // 16774
 *                                                                                                                     // 16775
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for                         // 16776
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.                                              // 16777
 *                                                                                                                     // 16778
 * Here's an example of a binding in a privileged context:                                                             // 16779
 *                                                                                                                     // 16780
 * ```                                                                                                                 // 16781
 * <input ng-model="userHtml" aria-label="User input">                                                                 // 16782
 * <div ng-bind-html="userHtml"></div>                                                                                 // 16783
 * ```                                                                                                                 // 16784
 *                                                                                                                     // 16785
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE                                 // 16786
 * disabled, this application allows the user to render arbitrary HTML into the DIV.                                   // 16787
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via                            // 16788
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates                     // 16789
 * security vulnerabilities.)                                                                                          // 16790
 *                                                                                                                     // 16791
 * For the case of HTML, you might use a library, either on the client side, or on the server side,                    // 16792
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.                               // 16793
 *                                                                                                                     // 16794
 * How would you ensure that every place that used these types of bindings was bound to a value that                   // 16795
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you                      // 16796
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some                       // 16797
 * properties/fields and forgot to update the binding to the sanitized value?                                          // 16798
 *                                                                                                                     // 16799
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can                    // 16800
 * determine that something explicitly says it's safe to use a value for binding in that                               // 16801
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done                    // 16802
 * for those values that you can easily tell are safe - because they were received from your server,                   // 16803
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps                         // 16804
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API                         // 16805
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.                   // 16806
 *                                                                                                                     // 16807
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}                                // 16808
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to                               // 16809
 * obtain values that will be accepted by SCE / privileged contexts.                                                   // 16810
 *                                                                                                                     // 16811
 *                                                                                                                     // 16812
 * ## How does it work?                                                                                                // 16813
 *                                                                                                                     // 16814
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted                    // 16815
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link                          // 16816
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the                  // 16817
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.                              // 16818
 *                                                                                                                     // 16819
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link                                               // 16820
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly                        // 16821
 * simplified):                                                                                                        // 16822
 *                                                                                                                     // 16823
 * ```                                                                                                                 // 16824
 * var ngBindHtmlDirective = ['$sce', function($sce) {                                                                 // 16825
 *   return function(scope, element, attr) {                                                                           // 16826
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {                                               // 16827
 *       element.html(value || '');                                                                                    // 16828
 *     });                                                                                                             // 16829
 *   };                                                                                                                // 16830
 * }];                                                                                                                 // 16831
 * ```                                                                                                                 // 16832
 *                                                                                                                     // 16833
 * ## Impact on loading templates                                                                                      // 16834
 *                                                                                                                     // 16835
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as                           // 16836
 * `templateUrl`'s specified by {@link guide/directive directives}.                                                    // 16837
 *                                                                                                                     // 16838
 * By default, Angular only loads templates from the same domain and protocol as the application                       // 16839
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl                                             // 16840
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or                       // 16841
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist                      // 16842
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.                                           // 16843
 *                                                                                                                     // 16844
 * *Please note*:                                                                                                      // 16845
 * The browser's                                                                                                       // 16846
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 16847
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 16848
 * policy apply in addition to this and may further restrict whether the template is successfully                      // 16849
 * loaded.  This means that without the right CORS policy, loading templates from a different domain                   // 16850
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some                       // 16851
 * browsers.                                                                                                           // 16852
 *                                                                                                                     // 16853
 * ## This feels like too much overhead                                                                                // 16854
 *                                                                                                                     // 16855
 * It's important to remember that SCE only applies to interpolation expressions.                                      // 16856
 *                                                                                                                     // 16857
 * If your expressions are constant literals, they're automatically trusted and you don't need to                      // 16858
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.                                     // 16859
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.                                               // 16860
 *                                                                                                                     // 16861
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them                       // 16862
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.                                  // 16863
 *                                                                                                                     // 16864
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load                     // 16865
 * templates in `ng-include` from your application's domain without having to even know about SCE.                     // 16866
 * It blocks loading templates from other domains or loading templates over http from an https                         // 16867
 * served document.  You can change these by setting your own custom {@link                                            // 16868
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link                                                 // 16869
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.                                    // 16870
 *                                                                                                                     // 16871
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an                    // 16872
 * application that's secure and can be audited to verify that with much more ease than bolting                        // 16873
 * security onto an application later.                                                                                 // 16874
 *                                                                                                                     // 16875
 * <a name="contexts"></a>                                                                                             // 16876
 * ## What trusted context types are supported?                                                                        // 16877
 *                                                                                                                     // 16878
 * | Context             | Notes          |                                                                            // 16879
 * |---------------------|----------------|                                                                            // 16880
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *                                                                                                                     // 16886
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *                                                                                                                     // 16888
 *  Each element in these arrays must be one of the following:                                                         // 16889
 *                                                                                                                     // 16890
 *  - **'self'**                                                                                                       // 16891
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same                          // 16892
 *      domain** as the application document using the **same protocol**.                                              // 16893
 *  - **String** (except the special value `'self'`)                                                                   // 16894
 *    - The string is matched against the full *normalized / absolute URL* of the resource                             // 16895
 *      being tested (substring matches are not good enough.)                                                          // 16896
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters                             // 16897
 *      match themselves.                                                                                              // 16898
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6                       // 16899
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use                       // 16900
 *      in a whitelist.                                                                                                // 16901
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not                                  // 16902
 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.                               // 16903
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might                        // 16904
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.                             // 16905
 *      http://foo.example.com/templates/**).                                                                          // 16906
 *  - **RegExp** (*see caveat below*)                                                                                  // 16907
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax                   // 16908
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to                               // 16909
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should                   // 16910
 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a                      // 16911
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a                        // 16912
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It                     // 16913
 *      is highly recommended to use the string patterns and only fall back to regular expressions                     // 16914
 *      as a last resort.                                                                                              // 16915
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is                               // 16916
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested                        // 16917
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags                             // 16918
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.                                     // 16919
 *    - If you are generating your JavaScript from some other templating engine (not                                   // 16920
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),                        // 16921
 *      remember to escape your regular expression (and be aware that you might need more than                         // 16922
 *      one level of escaping depending on your templating engine and the way you interpolated                         // 16923
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good                             // 16924
 *      enough before coding your own.  E.g. Ruby has                                                                  // 16925
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)                           // 16926
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).                                  // 16927
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google                              // 16928
 *      Closure library's [goog.string.regExpEscape(s)](                                                               // 16929
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).             // 16930
 *                                                                                                                     // 16931
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.                                          // 16932
 *                                                                                                                     // 16933
 * ## Show me an example using SCE.                                                                                    // 16934
 *                                                                                                                     // 16935
 * <example module="mySceApp" deps="angular-sanitize.js">                                                              // 16936
 * <file name="index.html">                                                                                            // 16937
 *   <div ng-controller="AppController as myCtrl">                                                                     // 16938
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>                          // 16939
 *     <b>User comments</b><br>                                                                                        // 16940
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when                         // 16941
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an                   // 16942
 *     exploit.                                                                                                        // 16943
 *     <div class="well">                                                                                              // 16944
 *       <div ng-repeat="userComment in myCtrl.userComments">                                                          // 16945
 *         <b>{{userComment.name}}</b>:                                                                                // 16946
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>                                    // 16947
 *         <br>                                                                                                        // 16948
 *       </div>                                                                                                        // 16949
 *     </div>                                                                                                          // 16950
 *   </div>                                                                                                            // 16951
 * </file>                                                                                                             // 16952
 *                                                                                                                     // 16953
 * <file name="script.js">                                                                                             // 16954
 *   angular.module('mySceApp', ['ngSanitize'])                                                                        // 16955
 *     .controller('AppController', ['$http', '$templateCache', '$sce',                                                // 16956
 *       function($http, $templateCache, $sce) {                                                                       // 16957
 *         var self = this;                                                                                            // 16958
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {                       // 16959
 *           self.userComments = userComments;                                                                         // 16960
 *         });                                                                                                         // 16961
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(                                                              // 16962
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                         // 16963
 *             'sanitization.&quot;">Hover over this text.</span>');                                                   // 16964
 *       }]);                                                                                                          // 16965
 * </file>                                                                                                             // 16966
 *                                                                                                                     // 16967
 * <file name="test_data.json">                                                                                        // 16968
 * [                                                                                                                   // 16969
 *   { "name": "Alice",                                                                                                // 16970
 *     "htmlComment":                                                                                                  // 16971
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"                     // 16972
 *   },                                                                                                                // 16973
 *   { "name": "Bob",                                                                                                  // 16974
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"                                                          // 16975
 *   }                                                                                                                 // 16976
 * ]                                                                                                                   // 16977
 * </file>                                                                                                             // 16978
 *                                                                                                                     // 16979
 * <file name="protractor.js" type="protractor">                                                                       // 16980
 *   describe('SCE doc demo', function() {                                                                             // 16981
 *     it('should sanitize untrusted values', function() {                                                             // 16982
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())                                            // 16983
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');                                                     // 16984
 *     });                                                                                                             // 16985
 *                                                                                                                     // 16986
 *     it('should NOT sanitize explicitly trusted values', function() {                                                // 16987
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(                                          // 16988
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +                           // 16989
 *           'sanitization.&quot;">Hover over this text.</span>');                                                     // 16990
 *     });                                                                                                             // 16991
 *   });                                                                                                               // 16992
 * </file>                                                                                                             // 16993
 * </example>                                                                                                          // 16994
 *                                                                                                                     // 16995
 *                                                                                                                     // 16996
 *                                                                                                                     // 16997
 * ## Can I disable SCE completely?                                                                                    // 16998
 *                                                                                                                     // 16999
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits                     // 17000
 * for little coding overhead.  It will be much harder to take an SCE disabled application and                         // 17001
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE                    // 17002
 * for cases where you have a lot of existing code that was written before SCE was introduced and                      // 17003
 * you're migrating them a module at a time.                                                                           // 17004
 *                                                                                                                     // 17005
 * That said, here's how you can completely disable SCE:                                                               // 17006
 *                                                                                                                     // 17007
 * ```                                                                                                                 // 17008
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {                                     // 17009
 *   // Completely disable SCE.  For demonstration purposes only!                                                      // 17010
 *   // Do not use in new projects.                                                                                    // 17011
 *   $sceProvider.enabled(false);                                                                                      // 17012
 * });                                                                                                                 // 17013
 * ```                                                                                                                 // 17014
 *                                                                                                                     // 17015
 */                                                                                                                    // 17016
/* jshint maxlen: 100 */                                                                                               // 17017
                                                                                                                       // 17018
function $SceProvider() {                                                                                              // 17019
  var enabled = true;                                                                                                  // 17020
                                                                                                                       // 17021
  /**                                                                                                                  // 17022
   * @ngdoc method                                                                                                     // 17023
   * @name $sceProvider#enabled                                                                                        // 17024
   * @kind function                                                                                                    // 17025
   *                                                                                                                   // 17026
   * @param {boolean=} value If provided, then enables/disables SCE.                                                   // 17027
   * @return {boolean} true if SCE is enabled, false otherwise.                                                        // 17028
   *                                                                                                                   // 17029
   * @description                                                                                                      // 17030
   * Enables/disables SCE and returns the current value.                                                               // 17031
   */                                                                                                                  // 17032
  this.enabled = function(value) {                                                                                     // 17033
    if (arguments.length) {                                                                                            // 17034
      enabled = !!value;                                                                                               // 17035
    }                                                                                                                  // 17036
    return enabled;                                                                                                    // 17037
  };                                                                                                                   // 17038
                                                                                                                       // 17039
                                                                                                                       // 17040
  /* Design notes on the default implementation for SCE.                                                               // 17041
   *                                                                                                                   // 17042
   * The API contract for the SCE delegate                                                                             // 17043
   * -------------------------------------                                                                             // 17044
   * The SCE delegate object must provide the following 3 methods:                                                     // 17045
   *                                                                                                                   // 17046
   * - trustAs(contextEnum, value)                                                                                     // 17047
   *     This method is used to tell the SCE service that the provided value is OK to use in the                       // 17048
   *     contexts specified by contextEnum.  It must return an object that will be accepted by                         // 17049
   *     getTrusted() for a compatible contextEnum and return this value.                                              // 17050
   *                                                                                                                   // 17051
   * - valueOf(value)                                                                                                  // 17052
   *     For values that were not produced by trustAs(), return them as is.  For values that were                      // 17053
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if                        // 17054
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given                     // 17055
   *     such a value.                                                                                                 // 17056
   *                                                                                                                   // 17057
   * - getTrusted(contextEnum, value)                                                                                  // 17058
   *     This function should return the a value that is safe to use in the context specified by                       // 17059
   *     contextEnum or throw and exception otherwise.                                                                 // 17060
   *                                                                                                                   // 17061
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be                         // 17062
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For                       // 17063
   * instance, an implementation could maintain a registry of all trusted objects by context.  In                      // 17064
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would                       // 17065
   * return the same object passed in if it was found in the registry under a compatible context or                    // 17066
   * throw an exception otherwise.  An implementation might only wrap values some of the time based                    // 17067
   * on some criteria.  getTrusted() might return a value and not throw an exception for special                       // 17068
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.                        // 17069
   *                                                                                                                   // 17070
   *                                                                                                                   // 17071
   * A note on the inheritance model for SCE contexts                                                                  // 17072
   * ------------------------------------------------                                                                  // 17073
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This                   // 17074
   * is purely an implementation details.                                                                              // 17075
   *                                                                                                                   // 17076
   * The contract is simply this:                                                                                      // 17077
   *                                                                                                                   // 17078
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)                      // 17079
   *     will also succeed.                                                                                            // 17080
   *                                                                                                                   // 17081
   * Inheritance happens to capture this in a natural way.  In some future, we                                         // 17082
   * may not use inheritance anymore.  That is OK because no code outside of                                           // 17083
   * sce.js and sceSpecs.js would need to be aware of this detail.                                                     // 17084
   */                                                                                                                  // 17085
                                                                                                                       // 17086
  this.$get = ['$parse', '$sceDelegate', function(                                                                     // 17087
                $parse,   $sceDelegate) {                                                                              // 17088
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow                        // 17089
    // the "expression(javascript expression)" syntax which is insecure.                                               // 17090
    if (enabled && msie < 8) {                                                                                         // 17091
      throw $sceMinErr('iequirks',                                                                                     // 17092
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +                      // 17093
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +                        // 17094
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');                                 // 17095
    }                                                                                                                  // 17096
                                                                                                                       // 17097
    var sce = shallowCopy(SCE_CONTEXTS);                                                                               // 17098
                                                                                                                       // 17099
    /**                                                                                                                // 17100
     * @ngdoc method                                                                                                   // 17101
     * @name $sce#isEnabled                                                                                            // 17102
     * @kind function                                                                                                  // 17103
     *                                                                                                                 // 17104
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you                   // 17105
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.                                    // 17106
     *                                                                                                                 // 17107
     * @description                                                                                                    // 17108
     * Returns a boolean indicating if SCE is enabled.                                                                 // 17109
     */                                                                                                                // 17110
    sce.isEnabled = function() {                                                                                       // 17111
      return enabled;                                                                                                  // 17112
    };                                                                                                                 // 17113
    sce.trustAs = $sceDelegate.trustAs;                                                                                // 17114
    sce.getTrusted = $sceDelegate.getTrusted;                                                                          // 17115
    sce.valueOf = $sceDelegate.valueOf;                                                                                // 17116
                                                                                                                       // 17117
    if (!enabled) {                                                                                                    // 17118
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };                                          // 17119
      sce.valueOf = identity;                                                                                          // 17120
    }                                                                                                                  // 17121
                                                                                                                       // 17122
    /**                                                                                                                // 17123
     * @ngdoc method                                                                                                   // 17124
     * @name $sce#parseAs                                                                                              // 17125
     *                                                                                                                 // 17126
     * @description                                                                                                    // 17127
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link                      // 17128
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it                    // 17129
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,                             // 17130
     * *result*)}                                                                                                      // 17131
     *                                                                                                                 // 17132
     * @param {string} type The kind of SCE context in which this result will be used.                                 // 17133
     * @param {string} expression String expression to compile.                                                        // 17134
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17135
     *                                                                                                                 // 17136
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17137
     *      are evaluated against (typically a scope object).                                                          // 17138
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17139
     *      `context`.                                                                                                 // 17140
     */                                                                                                                // 17141
    sce.parseAs = function sceParseAs(type, expr) {                                                                    // 17142
      var parsed = $parse(expr);                                                                                       // 17143
      if (parsed.literal && parsed.constant) {                                                                         // 17144
        return parsed;                                                                                                 // 17145
      } else {                                                                                                         // 17146
        return $parse(expr, function(value) {                                                                          // 17147
          return sce.getTrusted(type, value);                                                                          // 17148
        });                                                                                                            // 17149
      }                                                                                                                // 17150
    };                                                                                                                 // 17151
                                                                                                                       // 17152
    /**                                                                                                                // 17153
     * @ngdoc method                                                                                                   // 17154
     * @name $sce#trustAs                                                                                              // 17155
     *                                                                                                                 // 17156
     * @description                                                                                                    // 17157
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,                                  // 17158
     * returns an object that is trusted by angular for use in specified strict contextual                             // 17159
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute                                          // 17160
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)                        // 17161
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual                        // 17162
     * escaping.                                                                                                       // 17163
     *                                                                                                                 // 17164
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,                        // 17165
     *   resourceUrl, html, js and css.                                                                                // 17166
     * @param {*} value The value that that should be considered trusted/safe.                                         // 17167
     * @returns {*} A value that can be used to stand in for the provided `value` in places                            // 17168
     * where Angular expects a $sce.trustAs() return value.                                                            // 17169
     */                                                                                                                // 17170
                                                                                                                       // 17171
    /**                                                                                                                // 17172
     * @ngdoc method                                                                                                   // 17173
     * @name $sce#trustAsHtml                                                                                          // 17174
     *                                                                                                                 // 17175
     * @description                                                                                                    // 17176
     * Shorthand method.  `$sce.trustAsHtml(value)` →                                                                  // 17177
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}                                    // 17178
     *                                                                                                                 // 17179
     * @param {*} value The value to trustAs.                                                                          // 17180
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml                                      // 17181
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives                           // 17182
     *     only accept expressions that are either literal constants or are the                                        // 17183
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17184
     */                                                                                                                // 17185
                                                                                                                       // 17186
    /**                                                                                                                // 17187
     * @ngdoc method                                                                                                   // 17188
     * @name $sce#trustAsUrl                                                                                           // 17189
     *                                                                                                                 // 17190
     * @description                                                                                                    // 17191
     * Shorthand method.  `$sce.trustAsUrl(value)` →                                                                   // 17192
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}                                     // 17193
     *                                                                                                                 // 17194
     * @param {*} value The value to trustAs.                                                                          // 17195
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl                                       // 17196
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives                            // 17197
     *     only accept expressions that are either literal constants or are the                                        // 17198
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17199
     */                                                                                                                // 17200
                                                                                                                       // 17201
    /**                                                                                                                // 17202
     * @ngdoc method                                                                                                   // 17203
     * @name $sce#trustAsResourceUrl                                                                                   // 17204
     *                                                                                                                 // 17205
     * @description                                                                                                    // 17206
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →                                                           // 17207
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}                            // 17208
     *                                                                                                                 // 17209
     * @param {*} value The value to trustAs.                                                                          // 17210
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl                               // 17211
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives                    // 17212
     *     only accept expressions that are either literal constants or are the return                                 // 17213
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                             // 17214
     */                                                                                                                // 17215
                                                                                                                       // 17216
    /**                                                                                                                // 17217
     * @ngdoc method                                                                                                   // 17218
     * @name $sce#trustAsJs                                                                                            // 17219
     *                                                                                                                 // 17220
     * @description                                                                                                    // 17221
     * Shorthand method.  `$sce.trustAsJs(value)` →                                                                    // 17222
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}                                      // 17223
     *                                                                                                                 // 17224
     * @param {*} value The value to trustAs.                                                                          // 17225
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs                                        // 17226
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives                             // 17227
     *     only accept expressions that are either literal constants or are the                                        // 17228
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)                                                      // 17229
     */                                                                                                                // 17230
                                                                                                                       // 17231
    /**                                                                                                                // 17232
     * @ngdoc method                                                                                                   // 17233
     * @name $sce#getTrusted                                                                                           // 17234
     *                                                                                                                 // 17235
     * @description                                                                                                    // 17236
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,                            // 17237
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the                             // 17238
     * originally supplied value if the queried context type is a supertype of the created type.                       // 17239
     * If this condition isn't satisfied, throws an exception.                                                         // 17240
     *                                                                                                                 // 17241
     * @param {string} type The kind of context in which this value is to be used.                                     // 17242
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}                            // 17243
     *                         call.                                                                                   // 17244
     * @returns {*} The value the was originally provided to                                                           // 17245
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.                                   // 17246
     *              Otherwise, throws an exception.                                                                    // 17247
     */                                                                                                                // 17248
                                                                                                                       // 17249
    /**                                                                                                                // 17250
     * @ngdoc method                                                                                                   // 17251
     * @name $sce#getTrustedHtml                                                                                       // 17252
     *                                                                                                                 // 17253
     * @description                                                                                                    // 17254
     * Shorthand method.  `$sce.getTrustedHtml(value)` →                                                               // 17255
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}                              // 17256
     *                                                                                                                 // 17257
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17258
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`                                            // 17259
     */                                                                                                                // 17260
                                                                                                                       // 17261
    /**                                                                                                                // 17262
     * @ngdoc method                                                                                                   // 17263
     * @name $sce#getTrustedCss                                                                                        // 17264
     *                                                                                                                 // 17265
     * @description                                                                                                    // 17266
     * Shorthand method.  `$sce.getTrustedCss(value)` →                                                                // 17267
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}                               // 17268
     *                                                                                                                 // 17269
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17270
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`                                             // 17271
     */                                                                                                                // 17272
                                                                                                                       // 17273
    /**                                                                                                                // 17274
     * @ngdoc method                                                                                                   // 17275
     * @name $sce#getTrustedUrl                                                                                        // 17276
     *                                                                                                                 // 17277
     * @description                                                                                                    // 17278
     * Shorthand method.  `$sce.getTrustedUrl(value)` →                                                                // 17279
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}                               // 17280
     *                                                                                                                 // 17281
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17282
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`                                             // 17283
     */                                                                                                                // 17284
                                                                                                                       // 17285
    /**                                                                                                                // 17286
     * @ngdoc method                                                                                                   // 17287
     * @name $sce#getTrustedResourceUrl                                                                                // 17288
     *                                                                                                                 // 17289
     * @description                                                                                                    // 17290
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →                                                        // 17291
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}                      // 17292
     *                                                                                                                 // 17293
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.                                                // 17294
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`                                    // 17295
     */                                                                                                                // 17296
                                                                                                                       // 17297
    /**                                                                                                                // 17298
     * @ngdoc method                                                                                                   // 17299
     * @name $sce#getTrustedJs                                                                                         // 17300
     *                                                                                                                 // 17301
     * @description                                                                                                    // 17302
     * Shorthand method.  `$sce.getTrustedJs(value)` →                                                                 // 17303
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}                                // 17304
     *                                                                                                                 // 17305
     * @param {*} value The value to pass to `$sce.getTrusted`.                                                        // 17306
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`                                              // 17307
     */                                                                                                                // 17308
                                                                                                                       // 17309
    /**                                                                                                                // 17310
     * @ngdoc method                                                                                                   // 17311
     * @name $sce#parseAsHtml                                                                                          // 17312
     *                                                                                                                 // 17313
     * @description                                                                                                    // 17314
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →                                                      // 17315
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}                                                    // 17316
     *                                                                                                                 // 17317
     * @param {string} expression String expression to compile.                                                        // 17318
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17319
     *                                                                                                                 // 17320
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17321
     *      are evaluated against (typically a scope object).                                                          // 17322
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17323
     *      `context`.                                                                                                 // 17324
     */                                                                                                                // 17325
                                                                                                                       // 17326
    /**                                                                                                                // 17327
     * @ngdoc method                                                                                                   // 17328
     * @name $sce#parseAsCss                                                                                           // 17329
     *                                                                                                                 // 17330
     * @description                                                                                                    // 17331
     * Shorthand method.  `$sce.parseAsCss(value)` →                                                                   // 17332
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}                                                     // 17333
     *                                                                                                                 // 17334
     * @param {string} expression String expression to compile.                                                        // 17335
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17336
     *                                                                                                                 // 17337
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17338
     *      are evaluated against (typically a scope object).                                                          // 17339
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17340
     *      `context`.                                                                                                 // 17341
     */                                                                                                                // 17342
                                                                                                                       // 17343
    /**                                                                                                                // 17344
     * @ngdoc method                                                                                                   // 17345
     * @name $sce#parseAsUrl                                                                                           // 17346
     *                                                                                                                 // 17347
     * @description                                                                                                    // 17348
     * Shorthand method.  `$sce.parseAsUrl(value)` →                                                                   // 17349
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}                                                     // 17350
     *                                                                                                                 // 17351
     * @param {string} expression String expression to compile.                                                        // 17352
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17353
     *                                                                                                                 // 17354
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17355
     *      are evaluated against (typically a scope object).                                                          // 17356
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17357
     *      `context`.                                                                                                 // 17358
     */                                                                                                                // 17359
                                                                                                                       // 17360
    /**                                                                                                                // 17361
     * @ngdoc method                                                                                                   // 17362
     * @name $sce#parseAsResourceUrl                                                                                   // 17363
     *                                                                                                                 // 17364
     * @description                                                                                                    // 17365
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →                                                           // 17366
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}                                            // 17367
     *                                                                                                                 // 17368
     * @param {string} expression String expression to compile.                                                        // 17369
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17370
     *                                                                                                                 // 17371
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17372
     *      are evaluated against (typically a scope object).                                                          // 17373
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17374
     *      `context`.                                                                                                 // 17375
     */                                                                                                                // 17376
                                                                                                                       // 17377
    /**                                                                                                                // 17378
     * @ngdoc method                                                                                                   // 17379
     * @name $sce#parseAsJs                                                                                            // 17380
     *                                                                                                                 // 17381
     * @description                                                                                                    // 17382
     * Shorthand method.  `$sce.parseAsJs(value)` →                                                                    // 17383
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}                                                      // 17384
     *                                                                                                                 // 17385
     * @param {string} expression String expression to compile.                                                        // 17386
     * @returns {function(context, locals)} a function which represents the compiled expression:                       // 17387
     *                                                                                                                 // 17388
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings                   // 17389
     *      are evaluated against (typically a scope object).                                                          // 17390
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in                   // 17391
     *      `context`.                                                                                                 // 17392
     */                                                                                                                // 17393
                                                                                                                       // 17394
    // Shorthand delegations.                                                                                          // 17395
    var parse = sce.parseAs,                                                                                           // 17396
        getTrusted = sce.getTrusted,                                                                                   // 17397
        trustAs = sce.trustAs;                                                                                         // 17398
                                                                                                                       // 17399
    forEach(SCE_CONTEXTS, function(enumValue, name) {                                                                  // 17400
      var lName = lowercase(name);                                                                                     // 17401
      sce[camelCase("parse_as_" + lName)] = function(expr) {                                                           // 17402
        return parse(enumValue, expr);                                                                                 // 17403
      };                                                                                                               // 17404
      sce[camelCase("get_trusted_" + lName)] = function(value) {                                                       // 17405
        return getTrusted(enumValue, value);                                                                           // 17406
      };                                                                                                               // 17407
      sce[camelCase("trust_as_" + lName)] = function(value) {                                                          // 17408
        return trustAs(enumValue, value);                                                                              // 17409
      };                                                                                                               // 17410
    });                                                                                                                // 17411
                                                                                                                       // 17412
    return sce;                                                                                                        // 17413
  }];                                                                                                                  // 17414
}                                                                                                                      // 17415
                                                                                                                       // 17416
/**                                                                                                                    // 17417
 * !!! This is an undocumented "private" service !!!                                                                   // 17418
 *                                                                                                                     // 17419
 * @name $sniffer                                                                                                      // 17420
 * @requires $window                                                                                                   // 17421
 * @requires $document                                                                                                 // 17422
 *                                                                                                                     // 17423
 * @property {boolean} history Does the browser support html5 history api ?                                            // 17424
 * @property {boolean} transitions Does the browser support CSS transition events ?                                    // 17425
 * @property {boolean} animations Does the browser support CSS animation events ?                                      // 17426
 *                                                                                                                     // 17427
 * @description                                                                                                        // 17428
 * This is very simple implementation of testing browser's features.                                                   // 17429
 */                                                                                                                    // 17430
function $SnifferProvider() {                                                                                          // 17431
  this.$get = ['$window', '$document', function($window, $document) {                                                  // 17432
    var eventSupport = {},                                                                                             // 17433
        android =                                                                                                      // 17434
          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),                      // 17435
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),                                                    // 17436
        document = $document[0] || {},                                                                                 // 17437
        vendorPrefix,                                                                                                  // 17438
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,                                                                     // 17439
        bodyStyle = document.body && document.body.style,                                                              // 17440
        transitions = false,                                                                                           // 17441
        animations = false,                                                                                            // 17442
        match;                                                                                                         // 17443
                                                                                                                       // 17444
    if (bodyStyle) {                                                                                                   // 17445
      for (var prop in bodyStyle) {                                                                                    // 17446
        if (match = vendorRegex.exec(prop)) {                                                                          // 17447
          vendorPrefix = match[0];                                                                                     // 17448
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);                             // 17449
          break;                                                                                                       // 17450
        }                                                                                                              // 17451
      }                                                                                                                // 17452
                                                                                                                       // 17453
      if (!vendorPrefix) {                                                                                             // 17454
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';                                                     // 17455
      }                                                                                                                // 17456
                                                                                                                       // 17457
      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));                     // 17458
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));                       // 17459
                                                                                                                       // 17460
      if (android && (!transitions ||  !animations)) {                                                                 // 17461
        transitions = isString(bodyStyle.webkitTransition);                                                            // 17462
        animations = isString(bodyStyle.webkitAnimation);                                                              // 17463
      }                                                                                                                // 17464
    }                                                                                                                  // 17465
                                                                                                                       // 17466
                                                                                                                       // 17467
    return {                                                                                                           // 17468
      // Android has history.pushState, but it does not update location correctly                                      // 17469
      // so let's not use the history API at all.                                                                      // 17470
      // http://code.google.com/p/android/issues/detail?id=17471                                                       // 17471
      // https://github.com/angular/angular.js/issues/904                                                              // 17472
                                                                                                                       // 17473
      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has                         // 17474
      // so let's not use the history API also                                                                         // 17475
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined                      // 17476
      // jshint -W018                                                                                                  // 17477
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),                           // 17478
      // jshint +W018                                                                                                  // 17479
      hasEvent: function(event) {                                                                                      // 17480
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have                    // 17481
        // it. In particular the event is not fired when backspace or delete key are pressed or                        // 17482
        // when cut operation is performed.                                                                            // 17483
        // IE10+ implements 'input' event but it erroneously fires under various situations,                           // 17484
        // e.g. when placeholder changes, or a form is focused.                                                        // 17485
        if (event === 'input' && msie <= 11) return false;                                                             // 17486
                                                                                                                       // 17487
        if (isUndefined(eventSupport[event])) {                                                                        // 17488
          var divElm = document.createElement('div');                                                                  // 17489
          eventSupport[event] = 'on' + event in divElm;                                                                // 17490
        }                                                                                                              // 17491
                                                                                                                       // 17492
        return eventSupport[event];                                                                                    // 17493
      },                                                                                                               // 17494
      csp: csp(),                                                                                                      // 17495
      vendorPrefix: vendorPrefix,                                                                                      // 17496
      transitions: transitions,                                                                                        // 17497
      animations: animations,                                                                                          // 17498
      android: android                                                                                                 // 17499
    };                                                                                                                 // 17500
  }];                                                                                                                  // 17501
}                                                                                                                      // 17502
                                                                                                                       // 17503
var $compileMinErr = minErr('$compile');                                                                               // 17504
                                                                                                                       // 17505
/**                                                                                                                    // 17506
 * @ngdoc service                                                                                                      // 17507
 * @name $templateRequest                                                                                              // 17508
 *                                                                                                                     // 17509
 * @description                                                                                                        // 17510
 * The `$templateRequest` service runs security checks then downloads the provided template using                      // 17511
 * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request                      // 17512
 * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the                     // 17513
 * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the                      // 17514
 * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted                       // 17515
 * when `tpl` is of type string and `$templateCache` has the matching entry.                                           // 17516
 *                                                                                                                     // 17517
 * @param {string|TrustedResourceUrl} tpl The HTTP request template URL                                                // 17518
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *                                                                                                                     // 17520
 * @return {Promise} a promise for the HTTP response data of the given URL.                                            // 17521
 *                                                                                                                     // 17522
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.                 // 17523
 */                                                                                                                    // 17524
function $TemplateRequestProvider() {                                                                                  // 17525
  this.$get = ['$templateCache', '$http', '$q', '$sce', function($templateCache, $http, $q, $sce) {                    // 17526
    function handleRequestFn(tpl, ignoreRequestError) {                                                                // 17527
      handleRequestFn.totalPendingRequests++;                                                                          // 17528
                                                                                                                       // 17529
      // We consider the template cache holds only trusted templates, so                                               // 17530
      // there's no need to go through whitelisting again for keys that already                                        // 17531
      // are included in there. This also makes Angular accept any script                                              // 17532
      // directive, no matter its name. However, we still need to unwrap trusted                                       // 17533
      // types.                                                                                                        // 17534
      if (!isString(tpl) || !$templateCache.get(tpl)) {                                                                // 17535
        tpl = $sce.getTrustedResourceUrl(tpl);                                                                         // 17536
      }                                                                                                                // 17537
                                                                                                                       // 17538
      var transformResponse = $http.defaults && $http.defaults.transformResponse;                                      // 17539
                                                                                                                       // 17540
      if (isArray(transformResponse)) {                                                                                // 17541
        transformResponse = transformResponse.filter(function(transformer) {                                           // 17542
          return transformer !== defaultHttpResponseTransform;                                                         // 17543
        });                                                                                                            // 17544
      } else if (transformResponse === defaultHttpResponseTransform) {                                                 // 17545
        transformResponse = null;                                                                                      // 17546
      }                                                                                                                // 17547
                                                                                                                       // 17548
      var httpOptions = {                                                                                              // 17549
        cache: $templateCache,                                                                                         // 17550
        transformResponse: transformResponse                                                                           // 17551
      };                                                                                                               // 17552
                                                                                                                       // 17553
      return $http.get(tpl, httpOptions)                                                                               // 17554
        ['finally'](function() {                                                                                       // 17555
          handleRequestFn.totalPendingRequests--;                                                                      // 17556
        })                                                                                                             // 17557
        .then(function(response) {                                                                                     // 17558
          $templateCache.put(tpl, response.data);                                                                      // 17559
          return response.data;                                                                                        // 17560
        }, handleError);                                                                                               // 17561
                                                                                                                       // 17562
      function handleError(resp) {                                                                                     // 17563
        if (!ignoreRequestError) {                                                                                     // 17564
          throw $compileMinErr('tpload', 'Failed to load template: {0} (HTTP status: {1} {2})',                        // 17565
            tpl, resp.status, resp.statusText);                                                                        // 17566
        }                                                                                                              // 17567
        return $q.reject(resp);                                                                                        // 17568
      }                                                                                                                // 17569
    }                                                                                                                  // 17570
                                                                                                                       // 17571
    handleRequestFn.totalPendingRequests = 0;                                                                          // 17572
                                                                                                                       // 17573
    return handleRequestFn;                                                                                            // 17574
  }];                                                                                                                  // 17575
}                                                                                                                      // 17576
                                                                                                                       // 17577
function $$TestabilityProvider() {                                                                                     // 17578
  this.$get = ['$rootScope', '$browser', '$location',                                                                  // 17579
       function($rootScope,   $browser,   $location) {                                                                 // 17580
                                                                                                                       // 17581
    /**                                                                                                                // 17582
     * @name $testability                                                                                              // 17583
     *                                                                                                                 // 17584
     * @description                                                                                                    // 17585
     * The private $$testability service provides a collection of methods for use when debugging                       // 17586
     * or by automated test and debugging tools.                                                                       // 17587
     */                                                                                                                // 17588
    var testability = {};                                                                                              // 17589
                                                                                                                       // 17590
    /**                                                                                                                // 17591
     * @name $$testability#findBindings                                                                                // 17592
     *                                                                                                                 // 17593
     * @description                                                                                                    // 17594
     * Returns an array of elements that are bound (via ng-bind or {{}})                                               // 17595
     * to expressions matching the input.                                                                              // 17596
     *                                                                                                                 // 17597
     * @param {Element} element The element root to search from.                                                       // 17598
     * @param {string} expression The binding expression to match.                                                     // 17599
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17600
     *     for the expression. Filters and whitespace are ignored.                                                     // 17601
     */                                                                                                                // 17602
    testability.findBindings = function(element, expression, opt_exactMatch) {                                         // 17603
      var bindings = element.getElementsByClassName('ng-binding');                                                     // 17604
      var matches = [];                                                                                                // 17605
      forEach(bindings, function(binding) {                                                                            // 17606
        var dataBinding = angular.element(binding).data('$binding');                                                   // 17607
        if (dataBinding) {                                                                                             // 17608
          forEach(dataBinding, function(bindingName) {                                                                 // 17609
            if (opt_exactMatch) {                                                                                      // 17610
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');                       // 17611
              if (matcher.test(bindingName)) {                                                                         // 17612
                matches.push(binding);                                                                                 // 17613
              }                                                                                                        // 17614
            } else {                                                                                                   // 17615
              if (bindingName.indexOf(expression) != -1) {                                                             // 17616
                matches.push(binding);                                                                                 // 17617
              }                                                                                                        // 17618
            }                                                                                                          // 17619
          });                                                                                                          // 17620
        }                                                                                                              // 17621
      });                                                                                                              // 17622
      return matches;                                                                                                  // 17623
    };                                                                                                                 // 17624
                                                                                                                       // 17625
    /**                                                                                                                // 17626
     * @name $$testability#findModels                                                                                  // 17627
     *                                                                                                                 // 17628
     * @description                                                                                                    // 17629
     * Returns an array of elements that are two-way found via ng-model to                                             // 17630
     * expressions matching the input.                                                                                 // 17631
     *                                                                                                                 // 17632
     * @param {Element} element The element root to search from.                                                       // 17633
     * @param {string} expression The model expression to match.                                                       // 17634
     * @param {boolean} opt_exactMatch If true, only returns exact matches                                             // 17635
     *     for the expression.                                                                                         // 17636
     */                                                                                                                // 17637
    testability.findModels = function(element, expression, opt_exactMatch) {                                           // 17638
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];                                                                     // 17639
      for (var p = 0; p < prefixes.length; ++p) {                                                                      // 17640
        var attributeEquals = opt_exactMatch ? '=' : '*=';                                                             // 17641
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';                        // 17642
        var elements = element.querySelectorAll(selector);                                                             // 17643
        if (elements.length) {                                                                                         // 17644
          return elements;                                                                                             // 17645
        }                                                                                                              // 17646
      }                                                                                                                // 17647
    };                                                                                                                 // 17648
                                                                                                                       // 17649
    /**                                                                                                                // 17650
     * @name $$testability#getLocation                                                                                 // 17651
     *                                                                                                                 // 17652
     * @description                                                                                                    // 17653
     * Shortcut for getting the location in a browser agnostic way. Returns                                            // 17654
     *     the path, search, and hash. (e.g. /path?a=b#hash)                                                           // 17655
     */                                                                                                                // 17656
    testability.getLocation = function() {                                                                             // 17657
      return $location.url();                                                                                          // 17658
    };                                                                                                                 // 17659
                                                                                                                       // 17660
    /**                                                                                                                // 17661
     * @name $$testability#setLocation                                                                                 // 17662
     *                                                                                                                 // 17663
     * @description                                                                                                    // 17664
     * Shortcut for navigating to a location without doing a full page reload.                                         // 17665
     *                                                                                                                 // 17666
     * @param {string} url The location url (path, search and hash,                                                    // 17667
     *     e.g. /path?a=b#hash) to go to.                                                                              // 17668
     */                                                                                                                // 17669
    testability.setLocation = function(url) {                                                                          // 17670
      if (url !== $location.url()) {                                                                                   // 17671
        $location.url(url);                                                                                            // 17672
        $rootScope.$digest();                                                                                          // 17673
      }                                                                                                                // 17674
    };                                                                                                                 // 17675
                                                                                                                       // 17676
    /**                                                                                                                // 17677
     * @name $$testability#whenStable                                                                                  // 17678
     *                                                                                                                 // 17679
     * @description                                                                                                    // 17680
     * Calls the callback when $timeout and $http requests are completed.                                              // 17681
     *                                                                                                                 // 17682
     * @param {function} callback                                                                                      // 17683
     */                                                                                                                // 17684
    testability.whenStable = function(callback) {                                                                      // 17685
      $browser.notifyWhenNoOutstandingRequests(callback);                                                              // 17686
    };                                                                                                                 // 17687
                                                                                                                       // 17688
    return testability;                                                                                                // 17689
  }];                                                                                                                  // 17690
}                                                                                                                      // 17691
                                                                                                                       // 17692
function $TimeoutProvider() {                                                                                          // 17693
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',                                             // 17694
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {                                            // 17695
                                                                                                                       // 17696
    var deferreds = {};                                                                                                // 17697
                                                                                                                       // 17698
                                                                                                                       // 17699
     /**                                                                                                               // 17700
      * @ngdoc service                                                                                                 // 17701
      * @name $timeout                                                                                                 // 17702
      *                                                                                                                // 17703
      * @description                                                                                                   // 17704
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch                       // 17705
      * block and delegates any exceptions to                                                                          // 17706
      * {@link ng.$exceptionHandler $exceptionHandler} service.                                                        // 17707
      *                                                                                                                // 17708
      * The return value of calling `$timeout` is a promise, which will be resolved when                               // 17709
      * the delay has passed and the timeout function, if provided, is executed.                                       // 17710
      *                                                                                                                // 17711
      * To cancel a timeout request, call `$timeout.cancel(promise)`.                                                  // 17712
      *                                                                                                                // 17713
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to                                             // 17714
      * synchronously flush the queue of deferred functions.                                                           // 17715
      *                                                                                                                // 17716
      * If you only want a promise that will be resolved after some specified delay                                    // 17717
      * then you can call `$timeout` without the `fn` function.                                                        // 17718
      *                                                                                                                // 17719
      * @param {function()=} fn A function, whose execution should be delayed.                                         // 17720
      * @param {number=} [delay=0] Delay in milliseconds.                                                              // 17721
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise                   // 17722
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.                                 // 17723
      * @param {...*=} Pass additional parameters to the executed function.                                            // 17724
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this                   // 17725
      *   promise will be resolved with is the return value of the `fn` function.                                      // 17726
      *                                                                                                                // 17727
      */                                                                                                               // 17728
    function timeout(fn, delay, invokeApply) {                                                                         // 17729
      if (!isFunction(fn)) {                                                                                           // 17730
        invokeApply = delay;                                                                                           // 17731
        delay = fn;                                                                                                    // 17732
        fn = noop;                                                                                                     // 17733
      }                                                                                                                // 17734
                                                                                                                       // 17735
      var args = sliceArgs(arguments, 3),                                                                              // 17736
          skipApply = (isDefined(invokeApply) && !invokeApply),                                                        // 17737
          deferred = (skipApply ? $$q : $q).defer(),                                                                   // 17738
          promise = deferred.promise,                                                                                  // 17739
          timeoutId;                                                                                                   // 17740
                                                                                                                       // 17741
      timeoutId = $browser.defer(function() {                                                                          // 17742
        try {                                                                                                          // 17743
          deferred.resolve(fn.apply(null, args));                                                                      // 17744
        } catch (e) {                                                                                                  // 17745
          deferred.reject(e);                                                                                          // 17746
          $exceptionHandler(e);                                                                                        // 17747
        }                                                                                                              // 17748
        finally {                                                                                                      // 17749
          delete deferreds[promise.$$timeoutId];                                                                       // 17750
        }                                                                                                              // 17751
                                                                                                                       // 17752
        if (!skipApply) $rootScope.$apply();                                                                           // 17753
      }, delay);                                                                                                       // 17754
                                                                                                                       // 17755
      promise.$$timeoutId = timeoutId;                                                                                 // 17756
      deferreds[timeoutId] = deferred;                                                                                 // 17757
                                                                                                                       // 17758
      return promise;                                                                                                  // 17759
    }                                                                                                                  // 17760
                                                                                                                       // 17761
                                                                                                                       // 17762
     /**                                                                                                               // 17763
      * @ngdoc method                                                                                                  // 17764
      * @name $timeout#cancel                                                                                          // 17765
      *                                                                                                                // 17766
      * @description                                                                                                   // 17767
      * Cancels a task associated with the `promise`. As a result of this, the promise will be                         // 17768
      * resolved with a rejection.                                                                                     // 17769
      *                                                                                                                // 17770
      * @param {Promise=} promise Promise returned by the `$timeout` function.                                         // 17771
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully                         // 17772
      *   canceled.                                                                                                    // 17773
      */                                                                                                               // 17774
    timeout.cancel = function(promise) {                                                                               // 17775
      if (promise && promise.$$timeoutId in deferreds) {                                                               // 17776
        deferreds[promise.$$timeoutId].reject('canceled');                                                             // 17777
        delete deferreds[promise.$$timeoutId];                                                                         // 17778
        return $browser.defer.cancel(promise.$$timeoutId);                                                             // 17779
      }                                                                                                                // 17780
      return false;                                                                                                    // 17781
    };                                                                                                                 // 17782
                                                                                                                       // 17783
    return timeout;                                                                                                    // 17784
  }];                                                                                                                  // 17785
}                                                                                                                      // 17786
                                                                                                                       // 17787
// NOTE:  The usage of window and document instead of $window and $document here is                                    // 17788
// deliberate.  This service depends on the specific behavior of anchor nodes created by the                           // 17789
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and                            // 17790
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it                                  // 17791
// doesn't know about mocked locations and resolves URLs to the real document - which is                               // 17792
// exactly the behavior needed here.  There is little value is mocking these out for this                              // 17793
// service.                                                                                                            // 17794
var urlParsingNode = document.createElement("a");                                                                      // 17795
var originUrl = urlResolve(window.location.href);                                                                      // 17796
                                                                                                                       // 17797
                                                                                                                       // 17798
/**                                                                                                                    // 17799
 *                                                                                                                     // 17800
 * Implementation Notes for non-IE browsers                                                                            // 17801
 * ----------------------------------------                                                                            // 17802
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,                           // 17803
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative                          // 17804
 * URL will be resolved into an absolute URL in the context of the application document.                               // 17805
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related                           // 17806
 * properties are all populated to reflect the normalized URL.  This approach has wide                                 // 17807
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See                                                         // 17808
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                     // 17809
 *                                                                                                                     // 17810
 * Implementation Notes for IE                                                                                         // 17811
 * ---------------------------                                                                                         // 17812
 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other                                   // 17813
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify                       // 17814
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We                        // 17815
 * work around that by performing the parsing in a 2nd step by taking a previously normalized                          // 17816
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the                      // 17817
 * properties such as protocol, hostname, port, etc.                                                                   // 17818
 *                                                                                                                     // 17819
 * References:                                                                                                         // 17820
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement                                                 // 17821
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html                                                   // 17822
 *   http://url.spec.whatwg.org/#urlutils                                                                              // 17823
 *   https://github.com/angular/angular.js/pull/2902                                                                   // 17824
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/                                                   // 17825
 *                                                                                                                     // 17826
 * @kind function                                                                                                      // 17827
 * @param {string} url The URL to be parsed.                                                                           // 17828
 * @description Normalizes and parses a URL.                                                                           // 17829
 * @returns {object} Returns the normalized URL as a dictionary.                                                       // 17830
 *                                                                                                                     // 17831
 *   | member name   | Description    |                                                                                // 17832
 *   |---------------|----------------|                                                                                // 17833
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |                        // 17834
 *   | protocol      | The protocol including the trailing colon                              |                        // 17835
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |                        // 17836
 *   | search        | The search params, minus the question mark                             |                        // 17837
 *   | hash          | The hash string, minus the hash symbol                                                          // 17838
 *   | hostname      | The hostname                                                                                    // 17839
 *   | port          | The port, without ":"                                                                           // 17840
 *   | pathname      | The pathname, beginning with "/"                                                                // 17841
 *                                                                                                                     // 17842
 */                                                                                                                    // 17843
function urlResolve(url) {                                                                                             // 17844
  var href = url;                                                                                                      // 17845
                                                                                                                       // 17846
  if (msie) {                                                                                                          // 17847
    // Normalize before parse.  Refer Implementation Notes on why this is                                              // 17848
    // done in two steps on IE.                                                                                        // 17849
    urlParsingNode.setAttribute("href", href);                                                                         // 17850
    href = urlParsingNode.href;                                                                                        // 17851
  }                                                                                                                    // 17852
                                                                                                                       // 17853
  urlParsingNode.setAttribute('href', href);                                                                           // 17854
                                                                                                                       // 17855
  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils                             // 17856
  return {                                                                                                             // 17857
    href: urlParsingNode.href,                                                                                         // 17858
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',                                // 17859
    host: urlParsingNode.host,                                                                                         // 17860
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',                                     // 17861
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',                                            // 17862
    hostname: urlParsingNode.hostname,                                                                                 // 17863
    port: urlParsingNode.port,                                                                                         // 17864
    pathname: (urlParsingNode.pathname.charAt(0) === '/')                                                              // 17865
      ? urlParsingNode.pathname                                                                                        // 17866
      : '/' + urlParsingNode.pathname                                                                                  // 17867
  };                                                                                                                   // 17868
}                                                                                                                      // 17869
                                                                                                                       // 17870
/**                                                                                                                    // 17871
 * Parse a request URL and determine whether this is a same-origin request as the application document.                // 17872
 *                                                                                                                     // 17873
 * @param {string|object} requestUrl The url of the request as a string that will be resolved                          // 17874
 * or a parsed URL object.                                                                                             // 17875
 * @returns {boolean} Whether the request is for the same origin as the application document.                          // 17876
 */                                                                                                                    // 17877
function urlIsSameOrigin(requestUrl) {                                                                                 // 17878
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;                                           // 17879
  return (parsed.protocol === originUrl.protocol &&                                                                    // 17880
          parsed.host === originUrl.host);                                                                             // 17881
}                                                                                                                      // 17882
                                                                                                                       // 17883
/**                                                                                                                    // 17884
 * @ngdoc service                                                                                                      // 17885
 * @name $window                                                                                                       // 17886
 *                                                                                                                     // 17887
 * @description                                                                                                        // 17888
 * A reference to the browser's `window` object. While `window`                                                        // 17889
 * is globally available in JavaScript, it causes testability problems, because                                        // 17890
 * it is a global variable. In angular we always refer to it through the                                               // 17891
 * `$window` service, so it may be overridden, removed or mocked for testing.                                          // 17892
 *                                                                                                                     // 17893
 * Expressions, like the one defined for the `ngClick` directive in the example                                        // 17894
 * below, are evaluated with respect to the current scope.  Therefore, there is                                        // 17895
 * no risk of inadvertently coding in a dependency on a global value in such an                                        // 17896
 * expression.                                                                                                         // 17897
 *                                                                                                                     // 17898
 * @example                                                                                                            // 17899
   <example module="windowExample">                                                                                    // 17900
     <file name="index.html">                                                                                          // 17901
       <script>                                                                                                        // 17902
         angular.module('windowExample', [])                                                                           // 17903
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {                          // 17904
             $scope.greeting = 'Hello, World!';                                                                        // 17905
             $scope.doGreeting = function(greeting) {                                                                  // 17906
               $window.alert(greeting);                                                                                // 17907
             };                                                                                                        // 17908
           }]);                                                                                                        // 17909
       </script>                                                                                                       // 17910
       <div ng-controller="ExampleController">                                                                         // 17911
         <input type="text" ng-model="greeting" aria-label="greeting" />                                               // 17912
         <button ng-click="doGreeting(greeting)">ALERT</button>                                                        // 17913
       </div>                                                                                                          // 17914
     </file>                                                                                                           // 17915
     <file name="protractor.js" type="protractor">                                                                     // 17916
      it('should display the greeting in the input box', function() {                                                  // 17917
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');                                                     // 17918
       // If we click the button it will block the test runner                                                         // 17919
       // element(':button').click();                                                                                  // 17920
      });                                                                                                              // 17921
     </file>                                                                                                           // 17922
   </example>                                                                                                          // 17923
 */                                                                                                                    // 17924
function $WindowProvider() {                                                                                           // 17925
  this.$get = valueFn(window);                                                                                         // 17926
}                                                                                                                      // 17927
                                                                                                                       // 17928
/**                                                                                                                    // 17929
 * @name $$cookieReader                                                                                                // 17930
 * @requires $document                                                                                                 // 17931
 *                                                                                                                     // 17932
 * @description                                                                                                        // 17933
 * This is a private service for reading cookies used by $http and ngCookies                                           // 17934
 *                                                                                                                     // 17935
 * @return {Object} a key/value map of the current cookies                                                             // 17936
 */                                                                                                                    // 17937
function $$CookieReader($document) {                                                                                   // 17938
  var rawDocument = $document[0] || {};                                                                                // 17939
  var lastCookies = {};                                                                                                // 17940
  var lastCookieString = '';                                                                                           // 17941
                                                                                                                       // 17942
  function safeDecodeURIComponent(str) {                                                                               // 17943
    try {                                                                                                              // 17944
      return decodeURIComponent(str);                                                                                  // 17945
    } catch (e) {                                                                                                      // 17946
      return str;                                                                                                      // 17947
    }                                                                                                                  // 17948
  }                                                                                                                    // 17949
                                                                                                                       // 17950
  return function() {                                                                                                  // 17951
    var cookieArray, cookie, i, index, name;                                                                           // 17952
    var currentCookieString = rawDocument.cookie || '';                                                                // 17953
                                                                                                                       // 17954
    if (currentCookieString !== lastCookieString) {                                                                    // 17955
      lastCookieString = currentCookieString;                                                                          // 17956
      cookieArray = lastCookieString.split('; ');                                                                      // 17957
      lastCookies = {};                                                                                                // 17958
                                                                                                                       // 17959
      for (i = 0; i < cookieArray.length; i++) {                                                                       // 17960
        cookie = cookieArray[i];                                                                                       // 17961
        index = cookie.indexOf('=');                                                                                   // 17962
        if (index > 0) { //ignore nameless cookies                                                                     // 17963
          name = safeDecodeURIComponent(cookie.substring(0, index));                                                   // 17964
          // the first value that is seen for a cookie is the most                                                     // 17965
          // specific one.  values for the same cookie name that                                                       // 17966
          // follow are for less specific paths.                                                                       // 17967
          if (lastCookies[name] === undefined) {                                                                       // 17968
            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));                                   // 17969
          }                                                                                                            // 17970
        }                                                                                                              // 17971
      }                                                                                                                // 17972
    }                                                                                                                  // 17973
    return lastCookies;                                                                                                // 17974
  };                                                                                                                   // 17975
}                                                                                                                      // 17976
                                                                                                                       // 17977
$$CookieReader.$inject = ['$document'];                                                                                // 17978
                                                                                                                       // 17979
function $$CookieReaderProvider() {                                                                                    // 17980
  this.$get = $$CookieReader;                                                                                          // 17981
}                                                                                                                      // 17982
                                                                                                                       // 17983
/* global currencyFilter: true,                                                                                        // 17984
 dateFilter: true,                                                                                                     // 17985
 filterFilter: true,                                                                                                   // 17986
 jsonFilter: true,                                                                                                     // 17987
 limitToFilter: true,                                                                                                  // 17988
 lowercaseFilter: true,                                                                                                // 17989
 numberFilter: true,                                                                                                   // 17990
 orderByFilter: true,                                                                                                  // 17991
 uppercaseFilter: true,                                                                                                // 17992
 */                                                                                                                    // 17993
                                                                                                                       // 17994
/**                                                                                                                    // 17995
 * @ngdoc provider                                                                                                     // 17996
 * @name $filterProvider                                                                                               // 17997
 * @description                                                                                                        // 17998
 *                                                                                                                     // 17999
 * Filters are just functions which transform input to an output. However filters need to be                           // 18000
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is                    // 18001
 * annotated with dependencies and is responsible for creating a filter function.                                      // 18002
 *                                                                                                                     // 18003
 * <div class="alert alert-warning">                                                                                   // 18004
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.      // 18005
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace                  // 18006
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                             // 18007
 * (`myapp_subsection_filterx`).                                                                                       // 18008
 * </div>                                                                                                              // 18009
 *                                                                                                                     // 18010
 * ```js                                                                                                               // 18011
 *   // Filter registration                                                                                            // 18012
 *   function MyModule($provide, $filterProvider) {                                                                    // 18013
 *     // create a service to demonstrate injection (not always needed)                                                // 18014
 *     $provide.value('greet', function(name){                                                                         // 18015
 *       return 'Hello ' + name + '!';                                                                                 // 18016
 *     });                                                                                                             // 18017
 *                                                                                                                     // 18018
 *     // register a filter factory which uses the                                                                     // 18019
 *     // greet service to demonstrate DI.                                                                             // 18020
 *     $filterProvider.register('greet', function(greet){                                                              // 18021
 *       // return the filter function which uses the greet service                                                    // 18022
 *       // to generate salutation                                                                                     // 18023
 *       return function(text) {                                                                                       // 18024
 *         // filters need to be forgiving so check input validity                                                     // 18025
 *         return text && greet(text) || text;                                                                         // 18026
 *       };                                                                                                            // 18027
 *     });                                                                                                             // 18028
 *   }                                                                                                                 // 18029
 * ```                                                                                                                 // 18030
 *                                                                                                                     // 18031
 * The filter function is registered with the `$injector` under the filter name suffix with                            // 18032
 * `Filter`.                                                                                                           // 18033
 *                                                                                                                     // 18034
 * ```js                                                                                                               // 18035
 *   it('should be the same instance', inject(                                                                         // 18036
 *     function($filterProvider) {                                                                                     // 18037
 *       $filterProvider.register('reverse', function(){                                                               // 18038
 *         return ...;                                                                                                 // 18039
 *       });                                                                                                           // 18040
 *     },                                                                                                              // 18041
 *     function($filter, reverseFilter) {                                                                              // 18042
 *       expect($filter('reverse')).toBe(reverseFilter);                                                               // 18043
 *     });                                                                                                             // 18044
 * ```                                                                                                                 // 18045
 *                                                                                                                     // 18046
 *                                                                                                                     // 18047
 * For more information about how angular filters work, and how to create your own filters, see                        // 18048
 * {@link guide/filter Filters} in the Angular Developer Guide.                                                        // 18049
 */                                                                                                                    // 18050
                                                                                                                       // 18051
/**                                                                                                                    // 18052
 * @ngdoc service                                                                                                      // 18053
 * @name $filter                                                                                                       // 18054
 * @kind function                                                                                                      // 18055
 * @description                                                                                                        // 18056
 * Filters are used for formatting data displayed to the user.                                                         // 18057
 *                                                                                                                     // 18058
 * The general syntax in templates is as follows:                                                                      // 18059
 *                                                                                                                     // 18060
 *         {{ expression [| filter_name[:parameter_value] ... ] }}                                                     // 18061
 *                                                                                                                     // 18062
 * @param {String} name Name of the filter function to retrieve                                                        // 18063
 * @return {Function} the filter function                                                                              // 18064
 * @example                                                                                                            // 18065
   <example name="$filter" module="filterExample">                                                                     // 18066
     <file name="index.html">                                                                                          // 18067
       <div ng-controller="MainCtrl">                                                                                  // 18068
        <h3>{{ originalText }}</h3>                                                                                    // 18069
        <h3>{{ filteredText }}</h3>                                                                                    // 18070
       </div>                                                                                                          // 18071
     </file>                                                                                                           // 18072
                                                                                                                       // 18073
     <file name="script.js">                                                                                           // 18074
      angular.module('filterExample', [])                                                                              // 18075
      .controller('MainCtrl', function($scope, $filter) {                                                              // 18076
        $scope.originalText = 'hello';                                                                                 // 18077
        $scope.filteredText = $filter('uppercase')($scope.originalText);                                               // 18078
      });                                                                                                              // 18079
     </file>                                                                                                           // 18080
   </example>                                                                                                          // 18081
  */                                                                                                                   // 18082
$FilterProvider.$inject = ['$provide'];                                                                                // 18083
function $FilterProvider($provide) {                                                                                   // 18084
  var suffix = 'Filter';                                                                                               // 18085
                                                                                                                       // 18086
  /**                                                                                                                  // 18087
   * @ngdoc method                                                                                                     // 18088
   * @name $filterProvider#register                                                                                    // 18089
   * @param {string|Object} name Name of the filter function, or an object map of filters where                        // 18090
   *    the keys are the filter names and the values are the filter factories.                                         // 18091
   *                                                                                                                   // 18092
   *    <div class="alert alert-warning">                                                                              // 18093
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`. // 18094
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace             // 18095
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores                        // 18096
   *    (`myapp_subsection_filterx`).                                                                                  // 18097
   *    </div>                                                                                                         // 18098
    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map                      // 18100
   *    of the registered filter instances.                                                                            // 18101
   */                                                                                                                  // 18102
  function register(name, factory) {                                                                                   // 18103
    if (isObject(name)) {                                                                                              // 18104
      var filters = {};                                                                                                // 18105
      forEach(name, function(filter, key) {                                                                            // 18106
        filters[key] = register(key, filter);                                                                          // 18107
      });                                                                                                              // 18108
      return filters;                                                                                                  // 18109
    } else {                                                                                                           // 18110
      return $provide.factory(name + suffix, factory);                                                                 // 18111
    }                                                                                                                  // 18112
  }                                                                                                                    // 18113
  this.register = register;                                                                                            // 18114
                                                                                                                       // 18115
  this.$get = ['$injector', function($injector) {                                                                      // 18116
    return function(name) {                                                                                            // 18117
      return $injector.get(name + suffix);                                                                             // 18118
    };                                                                                                                 // 18119
  }];                                                                                                                  // 18120
                                                                                                                       // 18121
  ////////////////////////////////////////                                                                             // 18122
                                                                                                                       // 18123
  /* global                                                                                                            // 18124
    currencyFilter: false,                                                                                             // 18125
    dateFilter: false,                                                                                                 // 18126
    filterFilter: false,                                                                                               // 18127
    jsonFilter: false,                                                                                                 // 18128
    limitToFilter: false,                                                                                              // 18129
    lowercaseFilter: false,                                                                                            // 18130
    numberFilter: false,                                                                                               // 18131
    orderByFilter: false,                                                                                              // 18132
    uppercaseFilter: false,                                                                                            // 18133
  */                                                                                                                   // 18134
                                                                                                                       // 18135
  register('currency', currencyFilter);                                                                                // 18136
  register('date', dateFilter);                                                                                        // 18137
  register('filter', filterFilter);                                                                                    // 18138
  register('json', jsonFilter);                                                                                        // 18139
  register('limitTo', limitToFilter);                                                                                  // 18140
  register('lowercase', lowercaseFilter);                                                                              // 18141
  register('number', numberFilter);                                                                                    // 18142
  register('orderBy', orderByFilter);                                                                                  // 18143
  register('uppercase', uppercaseFilter);                                                                              // 18144
}                                                                                                                      // 18145
                                                                                                                       // 18146
/**                                                                                                                    // 18147
 * @ngdoc filter                                                                                                       // 18148
 * @name filter                                                                                                        // 18149
 * @kind function                                                                                                      // 18150
 *                                                                                                                     // 18151
 * @description                                                                                                        // 18152
 * Selects a subset of items from `array` and returns it as a new array.                                               // 18153
 *                                                                                                                     // 18154
 * @param {Array} array The source array.                                                                              // 18155
 * @param {string|Object|function()} expression The predicate to be used for selecting items from                      // 18156
 *   `array`.                                                                                                          // 18157
 *                                                                                                                     // 18158
 *   Can be one of:                                                                                                    // 18159
 *                                                                                                                     // 18160
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or                   // 18161
 *     objects with string properties in `array` that match this string will be returned. This also                    // 18162
 *     applies to nested object properties.                                                                            // 18163
 *     The predicate can be negated by prefixing the string with `!`.                                                  // 18164
 *                                                                                                                     // 18165
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained                       // 18166
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items                         // 18167
 *     which have property `name` containing "M" and property `phone` containing "1". A special                        // 18168
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any                                // 18169
 *     property of the object or its nested object properties. That's equivalent to the simple                         // 18170
 *     substring match with a `string` as described above. The predicate can be negated by prefixing                   // 18171
 *     the string with `!`.                                                                                            // 18172
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`                   // 18173
 *     not containing "M".                                                                                             // 18174
 *                                                                                                                     // 18175
 *     Note that a named property will match properties on the same level only, while the special                      // 18176
 *     `$` property will match properties on the same level or deeper. E.g. an array item like                         // 18177
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but                         // 18178
 *     **will** be matched by `{$: 'John'}`.                                                                           // 18179
 *                                                                                                                     // 18180
 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.                   // 18181
 *     The function is called for each element of the array, with the element, its index, and                          // 18182
 *     the entire array itself as arguments.                                                                           // 18183
 *                                                                                                                     // 18184
 *     The final result is an array of those elements that the predicate returned true for.                            // 18185
 *                                                                                                                     // 18186
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in                           // 18187
 *     determining if the expected value (from the filter expression) and actual value (from                           // 18188
 *     the object in the array) should be considered a match.                                                          // 18189
 *                                                                                                                     // 18190
 *   Can be one of:                                                                                                    // 18191
 *                                                                                                                     // 18192
 *   - `function(actual, expected)`:                                                                                   // 18193
 *     The function will be given the object value and the predicate value to compare and                              // 18194
 *     should return true if both values should be considered equal.                                                   // 18195
 *                                                                                                                     // 18196
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.                // 18197
 *     This is essentially strict comparison of expected and actual.                                                   // 18198
 *                                                                                                                     // 18199
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case                    // 18200
 *     insensitive way.                                                                                                // 18201
 *                                                                                                                     // 18202
 *     Primitive values are converted to strings. Objects are not compared against primitives,                         // 18203
 *     unless they have a custom `toString` method (e.g. `Date` objects).                                              // 18204
 *                                                                                                                     // 18205
 * @example                                                                                                            // 18206
   <example>                                                                                                           // 18207
     <file name="index.html">                                                                                          // 18208
       <div ng-init="friends = [{name:'John', phone:'555-1276'},                                                       // 18209
                                {name:'Mary', phone:'800-BIG-MARY'},                                                   // 18210
                                {name:'Mike', phone:'555-4321'},                                                       // 18211
                                {name:'Adam', phone:'555-5678'},                                                       // 18212
                                {name:'Julie', phone:'555-8765'},                                                      // 18213
                                {name:'Juliette', phone:'555-5678'}]"></div>                                           // 18214
                                                                                                                       // 18215
       <label>Search: <input ng-model="searchText"></label>                                                            // 18216
       <table id="searchTextResults">                                                                                  // 18217
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18218
         <tr ng-repeat="friend in friends | filter:searchText">                                                        // 18219
           <td>{{friend.name}}</td>                                                                                    // 18220
           <td>{{friend.phone}}</td>                                                                                   // 18221
         </tr>                                                                                                         // 18222
       </table>                                                                                                        // 18223
       <hr>                                                                                                            // 18224
       <label>Any: <input ng-model="search.$"></label> <br>                                                            // 18225
       <label>Name only <input ng-model="search.name"></label><br>                                                     // 18226
       <label>Phone only <input ng-model="search.phone"></label><br>                                                   // 18227
       <label>Equality <input type="checkbox" ng-model="strict"></label><br>                                           // 18228
       <table id="searchObjResults">                                                                                   // 18229
         <tr><th>Name</th><th>Phone</th></tr>                                                                          // 18230
         <tr ng-repeat="friendObj in friends | filter:search:strict">                                                  // 18231
           <td>{{friendObj.name}}</td>                                                                                 // 18232
           <td>{{friendObj.phone}}</td>                                                                                // 18233
         </tr>                                                                                                         // 18234
       </table>                                                                                                        // 18235
     </file>                                                                                                           // 18236
     <file name="protractor.js" type="protractor">                                                                     // 18237
       var expectFriendNames = function(expectedNames, key) {                                                          // 18238
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {                      // 18239
           arr.forEach(function(wd, i) {                                                                               // 18240
             expect(wd.getText()).toMatch(expectedNames[i]);                                                           // 18241
           });                                                                                                         // 18242
         });                                                                                                           // 18243
       };                                                                                                              // 18244
                                                                                                                       // 18245
       it('should search across all fields when filtering with a string', function() {                                 // 18246
         var searchText = element(by.model('searchText'));                                                             // 18247
         searchText.clear();                                                                                           // 18248
         searchText.sendKeys('m');                                                                                     // 18249
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');                                                        // 18250
                                                                                                                       // 18251
         searchText.clear();                                                                                           // 18252
         searchText.sendKeys('76');                                                                                    // 18253
         expectFriendNames(['John', 'Julie'], 'friend');                                                               // 18254
       });                                                                                                             // 18255
                                                                                                                       // 18256
       it('should search in specific fields when filtering with a predicate object', function() {                      // 18257
         var searchAny = element(by.model('search.$'));                                                                // 18258
         searchAny.clear();                                                                                            // 18259
         searchAny.sendKeys('i');                                                                                      // 18260
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');                                        // 18261
       });                                                                                                             // 18262
       it('should use a equal comparison when comparator is true', function() {                                        // 18263
         var searchName = element(by.model('search.name'));                                                            // 18264
         var strict = element(by.model('strict'));                                                                     // 18265
         searchName.clear();                                                                                           // 18266
         searchName.sendKeys('Julie');                                                                                 // 18267
         strict.click();                                                                                               // 18268
         expectFriendNames(['Julie'], 'friendObj');                                                                    // 18269
       });                                                                                                             // 18270
     </file>                                                                                                           // 18271
   </example>                                                                                                          // 18272
 */                                                                                                                    // 18273
function filterFilter() {                                                                                              // 18274
  return function(array, expression, comparator) {                                                                     // 18275
    if (!isArrayLike(array)) {                                                                                         // 18276
      if (array == null) {                                                                                             // 18277
        return array;                                                                                                  // 18278
      } else {                                                                                                         // 18279
        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);                                 // 18280
      }                                                                                                                // 18281
    }                                                                                                                  // 18282
                                                                                                                       // 18283
    var expressionType = getTypeForFilter(expression);                                                                 // 18284
    var predicateFn;                                                                                                   // 18285
    var matchAgainstAnyProp;                                                                                           // 18286
                                                                                                                       // 18287
    switch (expressionType) {                                                                                          // 18288
      case 'function':                                                                                                 // 18289
        predicateFn = expression;                                                                                      // 18290
        break;                                                                                                         // 18291
      case 'boolean':                                                                                                  // 18292
      case 'null':                                                                                                     // 18293
      case 'number':                                                                                                   // 18294
      case 'string':                                                                                                   // 18295
        matchAgainstAnyProp = true;                                                                                    // 18296
        //jshint -W086                                                                                                 // 18297
      case 'object':                                                                                                   // 18298
        //jshint +W086                                                                                                 // 18299
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);                                  // 18300
        break;                                                                                                         // 18301
      default:                                                                                                         // 18302
        return array;                                                                                                  // 18303
    }                                                                                                                  // 18304
                                                                                                                       // 18305
    return Array.prototype.filter.call(array, predicateFn);                                                            // 18306
  };                                                                                                                   // 18307
}                                                                                                                      // 18308
                                                                                                                       // 18309
// Helper functions for `filterFilter`                                                                                 // 18310
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {                                              // 18311
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);                                             // 18312
  var predicateFn;                                                                                                     // 18313
                                                                                                                       // 18314
  if (comparator === true) {                                                                                           // 18315
    comparator = equals;                                                                                               // 18316
  } else if (!isFunction(comparator)) {                                                                                // 18317
    comparator = function(actual, expected) {                                                                          // 18318
      if (isUndefined(actual)) {                                                                                       // 18319
        // No substring matching against `undefined`                                                                   // 18320
        return false;                                                                                                  // 18321
      }                                                                                                                // 18322
      if ((actual === null) || (expected === null)) {                                                                  // 18323
        // No substring matching against `null`; only match against `null`                                             // 18324
        return actual === expected;                                                                                    // 18325
      }                                                                                                                // 18326
      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {                                    // 18327
        // Should not compare primitives against objects, unless they have custom `toString` method                    // 18328
        return false;                                                                                                  // 18329
      }                                                                                                                // 18330
                                                                                                                       // 18331
      actual = lowercase('' + actual);                                                                                 // 18332
      expected = lowercase('' + expected);                                                                             // 18333
      return actual.indexOf(expected) !== -1;                                                                          // 18334
    };                                                                                                                 // 18335
  }                                                                                                                    // 18336
                                                                                                                       // 18337
  predicateFn = function(item) {                                                                                       // 18338
    if (shouldMatchPrimitives && !isObject(item)) {                                                                    // 18339
      return deepCompare(item, expression.$, comparator, false);                                                       // 18340
    }                                                                                                                  // 18341
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);                                             // 18342
  };                                                                                                                   // 18343
                                                                                                                       // 18344
  return predicateFn;                                                                                                  // 18345
}                                                                                                                      // 18346
                                                                                                                       // 18347
function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {                        // 18348
  var actualType = getTypeForFilter(actual);                                                                           // 18349
  var expectedType = getTypeForFilter(expected);                                                                       // 18350
                                                                                                                       // 18351
  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {                                                   // 18352
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);                               // 18353
  } else if (isArray(actual)) {                                                                                        // 18354
    // In case `actual` is an array, consider it a match                                                               // 18355
    // if ANY of it's items matches `expected`                                                                         // 18356
    return actual.some(function(item) {                                                                                // 18357
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);                                             // 18358
    });                                                                                                                // 18359
  }                                                                                                                    // 18360
                                                                                                                       // 18361
  switch (actualType) {                                                                                                // 18362
    case 'object':                                                                                                     // 18363
      var key;                                                                                                         // 18364
      if (matchAgainstAnyProp) {                                                                                       // 18365
        for (key in actual) {                                                                                          // 18366
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {                       // 18367
            return true;                                                                                               // 18368
          }                                                                                                            // 18369
        }                                                                                                              // 18370
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);                        // 18371
      } else if (expectedType === 'object') {                                                                          // 18372
        for (key in expected) {                                                                                        // 18373
          var expectedVal = expected[key];                                                                             // 18374
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {                                                   // 18375
            continue;                                                                                                  // 18376
          }                                                                                                            // 18377
                                                                                                                       // 18378
          var matchAnyProperty = key === '$';                                                                          // 18379
          var actualVal = matchAnyProperty ? actual : actual[key];                                                     // 18380
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {                  // 18381
            return false;                                                                                              // 18382
          }                                                                                                            // 18383
        }                                                                                                              // 18384
        return true;                                                                                                   // 18385
      } else {                                                                                                         // 18386
        return comparator(actual, expected);                                                                           // 18387
      }                                                                                                                // 18388
      break;                                                                                                           // 18389
    case 'function':                                                                                                   // 18390
      return false;                                                                                                    // 18391
    default:                                                                                                           // 18392
      return comparator(actual, expected);                                                                             // 18393
  }                                                                                                                    // 18394
}                                                                                                                      // 18395
                                                                                                                       // 18396
// Used for easily differentiating between `null` and actual `object`                                                  // 18397
function getTypeForFilter(val) {                                                                                       // 18398
  return (val === null) ? 'null' : typeof val;                                                                         // 18399
}                                                                                                                      // 18400
                                                                                                                       // 18401
/**                                                                                                                    // 18402
 * @ngdoc filter                                                                                                       // 18403
 * @name currency                                                                                                      // 18404
 * @kind function                                                                                                      // 18405
 *                                                                                                                     // 18406
 * @description                                                                                                        // 18407
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default                         // 18408
 * symbol for current locale is used.                                                                                  // 18409
 *                                                                                                                     // 18410
 * @param {number} amount Input to filter.                                                                             // 18411
 * @param {string=} symbol Currency symbol or identifier to be displayed.                                              // 18412
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.                                                                                 // 18414
 *                                                                                                                     // 18415
 *                                                                                                                     // 18416
 * @example                                                                                                            // 18417
   <example module="currencyExample">                                                                                  // 18418
     <file name="index.html">                                                                                          // 18419
       <script>                                                                                                        // 18420
         angular.module('currencyExample', [])                                                                         // 18421
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18422
             $scope.amount = 1234.56;                                                                                  // 18423
           }]);                                                                                                        // 18424
       </script>                                                                                                       // 18425
       <div ng-controller="ExampleController">                                                                         // 18426
         <input type="number" ng-model="amount" aria-label="amount"> <br>                                              // 18427
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>                     // 18428
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>             // 18429
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>                      // 18430
       </div>                                                                                                          // 18431
     </file>                                                                                                           // 18432
     <file name="protractor.js" type="protractor">                                                                     // 18433
       it('should init with 1234.56', function() {                                                                     // 18434
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');                                       // 18435
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');                                     // 18436
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');                                  // 18437
       });                                                                                                             // 18438
       it('should update', function() {                                                                                // 18439
         if (browser.params.browser == 'safari') {                                                                     // 18440
           // Safari does not understand the minus key. See                                                            // 18441
           // https://github.com/angular/protractor/issues/481                                                         // 18442
           return;                                                                                                     // 18443
         }                                                                                                             // 18444
         element(by.model('amount')).clear();                                                                          // 18445
         element(by.model('amount')).sendKeys('-1234');                                                                // 18446
         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');                                      // 18447
         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');                                    // 18448
         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');                                 // 18449
       });                                                                                                             // 18450
     </file>                                                                                                           // 18451
   </example>                                                                                                          // 18452
 */                                                                                                                    // 18453
currencyFilter.$inject = ['$locale'];                                                                                  // 18454
function currencyFilter($locale) {                                                                                     // 18455
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18456
  return function(amount, currencySymbol, fractionSize) {                                                              // 18457
    if (isUndefined(currencySymbol)) {                                                                                 // 18458
      currencySymbol = formats.CURRENCY_SYM;                                                                           // 18459
    }                                                                                                                  // 18460
                                                                                                                       // 18461
    if (isUndefined(fractionSize)) {                                                                                   // 18462
      fractionSize = formats.PATTERNS[1].maxFrac;                                                                      // 18463
    }                                                                                                                  // 18464
                                                                                                                       // 18465
    // if null or undefined pass it through                                                                            // 18466
    return (amount == null)                                                                                            // 18467
        ? amount                                                                                                       // 18468
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).             // 18469
            replace(/\u00A4/g, currencySymbol);                                                                        // 18470
  };                                                                                                                   // 18471
}                                                                                                                      // 18472
                                                                                                                       // 18473
/**                                                                                                                    // 18474
 * @ngdoc filter                                                                                                       // 18475
 * @name number                                                                                                        // 18476
 * @kind function                                                                                                      // 18477
 *                                                                                                                     // 18478
 * @description                                                                                                        // 18479
 * Formats a number as text.                                                                                           // 18480
 *                                                                                                                     // 18481
 * If the input is null or undefined, it will just be returned.                                                        // 18482
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.                                  // 18483
 * If the input is not a number an empty string is returned.                                                           // 18484
 *                                                                                                                     // 18485
 *                                                                                                                     // 18486
 * @param {number|string} number Number to format.                                                                     // 18487
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.                             // 18488
 * If this is not provided then the fraction size is computed from the current locale's number                         // 18489
 * formatting pattern. In the case of the default locale, it will be 3.                                                // 18490
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.                          // 18491
 *                                                                                                                     // 18492
 * @example                                                                                                            // 18493
   <example module="numberFilterExample">                                                                              // 18494
     <file name="index.html">                                                                                          // 18495
       <script>                                                                                                        // 18496
         angular.module('numberFilterExample', [])                                                                     // 18497
           .controller('ExampleController', ['$scope', function($scope) {                                              // 18498
             $scope.val = 1234.56789;                                                                                  // 18499
           }]);                                                                                                        // 18500
       </script>                                                                                                       // 18501
       <div ng-controller="ExampleController">                                                                         // 18502
         <label>Enter number: <input ng-model='val'></label><br>                                                       // 18503
         Default formatting: <span id='number-default'>{{val | number}}</span><br>                                     // 18504
         No fractions: <span>{{val | number:0}}</span><br>                                                             // 18505
         Negative number: <span>{{-val | number:4}}</span>                                                             // 18506
       </div>                                                                                                          // 18507
     </file>                                                                                                           // 18508
     <file name="protractor.js" type="protractor">                                                                     // 18509
       it('should format numbers', function() {                                                                        // 18510
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');                                         // 18511
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');                                        // 18512
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');                                 // 18513
       });                                                                                                             // 18514
                                                                                                                       // 18515
       it('should update', function() {                                                                                // 18516
         element(by.model('val')).clear();                                                                             // 18517
         element(by.model('val')).sendKeys('3374.333');                                                                // 18518
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');                                         // 18519
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');                                        // 18520
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');                                 // 18521
      });                                                                                                              // 18522
     </file>                                                                                                           // 18523
   </example>                                                                                                          // 18524
 */                                                                                                                    // 18525
                                                                                                                       // 18526
                                                                                                                       // 18527
numberFilter.$inject = ['$locale'];                                                                                    // 18528
function numberFilter($locale) {                                                                                       // 18529
  var formats = $locale.NUMBER_FORMATS;                                                                                // 18530
  return function(number, fractionSize) {                                                                              // 18531
                                                                                                                       // 18532
    // if null or undefined pass it through                                                                            // 18533
    return (number == null)                                                                                            // 18534
        ? number                                                                                                       // 18535
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,                            // 18536
                       fractionSize);                                                                                  // 18537
  };                                                                                                                   // 18538
}                                                                                                                      // 18539
                                                                                                                       // 18540
var DECIMAL_SEP = '.';                                                                                                 // 18541
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {                                           // 18542
  if (isObject(number)) return '';                                                                                     // 18543
                                                                                                                       // 18544
  var isNegative = number < 0;                                                                                         // 18545
  number = Math.abs(number);                                                                                           // 18546
                                                                                                                       // 18547
  var isInfinity = number === Infinity;                                                                                // 18548
  if (!isInfinity && !isFinite(number)) return '';                                                                     // 18549
                                                                                                                       // 18550
  var numStr = number + '',                                                                                            // 18551
      formatedText = '',                                                                                               // 18552
      hasExponent = false,                                                                                             // 18553
      parts = [];                                                                                                      // 18554
                                                                                                                       // 18555
  if (isInfinity) formatedText = '\u221e';                                                                             // 18556
                                                                                                                       // 18557
  if (!isInfinity && numStr.indexOf('e') !== -1) {                                                                     // 18558
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);                                                                   // 18559
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {                                                     // 18560
      number = 0;                                                                                                      // 18561
    } else {                                                                                                           // 18562
      formatedText = numStr;                                                                                           // 18563
      hasExponent = true;                                                                                              // 18564
    }                                                                                                                  // 18565
  }                                                                                                                    // 18566
                                                                                                                       // 18567
  if (!isInfinity && !hasExponent) {                                                                                   // 18568
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;                                                     // 18569
                                                                                                                       // 18570
    // determine fractionSize if it is not specified                                                                   // 18571
    if (isUndefined(fractionSize)) {                                                                                   // 18572
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);                                // 18573
    }                                                                                                                  // 18574
                                                                                                                       // 18575
    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics                           // 18576
    // inspired by:                                                                                                    // 18577
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round                     // 18578
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);                // 18579
                                                                                                                       // 18580
    var fraction = ('' + number).split(DECIMAL_SEP);                                                                   // 18581
    var whole = fraction[0];                                                                                           // 18582
    fraction = fraction[1] || '';                                                                                      // 18583
                                                                                                                       // 18584
    var i, pos = 0,                                                                                                    // 18585
        lgroup = pattern.lgSize,                                                                                       // 18586
        group = pattern.gSize;                                                                                         // 18587
                                                                                                                       // 18588
    if (whole.length >= (lgroup + group)) {                                                                            // 18589
      pos = whole.length - lgroup;                                                                                     // 18590
      for (i = 0; i < pos; i++) {                                                                                      // 18591
        if ((pos - i) % group === 0 && i !== 0) {                                                                      // 18592
          formatedText += groupSep;                                                                                    // 18593
        }                                                                                                              // 18594
        formatedText += whole.charAt(i);                                                                               // 18595
      }                                                                                                                // 18596
    }                                                                                                                  // 18597
                                                                                                                       // 18598
    for (i = pos; i < whole.length; i++) {                                                                             // 18599
      if ((whole.length - i) % lgroup === 0 && i !== 0) {                                                              // 18600
        formatedText += groupSep;                                                                                      // 18601
      }                                                                                                                // 18602
      formatedText += whole.charAt(i);                                                                                 // 18603
    }                                                                                                                  // 18604
                                                                                                                       // 18605
    // format fraction part.                                                                                           // 18606
    while (fraction.length < fractionSize) {                                                                           // 18607
      fraction += '0';                                                                                                 // 18608
    }                                                                                                                  // 18609
                                                                                                                       // 18610
    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);           // 18611
  } else {                                                                                                             // 18612
    if (fractionSize > 0 && number < 1) {                                                                              // 18613
      formatedText = number.toFixed(fractionSize);                                                                     // 18614
      number = parseFloat(formatedText);                                                                               // 18615
    }                                                                                                                  // 18616
  }                                                                                                                    // 18617
                                                                                                                       // 18618
  if (number === 0) {                                                                                                  // 18619
    isNegative = false;                                                                                                // 18620
  }                                                                                                                    // 18621
                                                                                                                       // 18622
  parts.push(isNegative ? pattern.negPre : pattern.posPre,                                                             // 18623
             formatedText,                                                                                             // 18624
             isNegative ? pattern.negSuf : pattern.posSuf);                                                            // 18625
  return parts.join('');                                                                                               // 18626
}                                                                                                                      // 18627
                                                                                                                       // 18628
function padNumber(num, digits, trim) {                                                                                // 18629
  var neg = '';                                                                                                        // 18630
  if (num < 0) {                                                                                                       // 18631
    neg =  '-';                                                                                                        // 18632
    num = -num;                                                                                                        // 18633
  }                                                                                                                    // 18634
  num = '' + num;                                                                                                      // 18635
  while (num.length < digits) num = '0' + num;                                                                         // 18636
  if (trim) {                                                                                                          // 18637
    num = num.substr(num.length - digits);                                                                             // 18638
  }                                                                                                                    // 18639
  return neg + num;                                                                                                    // 18640
}                                                                                                                      // 18641
                                                                                                                       // 18642
                                                                                                                       // 18643
function dateGetter(name, size, offset, trim) {                                                                        // 18644
  offset = offset || 0;                                                                                                // 18645
  return function(date) {                                                                                              // 18646
    var value = date['get' + name]();                                                                                  // 18647
    if (offset > 0 || value > -offset) {                                                                               // 18648
      value += offset;                                                                                                 // 18649
    }                                                                                                                  // 18650
    if (value === 0 && offset == -12) value = 12;                                                                      // 18651
    return padNumber(value, size, trim);                                                                               // 18652
  };                                                                                                                   // 18653
}                                                                                                                      // 18654
                                                                                                                       // 18655
function dateStrGetter(name, shortForm) {                                                                              // 18656
  return function(date, formats) {                                                                                     // 18657
    var value = date['get' + name]();                                                                                  // 18658
    var get = uppercase(shortForm ? ('SHORT' + name) : name);                                                          // 18659
                                                                                                                       // 18660
    return formats[get][value];                                                                                        // 18661
  };                                                                                                                   // 18662
}                                                                                                                      // 18663
                                                                                                                       // 18664
function timeZoneGetter(date, formats, offset) {                                                                       // 18665
  var zone = -1 * offset;                                                                                              // 18666
  var paddedZone = (zone >= 0) ? "+" : "";                                                                             // 18667
                                                                                                                       // 18668
  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +                                           // 18669
                padNumber(Math.abs(zone % 60), 2);                                                                     // 18670
                                                                                                                       // 18671
  return paddedZone;                                                                                                   // 18672
}                                                                                                                      // 18673
                                                                                                                       // 18674
function getFirstThursdayOfYear(year) {                                                                                // 18675
    // 0 = index of January                                                                                            // 18676
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();                                                            // 18677
    // 4 = index of Thursday (+1 to account for 1st = 5)                                                               // 18678
    // 11 = index of *next* Thursday (+1 account for 1st = 12)                                                         // 18679
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);                                   // 18680
}                                                                                                                      // 18681
                                                                                                                       // 18682
function getThursdayThisWeek(datetime) {                                                                               // 18683
    return new Date(datetime.getFullYear(), datetime.getMonth(),                                                       // 18684
      // 4 = index of Thursday                                                                                         // 18685
      datetime.getDate() + (4 - datetime.getDay()));                                                                   // 18686
}                                                                                                                      // 18687
                                                                                                                       // 18688
function weekGetter(size) {                                                                                            // 18689
   return function(date) {                                                                                             // 18690
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),                                                     // 18691
         thisThurs = getThursdayThisWeek(date);                                                                        // 18692
                                                                                                                       // 18693
      var diff = +thisThurs - +firstThurs,                                                                             // 18694
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week                                               // 18695
                                                                                                                       // 18696
      return padNumber(result, size);                                                                                  // 18697
   };                                                                                                                  // 18698
}                                                                                                                      // 18699
                                                                                                                       // 18700
function ampmGetter(date, formats) {                                                                                   // 18701
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];                                                   // 18702
}                                                                                                                      // 18703
                                                                                                                       // 18704
function eraGetter(date, formats) {                                                                                    // 18705
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];                                                  // 18706
}                                                                                                                      // 18707
                                                                                                                       // 18708
function longEraGetter(date, formats) {                                                                                // 18709
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];                                          // 18710
}                                                                                                                      // 18711
                                                                                                                       // 18712
var DATE_FORMATS = {                                                                                                   // 18713
  yyyy: dateGetter('FullYear', 4),                                                                                     // 18714
    yy: dateGetter('FullYear', 2, 0, true),                                                                            // 18715
     y: dateGetter('FullYear', 1),                                                                                     // 18716
  MMMM: dateStrGetter('Month'),                                                                                        // 18717
   MMM: dateStrGetter('Month', true),                                                                                  // 18718
    MM: dateGetter('Month', 2, 1),                                                                                     // 18719
     M: dateGetter('Month', 1, 1),                                                                                     // 18720
    dd: dateGetter('Date', 2),                                                                                         // 18721
     d: dateGetter('Date', 1),                                                                                         // 18722
    HH: dateGetter('Hours', 2),                                                                                        // 18723
     H: dateGetter('Hours', 1),                                                                                        // 18724
    hh: dateGetter('Hours', 2, -12),                                                                                   // 18725
     h: dateGetter('Hours', 1, -12),                                                                                   // 18726
    mm: dateGetter('Minutes', 2),                                                                                      // 18727
     m: dateGetter('Minutes', 1),                                                                                      // 18728
    ss: dateGetter('Seconds', 2),                                                                                      // 18729
     s: dateGetter('Seconds', 1),                                                                                      // 18730
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`                                               // 18731
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions       // 18732
   sss: dateGetter('Milliseconds', 3),                                                                                 // 18733
  EEEE: dateStrGetter('Day'),                                                                                          // 18734
   EEE: dateStrGetter('Day', true),                                                                                    // 18735
     a: ampmGetter,                                                                                                    // 18736
     Z: timeZoneGetter,                                                                                                // 18737
    ww: weekGetter(2),                                                                                                 // 18738
     w: weekGetter(1),                                                                                                 // 18739
     G: eraGetter,                                                                                                     // 18740
     GG: eraGetter,                                                                                                    // 18741
     GGG: eraGetter,                                                                                                   // 18742
     GGGG: longEraGetter                                                                                               // 18743
};                                                                                                                     // 18744
                                                                                                                       // 18745
var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,       // 18746
    NUMBER_STRING = /^\-?\d+$/;                                                                                        // 18747
                                                                                                                       // 18748
/**                                                                                                                    // 18749
 * @ngdoc filter                                                                                                       // 18750
 * @name date                                                                                                          // 18751
 * @kind function                                                                                                      // 18752
 *                                                                                                                     // 18753
 * @description                                                                                                        // 18754
 *   Formats `date` to a string based on the requested `format`.                                                       // 18755
 *                                                                                                                     // 18756
 *   `format` string can be composed of the following elements:                                                        // 18757
 *                                                                                                                     // 18758
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)                                   // 18759
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)                     // 18760
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)                                          // 18761
 *   * `'MMMM'`: Month in year (January-December)                                                                      // 18762
 *   * `'MMM'`: Month in year (Jan-Dec)                                                                                // 18763
 *   * `'MM'`: Month in year, padded (01-12)                                                                           // 18764
 *   * `'M'`: Month in year (1-12)                                                                                     // 18765
 *   * `'dd'`: Day in month, padded (01-31)                                                                            // 18766
 *   * `'d'`: Day in month (1-31)                                                                                      // 18767
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)                                                                         // 18768
 *   * `'EEE'`: Day in Week, (Sun-Sat)                                                                                 // 18769
 *   * `'HH'`: Hour in day, padded (00-23)                                                                             // 18770
 *   * `'H'`: Hour in day (0-23)                                                                                       // 18771
 *   * `'hh'`: Hour in AM/PM, padded (01-12)                                                                           // 18772
 *   * `'h'`: Hour in AM/PM, (1-12)                                                                                    // 18773
 *   * `'mm'`: Minute in hour, padded (00-59)                                                                          // 18774
 *   * `'m'`: Minute in hour (0-59)                                                                                    // 18775
 *   * `'ss'`: Second in minute, padded (00-59)                                                                        // 18776
 *   * `'s'`: Second in minute (0-59)                                                                                  // 18777
 *   * `'sss'`: Millisecond in second, padded (000-999)                                                                // 18778
 *   * `'a'`: AM/PM marker                                                                                             // 18779
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)                                      // 18780
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year                   // 18781
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year                              // 18782
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')                                      // 18783
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')                                                  // 18784
 *                                                                                                                     // 18785
 *   `format` string can also be one of the following predefined                                                       // 18786
 *   {@link guide/i18n localizable formats}:                                                                           // 18787
 *                                                                                                                     // 18788
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale                                               // 18789
 *     (e.g. Sep 3, 2010 12:05:08 PM)                                                                                  // 18790
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)                             // 18791
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale                                               // 18792
 *     (e.g. Friday, September 3, 2010)                                                                                // 18793
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)                            // 18794
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)                                 // 18795
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)                                          // 18796
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)                                 // 18797
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)                                        // 18798
 *                                                                                                                     // 18799
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.      // 18800
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence     // 18801
 *   (e.g. `"h 'o''clock'"`).                                                                                          // 18802
 *                                                                                                                     // 18803
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or                    // 18804
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its                       // 18805
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is                      // 18806
 *    specified in the string input, the time is considered to be in the local timezone.                               // 18807
 * @param {string=} format Formatting rules (see Description). If not specified,                                       // 18808
 *    `mediumDate` is used.                                                                                            // 18809
 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the                        // 18810
 *    continental US time zone abbreviations, but for general use, use a time zone offset, for                         // 18811
 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                          // 18812
 *    If not specified, the timezone of the browser will be used.                                                      // 18813
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.                          // 18814
 *                                                                                                                     // 18815
 * @example                                                                                                            // 18816
   <example>                                                                                                           // 18817
     <file name="index.html">                                                                                          // 18818
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:                                                 // 18819
           <span>{{1288323623006 | date:'medium'}}</span><br>                                                          // 18820
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:                                  // 18821
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>                                            // 18822
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:                                     // 18823
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>                                             // 18824
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:                                  // 18825
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>                                          // 18826
     </file>                                                                                                           // 18827
     <file name="protractor.js" type="protractor">                                                                     // 18828
       it('should format date', function() {                                                                           // 18829
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).                                       // 18830
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);                                                      // 18831
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).                        // 18832
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);                                                  // 18833
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).                         // 18834
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);                                                           // 18835
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).                    // 18836
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);                                                          // 18837
       });                                                                                                             // 18838
     </file>                                                                                                           // 18839
   </example>                                                                                                          // 18840
 */                                                                                                                    // 18841
dateFilter.$inject = ['$locale'];                                                                                      // 18842
function dateFilter($locale) {                                                                                         // 18843
                                                                                                                       // 18844
                                                                                                                       // 18845
  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11     // 18847
  function jsonStringToDate(string) {                                                                                  // 18848
    var match;                                                                                                         // 18849
    if (match = string.match(R_ISO8601_STR)) {                                                                         // 18850
      var date = new Date(0),                                                                                          // 18851
          tzHour = 0,                                                                                                  // 18852
          tzMin  = 0,                                                                                                  // 18853
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,                                              // 18854
          timeSetter = match[8] ? date.setUTCHours : date.setHours;                                                    // 18855
                                                                                                                       // 18856
      if (match[9]) {                                                                                                  // 18857
        tzHour = toInt(match[9] + match[10]);                                                                          // 18858
        tzMin = toInt(match[9] + match[11]);                                                                           // 18859
      }                                                                                                                // 18860
      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));                                    // 18861
      var h = toInt(match[4] || 0) - tzHour;                                                                           // 18862
      var m = toInt(match[5] || 0) - tzMin;                                                                            // 18863
      var s = toInt(match[6] || 0);                                                                                    // 18864
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);                                                  // 18865
      timeSetter.call(date, h, m, s, ms);                                                                              // 18866
      return date;                                                                                                     // 18867
    }                                                                                                                  // 18868
    return string;                                                                                                     // 18869
  }                                                                                                                    // 18870
                                                                                                                       // 18871
                                                                                                                       // 18872
  return function(date, format, timezone) {                                                                            // 18873
    var text = '',                                                                                                     // 18874
        parts = [],                                                                                                    // 18875
        fn, match;                                                                                                     // 18876
                                                                                                                       // 18877
    format = format || 'mediumDate';                                                                                   // 18878
    format = $locale.DATETIME_FORMATS[format] || format;                                                               // 18879
    if (isString(date)) {                                                                                              // 18880
      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);                                          // 18881
    }                                                                                                                  // 18882
                                                                                                                       // 18883
    if (isNumber(date)) {                                                                                              // 18884
      date = new Date(date);                                                                                           // 18885
    }                                                                                                                  // 18886
                                                                                                                       // 18887
    if (!isDate(date) || !isFinite(date.getTime())) {                                                                  // 18888
      return date;                                                                                                     // 18889
    }                                                                                                                  // 18890
                                                                                                                       // 18891
    while (format) {                                                                                                   // 18892
      match = DATE_FORMATS_SPLIT.exec(format);                                                                         // 18893
      if (match) {                                                                                                     // 18894
        parts = concat(parts, match, 1);                                                                               // 18895
        format = parts.pop();                                                                                          // 18896
      } else {                                                                                                         // 18897
        parts.push(format);                                                                                            // 18898
        format = null;                                                                                                 // 18899
      }                                                                                                                // 18900
    }                                                                                                                  // 18901
                                                                                                                       // 18902
    var dateTimezoneOffset = date.getTimezoneOffset();                                                                 // 18903
    if (timezone) {                                                                                                    // 18904
      dateTimezoneOffset = timezoneToOffset(timezone, date.getTimezoneOffset());                                       // 18905
      date = convertTimezoneToLocal(date, timezone, true);                                                             // 18906
    }                                                                                                                  // 18907
    forEach(parts, function(value) {                                                                                   // 18908
      fn = DATE_FORMATS[value];                                                                                        // 18909
      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)                                              // 18910
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");                                                  // 18911
    });                                                                                                                // 18912
                                                                                                                       // 18913
    return text;                                                                                                       // 18914
  };                                                                                                                   // 18915
}                                                                                                                      // 18916
                                                                                                                       // 18917
                                                                                                                       // 18918
/**                                                                                                                    // 18919
 * @ngdoc filter                                                                                                       // 18920
 * @name json                                                                                                          // 18921
 * @kind function                                                                                                      // 18922
 *                                                                                                                     // 18923
 * @description                                                                                                        // 18924
 *   Allows you to convert a JavaScript object into JSON string.                                                       // 18925
 *                                                                                                                     // 18926
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation                        // 18927
 *   the binding is automatically converted to JSON.                                                                   // 18928
 *                                                                                                                     // 18929
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.                           // 18930
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.                                // 18931
 * @returns {string} JSON string.                                                                                      // 18932
 *                                                                                                                     // 18933
 *                                                                                                                     // 18934
 * @example                                                                                                            // 18935
   <example>                                                                                                           // 18936
     <file name="index.html">                                                                                          // 18937
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>                                                   // 18938
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>                                                  // 18939
     </file>                                                                                                           // 18940
     <file name="protractor.js" type="protractor">                                                                     // 18941
       it('should jsonify filtered objects', function() {                                                              // 18942
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);                     // 18943
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);                    // 18944
       });                                                                                                             // 18945
     </file>                                                                                                           // 18946
   </example>                                                                                                          // 18947
 *                                                                                                                     // 18948
 */                                                                                                                    // 18949
function jsonFilter() {                                                                                                // 18950
  return function(object, spacing) {                                                                                   // 18951
    if (isUndefined(spacing)) {                                                                                        // 18952
        spacing = 2;                                                                                                   // 18953
    }                                                                                                                  // 18954
    return toJson(object, spacing);                                                                                    // 18955
  };                                                                                                                   // 18956
}                                                                                                                      // 18957
                                                                                                                       // 18958
                                                                                                                       // 18959
/**                                                                                                                    // 18960
 * @ngdoc filter                                                                                                       // 18961
 * @name lowercase                                                                                                     // 18962
 * @kind function                                                                                                      // 18963
 * @description                                                                                                        // 18964
 * Converts string to lowercase.                                                                                       // 18965
 * @see angular.lowercase                                                                                              // 18966
 */                                                                                                                    // 18967
var lowercaseFilter = valueFn(lowercase);                                                                              // 18968
                                                                                                                       // 18969
                                                                                                                       // 18970
/**                                                                                                                    // 18971
 * @ngdoc filter                                                                                                       // 18972
 * @name uppercase                                                                                                     // 18973
 * @kind function                                                                                                      // 18974
 * @description                                                                                                        // 18975
 * Converts string to uppercase.                                                                                       // 18976
 * @see angular.uppercase                                                                                              // 18977
 */                                                                                                                    // 18978
var uppercaseFilter = valueFn(uppercase);                                                                              // 18979
                                                                                                                       // 18980
/**                                                                                                                    // 18981
 * @ngdoc filter                                                                                                       // 18982
 * @name limitTo                                                                                                       // 18983
 * @kind function                                                                                                      // 18984
 *                                                                                                                     // 18985
 * @description                                                                                                        // 18986
 * Creates a new array or string containing only a specified number of elements. The elements                          // 18987
 * are taken from either the beginning or the end of the source array, string or number, as specified by               // 18988
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is                           // 18989
 * converted to a string.                                                                                              // 18990
 *                                                                                                                     // 18991
 * @param {Array|string|number} input Source array, string or number to be limited.                                    // 18992
 * @param {string|number} limit The length of the returned array or string. If the `limit` number                      // 18993
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.                  // 18994
 *     If the number is negative, `limit` number  of items from the end of the source array/string                     // 18995
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,                  // 18996
 *     the input will be returned unchanged.                                                                           // 18997
 * @param {(string|number)=} begin Index at which to begin limitation. As a negative index, `begin`                    // 18998
 *     indicates an offset from the end of `input`. Defaults to `0`.                                                   // 18999
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array                       // 19000
 *     had less than `limit` elements.                                                                                 // 19001
 *                                                                                                                     // 19002
 * @example                                                                                                            // 19003
   <example module="limitToExample">                                                                                   // 19004
     <file name="index.html">                                                                                          // 19005
       <script>                                                                                                        // 19006
         angular.module('limitToExample', [])                                                                          // 19007
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19008
             $scope.numbers = [1,2,3,4,5,6,7,8,9];                                                                     // 19009
             $scope.letters = "abcdefghi";                                                                             // 19010
             $scope.longNumber = 2345432342;                                                                           // 19011
             $scope.numLimit = 3;                                                                                      // 19012
             $scope.letterLimit = 3;                                                                                   // 19013
             $scope.longNumberLimit = 3;                                                                               // 19014
           }]);                                                                                                        // 19015
       </script>                                                                                                       // 19016
       <div ng-controller="ExampleController">                                                                         // 19017
         <label>                                                                                                       // 19018
            Limit {{numbers}} to:                                                                                      // 19019
            <input type="number" step="1" ng-model="numLimit">                                                         // 19020
         </label>                                                                                                      // 19021
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>                                                       // 19022
         <label>                                                                                                       // 19023
            Limit {{letters}} to:                                                                                      // 19024
            <input type="number" step="1" ng-model="letterLimit">                                                      // 19025
         </label>                                                                                                      // 19026
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>                                                    // 19027
         <label>                                                                                                       // 19028
            Limit {{longNumber}} to:                                                                                   // 19029
            <input type="number" step="1" ng-model="longNumberLimit">                                                  // 19030
         </label>                                                                                                      // 19031
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>                                         // 19032
       </div>                                                                                                          // 19033
     </file>                                                                                                           // 19034
     <file name="protractor.js" type="protractor">                                                                     // 19035
       var numLimitInput = element(by.model('numLimit'));                                                              // 19036
       var letterLimitInput = element(by.model('letterLimit'));                                                        // 19037
       var longNumberLimitInput = element(by.model('longNumberLimit'));                                                // 19038
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));                                         // 19039
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));                                      // 19040
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));                            // 19041
                                                                                                                       // 19042
       it('should limit the number array to first three items', function() {                                           // 19043
         expect(numLimitInput.getAttribute('value')).toBe('3');                                                        // 19044
         expect(letterLimitInput.getAttribute('value')).toBe('3');                                                     // 19045
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');                                                 // 19046
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');                                          // 19047
         expect(limitedLetters.getText()).toEqual('Output letters: abc');                                              // 19048
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');                                       // 19049
       });                                                                                                             // 19050
                                                                                                                       // 19051
       // There is a bug in safari and protractor that doesn't like the minus key                                      // 19052
       // it('should update the output when -3 is entered', function() {                                               // 19053
       //   numLimitInput.clear();                                                                                     // 19054
       //   numLimitInput.sendKeys('-3');                                                                              // 19055
       //   letterLimitInput.clear();                                                                                  // 19056
       //   letterLimitInput.sendKeys('-3');                                                                           // 19057
       //   longNumberLimitInput.clear();                                                                              // 19058
       //   longNumberLimitInput.sendKeys('-3');                                                                       // 19059
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');                                       // 19060
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');                                           // 19061
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');                                    // 19062
       // });                                                                                                          // 19063
                                                                                                                       // 19064
       it('should not exceed the maximum size of input array', function() {                                            // 19065
         numLimitInput.clear();                                                                                        // 19066
         numLimitInput.sendKeys('100');                                                                                // 19067
         letterLimitInput.clear();                                                                                     // 19068
         letterLimitInput.sendKeys('100');                                                                             // 19069
         longNumberLimitInput.clear();                                                                                 // 19070
         longNumberLimitInput.sendKeys('100');                                                                         // 19071
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');                              // 19072
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');                                        // 19073
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');                                // 19074
       });                                                                                                             // 19075
     </file>                                                                                                           // 19076
   </example>                                                                                                          // 19077
*/                                                                                                                     // 19078
function limitToFilter() {                                                                                             // 19079
  return function(input, limit, begin) {                                                                               // 19080
    if (Math.abs(Number(limit)) === Infinity) {                                                                        // 19081
      limit = Number(limit);                                                                                           // 19082
    } else {                                                                                                           // 19083
      limit = toInt(limit);                                                                                            // 19084
    }                                                                                                                  // 19085
    if (isNaN(limit)) return input;                                                                                    // 19086
                                                                                                                       // 19087
    if (isNumber(input)) input = input.toString();                                                                     // 19088
    if (!isArray(input) && !isString(input)) return input;                                                             // 19089
                                                                                                                       // 19090
    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);                                                               // 19091
    begin = (begin < 0 && begin >= -input.length) ? input.length + begin : begin;                                      // 19092
                                                                                                                       // 19093
    if (limit >= 0) {                                                                                                  // 19094
      return input.slice(begin, begin + limit);                                                                        // 19095
    } else {                                                                                                           // 19096
      if (begin === 0) {                                                                                               // 19097
        return input.slice(limit, input.length);                                                                       // 19098
      } else {                                                                                                         // 19099
        return input.slice(Math.max(0, begin + limit), begin);                                                         // 19100
      }                                                                                                                // 19101
    }                                                                                                                  // 19102
  };                                                                                                                   // 19103
}                                                                                                                      // 19104
                                                                                                                       // 19105
/**                                                                                                                    // 19106
 * @ngdoc filter                                                                                                       // 19107
 * @name orderBy                                                                                                       // 19108
 * @kind function                                                                                                      // 19109
 *                                                                                                                     // 19110
 * @description                                                                                                        // 19111
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically                              // 19112
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted                           // 19113
 * as expected, make sure they are actually being saved as numbers and not strings.                                    // 19114
 *                                                                                                                     // 19115
 * @param {Array} array The array to sort.                                                                             // 19116
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be                              // 19117
 *    used by the comparator to determine the order of elements.                                                       // 19118
 *                                                                                                                     // 19119
 *    Can be one of:                                                                                                   // 19120
 *                                                                                                                     // 19121
 *    - `function`: Getter function. The result of this function will be sorted using the                              // 19122
 *      `<`, `===`, `>` operator.                                                                                      // 19123
 *    - `string`: An Angular expression. The result of this expression is used to compare elements                     // 19124
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by                      // 19125
 *      3 first characters of a property called `name`). The result of a constant expression                           // 19126
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`                      // 19127
 *      to sort object by the value of their `special name` property). An expression can be                            // 19128
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order                              // 19129
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array                     // 19130
 *      element itself is used to compare where sorting.                                                               // 19131
 *    - `Array`: An array of function or string predicates. The first predicate in the array                           // 19132
 *      is used for sorting, but when two items are equivalent, the next predicate is used.                            // 19133
 *                                                                                                                     // 19134
 *    If the predicate is missing or empty then it defaults to `'+'`.                                                  // 19135
 *                                                                                                                     // 19136
 * @param {boolean=} reverse Reverse the order of the array.                                                           // 19137
 * @returns {Array} Sorted copy of the source array.                                                                   // 19138
 *                                                                                                                     // 19139
 *                                                                                                                     // 19140
 * @example                                                                                                            // 19141
 * The example below demonstrates a simple ngRepeat, where the data is sorted                                          // 19142
 * by age in descending order (predicate is set to `'-age'`).                                                          // 19143
 * `reverse` is not set, which means it defaults to `false`.                                                           // 19144
   <example module="orderByExample">                                                                                   // 19145
     <file name="index.html">                                                                                          // 19146
       <script>                                                                                                        // 19147
         angular.module('orderByExample', [])                                                                          // 19148
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19149
             $scope.friends =                                                                                          // 19150
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19151
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19152
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19153
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19154
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19155
           }]);                                                                                                        // 19156
       </script>                                                                                                       // 19157
       <div ng-controller="ExampleController">                                                                         // 19158
         <table class="friend">                                                                                        // 19159
           <tr>                                                                                                        // 19160
             <th>Name</th>                                                                                             // 19161
             <th>Phone Number</th>                                                                                     // 19162
             <th>Age</th>                                                                                              // 19163
           </tr>                                                                                                       // 19164
           <tr ng-repeat="friend in friends | orderBy:'-age'">                                                         // 19165
             <td>{{friend.name}}</td>                                                                                  // 19166
             <td>{{friend.phone}}</td>                                                                                 // 19167
             <td>{{friend.age}}</td>                                                                                   // 19168
           </tr>                                                                                                       // 19169
         </table>                                                                                                      // 19170
       </div>                                                                                                          // 19171
     </file>                                                                                                           // 19172
   </example>                                                                                                          // 19173
 *                                                                                                                     // 19174
 * The predicate and reverse parameters can be controlled dynamically through scope properties,                        // 19175
 * as shown in the next example.                                                                                       // 19176
 * @example                                                                                                            // 19177
   <example module="orderByExample">                                                                                   // 19178
     <file name="index.html">                                                                                          // 19179
       <script>                                                                                                        // 19180
         angular.module('orderByExample', [])                                                                          // 19181
           .controller('ExampleController', ['$scope', function($scope) {                                              // 19182
             $scope.friends =                                                                                          // 19183
                 [{name:'John', phone:'555-1212', age:10},                                                             // 19184
                  {name:'Mary', phone:'555-9876', age:19},                                                             // 19185
                  {name:'Mike', phone:'555-4321', age:21},                                                             // 19186
                  {name:'Adam', phone:'555-5678', age:35},                                                             // 19187
                  {name:'Julie', phone:'555-8765', age:29}];                                                           // 19188
             $scope.predicate = 'age';                                                                                 // 19189
             $scope.reverse = true;                                                                                    // 19190
             $scope.order = function(predicate) {                                                                      // 19191
               $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;                            // 19192
               $scope.predicate = predicate;                                                                           // 19193
             };                                                                                                        // 19194
           }]);                                                                                                        // 19195
       </script>                                                                                                       // 19196
       <style type="text/css">                                                                                         // 19197
         .sortorder:after {                                                                                            // 19198
           content: '\25b2';                                                                                           // 19199
         }                                                                                                             // 19200
         .sortorder.reverse:after {                                                                                    // 19201
           content: '\25bc';                                                                                           // 19202
         }                                                                                                             // 19203
       </style>                                                                                                        // 19204
       <div ng-controller="ExampleController">                                                                         // 19205
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>                                           // 19206
         <hr/>                                                                                                         // 19207
         [ <a href="" ng-click="predicate=''">unsorted</a> ]                                                           // 19208
         <table class="friend">                                                                                        // 19209
           <tr>                                                                                                        // 19210
             <th>                                                                                                      // 19211
               <a href="" ng-click="order('name')">Name</a>                                                            // 19212
               <span class="sortorder" ng-show="predicate === 'name'" ng-class="{reverse:reverse}"></span>             // 19213
             </th>                                                                                                     // 19214
             <th>                                                                                                      // 19215
               <a href="" ng-click="order('phone')">Phone Number</a>                                                   // 19216
               <span class="sortorder" ng-show="predicate === 'phone'" ng-class="{reverse:reverse}"></span>            // 19217
             </th>                                                                                                     // 19218
             <th>                                                                                                      // 19219
               <a href="" ng-click="order('age')">Age</a>                                                              // 19220
               <span class="sortorder" ng-show="predicate === 'age'" ng-class="{reverse:reverse}"></span>              // 19221
             </th>                                                                                                     // 19222
           </tr>                                                                                                       // 19223
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">                                              // 19224
             <td>{{friend.name}}</td>                                                                                  // 19225
             <td>{{friend.phone}}</td>                                                                                 // 19226
             <td>{{friend.age}}</td>                                                                                   // 19227
           </tr>                                                                                                       // 19228
         </table>                                                                                                      // 19229
       </div>                                                                                                          // 19230
     </file>                                                                                                           // 19231
   </example>                                                                                                          // 19232
 *                                                                                                                     // 19233
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the                      // 19234
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the                          // 19235
 * desired parameters.                                                                                                 // 19236
 *                                                                                                                     // 19237
 * Example:                                                                                                            // 19238
 *                                                                                                                     // 19239
 * @example                                                                                                            // 19240
  <example module="orderByExample">                                                                                    // 19241
    <file name="index.html">                                                                                           // 19242
      <div ng-controller="ExampleController">                                                                          // 19243
        <table class="friend">                                                                                         // 19244
          <tr>                                                                                                         // 19245
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>                                      // 19246
              (<a href="" ng-click="order('-name',false)">^</a>)</th>                                                  // 19247
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>                   // 19248
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>                               // 19249
          </tr>                                                                                                        // 19250
          <tr ng-repeat="friend in friends">                                                                           // 19251
            <td>{{friend.name}}</td>                                                                                   // 19252
            <td>{{friend.phone}}</td>                                                                                  // 19253
            <td>{{friend.age}}</td>                                                                                    // 19254
          </tr>                                                                                                        // 19255
        </table>                                                                                                       // 19256
      </div>                                                                                                           // 19257
    </file>                                                                                                            // 19258
                                                                                                                       // 19259
    <file name="script.js">                                                                                            // 19260
      angular.module('orderByExample', [])                                                                             // 19261
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {                             // 19262
          var orderBy = $filter('orderBy');                                                                            // 19263
          $scope.friends = [                                                                                           // 19264
            { name: 'John',    phone: '555-1212',    age: 10 },                                                        // 19265
            { name: 'Mary',    phone: '555-9876',    age: 19 },                                                        // 19266
            { name: 'Mike',    phone: '555-4321',    age: 21 },                                                        // 19267
            { name: 'Adam',    phone: '555-5678',    age: 35 },                                                        // 19268
            { name: 'Julie',   phone: '555-8765',    age: 29 }                                                         // 19269
          ];                                                                                                           // 19270
          $scope.order = function(predicate, reverse) {                                                                // 19271
            $scope.friends = orderBy($scope.friends, predicate, reverse);                                              // 19272
          };                                                                                                           // 19273
          $scope.order('-age',false);                                                                                  // 19274
        }]);                                                                                                           // 19275
    </file>                                                                                                            // 19276
</example>                                                                                                             // 19277
 */                                                                                                                    // 19278
orderByFilter.$inject = ['$parse'];                                                                                    // 19279
function orderByFilter($parse) {                                                                                       // 19280
  return function(array, sortPredicate, reverseOrder) {                                                                // 19281
                                                                                                                       // 19282
    if (!(isArrayLike(array))) return array;                                                                           // 19283
                                                                                                                       // 19284
    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }                                                  // 19285
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }                                                         // 19286
                                                                                                                       // 19287
    var predicates = processPredicates(sortPredicate, reverseOrder);                                                   // 19288
    // Add a predicate at the end that evaluates to the element index. This makes the                                  // 19289
    // sort stable as it works as a tie-breaker when all the input predicates cannot                                   // 19290
    // distinguish between two elements.                                                                               // 19291
    predicates.push({ get: function() { return {}; }, descending: reverseOrder ? -1 : 1});                             // 19292
                                                                                                                       // 19293
    // The next three lines are a version of a Swartzian Transform idiom from Perl                                     // 19294
    // (sometimes called the Decorate-Sort-Undecorate idiom)                                                           // 19295
    // See https://en.wikipedia.org/wiki/Schwartzian_transform                                                         // 19296
    var compareValues = Array.prototype.map.call(array, getComparisonObject);                                          // 19297
    compareValues.sort(doComparison);                                                                                  // 19298
    array = compareValues.map(function(item) { return item.value; });                                                  // 19299
                                                                                                                       // 19300
    return array;                                                                                                      // 19301
                                                                                                                       // 19302
    function getComparisonObject(value, index) {                                                                       // 19303
      return {                                                                                                         // 19304
        value: value,                                                                                                  // 19305
        predicateValues: predicates.map(function(predicate) {                                                          // 19306
          return getPredicateValue(predicate.get(value), index);                                                       // 19307
        })                                                                                                             // 19308
      };                                                                                                               // 19309
    }                                                                                                                  // 19310
                                                                                                                       // 19311
    function doComparison(v1, v2) {                                                                                    // 19312
      var result = 0;                                                                                                  // 19313
      for (var index=0, length = predicates.length; index < length; ++index) {                                         // 19314
        result = compare(v1.predicateValues[index], v2.predicateValues[index]) * predicates[index].descending;         // 19315
        if (result) break;                                                                                             // 19316
      }                                                                                                                // 19317
      return result;                                                                                                   // 19318
    }                                                                                                                  // 19319
  };                                                                                                                   // 19320
                                                                                                                       // 19321
  function processPredicates(sortPredicate, reverseOrder) {                                                            // 19322
    reverseOrder = reverseOrder ? -1 : 1;                                                                              // 19323
    return sortPredicate.map(function(predicate) {                                                                     // 19324
      var descending = 1, get = identity;                                                                              // 19325
                                                                                                                       // 19326
      if (isFunction(predicate)) {                                                                                     // 19327
        get = predicate;                                                                                               // 19328
      } else if (isString(predicate)) {                                                                                // 19329
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {                                              // 19330
          descending = predicate.charAt(0) == '-' ? -1 : 1;                                                            // 19331
          predicate = predicate.substring(1);                                                                          // 19332
        }                                                                                                              // 19333
        if (predicate !== '') {                                                                                        // 19334
          get = $parse(predicate);                                                                                     // 19335
          if (get.constant) {                                                                                          // 19336
            var key = get();                                                                                           // 19337
            get = function(value) { return value[key]; };                                                              // 19338
          }                                                                                                            // 19339
        }                                                                                                              // 19340
      }                                                                                                                // 19341
      return { get: get, descending: descending * reverseOrder };                                                      // 19342
    });                                                                                                                // 19343
  }                                                                                                                    // 19344
                                                                                                                       // 19345
  function isPrimitive(value) {                                                                                        // 19346
    switch (typeof value) {                                                                                            // 19347
      case 'number': /* falls through */                                                                               // 19348
      case 'boolean': /* falls through */                                                                              // 19349
      case 'string':                                                                                                   // 19350
        return true;                                                                                                   // 19351
      default:                                                                                                         // 19352
        return false;                                                                                                  // 19353
    }                                                                                                                  // 19354
  }                                                                                                                    // 19355
                                                                                                                       // 19356
  function objectValue(value, index) {                                                                                 // 19357
    // If `valueOf` is a valid function use that                                                                       // 19358
    if (typeof value.valueOf === 'function') {                                                                         // 19359
      value = value.valueOf();                                                                                         // 19360
      if (isPrimitive(value)) return value;                                                                            // 19361
    }                                                                                                                  // 19362
    // If `toString` is a valid function and not the one from `Object.prototype` use that                              // 19363
    if (hasCustomToString(value)) {                                                                                    // 19364
      value = value.toString();                                                                                        // 19365
      if (isPrimitive(value)) return value;                                                                            // 19366
    }                                                                                                                  // 19367
    // We have a basic object so we use the position of the object in the collection                                   // 19368
    return index;                                                                                                      // 19369
  }                                                                                                                    // 19370
                                                                                                                       // 19371
  function getPredicateValue(value, index) {                                                                           // 19372
    var type = typeof value;                                                                                           // 19373
    if (value === null) {                                                                                              // 19374
      type = 'string';                                                                                                 // 19375
      value = 'null';                                                                                                  // 19376
    } else if (type === 'string') {                                                                                    // 19377
      value = value.toLowerCase();                                                                                     // 19378
    } else if (type === 'object') {                                                                                    // 19379
      value = objectValue(value, index);                                                                               // 19380
    }                                                                                                                  // 19381
    return { value: value, type: type };                                                                               // 19382
  }                                                                                                                    // 19383
                                                                                                                       // 19384
  function compare(v1, v2) {                                                                                           // 19385
    var result = 0;                                                                                                    // 19386
    if (v1.type === v2.type) {                                                                                         // 19387
      if (v1.value !== v2.value) {                                                                                     // 19388
        result = v1.value < v2.value ? -1 : 1;                                                                         // 19389
      }                                                                                                                // 19390
    } else {                                                                                                           // 19391
      result = v1.type < v2.type ? -1 : 1;                                                                             // 19392
    }                                                                                                                  // 19393
    return result;                                                                                                     // 19394
  }                                                                                                                    // 19395
}                                                                                                                      // 19396
                                                                                                                       // 19397
function ngDirective(directive) {                                                                                      // 19398
  if (isFunction(directive)) {                                                                                         // 19399
    directive = {                                                                                                      // 19400
      link: directive                                                                                                  // 19401
    };                                                                                                                 // 19402
  }                                                                                                                    // 19403
  directive.restrict = directive.restrict || 'AC';                                                                     // 19404
  return valueFn(directive);                                                                                           // 19405
}                                                                                                                      // 19406
                                                                                                                       // 19407
/**                                                                                                                    // 19408
 * @ngdoc directive                                                                                                    // 19409
 * @name a                                                                                                             // 19410
 * @restrict E                                                                                                         // 19411
 *                                                                                                                     // 19412
 * @description                                                                                                        // 19413
 * Modifies the default behavior of the html A tag so that the default action is prevented when                        // 19414
 * the href attribute is empty.                                                                                        // 19415
 *                                                                                                                     // 19416
 * This change permits the easy creation of action links with the `ngClick` directive                                  // 19417
 * without changing the location or causing page reloads, e.g.:                                                        // 19418
 * `<a href="" ng-click="list.addItem()">Add Item</a>`                                                                 // 19419
 */                                                                                                                    // 19420
var htmlAnchorDirective = valueFn({                                                                                    // 19421
  restrict: 'E',                                                                                                       // 19422
  compile: function(element, attr) {                                                                                   // 19423
    if (!attr.href && !attr.xlinkHref) {                                                                               // 19424
      return function(scope, element) {                                                                                // 19425
        // If the linked element is not an anchor tag anymore, do nothing                                              // 19426
        if (element[0].nodeName.toLowerCase() !== 'a') return;                                                         // 19427
                                                                                                                       // 19428
        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.                          // 19429
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?                              // 19430
                   'xlink:href' : 'href';                                                                              // 19431
        element.on('click', function(event) {                                                                          // 19432
          // if we have no href url, then don't navigate anywhere.                                                     // 19433
          if (!element.attr(href)) {                                                                                   // 19434
            event.preventDefault();                                                                                    // 19435
          }                                                                                                            // 19436
        });                                                                                                            // 19437
      };                                                                                                               // 19438
    }                                                                                                                  // 19439
  }                                                                                                                    // 19440
});                                                                                                                    // 19441
                                                                                                                       // 19442
/**                                                                                                                    // 19443
 * @ngdoc directive                                                                                                    // 19444
 * @name ngHref                                                                                                        // 19445
 * @restrict A                                                                                                         // 19446
 * @priority 99                                                                                                        // 19447
 *                                                                                                                     // 19448
 * @description                                                                                                        // 19449
 * Using Angular markup like `{{hash}}` in an href attribute will                                                      // 19450
 * make the link go to the wrong URL if the user clicks it before                                                      // 19451
 * Angular has a chance to replace the `{{hash}}` markup with its                                                      // 19452
 * value. Until Angular replaces the markup the link will be broken                                                    // 19453
 * and will most likely return a 404 error. The `ngHref` directive                                                     // 19454
 * solves this problem.                                                                                                // 19455
 *                                                                                                                     // 19456
 * The wrong way to write it:                                                                                          // 19457
 * ```html                                                                                                             // 19458
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                         // 19459
 * ```                                                                                                                 // 19460
 *                                                                                                                     // 19461
 * The correct way to write it:                                                                                        // 19462
 * ```html                                                                                                             // 19463
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>                                                      // 19464
 * ```                                                                                                                 // 19465
 *                                                                                                                     // 19466
 * @element A                                                                                                          // 19467
 * @param {template} ngHref any string which can contain `{{}}` markup.                                                // 19468
 *                                                                                                                     // 19469
 * @example                                                                                                            // 19470
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes                              // 19471
 * in links and their different behaviors:                                                                             // 19472
    <example>                                                                                                          // 19473
      <file name="index.html">                                                                                         // 19474
        <input ng-model="value" /><br />                                                                               // 19475
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />                                 // 19476
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />                              // 19477
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />                                           // 19478
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />                    // 19479
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />                                      // 19480
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)                                            // 19481
      </file>                                                                                                          // 19482
      <file name="protractor.js" type="protractor">                                                                    // 19483
        it('should execute ng-click but not reload when href without value', function() {                              // 19484
          element(by.id('link-1')).click();                                                                            // 19485
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');                                       // 19486
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');                                              // 19487
        });                                                                                                            // 19488
                                                                                                                       // 19489
        it('should execute ng-click but not reload when href empty string', function() {                               // 19490
          element(by.id('link-2')).click();                                                                            // 19491
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');                                       // 19492
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');                                              // 19493
        });                                                                                                            // 19494
                                                                                                                       // 19495
        it('should execute ng-click and change url when ng-href specified', function() {                               // 19496
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);                                     // 19497
                                                                                                                       // 19498
          element(by.id('link-3')).click();                                                                            // 19499
                                                                                                                       // 19500
          // At this point, we navigate away from an Angular page, so we need                                          // 19501
          // to use browser.driver to get the base webdriver.                                                          // 19502
                                                                                                                       // 19503
          browser.wait(function() {                                                                                    // 19504
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19505
              return url.match(/\/123$/);                                                                              // 19506
            });                                                                                                        // 19507
          }, 5000, 'page should navigate to /123');                                                                    // 19508
        });                                                                                                            // 19509
                                                                                                                       // 19510
        it('should execute ng-click but not reload when href empty string and name specified', function() {            // 19511
          element(by.id('link-4')).click();                                                                            // 19512
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');                                       // 19513
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');                                              // 19514
        });                                                                                                            // 19515
                                                                                                                       // 19516
        it('should execute ng-click but not reload when no href but name specified', function() {                      // 19517
          element(by.id('link-5')).click();                                                                            // 19518
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');                                       // 19519
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);                                            // 19520
        });                                                                                                            // 19521
                                                                                                                       // 19522
        it('should only change url when only ng-href', function() {                                                    // 19523
          element(by.model('value')).clear();                                                                          // 19524
          element(by.model('value')).sendKeys('6');                                                                    // 19525
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);                                       // 19526
                                                                                                                       // 19527
          element(by.id('link-6')).click();                                                                            // 19528
                                                                                                                       // 19529
          // At this point, we navigate away from an Angular page, so we need                                          // 19530
          // to use browser.driver to get the base webdriver.                                                          // 19531
          browser.wait(function() {                                                                                    // 19532
            return browser.driver.getCurrentUrl().then(function(url) {                                                 // 19533
              return url.match(/\/6$/);                                                                                // 19534
            });                                                                                                        // 19535
          }, 5000, 'page should navigate to /6');                                                                      // 19536
        });                                                                                                            // 19537
      </file>                                                                                                          // 19538
    </example>                                                                                                         // 19539
 */                                                                                                                    // 19540
                                                                                                                       // 19541
/**                                                                                                                    // 19542
 * @ngdoc directive                                                                                                    // 19543
 * @name ngSrc                                                                                                         // 19544
 * @restrict A                                                                                                         // 19545
 * @priority 99                                                                                                        // 19546
 *                                                                                                                     // 19547
 * @description                                                                                                        // 19548
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't                                                   // 19549
 * work right: The browser will fetch from the URL with the literal                                                    // 19550
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19551
 * `{{hash}}`. The `ngSrc` directive solves this problem.                                                              // 19552
 *                                                                                                                     // 19553
 * The buggy way to write it:                                                                                          // 19554
 * ```html                                                                                                             // 19555
 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>                                              // 19556
 * ```                                                                                                                 // 19557
 *                                                                                                                     // 19558
 * The correct way to write it:                                                                                        // 19559
 * ```html                                                                                                             // 19560
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />                                          // 19561
 * ```                                                                                                                 // 19562
 *                                                                                                                     // 19563
 * @element IMG                                                                                                        // 19564
 * @param {template} ngSrc any string which can contain `{{}}` markup.                                                 // 19565
 */                                                                                                                    // 19566
                                                                                                                       // 19567
/**                                                                                                                    // 19568
 * @ngdoc directive                                                                                                    // 19569
 * @name ngSrcset                                                                                                      // 19570
 * @restrict A                                                                                                         // 19571
 * @priority 99                                                                                                        // 19572
 *                                                                                                                     // 19573
 * @description                                                                                                        // 19574
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't                                                // 19575
 * work right: The browser will fetch from the URL with the literal                                                    // 19576
 * text `{{hash}}` until Angular replaces the expression inside                                                        // 19577
 * `{{hash}}`. The `ngSrcset` directive solves this problem.                                                           // 19578
 *                                                                                                                     // 19579
 * The buggy way to write it:                                                                                          // 19580
 * ```html                                                                                                             // 19581
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>                                        // 19582
 * ```                                                                                                                 // 19583
 *                                                                                                                     // 19584
 * The correct way to write it:                                                                                        // 19585
 * ```html                                                                                                             // 19586
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />                                    // 19587
 * ```                                                                                                                 // 19588
 *                                                                                                                     // 19589
 * @element IMG                                                                                                        // 19590
 * @param {template} ngSrcset any string which can contain `{{}}` markup.                                              // 19591
 */                                                                                                                    // 19592
                                                                                                                       // 19593
/**                                                                                                                    // 19594
 * @ngdoc directive                                                                                                    // 19595
 * @name ngDisabled                                                                                                    // 19596
 * @restrict A                                                                                                         // 19597
 * @priority 100                                                                                                       // 19598
 *                                                                                                                     // 19599
 * @description                                                                                                        // 19600
 *                                                                                                                     // 19601
 * This directive sets the `disabled` attribute on the element if the                                                  // 19602
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.                                        // 19603
 *                                                                                                                     // 19604
 * A special directive is necessary because we cannot use interpolation inside the `disabled`                          // 19605
 * attribute.  The following example would make the button enabled on Chrome/Firefox                                   // 19606
 * but not on older IEs:                                                                                               // 19607
 *                                                                                                                     // 19608
 * ```html                                                                                                             // 19609
 * <!-- See below for an example of ng-disabled being used correctly -->                                               // 19610
 * <div ng-init="isDisabled = false">                                                                                  // 19611
 *  <button disabled="{{isDisabled}}">Disabled</button>                                                                // 19612
 * </div>                                                                                                              // 19613
 * ```                                                                                                                 // 19614
 *                                                                                                                     // 19615
 * This is because the HTML specification does not require browsers to preserve the values of                          // 19616
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)                    // 19617
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19618
 * binding information would be lost when the browser removes the attribute.                                           // 19619
 *                                                                                                                     // 19620
 * @example                                                                                                            // 19621
    <example>                                                                                                          // 19622
      <file name="index.html">                                                                                         // 19623
        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>                             // 19624
        <button ng-model="button" ng-disabled="checked">Button</button>                                                // 19625
      </file>                                                                                                          // 19626
      <file name="protractor.js" type="protractor">                                                                    // 19627
        it('should toggle button', function() {                                                                        // 19628
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();                                      // 19629
          element(by.model('checked')).click();                                                                        // 19630
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();                                     // 19631
        });                                                                                                            // 19632
      </file>                                                                                                          // 19633
    </example>                                                                                                         // 19634
 *                                                                                                                     // 19635
 * @element INPUT                                                                                                      // 19636
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,                                // 19637
 *     then the `disabled` attribute will be set on the element                                                        // 19638
 */                                                                                                                    // 19639
                                                                                                                       // 19640
                                                                                                                       // 19641
/**                                                                                                                    // 19642
 * @ngdoc directive                                                                                                    // 19643
 * @name ngChecked                                                                                                     // 19644
 * @restrict A                                                                                                         // 19645
 * @priority 100                                                                                                       // 19646
 *                                                                                                                     // 19647
 * @description                                                                                                        // 19648
 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.                        // 19649
 *                                                                                                                     // 19650
 * Note that this directive should not be used together with {@link ngModel `ngModel`},                                // 19651
 * as this can lead to unexpected behavior.                                                                            // 19652
 *                                                                                                                     // 19653
 * ### Why do we need `ngChecked`?                                                                                     // 19654
 *                                                                                                                     // 19655
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19656
 * such as checked. (Their presence means true and their absence means false.)                                         // 19657
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19658
 * binding information would be lost when the browser removes the attribute.                                           // 19659
 * The `ngChecked` directive solves this problem for the `checked` attribute.                                          // 19660
 * This complementary directive is not removed by the browser and so provides                                          // 19661
 * a permanent reliable place to store the binding information.                                                        // 19662
 * @example                                                                                                            // 19663
    <example>                                                                                                          // 19664
      <file name="index.html">                                                                                         // 19665
        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>                          // 19666
        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">                           // 19667
      </file>                                                                                                          // 19668
      <file name="protractor.js" type="protractor">                                                                    // 19669
        it('should check both checkBoxes', function() {                                                                // 19670
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();                                    // 19671
          element(by.model('master')).click();                                                                         // 19672
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();                                   // 19673
        });                                                                                                            // 19674
      </file>                                                                                                          // 19675
    </example>                                                                                                         // 19676
 *                                                                                                                     // 19677
 * @element INPUT                                                                                                      // 19678
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,                                 // 19679
 *     then the `checked` attribute will be set on the element                                                         // 19680
 */                                                                                                                    // 19681
                                                                                                                       // 19682
                                                                                                                       // 19683
/**                                                                                                                    // 19684
 * @ngdoc directive                                                                                                    // 19685
 * @name ngReadonly                                                                                                    // 19686
 * @restrict A                                                                                                         // 19687
 * @priority 100                                                                                                       // 19688
 *                                                                                                                     // 19689
 * @description                                                                                                        // 19690
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19691
 * such as readonly. (Their presence means true and their absence means false.)                                        // 19692
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19693
 * binding information would be lost when the browser removes the attribute.                                           // 19694
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.                                        // 19695
 * This complementary directive is not removed by the browser and so provides                                          // 19696
 * a permanent reliable place to store the binding information.                                                        // 19697
 * @example                                                                                                            // 19698
    <example>                                                                                                          // 19699
      <file name="index.html">                                                                                         // 19700
        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>                 // 19701
        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />                    // 19702
      </file>                                                                                                          // 19703
      <file name="protractor.js" type="protractor">                                                                    // 19704
        it('should toggle readonly attr', function() {                                                                 // 19705
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();                               // 19706
          element(by.model('checked')).click();                                                                        // 19707
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();                              // 19708
        });                                                                                                            // 19709
      </file>                                                                                                          // 19710
    </example>                                                                                                         // 19711
 *                                                                                                                     // 19712
 * @element INPUT                                                                                                      // 19713
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,                                // 19714
 *     then special attribute "readonly" will be set on the element                                                    // 19715
 */                                                                                                                    // 19716
                                                                                                                       // 19717
                                                                                                                       // 19718
/**                                                                                                                    // 19719
 * @ngdoc directive                                                                                                    // 19720
 * @name ngSelected                                                                                                    // 19721
 * @restrict A                                                                                                         // 19722
 * @priority 100                                                                                                       // 19723
 *                                                                                                                     // 19724
 * @description                                                                                                        // 19725
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19726
 * such as selected. (Their presence means true and their absence means false.)                                        // 19727
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19728
 * binding information would be lost when the browser removes the attribute.                                           // 19729
 * The `ngSelected` directive solves this problem for the `selected` attribute.                                        // 19730
 * This complementary directive is not removed by the browser and so provides                                          // 19731
 * a permanent reliable place to store the binding information.                                                        // 19732
 *                                                                                                                     // 19733
 * @example                                                                                                            // 19734
    <example>                                                                                                          // 19735
      <file name="index.html">                                                                                         // 19736
        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>                            // 19737
        <select aria-label="ngSelected demo">                                                                          // 19738
          <option>Hello!</option>                                                                                      // 19739
          <option id="greet" ng-selected="selected">Greetings!</option>                                                // 19740
        </select>                                                                                                      // 19741
      </file>                                                                                                          // 19742
      <file name="protractor.js" type="protractor">                                                                    // 19743
        it('should select Greetings!', function() {                                                                    // 19744
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();                                        // 19745
          element(by.model('selected')).click();                                                                       // 19746
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();                                       // 19747
        });                                                                                                            // 19748
      </file>                                                                                                          // 19749
    </example>                                                                                                         // 19750
 *                                                                                                                     // 19751
 * @element OPTION                                                                                                     // 19752
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,                                // 19753
 *     then special attribute "selected" will be set on the element                                                    // 19754
 */                                                                                                                    // 19755
                                                                                                                       // 19756
/**                                                                                                                    // 19757
 * @ngdoc directive                                                                                                    // 19758
 * @name ngOpen                                                                                                        // 19759
 * @restrict A                                                                                                         // 19760
 * @priority 100                                                                                                       // 19761
 *                                                                                                                     // 19762
 * @description                                                                                                        // 19763
 * The HTML specification does not require browsers to preserve the values of boolean attributes                       // 19764
 * such as open. (Their presence means true and their absence means false.)                                            // 19765
 * If we put an Angular interpolation expression into such an attribute then the                                       // 19766
 * binding information would be lost when the browser removes the attribute.                                           // 19767
 * The `ngOpen` directive solves this problem for the `open` attribute.                                                // 19768
 * This complementary directive is not removed by the browser and so provides                                          // 19769
 * a permanent reliable place to store the binding information.                                                        // 19770
 * @example                                                                                                            // 19771
     <example>                                                                                                         // 19772
       <file name="index.html">                                                                                        // 19773
         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>                          // 19774
         <details id="details" ng-open="open">                                                                         // 19775
            <summary>Show/Hide me</summary>                                                                            // 19776
         </details>                                                                                                    // 19777
       </file>                                                                                                         // 19778
       <file name="protractor.js" type="protractor">                                                                   // 19779
         it('should toggle open', function() {                                                                         // 19780
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();                                         // 19781
           element(by.model('open')).click();                                                                          // 19782
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();                                        // 19783
         });                                                                                                           // 19784
       </file>                                                                                                         // 19785
     </example>                                                                                                        // 19786
 *                                                                                                                     // 19787
 * @element DETAILS                                                                                                    // 19788
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,                                    // 19789
 *     then special attribute "open" will be set on the element                                                        // 19790
 */                                                                                                                    // 19791
                                                                                                                       // 19792
var ngAttributeAliasDirectives = {};                                                                                   // 19793
                                                                                                                       // 19794
// boolean attrs are evaluated                                                                                         // 19795
forEach(BOOLEAN_ATTR, function(propName, attrName) {                                                                   // 19796
  // binding to multiple is not supported                                                                              // 19797
  if (propName == "multiple") return;                                                                                  // 19798
                                                                                                                       // 19799
  function defaultLinkFn(scope, element, attr) {                                                                       // 19800
    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {                                          // 19801
      attr.$set(attrName, !!value);                                                                                    // 19802
    });                                                                                                                // 19803
  }                                                                                                                    // 19804
                                                                                                                       // 19805
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19806
  var linkFn = defaultLinkFn;                                                                                          // 19807
                                                                                                                       // 19808
  if (propName === 'checked') {                                                                                        // 19809
    linkFn = function(scope, element, attr) {                                                                          // 19810
      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input                         // 19811
      if (attr.ngModel !== attr[normalized]) {                                                                         // 19812
        defaultLinkFn(scope, element, attr);                                                                           // 19813
      }                                                                                                                // 19814
    };                                                                                                                 // 19815
  }                                                                                                                    // 19816
                                                                                                                       // 19817
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19818
    return {                                                                                                           // 19819
      restrict: 'A',                                                                                                   // 19820
      priority: 100,                                                                                                   // 19821
      link: linkFn                                                                                                     // 19822
    };                                                                                                                 // 19823
  };                                                                                                                   // 19824
});                                                                                                                    // 19825
                                                                                                                       // 19826
// aliased input attrs are evaluated                                                                                   // 19827
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {                                                                     // 19828
  ngAttributeAliasDirectives[ngAttr] = function() {                                                                    // 19829
    return {                                                                                                           // 19830
      priority: 100,                                                                                                   // 19831
      link: function(scope, element, attr) {                                                                           // 19832
        //special case ngPattern when a literal regular expression value                                               // 19833
        //is used as the expression (this way we don't have to watch anything).                                        // 19834
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {                                               // 19835
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);                                                       // 19836
          if (match) {                                                                                                 // 19837
            attr.$set("ngPattern", new RegExp(match[1], match[2]));                                                    // 19838
            return;                                                                                                    // 19839
          }                                                                                                            // 19840
        }                                                                                                              // 19841
                                                                                                                       // 19842
        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {                                            // 19843
          attr.$set(ngAttr, value);                                                                                    // 19844
        });                                                                                                            // 19845
      }                                                                                                                // 19846
    };                                                                                                                 // 19847
  };                                                                                                                   // 19848
});                                                                                                                    // 19849
                                                                                                                       // 19850
// ng-src, ng-srcset, ng-href are interpolated                                                                         // 19851
forEach(['src', 'srcset', 'href'], function(attrName) {                                                                // 19852
  var normalized = directiveNormalize('ng-' + attrName);                                                               // 19853
  ngAttributeAliasDirectives[normalized] = function() {                                                                // 19854
    return {                                                                                                           // 19855
      priority: 99, // it needs to run after the attributes are interpolated                                           // 19856
      link: function(scope, element, attr) {                                                                           // 19857
        var propName = attrName,                                                                                       // 19858
            name = attrName;                                                                                           // 19859
                                                                                                                       // 19860
        if (attrName === 'href' &&                                                                                     // 19861
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {                                    // 19862
          name = 'xlinkHref';                                                                                          // 19863
          attr.$attr[name] = 'xlink:href';                                                                             // 19864
          propName = null;                                                                                             // 19865
        }                                                                                                              // 19866
                                                                                                                       // 19867
        attr.$observe(normalized, function(value) {                                                                    // 19868
          if (!value) {                                                                                                // 19869
            if (attrName === 'href') {                                                                                 // 19870
              attr.$set(name, null);                                                                                   // 19871
            }                                                                                                          // 19872
            return;                                                                                                    // 19873
          }                                                                                                            // 19874
                                                                                                                       // 19875
          attr.$set(name, value);                                                                                      // 19876
                                                                                                                       // 19877
          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist                        // 19878
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need                           // 19879
          // to set the property as well to achieve the desired effect.                                                // 19880
          // we use attr[attrName] value since $set can sanitize the url.                                              // 19881
          if (msie && propName) element.prop(propName, attr[name]);                                                    // 19882
        });                                                                                                            // 19883
      }                                                                                                                // 19884
    };                                                                                                                 // 19885
  };                                                                                                                   // 19886
});                                                                                                                    // 19887
                                                                                                                       // 19888
/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true                                                  // 19889
 */                                                                                                                    // 19890
var nullFormCtrl = {                                                                                                   // 19891
  $addControl: noop,                                                                                                   // 19892
  $$renameControl: nullFormRenameControl,                                                                              // 19893
  $removeControl: noop,                                                                                                // 19894
  $setValidity: noop,                                                                                                  // 19895
  $setDirty: noop,                                                                                                     // 19896
  $setPristine: noop,                                                                                                  // 19897
  $setSubmitted: noop                                                                                                  // 19898
},                                                                                                                     // 19899
SUBMITTED_CLASS = 'ng-submitted';                                                                                      // 19900
                                                                                                                       // 19901
function nullFormRenameControl(control, name) {                                                                        // 19902
  control.$name = name;                                                                                                // 19903
}                                                                                                                      // 19904
                                                                                                                       // 19905
/**                                                                                                                    // 19906
 * @ngdoc type                                                                                                         // 19907
 * @name form.FormController                                                                                           // 19908
 *                                                                                                                     // 19909
 * @property {boolean} $pristine True if user has not interacted with the form yet.                                    // 19910
 * @property {boolean} $dirty True if user has already interacted with the form.                                       // 19911
 * @property {boolean} $valid True if all of the containing forms and controls are valid.                              // 19912
 * @property {boolean} $invalid True if at least one containing control or form is invalid.                            // 19913
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.                             // 19914
 *                                                                                                                     // 19915
 * @property {Object} $error Is an object hash, containing references to controls or                                   // 19916
 *  forms with failing validators, where:                                                                              // 19917
 *                                                                                                                     // 19918
 *  - keys are validation tokens (error names),                                                                        // 19919
 *  - values are arrays of controls or forms that have a failing validator for given error name.                       // 19920
 *                                                                                                                     // 19921
 *  Built-in validation tokens:                                                                                        // 19922
 *                                                                                                                     // 19923
 *  - `email`                                                                                                          // 19924
 *  - `max`                                                                                                            // 19925
 *  - `maxlength`                                                                                                      // 19926
 *  - `min`                                                                                                            // 19927
 *  - `minlength`                                                                                                      // 19928
 *  - `number`                                                                                                         // 19929
 *  - `pattern`                                                                                                        // 19930
 *  - `required`                                                                                                       // 19931
 *  - `url`                                                                                                            // 19932
 *  - `date`                                                                                                           // 19933
 *  - `datetimelocal`                                                                                                  // 19934
 *  - `time`                                                                                                           // 19935
 *  - `week`                                                                                                           // 19936
 *  - `month`                                                                                                          // 19937
 *                                                                                                                     // 19938
 * @description                                                                                                        // 19939
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,                     // 19940
 * such as being valid/invalid or dirty/pristine.                                                                      // 19941
 *                                                                                                                     // 19942
 * Each {@link ng.directive:form form} directive creates an instance                                                   // 19943
 * of `FormController`.                                                                                                // 19944
 *                                                                                                                     // 19945
 */                                                                                                                    // 19946
//asks for $scope to fool the BC controller module                                                                     // 19947
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];                                 // 19948
function FormController(element, attrs, $scope, $animate, $interpolate) {                                              // 19949
  var form = this,                                                                                                     // 19950
      controls = [];                                                                                                   // 19951
                                                                                                                       // 19952
  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;                            // 19953
                                                                                                                       // 19954
  // init state                                                                                                        // 19955
  form.$error = {};                                                                                                    // 19956
  form.$$success = {};                                                                                                 // 19957
  form.$pending = undefined;                                                                                           // 19958
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);                                                 // 19959
  form.$dirty = false;                                                                                                 // 19960
  form.$pristine = true;                                                                                               // 19961
  form.$valid = true;                                                                                                  // 19962
  form.$invalid = false;                                                                                               // 19963
  form.$submitted = false;                                                                                             // 19964
                                                                                                                       // 19965
  parentForm.$addControl(form);                                                                                        // 19966
                                                                                                                       // 19967
  /**                                                                                                                  // 19968
   * @ngdoc method                                                                                                     // 19969
   * @name form.FormController#$rollbackViewValue                                                                      // 19970
   *                                                                                                                   // 19971
   * @description                                                                                                      // 19972
   * Rollback all form controls pending updates to the `$modelValue`.                                                  // 19973
   *                                                                                                                   // 19974
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 19975
   * event defined in `ng-model-options`. This method is typically needed by the reset button of                       // 19976
   * a form that uses `ng-model-options` to pend updates.                                                              // 19977
   */                                                                                                                  // 19978
  form.$rollbackViewValue = function() {                                                                               // 19979
    forEach(controls, function(control) {                                                                              // 19980
      control.$rollbackViewValue();                                                                                    // 19981
    });                                                                                                                // 19982
  };                                                                                                                   // 19983
                                                                                                                       // 19984
  /**                                                                                                                  // 19985
   * @ngdoc method                                                                                                     // 19986
   * @name form.FormController#$commitViewValue                                                                        // 19987
   *                                                                                                                   // 19988
   * @description                                                                                                      // 19989
   * Commit all form controls pending updates to the `$modelValue`.                                                    // 19990
   *                                                                                                                   // 19991
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 19992
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`                          // 19993
   * usually handles calling this in response to input events.                                                         // 19994
   */                                                                                                                  // 19995
  form.$commitViewValue = function() {                                                                                 // 19996
    forEach(controls, function(control) {                                                                              // 19997
      control.$commitViewValue();                                                                                      // 19998
    });                                                                                                                // 19999
  };                                                                                                                   // 20000
                                                                                                                       // 20001
  /**                                                                                                                  // 20002
   * @ngdoc method                                                                                                     // 20003
   * @name form.FormController#$addControl                                                                             // 20004
   *                                                                                                                   // 20005
   * @description                                                                                                      // 20006
   * Register a control with the form.                                                                                 // 20007
   *                                                                                                                   // 20008
   * Input elements using ngModelController do this automatically when they are linked.                                // 20009
   */                                                                                                                  // 20010
  form.$addControl = function(control) {                                                                               // 20011
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored                           // 20012
    // and not added to the scope.  Now we throw an error.                                                             // 20013
    assertNotHasOwnProperty(control.$name, 'input');                                                                   // 20014
    controls.push(control);                                                                                            // 20015
                                                                                                                       // 20016
    if (control.$name) {                                                                                               // 20017
      form[control.$name] = control;                                                                                   // 20018
    }                                                                                                                  // 20019
  };                                                                                                                   // 20020
                                                                                                                       // 20021
  // Private API: rename a form control                                                                                // 20022
  form.$$renameControl = function(control, newName) {                                                                  // 20023
    var oldName = control.$name;                                                                                       // 20024
                                                                                                                       // 20025
    if (form[oldName] === control) {                                                                                   // 20026
      delete form[oldName];                                                                                            // 20027
    }                                                                                                                  // 20028
    form[newName] = control;                                                                                           // 20029
    control.$name = newName;                                                                                           // 20030
  };                                                                                                                   // 20031
                                                                                                                       // 20032
  /**                                                                                                                  // 20033
   * @ngdoc method                                                                                                     // 20034
   * @name form.FormController#$removeControl                                                                          // 20035
   *                                                                                                                   // 20036
   * @description                                                                                                      // 20037
   * Deregister a control from the form.                                                                               // 20038
   *                                                                                                                   // 20039
   * Input elements using ngModelController do this automatically when they are destroyed.                             // 20040
   */                                                                                                                  // 20041
  form.$removeControl = function(control) {                                                                            // 20042
    if (control.$name && form[control.$name] === control) {                                                            // 20043
      delete form[control.$name];                                                                                      // 20044
    }                                                                                                                  // 20045
    forEach(form.$pending, function(value, name) {                                                                     // 20046
      form.$setValidity(name, null, control);                                                                          // 20047
    });                                                                                                                // 20048
    forEach(form.$error, function(value, name) {                                                                       // 20049
      form.$setValidity(name, null, control);                                                                          // 20050
    });                                                                                                                // 20051
    forEach(form.$$success, function(value, name) {                                                                    // 20052
      form.$setValidity(name, null, control);                                                                          // 20053
    });                                                                                                                // 20054
                                                                                                                       // 20055
    arrayRemove(controls, control);                                                                                    // 20056
  };                                                                                                                   // 20057
                                                                                                                       // 20058
                                                                                                                       // 20059
  /**                                                                                                                  // 20060
   * @ngdoc method                                                                                                     // 20061
   * @name form.FormController#$setValidity                                                                            // 20062
   *                                                                                                                   // 20063
   * @description                                                                                                      // 20064
   * Sets the validity of a form control.                                                                              // 20065
   *                                                                                                                   // 20066
   * This method will also propagate to parent forms.                                                                  // 20067
   */                                                                                                                  // 20068
  addSetValidityMethod({                                                                                               // 20069
    ctrl: this,                                                                                                        // 20070
    $element: element,                                                                                                 // 20071
    set: function(object, property, controller) {                                                                      // 20072
      var list = object[property];                                                                                     // 20073
      if (!list) {                                                                                                     // 20074
        object[property] = [controller];                                                                               // 20075
      } else {                                                                                                         // 20076
        var index = list.indexOf(controller);                                                                          // 20077
        if (index === -1) {                                                                                            // 20078
          list.push(controller);                                                                                       // 20079
        }                                                                                                              // 20080
      }                                                                                                                // 20081
    },                                                                                                                 // 20082
    unset: function(object, property, controller) {                                                                    // 20083
      var list = object[property];                                                                                     // 20084
      if (!list) {                                                                                                     // 20085
        return;                                                                                                        // 20086
      }                                                                                                                // 20087
      arrayRemove(list, controller);                                                                                   // 20088
      if (list.length === 0) {                                                                                         // 20089
        delete object[property];                                                                                       // 20090
      }                                                                                                                // 20091
    },                                                                                                                 // 20092
    parentForm: parentForm,                                                                                            // 20093
    $animate: $animate                                                                                                 // 20094
  });                                                                                                                  // 20095
                                                                                                                       // 20096
  /**                                                                                                                  // 20097
   * @ngdoc method                                                                                                     // 20098
   * @name form.FormController#$setDirty                                                                               // 20099
   *                                                                                                                   // 20100
   * @description                                                                                                      // 20101
   * Sets the form to a dirty state.                                                                                   // 20102
   *                                                                                                                   // 20103
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty                                 // 20104
   * state (ng-dirty class). This method will also propagate to parent forms.                                          // 20105
   */                                                                                                                  // 20106
  form.$setDirty = function() {                                                                                        // 20107
    $animate.removeClass(element, PRISTINE_CLASS);                                                                     // 20108
    $animate.addClass(element, DIRTY_CLASS);                                                                           // 20109
    form.$dirty = true;                                                                                                // 20110
    form.$pristine = false;                                                                                            // 20111
    parentForm.$setDirty();                                                                                            // 20112
  };                                                                                                                   // 20113
                                                                                                                       // 20114
  /**                                                                                                                  // 20115
   * @ngdoc method                                                                                                     // 20116
   * @name form.FormController#$setPristine                                                                            // 20117
   *                                                                                                                   // 20118
   * @description                                                                                                      // 20119
   * Sets the form to its pristine state.                                                                              // 20120
   *                                                                                                                   // 20121
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine                         // 20122
   * state (ng-pristine class). This method will also propagate to all the controls contained                          // 20123
   * in this form.                                                                                                     // 20124
   *                                                                                                                   // 20125
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after                      // 20126
   * saving or resetting it.                                                                                           // 20127
   */                                                                                                                  // 20128
  form.$setPristine = function() {                                                                                     // 20129
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);                                   // 20130
    form.$dirty = false;                                                                                               // 20131
    form.$pristine = true;                                                                                             // 20132
    form.$submitted = false;                                                                                           // 20133
    forEach(controls, function(control) {                                                                              // 20134
      control.$setPristine();                                                                                          // 20135
    });                                                                                                                // 20136
  };                                                                                                                   // 20137
                                                                                                                       // 20138
  /**                                                                                                                  // 20139
   * @ngdoc method                                                                                                     // 20140
   * @name form.FormController#$setUntouched                                                                           // 20141
   *                                                                                                                   // 20142
   * @description                                                                                                      // 20143
   * Sets the form to its untouched state.                                                                             // 20144
   *                                                                                                                   // 20145
   * This method can be called to remove the 'ng-touched' class and set the form controls to their                     // 20146
   * untouched state (ng-untouched class).                                                                             // 20147
   *                                                                                                                   // 20148
   * Setting a form controls back to their untouched state is often useful when setting the form                       // 20149
   * back to its pristine state.                                                                                       // 20150
   */                                                                                                                  // 20151
  form.$setUntouched = function() {                                                                                    // 20152
    forEach(controls, function(control) {                                                                              // 20153
      control.$setUntouched();                                                                                         // 20154
    });                                                                                                                // 20155
  };                                                                                                                   // 20156
                                                                                                                       // 20157
  /**                                                                                                                  // 20158
   * @ngdoc method                                                                                                     // 20159
   * @name form.FormController#$setSubmitted                                                                           // 20160
   *                                                                                                                   // 20161
   * @description                                                                                                      // 20162
   * Sets the form to its submitted state.                                                                             // 20163
   */                                                                                                                  // 20164
  form.$setSubmitted = function() {                                                                                    // 20165
    $animate.addClass(element, SUBMITTED_CLASS);                                                                       // 20166
    form.$submitted = true;                                                                                            // 20167
    parentForm.$setSubmitted();                                                                                        // 20168
  };                                                                                                                   // 20169
}                                                                                                                      // 20170
                                                                                                                       // 20171
/**                                                                                                                    // 20172
 * @ngdoc directive                                                                                                    // 20173
 * @name ngForm                                                                                                        // 20174
 * @restrict EAC                                                                                                       // 20175
 *                                                                                                                     // 20176
 * @description                                                                                                        // 20177
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML                                                  // 20178
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a               // 20179
 * sub-group of controls needs to be determined.                                                                       // 20180
 *                                                                                                                     // 20181
 * Note: the purpose of `ngForm` is to group controls,                                                                 // 20182
 * but not to be a replacement for the `<form>` tag with all of its capabilities                                       // 20183
 * (e.g. posting to the server, ...).                                                                                  // 20184
 *                                                                                                                     // 20185
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into             // 20186
 *                       related scope, under this name.                                                               // 20187
 *                                                                                                                     // 20188
 */                                                                                                                    // 20189
                                                                                                                       // 20190
 /**                                                                                                                   // 20191
 * @ngdoc directive                                                                                                    // 20192
 * @name form                                                                                                          // 20193
 * @restrict E                                                                                                         // 20194
 *                                                                                                                     // 20195
 * @description                                                                                                        // 20196
 * Directive that instantiates                                                                                         // 20197
 * {@link form.FormController FormController}.                                                                         // 20198
 *                                                                                                                     // 20199
 * If the `name` attribute is specified, the form controller is published onto the current scope under                 // 20200
 * this name.                                                                                                          // 20201
 *                                                                                                                     // 20202
 * # Alias: {@link ng.directive:ngForm `ngForm`}                                                                       // 20203
 *                                                                                                                     // 20204
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child                      // 20205
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so                            // 20206
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to                    // 20207
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when                        // 20208
 * using Angular validation directives in forms that are dynamically generated using the                               // 20209
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`                // 20210
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an                 // 20211
 * `ngForm` directive and nest these in an outer `form` element.                                                       // 20212
 *                                                                                                                     // 20213
 *                                                                                                                     // 20214
 * # CSS classes                                                                                                       // 20215
 *  - `ng-valid` is set if the form is valid.                                                                          // 20216
 *  - `ng-invalid` is set if the form is invalid.                                                                      // 20217
 *  - `ng-pristine` is set if the form is pristine.                                                                    // 20218
 *  - `ng-dirty` is set if the form is dirty.                                                                          // 20219
 *  - `ng-submitted` is set if the form was submitted.                                                                 // 20220
 *                                                                                                                     // 20221
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 20222
 *                                                                                                                     // 20223
 *                                                                                                                     // 20224
 * # Submitting a form and preventing the default action                                                               // 20225
 *                                                                                                                     // 20226
 * Since the role of forms in client-side Angular applications is different than in classical                          // 20227
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full                    // 20228
 * page reload that sends the data to the server. Instead some javascript logic should be triggered                    // 20229
 * to handle the form submission in an application-specific way.                                                       // 20230
 *                                                                                                                     // 20231
 * For this reason, Angular prevents the default action (form submission to the server) unless the                     // 20232
 * `<form>` element has an `action` attribute specified.                                                               // 20233
 *                                                                                                                     // 20234
 * You can use one of the following two ways to specify what javascript method should be called when                   // 20235
 * a form is submitted:                                                                                                // 20236
 *                                                                                                                     // 20237
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element                                              // 20238
 * - {@link ng.directive:ngClick ngClick} directive on the first                                                       // 20239
  *  button or input field of type submit (input[type=submit])                                                         // 20240
 *                                                                                                                     // 20241
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}              // 20242
 * or {@link ng.directive:ngClick ngClick} directives.                                                                 // 20243
 * This is because of the following form submission rules in the HTML specification:                                   // 20244
 *                                                                                                                     // 20245
 * - If a form has only one input field then hitting enter in this field triggers form submit                          // 20246
 * (`ngSubmit`)                                                                                                        // 20247
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter                             // 20248
 * doesn't trigger submit                                                                                              // 20249
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then                         // 20250
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or                    // 20251
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)                            // 20252
 *                                                                                                                     // 20253
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is                          // 20254
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                        // 20255
 * to have access to the updated model.                                                                                // 20256
 *                                                                                                                     // 20257
 * ## Animation Hooks                                                                                                  // 20258
 *                                                                                                                     // 20259
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.                    // 20260
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any                        // 20261
 * other validations that are performed within the form. Animations in ngForm are similar to how                       // 20262
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well                     // 20263
 * as JS animations.                                                                                                   // 20264
 *                                                                                                                     // 20265
 * The following example shows a simple way to utilize CSS transitions to style a form element                         // 20266
 * that has been rendered as invalid after it has been validated:                                                      // 20267
 *                                                                                                                     // 20268
 * <pre>                                                                                                               // 20269
 * //be sure to include ngAnimate as a module to hook into more                                                        // 20270
 * //advanced animations                                                                                               // 20271
 * .my-form {                                                                                                          // 20272
 *   transition:0.5s linear all;                                                                                       // 20273
 *   background: white;                                                                                                // 20274
 * }                                                                                                                   // 20275
 * .my-form.ng-invalid {                                                                                               // 20276
 *   background: red;                                                                                                  // 20277
 *   color:white;                                                                                                      // 20278
 * }                                                                                                                   // 20279
 * </pre>                                                                                                              // 20280
 *                                                                                                                     // 20281
 * @example                                                                                                            // 20282
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">                          // 20283
      <file name="index.html">                                                                                         // 20284
       <script>                                                                                                        // 20285
         angular.module('formExample', [])                                                                             // 20286
           .controller('FormController', ['$scope', function($scope) {                                                 // 20287
             $scope.userType = 'guest';                                                                                // 20288
           }]);                                                                                                        // 20289
       </script>                                                                                                       // 20290
       <style>                                                                                                         // 20291
        .my-form {                                                                                                     // 20292
          transition:all linear 0.5s;                                                                                  // 20293
          background: transparent;                                                                                     // 20294
        }                                                                                                              // 20295
        .my-form.ng-invalid {                                                                                          // 20296
          background: red;                                                                                             // 20297
        }                                                                                                              // 20298
       </style>                                                                                                        // 20299
       <form name="myForm" ng-controller="FormController" class="my-form">                                             // 20300
         userType: <input name="input" ng-model="userType" required>                                                   // 20301
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>                               // 20302
         <code>userType = {{userType}}</code><br>                                                                      // 20303
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>                                                // 20304
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>                                                // 20305
         <code>myForm.$valid = {{myForm.$valid}}</code><br>                                                            // 20306
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>                                        // 20307
        </form>                                                                                                        // 20308
      </file>                                                                                                          // 20309
      <file name="protractor.js" type="protractor">                                                                    // 20310
        it('should initialize to model', function() {                                                                  // 20311
          var userType = element(by.binding('userType'));                                                              // 20312
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20313
                                                                                                                       // 20314
          expect(userType.getText()).toContain('guest');                                                               // 20315
          expect(valid.getText()).toContain('true');                                                                   // 20316
        });                                                                                                            // 20317
                                                                                                                       // 20318
        it('should be invalid if empty', function() {                                                                  // 20319
          var userType = element(by.binding('userType'));                                                              // 20320
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20321
          var userInput = element(by.model('userType'));                                                               // 20322
                                                                                                                       // 20323
          userInput.clear();                                                                                           // 20324
          userInput.sendKeys('');                                                                                      // 20325
                                                                                                                       // 20326
          expect(userType.getText()).toEqual('userType =');                                                            // 20327
          expect(valid.getText()).toContain('false');                                                                  // 20328
        });                                                                                                            // 20329
      </file>                                                                                                          // 20330
    </example>                                                                                                         // 20331
 *                                                                                                                     // 20332
 * @param {string=} name Name of the form. If specified, the form controller will be published into                    // 20333
 *                       related scope, under this name.                                                               // 20334
 */                                                                                                                    // 20335
var formDirectiveFactory = function(isNgForm) {                                                                        // 20336
  return ['$timeout', '$parse', function($timeout, $parse) {                                                           // 20337
    var formDirective = {                                                                                              // 20338
      name: 'form',                                                                                                    // 20339
      restrict: isNgForm ? 'EAC' : 'E',                                                                                // 20340
      controller: FormController,                                                                                      // 20341
      compile: function ngFormCompile(formElement, attr) {                                                             // 20342
        // Setup initial state of the control                                                                          // 20343
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);                                                    // 20344
                                                                                                                       // 20345
        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);                              // 20346
                                                                                                                       // 20347
        return {                                                                                                       // 20348
          pre: function ngFormPreLink(scope, formElement, attr, controller) {                                          // 20349
            // if `action` attr is not present on the form, prevent the default action (submission)                    // 20350
            if (!('action' in attr)) {                                                                                 // 20351
              // we can't use jq events because if a form is destroyed during submission the default                   // 20352
              // action is not prevented. see #1238                                                                    // 20353
              //                                                                                                       // 20354
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full                      // 20355
              // page reload if the form was destroyed by submission of the form via a click handler                   // 20356
              // on a button in the form. Looks like an IE9 specific bug.                                              // 20357
              var handleFormSubmission = function(event) {                                                             // 20358
                scope.$apply(function() {                                                                              // 20359
                  controller.$commitViewValue();                                                                       // 20360
                  controller.$setSubmitted();                                                                          // 20361
                });                                                                                                    // 20362
                                                                                                                       // 20363
                event.preventDefault();                                                                                // 20364
              };                                                                                                       // 20365
                                                                                                                       // 20366
              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);                                      // 20367
                                                                                                                       // 20368
              // unregister the preventDefault listener so that we don't not leak memory but in a                      // 20369
              // way that will achieve the prevention of the default action.                                           // 20370
              formElement.on('$destroy', function() {                                                                  // 20371
                $timeout(function() {                                                                                  // 20372
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);                               // 20373
                }, 0, false);                                                                                          // 20374
              });                                                                                                      // 20375
            }                                                                                                          // 20376
                                                                                                                       // 20377
            var parentFormCtrl = controller.$$parentForm;                                                              // 20378
            var setter = nameAttr ? getSetter(controller.$name) : noop;                                                // 20379
                                                                                                                       // 20380
            if (nameAttr) {                                                                                            // 20381
              setter(scope, controller);                                                                               // 20382
              attr.$observe(nameAttr, function(newValue) {                                                             // 20383
                if (controller.$name === newValue) return;                                                             // 20384
                setter(scope, undefined);                                                                              // 20385
                parentFormCtrl.$$renameControl(controller, newValue);                                                  // 20386
                setter = getSetter(controller.$name);                                                                  // 20387
                setter(scope, controller);                                                                             // 20388
              });                                                                                                      // 20389
            }                                                                                                          // 20390
            formElement.on('$destroy', function() {                                                                    // 20391
              parentFormCtrl.$removeControl(controller);                                                               // 20392
              setter(scope, undefined);                                                                                // 20393
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards                  // 20394
            });                                                                                                        // 20395
          }                                                                                                            // 20396
        };                                                                                                             // 20397
      }                                                                                                                // 20398
    };                                                                                                                 // 20399
                                                                                                                       // 20400
    return formDirective;                                                                                              // 20401
                                                                                                                       // 20402
    function getSetter(expression) {                                                                                   // 20403
      if (expression === '') {                                                                                         // 20404
        //create an assignable expression, so forms with an empty name can be renamed later                            // 20405
        return $parse('this[""]').assign;                                                                              // 20406
      }                                                                                                                // 20407
      return $parse(expression).assign || noop;                                                                        // 20408
    }                                                                                                                  // 20409
  }];                                                                                                                  // 20410
};                                                                                                                     // 20411
                                                                                                                       // 20412
var formDirective = formDirectiveFactory();                                                                            // 20413
var ngFormDirective = formDirectiveFactory(true);                                                                      // 20414
                                                                                                                       // 20415
/* global VALID_CLASS: false,                                                                                          // 20416
  INVALID_CLASS: false,                                                                                                // 20417
  PRISTINE_CLASS: false,                                                                                               // 20418
  DIRTY_CLASS: false,                                                                                                  // 20419
  UNTOUCHED_CLASS: false,                                                                                              // 20420
  TOUCHED_CLASS: false,                                                                                                // 20421
  ngModelMinErr: false,                                                                                                // 20422
*/                                                                                                                     // 20423
                                                                                                                       // 20424
// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;                      // 20426
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;                // 20427
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;                                               // 20429
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;                                                                         // 20430
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                            // 20431
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;                                                                                 // 20432
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;                                                                                 // 20433
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;                                                           // 20434
                                                                                                                       // 20435
var inputType = {                                                                                                      // 20436
                                                                                                                       // 20437
  /**                                                                                                                  // 20438
   * @ngdoc input                                                                                                      // 20439
   * @name input[text]                                                                                                 // 20440
   *                                                                                                                   // 20441
   * @description                                                                                                      // 20442
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.                    // 20443
   *                                                                                                                   // 20444
   *                                                                                                                   // 20445
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20446
   * @param {string=} name Property name of the form under which the control is published.                             // 20447
   * @param {string=} required Adds `required` validation error key if the value is not entered.                       // 20448
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20449
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20450
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20451
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 20452
   *    minlength.                                                                                                     // 20453
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 20454
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 20455
   *    any length.                                                                                                    // 20456
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 20457
   *    that contains the regular expression body that will be converted to a regular expression                       // 20458
   *    as in the ngPattern directive.                                                                                 // 20459
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 20460
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 20461
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 20462
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 20463
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 20464
   *    `new RegExp('^abc$')`.<br />                                                                                   // 20465
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 20466
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 20467
   *    account.                                                                                                       // 20468
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20469
   *    interaction with the input element.                                                                            // 20470
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                    // 20471
   *    This parameter is ignored for input[type=password] controls, which will never trim the                         // 20472
   *    input.                                                                                                         // 20473
   *                                                                                                                   // 20474
   * @example                                                                                                          // 20475
      <example name="text-input-directive" module="textInputExample">                                                  // 20476
        <file name="index.html">                                                                                       // 20477
         <script>                                                                                                      // 20478
           angular.module('textInputExample', [])                                                                      // 20479
             .controller('ExampleController', ['$scope', function($scope) {                                            // 20480
               $scope.example = {                                                                                      // 20481
                 text: 'guest',                                                                                        // 20482
                 word: /^\s*\w*\s*$/                                                                                   // 20483
               };                                                                                                      // 20484
             }]);                                                                                                      // 20485
         </script>                                                                                                     // 20486
         <form name="myForm" ng-controller="ExampleController">                                                        // 20487
           <label>Single word:                                                                                         // 20488
             <input type="text" name="input" ng-model="example.text"                                                   // 20489
                    ng-pattern="example.word" required ng-trim="false">                                                // 20490
           </label>                                                                                                    // 20491
           <div role="alert">                                                                                          // 20492
             <span class="error" ng-show="myForm.input.$error.required">                                               // 20493
               Required!</span>                                                                                        // 20494
             <span class="error" ng-show="myForm.input.$error.pattern">                                                // 20495
               Single word only!</span>                                                                                // 20496
           </div>                                                                                                      // 20497
           <tt>text = {{example.text}}</tt><br/>                                                                       // 20498
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20499
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20500
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20501
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20502
          </form>                                                                                                      // 20503
        </file>                                                                                                        // 20504
        <file name="protractor.js" type="protractor">                                                                  // 20505
          var text = element(by.binding('example.text'));                                                              // 20506
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 20507
          var input = element(by.model('example.text'));                                                               // 20508
                                                                                                                       // 20509
          it('should initialize to model', function() {                                                                // 20510
            expect(text.getText()).toContain('guest');                                                                 // 20511
            expect(valid.getText()).toContain('true');                                                                 // 20512
          });                                                                                                          // 20513
                                                                                                                       // 20514
          it('should be invalid if empty', function() {                                                                // 20515
            input.clear();                                                                                             // 20516
            input.sendKeys('');                                                                                        // 20517
                                                                                                                       // 20518
            expect(text.getText()).toEqual('text =');                                                                  // 20519
            expect(valid.getText()).toContain('false');                                                                // 20520
          });                                                                                                          // 20521
                                                                                                                       // 20522
          it('should be invalid if multi word', function() {                                                           // 20523
            input.clear();                                                                                             // 20524
            input.sendKeys('hello world');                                                                             // 20525
                                                                                                                       // 20526
            expect(valid.getText()).toContain('false');                                                                // 20527
          });                                                                                                          // 20528
        </file>                                                                                                        // 20529
      </example>                                                                                                       // 20530
   */                                                                                                                  // 20531
  'text': textInputType,                                                                                               // 20532
                                                                                                                       // 20533
    /**                                                                                                                // 20534
     * @ngdoc input                                                                                                    // 20535
     * @name input[date]                                                                                               // 20536
     *                                                                                                                 // 20537
     * @description                                                                                                    // 20538
     * Input with date validation and transformation. In browsers that do not yet support                              // 20539
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601       // 20540
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many                                                 // 20541
     * modern browsers do not yet support this input type, it is important to provide cues to users on the             // 20542
     * expected input format via a placeholder or label.                                                               // 20543
     *                                                                                                                 // 20544
     * The model must always be a Date object, otherwise Angular will throw an error.                                  // 20545
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                  // 20546
     *                                                                                                                 // 20547
     * The timezone to be used to read/write the `Date` instance in the model can be defined using                     // 20548
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.            // 20549
     *                                                                                                                 // 20550
     * @param {string} ngModel Assignable angular expression to data-bind to.                                          // 20551
     * @param {string=} name Property name of the form under which the control is published.                           // 20552
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO date string (yyyy-MM-dd).                                                                             // 20554
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO date string (yyyy-MM-dd).                                                                           // 20556
     * @param {string=} required Sets `required` validation error key if the value is not entered.                     // 20557
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                   // 20558
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                    // 20559
     *    `required` when you want to data-bind to the `required` attribute.                                           // 20560
     * @param {string=} ngChange Angular expression to be executed when input changes due to user                      // 20561
     *    interaction with the input element.                                                                          // 20562
     *                                                                                                                 // 20563
     * @example                                                                                                        // 20564
     <example name="date-input-directive" module="dateInputExample">                                                   // 20565
     <file name="index.html">                                                                                          // 20566
       <script>                                                                                                        // 20567
          angular.module('dateInputExample', [])                                                                       // 20568
            .controller('DateController', ['$scope', function($scope) {                                                // 20569
              $scope.example = {                                                                                       // 20570
                value: new Date(2013, 9, 22)                                                                           // 20571
              };                                                                                                       // 20572
            }]);                                                                                                       // 20573
       </script>                                                                                                       // 20574
       <form name="myForm" ng-controller="DateController as dateCtrl">                                                 // 20575
          <label for="exampleInput">Pick a date in 2013:</label>                                                       // 20576
          <input type="date" id="exampleInput" name="input" ng-model="example.value"                                   // 20577
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />                                   // 20578
          <div role="alert">                                                                                           // 20579
            <span class="error" ng-show="myForm.input.$error.required">                                                // 20580
                Required!</span>                                                                                       // 20581
            <span class="error" ng-show="myForm.input.$error.date">                                                    // 20582
                Not a valid date!</span>                                                                               // 20583
           </div>                                                                                                      // 20584
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>                                                // 20585
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 20586
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 20587
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 20588
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 20589
       </form>                                                                                                         // 20590
     </file>                                                                                                           // 20591
     <file name="protractor.js" type="protractor">                                                                     // 20592
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));                                         // 20593
        var valid = element(by.binding('myForm.input.$valid'));                                                        // 20594
        var input = element(by.model('example.value'));                                                                // 20595
                                                                                                                       // 20596
        // currently protractor/webdriver does not support                                                             // 20597
        // sending keys to all known HTML5 input controls                                                              // 20598
        // for various browsers (see https://github.com/angular/protractor/issues/562).                                // 20599
        function setInput(val) {                                                                                       // 20600
          // set the value of the element and force validation.                                                        // 20601
          var scr = "var ipt = document.getElementById('exampleInput'); " +                                            // 20602
          "ipt.value = '" + val + "';" +                                                                               // 20603
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";    // 20604
          browser.executeScript(scr);                                                                                  // 20605
        }                                                                                                              // 20606
                                                                                                                       // 20607
        it('should initialize to model', function() {                                                                  // 20608
          expect(value.getText()).toContain('2013-10-22');                                                             // 20609
          expect(valid.getText()).toContain('myForm.input.$valid = true');                                             // 20610
        });                                                                                                            // 20611
                                                                                                                       // 20612
        it('should be invalid if empty', function() {                                                                  // 20613
          setInput('');                                                                                                // 20614
          expect(value.getText()).toEqual('value =');                                                                  // 20615
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20616
        });                                                                                                            // 20617
                                                                                                                       // 20618
        it('should be invalid if over max', function() {                                                               // 20619
          setInput('2015-01-01');                                                                                      // 20620
          expect(value.getText()).toContain('');                                                                       // 20621
          expect(valid.getText()).toContain('myForm.input.$valid = false');                                            // 20622
        });                                                                                                            // 20623
     </file>                                                                                                           // 20624
     </example>                                                                                                        // 20625
     */                                                                                                                // 20626
  'date': createDateInputType('date', DATE_REGEXP,                                                                     // 20627
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),                                                          // 20628
         'yyyy-MM-dd'),                                                                                                // 20629
                                                                                                                       // 20630
   /**                                                                                                                 // 20631
    * @ngdoc input                                                                                                     // 20632
    * @name input[datetime-local]                                                                                      // 20633
    *                                                                                                                  // 20634
    * @description                                                                                                     // 20635
    * Input with datetime validation and transformation. In browsers that do not yet support                           // 20636
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20637
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.                                 // 20638
    *                                                                                                                  // 20639
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20640
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20641
    *                                                                                                                  // 20642
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20643
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20644
    *                                                                                                                  // 20645
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20646
    * @param {string=} name Property name of the form under which the control is published.                            // 20647
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a // 20648
    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).                                                                 // 20649
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).                                                               // 20651
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20652
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20653
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20654
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20655
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20656
    *    interaction with the input element.                                                                           // 20657
    *                                                                                                                  // 20658
    * @example                                                                                                         // 20659
    <example name="datetimelocal-input-directive" module="dateExample">                                                // 20660
    <file name="index.html">                                                                                           // 20661
      <script>                                                                                                         // 20662
        angular.module('dateExample', [])                                                                              // 20663
          .controller('DateController', ['$scope', function($scope) {                                                  // 20664
            $scope.example = {                                                                                         // 20665
              value: new Date(2010, 11, 28, 14, 57)                                                                    // 20666
            };                                                                                                         // 20667
          }]);                                                                                                         // 20668
      </script>                                                                                                        // 20669
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20670
        <label for="exampleInput">Pick a date between in 2013:</label>                                                 // 20671
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"                           // 20672
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />          // 20673
        <div role="alert">                                                                                             // 20674
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20675
              Required!</span>                                                                                         // 20676
          <span class="error" ng-show="myForm.input.$error.datetimelocal">                                             // 20677
              Not a valid date!</span>                                                                                 // 20678
        </div>                                                                                                         // 20679
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>                                          // 20680
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20681
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20682
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20683
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20684
      </form>                                                                                                          // 20685
    </file>                                                                                                            // 20686
    <file name="protractor.js" type="protractor">                                                                      // 20687
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));                                  // 20688
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20689
      var input = element(by.model('example.value'));                                                                  // 20690
                                                                                                                       // 20691
      // currently protractor/webdriver does not support                                                               // 20692
      // sending keys to all known HTML5 input controls                                                                // 20693
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20694
      function setInput(val) {                                                                                         // 20695
        // set the value of the element and force validation.                                                          // 20696
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20697
        "ipt.value = '" + val + "';" +                                                                                 // 20698
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20699
        browser.executeScript(scr);                                                                                    // 20700
      }                                                                                                                // 20701
                                                                                                                       // 20702
      it('should initialize to model', function() {                                                                    // 20703
        expect(value.getText()).toContain('2010-12-28T14:57:00');                                                      // 20704
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20705
      });                                                                                                              // 20706
                                                                                                                       // 20707
      it('should be invalid if empty', function() {                                                                    // 20708
        setInput('');                                                                                                  // 20709
        expect(value.getText()).toEqual('value =');                                                                    // 20710
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20711
      });                                                                                                              // 20712
                                                                                                                       // 20713
      it('should be invalid if over max', function() {                                                                 // 20714
        setInput('2015-01-01T23:59:00');                                                                               // 20715
        expect(value.getText()).toContain('');                                                                         // 20716
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20717
      });                                                                                                              // 20718
    </file>                                                                                                            // 20719
    </example>                                                                                                         // 20720
    */                                                                                                                 // 20721
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,                                         // 20722
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),                           // 20723
      'yyyy-MM-ddTHH:mm:ss.sss'),                                                                                      // 20724
                                                                                                                       // 20725
  /**                                                                                                                  // 20726
   * @ngdoc input                                                                                                      // 20727
   * @name input[time]                                                                                                 // 20728
   *                                                                                                                   // 20729
   * @description                                                                                                      // 20730
   * Input with time validation and transformation. In browsers that do not yet support                                // 20731
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601     // 20732
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.                    // 20734
   *                                                                                                                   // 20735
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20736
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20737
   *                                                                                                                   // 20738
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20739
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20740
   *                                                                                                                   // 20741
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20742
   * @param {string=} name Property name of the form under which the control is published.                             // 20743
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a  // 20744
   * valid ISO time format (HH:mm:ss).                                                                                 // 20745
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
   * valid ISO time format (HH:mm:ss).                                                                                 // 20747
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20748
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20749
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20750
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20751
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20752
   *    interaction with the input element.                                                                            // 20753
   *                                                                                                                   // 20754
   * @example                                                                                                          // 20755
   <example name="time-input-directive" module="timeExample">                                                          // 20756
   <file name="index.html">                                                                                            // 20757
     <script>                                                                                                          // 20758
      angular.module('timeExample', [])                                                                                // 20759
        .controller('DateController', ['$scope', function($scope) {                                                    // 20760
          $scope.example = {                                                                                           // 20761
            value: new Date(1970, 0, 1, 14, 57, 0)                                                                     // 20762
          };                                                                                                           // 20763
        }]);                                                                                                           // 20764
     </script>                                                                                                         // 20765
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20766
        <label for="exampleInput">Pick a between 8am and 5pm:</label>                                                  // 20767
        <input type="time" id="exampleInput" name="input" ng-model="example.value"                                     // 20768
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />                                           // 20769
        <div role="alert">                                                                                             // 20770
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20771
              Required!</span>                                                                                         // 20772
          <span class="error" ng-show="myForm.input.$error.time">                                                      // 20773
              Not a valid date!</span>                                                                                 // 20774
        </div>                                                                                                         // 20775
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>                                                     // 20776
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20777
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20778
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20779
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20780
     </form>                                                                                                           // 20781
   </file>                                                                                                             // 20782
   <file name="protractor.js" type="protractor">                                                                       // 20783
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));                                             // 20784
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20785
      var input = element(by.model('example.value'));                                                                  // 20786
                                                                                                                       // 20787
      // currently protractor/webdriver does not support                                                               // 20788
      // sending keys to all known HTML5 input controls                                                                // 20789
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20790
      function setInput(val) {                                                                                         // 20791
        // set the value of the element and force validation.                                                          // 20792
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20793
        "ipt.value = '" + val + "';" +                                                                                 // 20794
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20795
        browser.executeScript(scr);                                                                                    // 20796
      }                                                                                                                // 20797
                                                                                                                       // 20798
      it('should initialize to model', function() {                                                                    // 20799
        expect(value.getText()).toContain('14:57:00');                                                                 // 20800
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20801
      });                                                                                                              // 20802
                                                                                                                       // 20803
      it('should be invalid if empty', function() {                                                                    // 20804
        setInput('');                                                                                                  // 20805
        expect(value.getText()).toEqual('value =');                                                                    // 20806
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20807
      });                                                                                                              // 20808
                                                                                                                       // 20809
      it('should be invalid if over max', function() {                                                                 // 20810
        setInput('23:59:00');                                                                                          // 20811
        expect(value.getText()).toContain('');                                                                         // 20812
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20813
      });                                                                                                              // 20814
   </file>                                                                                                             // 20815
   </example>                                                                                                          // 20816
   */                                                                                                                  // 20817
  'time': createDateInputType('time', TIME_REGEXP,                                                                     // 20818
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),                                                        // 20819
     'HH:mm:ss.sss'),                                                                                                  // 20820
                                                                                                                       // 20821
   /**                                                                                                                 // 20822
    * @ngdoc input                                                                                                     // 20823
    * @name input[week]                                                                                                // 20824
    *                                                                                                                  // 20825
    * @description                                                                                                     // 20826
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support           // 20827
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20828
    * week format (yyyy-W##), for example: `2013-W02`.                                                                 // 20829
    *                                                                                                                  // 20830
    * The model must always be a Date object, otherwise Angular will throw an error.                                   // 20831
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                   // 20832
    *                                                                                                                  // 20833
    * The timezone to be used to read/write the `Date` instance in the model can be defined using                      // 20834
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.             // 20835
    *                                                                                                                  // 20836
    * @param {string} ngModel Assignable angular expression to data-bind to.                                           // 20837
    * @param {string=} name Property name of the form under which the control is published.                            // 20838
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a // 20839
    * valid ISO week format (yyyy-W##).                                                                                // 20840
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO week format (yyyy-W##).                                                                              // 20842
    * @param {string=} required Sets `required` validation error key if the value is not entered.                      // 20843
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                    // 20844
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                     // 20845
    *    `required` when you want to data-bind to the `required` attribute.                                            // 20846
    * @param {string=} ngChange Angular expression to be executed when input changes due to user                       // 20847
    *    interaction with the input element.                                                                           // 20848
    *                                                                                                                  // 20849
    * @example                                                                                                         // 20850
    <example name="week-input-directive" module="weekExample">                                                         // 20851
    <file name="index.html">                                                                                           // 20852
      <script>                                                                                                         // 20853
      angular.module('weekExample', [])                                                                                // 20854
        .controller('DateController', ['$scope', function($scope) {                                                    // 20855
          $scope.example = {                                                                                           // 20856
            value: new Date(2013, 0, 3)                                                                                // 20857
          };                                                                                                           // 20858
        }]);                                                                                                           // 20859
      </script>                                                                                                        // 20860
      <form name="myForm" ng-controller="DateController as dateCtrl">                                                  // 20861
        <label>Pick a date between in 2013:                                                                            // 20862
          <input id="exampleInput" type="week" name="input" ng-model="example.value"                                   // 20863
                 placeholder="YYYY-W##" min="2012-W32"                                                                 // 20864
                 max="2013-W52" required />                                                                            // 20865
        </label>                                                                                                       // 20866
        <div role="alert">                                                                                             // 20867
          <span class="error" ng-show="myForm.input.$error.required">                                                  // 20868
              Required!</span>                                                                                         // 20869
          <span class="error" ng-show="myForm.input.$error.week">                                                      // 20870
              Not a valid date!</span>                                                                                 // 20871
        </div>                                                                                                         // 20872
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>                                                     // 20873
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                    // 20874
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                    // 20875
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 20876
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 20877
      </form>                                                                                                          // 20878
    </file>                                                                                                            // 20879
    <file name="protractor.js" type="protractor">                                                                      // 20880
      var value = element(by.binding('example.value | date: "yyyy-Www"'));                                             // 20881
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20882
      var input = element(by.model('example.value'));                                                                  // 20883
                                                                                                                       // 20884
      // currently protractor/webdriver does not support                                                               // 20885
      // sending keys to all known HTML5 input controls                                                                // 20886
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20887
      function setInput(val) {                                                                                         // 20888
        // set the value of the element and force validation.                                                          // 20889
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20890
        "ipt.value = '" + val + "';" +                                                                                 // 20891
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20892
        browser.executeScript(scr);                                                                                    // 20893
      }                                                                                                                // 20894
                                                                                                                       // 20895
      it('should initialize to model', function() {                                                                    // 20896
        expect(value.getText()).toContain('2013-W01');                                                                 // 20897
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20898
      });                                                                                                              // 20899
                                                                                                                       // 20900
      it('should be invalid if empty', function() {                                                                    // 20901
        setInput('');                                                                                                  // 20902
        expect(value.getText()).toEqual('value =');                                                                    // 20903
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20904
      });                                                                                                              // 20905
                                                                                                                       // 20906
      it('should be invalid if over max', function() {                                                                 // 20907
        setInput('2015-W01');                                                                                          // 20908
        expect(value.getText()).toContain('');                                                                         // 20909
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20910
      });                                                                                                              // 20911
    </file>                                                                                                            // 20912
    </example>                                                                                                         // 20913
    */                                                                                                                 // 20914
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),                                            // 20915
                                                                                                                       // 20916
  /**                                                                                                                  // 20917
   * @ngdoc input                                                                                                      // 20918
   * @name input[month]                                                                                                // 20919
   *                                                                                                                   // 20920
   * @description                                                                                                      // 20921
   * Input with month validation and transformation. In browsers that do not yet support                               // 20922
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601    // 20923
   * month format (yyyy-MM), for example: `2009-01`.                                                                   // 20924
   *                                                                                                                   // 20925
   * The model must always be a Date object, otherwise Angular will throw an error.                                    // 20926
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.                    // 20927
   * If the model is not set to the first of the month, the next view to model update will set it                      // 20928
   * to the first of the month.                                                                                        // 20929
   *                                                                                                                   // 20930
   * The timezone to be used to read/write the `Date` instance in the model can be defined using                       // 20931
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.              // 20932
   *                                                                                                                   // 20933
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 20934
   * @param {string=} name Property name of the form under which the control is published.                             // 20935
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be    // 20936
   * a valid ISO month format (yyyy-MM).                                                                               // 20937
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must    // 20938
   * be a valid ISO month format (yyyy-MM).                                                                            // 20939
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 20940
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 20941
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 20942
   *    `required` when you want to data-bind to the `required` attribute.                                             // 20943
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 20944
   *    interaction with the input element.                                                                            // 20945
   *                                                                                                                   // 20946
   * @example                                                                                                          // 20947
   <example name="month-input-directive" module="monthExample">                                                        // 20948
   <file name="index.html">                                                                                            // 20949
     <script>                                                                                                          // 20950
      angular.module('monthExample', [])                                                                               // 20951
        .controller('DateController', ['$scope', function($scope) {                                                    // 20952
          $scope.example = {                                                                                           // 20953
            value: new Date(2013, 9, 1)                                                                                // 20954
          };                                                                                                           // 20955
        }]);                                                                                                           // 20956
     </script>                                                                                                         // 20957
     <form name="myForm" ng-controller="DateController as dateCtrl">                                                   // 20958
       <label for="exampleInput">Pick a month in 2013:</label>                                                         // 20959
       <input id="exampleInput" type="month" name="input" ng-model="example.value"                                     // 20960
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />                                                // 20961
       <div role="alert">                                                                                              // 20962
         <span class="error" ng-show="myForm.input.$error.required">                                                   // 20963
            Required!</span>                                                                                           // 20964
         <span class="error" ng-show="myForm.input.$error.month">                                                      // 20965
            Not a valid month!</span>                                                                                  // 20966
       </div>                                                                                                          // 20967
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>                                                       // 20968
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                     // 20969
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                     // 20970
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                 // 20971
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                             // 20972
     </form>                                                                                                           // 20973
   </file>                                                                                                             // 20974
   <file name="protractor.js" type="protractor">                                                                       // 20975
      var value = element(by.binding('example.value | date: "yyyy-MM"'));                                              // 20976
      var valid = element(by.binding('myForm.input.$valid'));                                                          // 20977
      var input = element(by.model('example.value'));                                                                  // 20978
                                                                                                                       // 20979
      // currently protractor/webdriver does not support                                                               // 20980
      // sending keys to all known HTML5 input controls                                                                // 20981
      // for various browsers (https://github.com/angular/protractor/issues/562).                                      // 20982
      function setInput(val) {                                                                                         // 20983
        // set the value of the element and force validation.                                                          // 20984
        var scr = "var ipt = document.getElementById('exampleInput'); " +                                              // 20985
        "ipt.value = '" + val + "';" +                                                                                 // 20986
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";      // 20987
        browser.executeScript(scr);                                                                                    // 20988
      }                                                                                                                // 20989
                                                                                                                       // 20990
      it('should initialize to model', function() {                                                                    // 20991
        expect(value.getText()).toContain('2013-10');                                                                  // 20992
        expect(valid.getText()).toContain('myForm.input.$valid = true');                                               // 20993
      });                                                                                                              // 20994
                                                                                                                       // 20995
      it('should be invalid if empty', function() {                                                                    // 20996
        setInput('');                                                                                                  // 20997
        expect(value.getText()).toEqual('value =');                                                                    // 20998
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 20999
      });                                                                                                              // 21000
                                                                                                                       // 21001
      it('should be invalid if over max', function() {                                                                 // 21002
        setInput('2015-01');                                                                                           // 21003
        expect(value.getText()).toContain('');                                                                         // 21004
        expect(valid.getText()).toContain('myForm.input.$valid = false');                                              // 21005
      });                                                                                                              // 21006
   </file>                                                                                                             // 21007
   </example>                                                                                                          // 21008
   */                                                                                                                  // 21009
  'month': createDateInputType('month', MONTH_REGEXP,                                                                  // 21010
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),                                                                   // 21011
     'yyyy-MM'),                                                                                                       // 21012
                                                                                                                       // 21013
  /**                                                                                                                  // 21014
   * @ngdoc input                                                                                                      // 21015
   * @name input[number]                                                                                               // 21016
   *                                                                                                                   // 21017
   * @description                                                                                                      // 21018
   * Text input with number validation and transformation. Sets the `number` validation                                // 21019
   * error if not a valid number.                                                                                      // 21020
   *                                                                                                                   // 21021
   * <div class="alert alert-warning">                                                                                 // 21022
   * The model must always be of type `number` otherwise Angular will throw an error.                                  // 21023
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}                          // 21024
   * error docs for more information and an example of how to convert your model if necessary.                         // 21025
   * </div>                                                                                                            // 21026
   *                                                                                                                   // 21027
   * ## Issues with HTML5 constraint validation                                                                        // 21028
   *                                                                                                                   // 21029
   * In browsers that follow the                                                                                       // 21030
   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),          // 21031
   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.              // 21032
   * If a non-number is entered in the input, the browser will report the value as an empty string,                    // 21033
   * which means the view / model values in `ngModel` and subsequently the scope value                                 // 21034
   * will also be an empty string.                                                                                     // 21035
   *                                                                                                                   // 21036
   *                                                                                                                   // 21037
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21038
   * @param {string=} name Property name of the form under which the control is published.                             // 21039
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.                 // 21040
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.              // 21041
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21042
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21043
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21044
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21045
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21046
   *    minlength.                                                                                                     // 21047
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21048
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21049
   *    any length.                                                                                                    // 21050
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21051
   *    that contains the regular expression body that will be converted to a regular expression                       // 21052
   *    as in the ngPattern directive.                                                                                 // 21053
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21054
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21055
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21056
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21057
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21058
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21059
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21060
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21061
   *    account.                                                                                                       // 21062
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21063
   *    interaction with the input element.                                                                            // 21064
   *                                                                                                                   // 21065
   * @example                                                                                                          // 21066
      <example name="number-input-directive" module="numberExample">                                                   // 21067
        <file name="index.html">                                                                                       // 21068
         <script>                                                                                                      // 21069
           angular.module('numberExample', [])                                                                         // 21070
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21071
               $scope.example = {                                                                                      // 21072
                 value: 12                                                                                             // 21073
               };                                                                                                      // 21074
             }]);                                                                                                      // 21075
         </script>                                                                                                     // 21076
         <form name="myForm" ng-controller="ExampleController">                                                        // 21077
           <label>Number:                                                                                              // 21078
             <input type="number" name="input" ng-model="example.value"                                                // 21079
                    min="0" max="99" required>                                                                         // 21080
          </label>                                                                                                     // 21081
           <div role="alert">                                                                                          // 21082
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21083
               Required!</span>                                                                                        // 21084
             <span class="error" ng-show="myForm.input.$error.number">                                                 // 21085
               Not valid number!</span>                                                                                // 21086
           </div>                                                                                                      // 21087
           <tt>value = {{example.value}}</tt><br/>                                                                     // 21088
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21089
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21090
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21091
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21092
          </form>                                                                                                      // 21093
        </file>                                                                                                        // 21094
        <file name="protractor.js" type="protractor">                                                                  // 21095
          var value = element(by.binding('example.value'));                                                            // 21096
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21097
          var input = element(by.model('example.value'));                                                              // 21098
                                                                                                                       // 21099
          it('should initialize to model', function() {                                                                // 21100
            expect(value.getText()).toContain('12');                                                                   // 21101
            expect(valid.getText()).toContain('true');                                                                 // 21102
          });                                                                                                          // 21103
                                                                                                                       // 21104
          it('should be invalid if empty', function() {                                                                // 21105
            input.clear();                                                                                             // 21106
            input.sendKeys('');                                                                                        // 21107
            expect(value.getText()).toEqual('value =');                                                                // 21108
            expect(valid.getText()).toContain('false');                                                                // 21109
          });                                                                                                          // 21110
                                                                                                                       // 21111
          it('should be invalid if over max', function() {                                                             // 21112
            input.clear();                                                                                             // 21113
            input.sendKeys('123');                                                                                     // 21114
            expect(value.getText()).toEqual('value =');                                                                // 21115
            expect(valid.getText()).toContain('false');                                                                // 21116
          });                                                                                                          // 21117
        </file>                                                                                                        // 21118
      </example>                                                                                                       // 21119
   */                                                                                                                  // 21120
  'number': numberInputType,                                                                                           // 21121
                                                                                                                       // 21122
                                                                                                                       // 21123
  /**                                                                                                                  // 21124
   * @ngdoc input                                                                                                      // 21125
   * @name input[url]                                                                                                  // 21126
   *                                                                                                                   // 21127
   * @description                                                                                                      // 21128
   * Text input with URL validation. Sets the `url` validation error key if the content is not a                       // 21129
   * valid URL.                                                                                                        // 21130
   *                                                                                                                   // 21131
   * <div class="alert alert-warning">                                                                                 // 21132
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex                               // 21133
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify                             // 21134
   * the built-in validators (see the {@link guide/forms Forms guide})                                                 // 21135
   * </div>                                                                                                            // 21136
   *                                                                                                                   // 21137
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21138
   * @param {string=} name Property name of the form under which the control is published.                             // 21139
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21140
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21141
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21142
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21143
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21144
   *    minlength.                                                                                                     // 21145
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21146
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21147
   *    any length.                                                                                                    // 21148
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21149
   *    that contains the regular expression body that will be converted to a regular expression                       // 21150
   *    as in the ngPattern directive.                                                                                 // 21151
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21152
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21153
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21154
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21155
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21156
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21157
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21158
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21159
   *    account.                                                                                                       // 21160
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21161
   *    interaction with the input element.                                                                            // 21162
   *                                                                                                                   // 21163
   * @example                                                                                                          // 21164
      <example name="url-input-directive" module="urlExample">                                                         // 21165
        <file name="index.html">                                                                                       // 21166
         <script>                                                                                                      // 21167
           angular.module('urlExample', [])                                                                            // 21168
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21169
               $scope.url = {                                                                                          // 21170
                 text: 'http://google.com'                                                                             // 21171
               };                                                                                                      // 21172
             }]);                                                                                                      // 21173
         </script>                                                                                                     // 21174
         <form name="myForm" ng-controller="ExampleController">                                                        // 21175
           <label>URL:                                                                                                 // 21176
             <input type="url" name="input" ng-model="url.text" required>                                              // 21177
           <label>                                                                                                     // 21178
           <div role="alert">                                                                                          // 21179
             <span class="error" ng-show="myForm.input.$error.required">                                               // 21180
               Required!</span>                                                                                        // 21181
             <span class="error" ng-show="myForm.input.$error.url">                                                    // 21182
               Not valid url!</span>                                                                                   // 21183
           </div>                                                                                                      // 21184
           <tt>text = {{url.text}}</tt><br/>                                                                           // 21185
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                                 // 21186
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                                 // 21187
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                             // 21188
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                         // 21189
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>                                                   // 21190
          </form>                                                                                                      // 21191
        </file>                                                                                                        // 21192
        <file name="protractor.js" type="protractor">                                                                  // 21193
          var text = element(by.binding('url.text'));                                                                  // 21194
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21195
          var input = element(by.model('url.text'));                                                                   // 21196
                                                                                                                       // 21197
          it('should initialize to model', function() {                                                                // 21198
            expect(text.getText()).toContain('http://google.com');                                                     // 21199
            expect(valid.getText()).toContain('true');                                                                 // 21200
          });                                                                                                          // 21201
                                                                                                                       // 21202
          it('should be invalid if empty', function() {                                                                // 21203
            input.clear();                                                                                             // 21204
            input.sendKeys('');                                                                                        // 21205
                                                                                                                       // 21206
            expect(text.getText()).toEqual('text =');                                                                  // 21207
            expect(valid.getText()).toContain('false');                                                                // 21208
          });                                                                                                          // 21209
                                                                                                                       // 21210
          it('should be invalid if not url', function() {                                                              // 21211
            input.clear();                                                                                             // 21212
            input.sendKeys('box');                                                                                     // 21213
                                                                                                                       // 21214
            expect(valid.getText()).toContain('false');                                                                // 21215
          });                                                                                                          // 21216
        </file>                                                                                                        // 21217
      </example>                                                                                                       // 21218
   */                                                                                                                  // 21219
  'url': urlInputType,                                                                                                 // 21220
                                                                                                                       // 21221
                                                                                                                       // 21222
  /**                                                                                                                  // 21223
   * @ngdoc input                                                                                                      // 21224
   * @name input[email]                                                                                                // 21225
   *                                                                                                                   // 21226
   * @description                                                                                                      // 21227
   * Text input with email validation. Sets the `email` validation error key if not a valid email                      // 21228
   * address.                                                                                                          // 21229
   *                                                                                                                   // 21230
   * <div class="alert alert-warning">                                                                                 // 21231
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex                  // 21232
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can                    // 21233
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})                      // 21234
   * </div>                                                                                                            // 21235
   *                                                                                                                   // 21236
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21237
   * @param {string=} name Property name of the form under which the control is published.                             // 21238
   * @param {string=} required Sets `required` validation error key if the value is not entered.                       // 21239
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                     // 21240
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                      // 21241
   *    `required` when you want to data-bind to the `required` attribute.                                             // 21242
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                   // 21243
   *    minlength.                                                                                                     // 21244
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                    // 21245
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of                     // 21246
   *    any length.                                                                                                    // 21247
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string              // 21248
   *    that contains the regular expression body that will be converted to a regular expression                       // 21249
   *    as in the ngPattern directive.                                                                                 // 21250
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                // 21251
   *    a RegExp found by evaluating the Angular expression given in the attribute value.                              // 21252
   *    If the expression evaluates to a RegExp object, then this is used directly.                                    // 21253
   *    If the expression evaluates to a string, then it will be converted to a RegExp                                 // 21254
   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                        // 21255
   *    `new RegExp('^abc$')`.<br />                                                                                   // 21256
   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                   // 21257
   *    start at the index of the last search's match, thus not taking the whole input value into                      // 21258
   *    account.                                                                                                       // 21259
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21260
   *    interaction with the input element.                                                                            // 21261
   *                                                                                                                   // 21262
   * @example                                                                                                          // 21263
      <example name="email-input-directive" module="emailExample">                                                     // 21264
        <file name="index.html">                                                                                       // 21265
         <script>                                                                                                      // 21266
           angular.module('emailExample', [])                                                                          // 21267
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21268
               $scope.email = {                                                                                        // 21269
                 text: 'me@example.com'                                                                                // 21270
               };                                                                                                      // 21271
             }]);                                                                                                      // 21272
         </script>                                                                                                     // 21273
           <form name="myForm" ng-controller="ExampleController">                                                      // 21274
             <label>Email:                                                                                             // 21275
               <input type="email" name="input" ng-model="email.text" required>                                        // 21276
             </label>                                                                                                  // 21277
             <div role="alert">                                                                                        // 21278
               <span class="error" ng-show="myForm.input.$error.required">                                             // 21279
                 Required!</span>                                                                                      // 21280
               <span class="error" ng-show="myForm.input.$error.email">                                                // 21281
                 Not valid email!</span>                                                                               // 21282
             </div>                                                                                                    // 21283
             <tt>text = {{email.text}}</tt><br/>                                                                       // 21284
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>                                               // 21285
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>                                               // 21286
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                           // 21287
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                       // 21288
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>                                             // 21289
           </form>                                                                                                     // 21290
         </file>                                                                                                       // 21291
        <file name="protractor.js" type="protractor">                                                                  // 21292
          var text = element(by.binding('email.text'));                                                                // 21293
          var valid = element(by.binding('myForm.input.$valid'));                                                      // 21294
          var input = element(by.model('email.text'));                                                                 // 21295
                                                                                                                       // 21296
          it('should initialize to model', function() {                                                                // 21297
            expect(text.getText()).toContain('me@example.com');                                                        // 21298
            expect(valid.getText()).toContain('true');                                                                 // 21299
          });                                                                                                          // 21300
                                                                                                                       // 21301
          it('should be invalid if empty', function() {                                                                // 21302
            input.clear();                                                                                             // 21303
            input.sendKeys('');                                                                                        // 21304
            expect(text.getText()).toEqual('text =');                                                                  // 21305
            expect(valid.getText()).toContain('false');                                                                // 21306
          });                                                                                                          // 21307
                                                                                                                       // 21308
          it('should be invalid if not email', function() {                                                            // 21309
            input.clear();                                                                                             // 21310
            input.sendKeys('xxx');                                                                                     // 21311
                                                                                                                       // 21312
            expect(valid.getText()).toContain('false');                                                                // 21313
          });                                                                                                          // 21314
        </file>                                                                                                        // 21315
      </example>                                                                                                       // 21316
   */                                                                                                                  // 21317
  'email': emailInputType,                                                                                             // 21318
                                                                                                                       // 21319
                                                                                                                       // 21320
  /**                                                                                                                  // 21321
   * @ngdoc input                                                                                                      // 21322
   * @name input[radio]                                                                                                // 21323
   *                                                                                                                   // 21324
   * @description                                                                                                      // 21325
   * HTML radio button.                                                                                                // 21326
   *                                                                                                                   // 21327
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21328
   * @param {string} value The value to which the `ngModel` expression should be set when selected.                    // 21329
   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,                    // 21330
   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).                                       // 21331
   * @param {string=} name Property name of the form under which the control is published.                             // 21332
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21333
   *    interaction with the input element.                                                                            // 21334
   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio                       // 21335
   *    is selected. Should be used instead of the `value` attribute if you need                                       // 21336
   *    a non-string `ngModel` (`boolean`, `array`, ...).                                                              // 21337
   *                                                                                                                   // 21338
   * @example                                                                                                          // 21339
      <example name="radio-input-directive" module="radioExample">                                                     // 21340
        <file name="index.html">                                                                                       // 21341
         <script>                                                                                                      // 21342
           angular.module('radioExample', [])                                                                          // 21343
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21344
               $scope.color = {                                                                                        // 21345
                 name: 'blue'                                                                                          // 21346
               };                                                                                                      // 21347
               $scope.specialValue = {                                                                                 // 21348
                 "id": "12345",                                                                                        // 21349
                 "value": "green"                                                                                      // 21350
               };                                                                                                      // 21351
             }]);                                                                                                      // 21352
         </script>                                                                                                     // 21353
         <form name="myForm" ng-controller="ExampleController">                                                        // 21354
           <label>                                                                                                     // 21355
             <input type="radio" ng-model="color.name" value="red">                                                    // 21356
             Red                                                                                                       // 21357
           </label><br/>                                                                                               // 21358
           <label>                                                                                                     // 21359
             <input type="radio" ng-model="color.name" ng-value="specialValue">                                        // 21360
             Green                                                                                                     // 21361
           </label><br/>                                                                                               // 21362
           <label>                                                                                                     // 21363
             <input type="radio" ng-model="color.name" value="blue">                                                   // 21364
             Blue                                                                                                      // 21365
           </label><br/>                                                                                               // 21366
           <tt>color = {{color.name | json}}</tt><br/>                                                                 // 21367
          </form>                                                                                                      // 21368
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.        // 21369
        </file>                                                                                                        // 21370
        <file name="protractor.js" type="protractor">                                                                  // 21371
          it('should change state', function() {                                                                       // 21372
            var color = element(by.binding('color.name'));                                                             // 21373
                                                                                                                       // 21374
            expect(color.getText()).toContain('blue');                                                                 // 21375
                                                                                                                       // 21376
            element.all(by.model('color.name')).get(0).click();                                                        // 21377
                                                                                                                       // 21378
            expect(color.getText()).toContain('red');                                                                  // 21379
          });                                                                                                          // 21380
        </file>                                                                                                        // 21381
      </example>                                                                                                       // 21382
   */                                                                                                                  // 21383
  'radio': radioInputType,                                                                                             // 21384
                                                                                                                       // 21385
                                                                                                                       // 21386
  /**                                                                                                                  // 21387
   * @ngdoc input                                                                                                      // 21388
   * @name input[checkbox]                                                                                             // 21389
   *                                                                                                                   // 21390
   * @description                                                                                                      // 21391
   * HTML checkbox.                                                                                                    // 21392
   *                                                                                                                   // 21393
   * @param {string} ngModel Assignable angular expression to data-bind to.                                            // 21394
   * @param {string=} name Property name of the form under which the control is published.                             // 21395
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.                   // 21396
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.              // 21397
   * @param {string=} ngChange Angular expression to be executed when input changes due to user                        // 21398
   *    interaction with the input element.                                                                            // 21399
   *                                                                                                                   // 21400
   * @example                                                                                                          // 21401
      <example name="checkbox-input-directive" module="checkboxExample">                                               // 21402
        <file name="index.html">                                                                                       // 21403
         <script>                                                                                                      // 21404
           angular.module('checkboxExample', [])                                                                       // 21405
             .controller('ExampleController', ['$scope', function($scope) {                                            // 21406
               $scope.checkboxModel = {                                                                                // 21407
                value1 : true,                                                                                         // 21408
                value2 : 'YES'                                                                                         // 21409
              };                                                                                                       // 21410
             }]);                                                                                                      // 21411
         </script>                                                                                                     // 21412
         <form name="myForm" ng-controller="ExampleController">                                                        // 21413
           <label>Value1:                                                                                              // 21414
             <input type="checkbox" ng-model="checkboxModel.value1">                                                   // 21415
           </label><br/>                                                                                               // 21416
           <label>Value2:                                                                                              // 21417
             <input type="checkbox" ng-model="checkboxModel.value2"                                                    // 21418
                    ng-true-value="'YES'" ng-false-value="'NO'">                                                       // 21419
            </label><br/>                                                                                              // 21420
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>                                                             // 21421
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>                                                             // 21422
          </form>                                                                                                      // 21423
        </file>                                                                                                        // 21424
        <file name="protractor.js" type="protractor">                                                                  // 21425
          it('should change state', function() {                                                                       // 21426
            var value1 = element(by.binding('checkboxModel.value1'));                                                  // 21427
            var value2 = element(by.binding('checkboxModel.value2'));                                                  // 21428
                                                                                                                       // 21429
            expect(value1.getText()).toContain('true');                                                                // 21430
            expect(value2.getText()).toContain('YES');                                                                 // 21431
                                                                                                                       // 21432
            element(by.model('checkboxModel.value1')).click();                                                         // 21433
            element(by.model('checkboxModel.value2')).click();                                                         // 21434
                                                                                                                       // 21435
            expect(value1.getText()).toContain('false');                                                               // 21436
            expect(value2.getText()).toContain('NO');                                                                  // 21437
          });                                                                                                          // 21438
        </file>                                                                                                        // 21439
      </example>                                                                                                       // 21440
   */                                                                                                                  // 21441
  'checkbox': checkboxInputType,                                                                                       // 21442
                                                                                                                       // 21443
  'hidden': noop,                                                                                                      // 21444
  'button': noop,                                                                                                      // 21445
  'submit': noop,                                                                                                      // 21446
  'reset': noop,                                                                                                       // 21447
  'file': noop                                                                                                         // 21448
};                                                                                                                     // 21449
                                                                                                                       // 21450
function stringBasedInputType(ctrl) {                                                                                  // 21451
  ctrl.$formatters.push(function(value) {                                                                              // 21452
    return ctrl.$isEmpty(value) ? value : value.toString();                                                            // 21453
  });                                                                                                                  // 21454
}                                                                                                                      // 21455
                                                                                                                       // 21456
function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21457
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21458
  stringBasedInputType(ctrl);                                                                                          // 21459
}                                                                                                                      // 21460
                                                                                                                       // 21461
function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                               // 21462
  var type = lowercase(element[0].type);                                                                               // 21463
                                                                                                                       // 21464
  // In composition mode, users are still inputing intermediate text buffer,                                           // 21465
  // hold the listener until composition is done.                                                                      // 21466
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent                  // 21467
  if (!$sniffer.android) {                                                                                             // 21468
    var composing = false;                                                                                             // 21469
                                                                                                                       // 21470
    element.on('compositionstart', function(data) {                                                                    // 21471
      composing = true;                                                                                                // 21472
    });                                                                                                                // 21473
                                                                                                                       // 21474
    element.on('compositionend', function() {                                                                          // 21475
      composing = false;                                                                                               // 21476
      listener();                                                                                                      // 21477
    });                                                                                                                // 21478
  }                                                                                                                    // 21479
                                                                                                                       // 21480
  var listener = function(ev) {                                                                                        // 21481
    if (timeout) {                                                                                                     // 21482
      $browser.defer.cancel(timeout);                                                                                  // 21483
      timeout = null;                                                                                                  // 21484
    }                                                                                                                  // 21485
    if (composing) return;                                                                                             // 21486
    var value = element.val(),                                                                                         // 21487
        event = ev && ev.type;                                                                                         // 21488
                                                                                                                       // 21489
    // By default we will trim the value                                                                               // 21490
    // If the attribute ng-trim exists we will avoid trimming                                                          // 21491
    // If input type is 'password', the value is never trimmed                                                         // 21492
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {                                            // 21493
      value = trim(value);                                                                                             // 21494
    }                                                                                                                  // 21495
                                                                                                                       // 21496
    // If a control is suffering from bad input (due to native validators), browsers discard its                       // 21497
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the                        // 21498
    // control's value is the same empty value twice in a row.                                                         // 21499
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {                                   // 21500
      ctrl.$setViewValue(value, event);                                                                                // 21501
    }                                                                                                                  // 21502
  };                                                                                                                   // 21503
                                                                                                                       // 21504
  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the                     // 21505
  // input event on backspace, delete or cut                                                                           // 21506
  if ($sniffer.hasEvent('input')) {                                                                                    // 21507
    element.on('input', listener);                                                                                     // 21508
  } else {                                                                                                             // 21509
    var timeout;                                                                                                       // 21510
                                                                                                                       // 21511
    var deferListener = function(ev, input, origValue) {                                                               // 21512
      if (!timeout) {                                                                                                  // 21513
        timeout = $browser.defer(function() {                                                                          // 21514
          timeout = null;                                                                                              // 21515
          if (!input || input.value !== origValue) {                                                                   // 21516
            listener(ev);                                                                                              // 21517
          }                                                                                                            // 21518
        });                                                                                                            // 21519
      }                                                                                                                // 21520
    };                                                                                                                 // 21521
                                                                                                                       // 21522
    element.on('keydown', function(event) {                                                                            // 21523
      var key = event.keyCode;                                                                                         // 21524
                                                                                                                       // 21525
      // ignore                                                                                                        // 21526
      //    command            modifiers                   arrows                                                      // 21527
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;                                    // 21528
                                                                                                                       // 21529
      deferListener(event, this, this.value);                                                                          // 21530
    });                                                                                                                // 21531
                                                                                                                       // 21532
    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it             // 21533
    if ($sniffer.hasEvent('paste')) {                                                                                  // 21534
      element.on('paste cut', deferListener);                                                                          // 21535
    }                                                                                                                  // 21536
  }                                                                                                                    // 21537
                                                                                                                       // 21538
  // if user paste into input using mouse on older browser                                                             // 21539
  // or form autocomplete on newer browser, we need "change" event to catch it                                         // 21540
  element.on('change', listener);                                                                                      // 21541
                                                                                                                       // 21542
  ctrl.$render = function() {                                                                                          // 21543
    // Workaround for Firefox validation #12102.                                                                       // 21544
    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;                                                 // 21545
    if (element.val() !== value) {                                                                                     // 21546
      element.val(value);                                                                                              // 21547
    }                                                                                                                  // 21548
  };                                                                                                                   // 21549
}                                                                                                                      // 21550
                                                                                                                       // 21551
function weekParser(isoWeek, existingDate) {                                                                           // 21552
  if (isDate(isoWeek)) {                                                                                               // 21553
    return isoWeek;                                                                                                    // 21554
  }                                                                                                                    // 21555
                                                                                                                       // 21556
  if (isString(isoWeek)) {                                                                                             // 21557
    WEEK_REGEXP.lastIndex = 0;                                                                                         // 21558
    var parts = WEEK_REGEXP.exec(isoWeek);                                                                             // 21559
    if (parts) {                                                                                                       // 21560
      var year = +parts[1],                                                                                            // 21561
          week = +parts[2],                                                                                            // 21562
          hours = 0,                                                                                                   // 21563
          minutes = 0,                                                                                                 // 21564
          seconds = 0,                                                                                                 // 21565
          milliseconds = 0,                                                                                            // 21566
          firstThurs = getFirstThursdayOfYear(year),                                                                   // 21567
          addDays = (week - 1) * 7;                                                                                    // 21568
                                                                                                                       // 21569
      if (existingDate) {                                                                                              // 21570
        hours = existingDate.getHours();                                                                               // 21571
        minutes = existingDate.getMinutes();                                                                           // 21572
        seconds = existingDate.getSeconds();                                                                           // 21573
        milliseconds = existingDate.getMilliseconds();                                                                 // 21574
      }                                                                                                                // 21575
                                                                                                                       // 21576
      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);                 // 21577
    }                                                                                                                  // 21578
  }                                                                                                                    // 21579
                                                                                                                       // 21580
  return NaN;                                                                                                          // 21581
}                                                                                                                      // 21582
                                                                                                                       // 21583
function createDateParser(regexp, mapping) {                                                                           // 21584
  return function(iso, date) {                                                                                         // 21585
    var parts, map;                                                                                                    // 21586
                                                                                                                       // 21587
    if (isDate(iso)) {                                                                                                 // 21588
      return iso;                                                                                                      // 21589
    }                                                                                                                  // 21590
                                                                                                                       // 21591
    if (isString(iso)) {                                                                                               // 21592
      // When a date is JSON'ified to wraps itself inside of an extra                                                  // 21593
      // set of double quotes. This makes the date parsing code unable                                                 // 21594
      // to match the date string and parse it as a date.                                                              // 21595
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {                                                 // 21596
        iso = iso.substring(1, iso.length - 1);                                                                        // 21597
      }                                                                                                                // 21598
      if (ISO_DATE_REGEXP.test(iso)) {                                                                                 // 21599
        return new Date(iso);                                                                                          // 21600
      }                                                                                                                // 21601
      regexp.lastIndex = 0;                                                                                            // 21602
      parts = regexp.exec(iso);                                                                                        // 21603
                                                                                                                       // 21604
      if (parts) {                                                                                                     // 21605
        parts.shift();                                                                                                 // 21606
        if (date) {                                                                                                    // 21607
          map = {                                                                                                      // 21608
            yyyy: date.getFullYear(),                                                                                  // 21609
            MM: date.getMonth() + 1,                                                                                   // 21610
            dd: date.getDate(),                                                                                        // 21611
            HH: date.getHours(),                                                                                       // 21612
            mm: date.getMinutes(),                                                                                     // 21613
            ss: date.getSeconds(),                                                                                     // 21614
            sss: date.getMilliseconds() / 1000                                                                         // 21615
          };                                                                                                           // 21616
        } else {                                                                                                       // 21617
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };                                             // 21618
        }                                                                                                              // 21619
                                                                                                                       // 21620
        forEach(parts, function(part, index) {                                                                         // 21621
          if (index < mapping.length) {                                                                                // 21622
            map[mapping[index]] = +part;                                                                               // 21623
          }                                                                                                            // 21624
        });                                                                                                            // 21625
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);               // 21626
      }                                                                                                                // 21627
    }                                                                                                                  // 21628
                                                                                                                       // 21629
    return NaN;                                                                                                        // 21630
  };                                                                                                                   // 21631
}                                                                                                                      // 21632
                                                                                                                       // 21633
function createDateInputType(type, regexp, parseDate, format) {                                                        // 21634
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {                      // 21635
    badInputChecker(scope, element, attr, ctrl);                                                                       // 21636
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                     // 21637
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;                                                    // 21638
    var previousDate;                                                                                                  // 21639
                                                                                                                       // 21640
    ctrl.$$parserName = type;                                                                                          // 21641
    ctrl.$parsers.push(function(value) {                                                                               // 21642
      if (ctrl.$isEmpty(value)) return null;                                                                           // 21643
      if (regexp.test(value)) {                                                                                        // 21644
        // Note: We cannot read ctrl.$modelValue, as there might be a different                                        // 21645
        // parser/formatter in the processing chain so that the model                                                  // 21646
        // contains some different data format!                                                                        // 21647
        var parsedDate = parseDate(value, previousDate);                                                               // 21648
        if (timezone) {                                                                                                // 21649
          parsedDate = convertTimezoneToLocal(parsedDate, timezone);                                                   // 21650
        }                                                                                                              // 21651
        return parsedDate;                                                                                             // 21652
      }                                                                                                                // 21653
      return undefined;                                                                                                // 21654
    });                                                                                                                // 21655
                                                                                                                       // 21656
    ctrl.$formatters.push(function(value) {                                                                            // 21657
      if (value && !isDate(value)) {                                                                                   // 21658
        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);                                          // 21659
      }                                                                                                                // 21660
      if (isValidDate(value)) {                                                                                        // 21661
        previousDate = value;                                                                                          // 21662
        if (previousDate && timezone) {                                                                                // 21663
          previousDate = convertTimezoneToLocal(previousDate, timezone, true);                                         // 21664
        }                                                                                                              // 21665
        return $filter('date')(value, format, timezone);                                                               // 21666
      } else {                                                                                                         // 21667
        previousDate = null;                                                                                           // 21668
        return '';                                                                                                     // 21669
      }                                                                                                                // 21670
    });                                                                                                                // 21671
                                                                                                                       // 21672
    if (isDefined(attr.min) || attr.ngMin) {                                                                           // 21673
      var minVal;                                                                                                      // 21674
      ctrl.$validators.min = function(value) {                                                                         // 21675
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;                               // 21676
      };                                                                                                               // 21677
      attr.$observe('min', function(val) {                                                                             // 21678
        minVal = parseObservedDateValue(val);                                                                          // 21679
        ctrl.$validate();                                                                                              // 21680
      });                                                                                                              // 21681
    }                                                                                                                  // 21682
                                                                                                                       // 21683
    if (isDefined(attr.max) || attr.ngMax) {                                                                           // 21684
      var maxVal;                                                                                                      // 21685
      ctrl.$validators.max = function(value) {                                                                         // 21686
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;                               // 21687
      };                                                                                                               // 21688
      attr.$observe('max', function(val) {                                                                             // 21689
        maxVal = parseObservedDateValue(val);                                                                          // 21690
        ctrl.$validate();                                                                                              // 21691
      });                                                                                                              // 21692
    }                                                                                                                  // 21693
                                                                                                                       // 21694
    function isValidDate(value) {                                                                                      // 21695
      // Invalid Date: getTime() returns NaN                                                                           // 21696
      return value && !(value.getTime && value.getTime() !== value.getTime());                                         // 21697
    }                                                                                                                  // 21698
                                                                                                                       // 21699
    function parseObservedDateValue(val) {                                                                             // 21700
      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;                                        // 21701
    }                                                                                                                  // 21702
  };                                                                                                                   // 21703
}                                                                                                                      // 21704
                                                                                                                       // 21705
function badInputChecker(scope, element, attr, ctrl) {                                                                 // 21706
  var node = element[0];                                                                                               // 21707
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);                                         // 21708
  if (nativeValidation) {                                                                                              // 21709
    ctrl.$parsers.push(function(value) {                                                                               // 21710
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};                                                      // 21711
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):                   // 21712
      // - also sets validity.badInput (should only be validity.typeMismatch).                                         // 21713
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)        // 21714
      // - can ignore this case as we can still read out the erroneous email...                                        // 21715
      return validity.badInput && !validity.typeMismatch ? undefined : value;                                          // 21716
    });                                                                                                                // 21717
  }                                                                                                                    // 21718
}                                                                                                                      // 21719
                                                                                                                       // 21720
function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                             // 21721
  badInputChecker(scope, element, attr, ctrl);                                                                         // 21722
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21723
                                                                                                                       // 21724
  ctrl.$$parserName = 'number';                                                                                        // 21725
  ctrl.$parsers.push(function(value) {                                                                                 // 21726
    if (ctrl.$isEmpty(value))      return null;                                                                        // 21727
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);                                                           // 21728
    return undefined;                                                                                                  // 21729
  });                                                                                                                  // 21730
                                                                                                                       // 21731
  ctrl.$formatters.push(function(value) {                                                                              // 21732
    if (!ctrl.$isEmpty(value)) {                                                                                       // 21733
      if (!isNumber(value)) {                                                                                          // 21734
        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);                                         // 21735
      }                                                                                                                // 21736
      value = value.toString();                                                                                        // 21737
    }                                                                                                                  // 21738
    return value;                                                                                                      // 21739
  });                                                                                                                  // 21740
                                                                                                                       // 21741
  if (isDefined(attr.min) || attr.ngMin) {                                                                             // 21742
    var minVal;                                                                                                        // 21743
    ctrl.$validators.min = function(value) {                                                                           // 21744
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;                                           // 21745
    };                                                                                                                 // 21746
                                                                                                                       // 21747
    attr.$observe('min', function(val) {                                                                               // 21748
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21749
        val = parseFloat(val, 10);                                                                                     // 21750
      }                                                                                                                // 21751
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21752
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21753
      ctrl.$validate();                                                                                                // 21754
    });                                                                                                                // 21755
  }                                                                                                                    // 21756
                                                                                                                       // 21757
  if (isDefined(attr.max) || attr.ngMax) {                                                                             // 21758
    var maxVal;                                                                                                        // 21759
    ctrl.$validators.max = function(value) {                                                                           // 21760
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;                                           // 21761
    };                                                                                                                 // 21762
                                                                                                                       // 21763
    attr.$observe('max', function(val) {                                                                               // 21764
      if (isDefined(val) && !isNumber(val)) {                                                                          // 21765
        val = parseFloat(val, 10);                                                                                     // 21766
      }                                                                                                                // 21767
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;                                                         // 21768
      // TODO(matsko): implement validateLater to reduce number of validations                                         // 21769
      ctrl.$validate();                                                                                                // 21770
    });                                                                                                                // 21771
  }                                                                                                                    // 21772
}                                                                                                                      // 21773
                                                                                                                       // 21774
function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                                // 21775
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21776
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21777
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21778
  stringBasedInputType(ctrl);                                                                                          // 21779
                                                                                                                       // 21780
  ctrl.$$parserName = 'url';                                                                                           // 21781
  ctrl.$validators.url = function(modelValue, viewValue) {                                                             // 21782
    var value = modelValue || viewValue;                                                                               // 21783
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);                                                             // 21784
  };                                                                                                                   // 21785
}                                                                                                                      // 21786
                                                                                                                       // 21787
function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {                                              // 21788
  // Note: no badInputChecker here by purpose as `url` is only a validation                                            // 21789
  // in browsers, i.e. we can always read out input.value even if it is not valid!                                     // 21790
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);                                                       // 21791
  stringBasedInputType(ctrl);                                                                                          // 21792
                                                                                                                       // 21793
  ctrl.$$parserName = 'email';                                                                                         // 21794
  ctrl.$validators.email = function(modelValue, viewValue) {                                                           // 21795
    var value = modelValue || viewValue;                                                                               // 21796
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);                                                           // 21797
  };                                                                                                                   // 21798
}                                                                                                                      // 21799
                                                                                                                       // 21800
function radioInputType(scope, element, attr, ctrl) {                                                                  // 21801
  // make the name unique, if not defined                                                                              // 21802
  if (isUndefined(attr.name)) {                                                                                        // 21803
    element.attr('name', nextUid());                                                                                   // 21804
  }                                                                                                                    // 21805
                                                                                                                       // 21806
  var listener = function(ev) {                                                                                        // 21807
    if (element[0].checked) {                                                                                          // 21808
      ctrl.$setViewValue(attr.value, ev && ev.type);                                                                   // 21809
    }                                                                                                                  // 21810
  };                                                                                                                   // 21811
                                                                                                                       // 21812
  element.on('click', listener);                                                                                       // 21813
                                                                                                                       // 21814
  ctrl.$render = function() {                                                                                          // 21815
    var value = attr.value;                                                                                            // 21816
    element[0].checked = (value == ctrl.$viewValue);                                                                   // 21817
  };                                                                                                                   // 21818
                                                                                                                       // 21819
  attr.$observe('value', ctrl.$render);                                                                                // 21820
}                                                                                                                      // 21821
                                                                                                                       // 21822
function parseConstantExpr($parse, context, name, expression, fallback) {                                              // 21823
  var parseFn;                                                                                                         // 21824
  if (isDefined(expression)) {                                                                                         // 21825
    parseFn = $parse(expression);                                                                                      // 21826
    if (!parseFn.constant) {                                                                                           // 21827
      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +                            // 21828
                                   '`{1}`.', name, expression);                                                        // 21829
    }                                                                                                                  // 21830
    return parseFn(context);                                                                                           // 21831
  }                                                                                                                    // 21832
  return fallback;                                                                                                     // 21833
}                                                                                                                      // 21834
                                                                                                                       // 21835
function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {                          // 21836
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);                             // 21837
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);                         // 21838
                                                                                                                       // 21839
  var listener = function(ev) {                                                                                        // 21840
    ctrl.$setViewValue(element[0].checked, ev && ev.type);                                                             // 21841
  };                                                                                                                   // 21842
                                                                                                                       // 21843
  element.on('click', listener);                                                                                       // 21844
                                                                                                                       // 21845
  ctrl.$render = function() {                                                                                          // 21846
    element[0].checked = ctrl.$viewValue;                                                                              // 21847
  };                                                                                                                   // 21848
                                                                                                                       // 21849
  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`             // 21850
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert                 // 21851
  // it to a boolean.                                                                                                  // 21852
  ctrl.$isEmpty = function(value) {                                                                                    // 21853
    return value === false;                                                                                            // 21854
  };                                                                                                                   // 21855
                                                                                                                       // 21856
  ctrl.$formatters.push(function(value) {                                                                              // 21857
    return equals(value, trueValue);                                                                                   // 21858
  });                                                                                                                  // 21859
                                                                                                                       // 21860
  ctrl.$parsers.push(function(value) {                                                                                 // 21861
    return value ? trueValue : falseValue;                                                                             // 21862
  });                                                                                                                  // 21863
}                                                                                                                      // 21864
                                                                                                                       // 21865
                                                                                                                       // 21866
/**                                                                                                                    // 21867
 * @ngdoc directive                                                                                                    // 21868
 * @name textarea                                                                                                      // 21869
 * @restrict E                                                                                                         // 21870
 *                                                                                                                     // 21871
 * @description                                                                                                        // 21872
 * HTML textarea element control with angular data-binding. The data-binding and validation                            // 21873
 * properties of this element are exactly the same as those of the                                                     // 21874
 * {@link ng.directive:input input element}.                                                                           // 21875
 *                                                                                                                     // 21876
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 21877
 * @param {string=} name Property name of the form under which the control is published.                               // 21878
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 21879
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 21880
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 21881
 *    `required` when you want to data-bind to the `required` attribute.                                               // 21882
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 21883
 *    minlength.                                                                                                       // 21884
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 21885
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 21886
 *    length.                                                                                                          // 21887
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 21888
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 21889
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 21890
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 21891
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 21892
 *    `new RegExp('^abc$')`.<br />                                                                                     // 21893
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 21894
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 21895
 *    account.                                                                                                         // 21896
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 21897
 *    interaction with the input element.                                                                              // 21898
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 21899
 */                                                                                                                    // 21900
                                                                                                                       // 21901
                                                                                                                       // 21902
/**                                                                                                                    // 21903
 * @ngdoc directive                                                                                                    // 21904
 * @name input                                                                                                         // 21905
 * @restrict E                                                                                                         // 21906
 *                                                                                                                     // 21907
 * @description                                                                                                        // 21908
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,            // 21909
 * input state control, and validation.                                                                                // 21910
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.             // 21911
 *                                                                                                                     // 21912
 * <div class="alert alert-warning">                                                                                   // 21913
 * **Note:** Not every feature offered is available for all input types.                                               // 21914
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.                      // 21915
 * </div>                                                                                                              // 21916
 *                                                                                                                     // 21917
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 21918
 * @param {string=} name Property name of the form under which the control is published.                               // 21919
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 21920
 * @param {boolean=} ngRequired Sets `required` attribute if set to true                                               // 21921
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than                     // 21922
 *    minlength.                                                                                                       // 21923
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than                      // 21924
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any                   // 21925
 *    length.                                                                                                          // 21926
 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match                  // 21927
 *    a RegExp found by evaluating the Angular expression given in the attribute value.                                // 21928
 *    If the expression evaluates to a RegExp object, then this is used directly.                                      // 21929
 *    If the expression evaluates to a string, then it will be converted to a RegExp                                   // 21930
 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to                          // 21931
 *    `new RegExp('^abc$')`.<br />                                                                                     // 21932
 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to                     // 21933
 *    start at the index of the last search's match, thus not taking the whole input value into                        // 21934
 *    account.                                                                                                         // 21935
 * @param {string=} ngChange Angular expression to be executed when input changes due to user                          // 21936
 *    interaction with the input element.                                                                              // 21937
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.                      // 21938
 *    This parameter is ignored for input[type=password] controls, which will never trim the                           // 21939
 *    input.                                                                                                           // 21940
 *                                                                                                                     // 21941
 * @example                                                                                                            // 21942
    <example name="input-directive" module="inputExample">                                                             // 21943
      <file name="index.html">                                                                                         // 21944
       <script>                                                                                                        // 21945
          angular.module('inputExample', [])                                                                           // 21946
            .controller('ExampleController', ['$scope', function($scope) {                                             // 21947
              $scope.user = {name: 'guest', last: 'visitor'};                                                          // 21948
            }]);                                                                                                       // 21949
       </script>                                                                                                       // 21950
       <div ng-controller="ExampleController">                                                                         // 21951
         <form name="myForm">                                                                                          // 21952
           <label>                                                                                                     // 21953
              User name:                                                                                               // 21954
              <input type="text" name="userName" ng-model="user.name" required>                                        // 21955
           </label>                                                                                                    // 21956
           <div role="alert">                                                                                          // 21957
             <span class="error" ng-show="myForm.userName.$error.required">                                            // 21958
              Required!</span>                                                                                         // 21959
           </div>                                                                                                      // 21960
           <label>                                                                                                     // 21961
              Last name:                                                                                               // 21962
              <input type="text" name="lastName" ng-model="user.last"                                                  // 21963
              ng-minlength="3" ng-maxlength="10">                                                                      // 21964
           </label>                                                                                                    // 21965
           <div role="alert">                                                                                          // 21966
             <span class="error" ng-show="myForm.lastName.$error.minlength">                                           // 21967
               Too short!</span>                                                                                       // 21968
             <span class="error" ng-show="myForm.lastName.$error.maxlength">                                           // 21969
               Too long!</span>                                                                                        // 21970
           </div>                                                                                                      // 21971
         </form>                                                                                                       // 21972
         <hr>                                                                                                          // 21973
         <tt>user = {{user}}</tt><br/>                                                                                 // 21974
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>                                             // 21975
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>                                             // 21976
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>                                             // 21977
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>                                             // 21978
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                               // 21979
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                           // 21980
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>                                         // 21981
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>                                         // 21982
       </div>                                                                                                          // 21983
      </file>                                                                                                          // 21984
      <file name="protractor.js" type="protractor">                                                                    // 21985
        var user = element(by.exactBinding('user'));                                                                   // 21986
        var userNameValid = element(by.binding('myForm.userName.$valid'));                                             // 21987
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));                                             // 21988
        var lastNameError = element(by.binding('myForm.lastName.$error'));                                             // 21989
        var formValid = element(by.binding('myForm.$valid'));                                                          // 21990
        var userNameInput = element(by.model('user.name'));                                                            // 21991
        var userLastInput = element(by.model('user.last'));                                                            // 21992
                                                                                                                       // 21993
        it('should initialize to model', function() {                                                                  // 21994
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');                                       // 21995
          expect(userNameValid.getText()).toContain('true');                                                           // 21996
          expect(formValid.getText()).toContain('true');                                                               // 21997
        });                                                                                                            // 21998
                                                                                                                       // 21999
        it('should be invalid if empty when required', function() {                                                    // 22000
          userNameInput.clear();                                                                                       // 22001
          userNameInput.sendKeys('');                                                                                  // 22002
                                                                                                                       // 22003
          expect(user.getText()).toContain('{"last":"visitor"}');                                                      // 22004
          expect(userNameValid.getText()).toContain('false');                                                          // 22005
          expect(formValid.getText()).toContain('false');                                                              // 22006
        });                                                                                                            // 22007
                                                                                                                       // 22008
        it('should be valid if empty when min length is set', function() {                                             // 22009
          userLastInput.clear();                                                                                       // 22010
          userLastInput.sendKeys('');                                                                                  // 22011
                                                                                                                       // 22012
          expect(user.getText()).toContain('{"name":"guest","last":""}');                                              // 22013
          expect(lastNameValid.getText()).toContain('true');                                                           // 22014
          expect(formValid.getText()).toContain('true');                                                               // 22015
        });                                                                                                            // 22016
                                                                                                                       // 22017
        it('should be invalid if less than required min length', function() {                                          // 22018
          userLastInput.clear();                                                                                       // 22019
          userLastInput.sendKeys('xx');                                                                                // 22020
                                                                                                                       // 22021
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22022
          expect(lastNameValid.getText()).toContain('false');                                                          // 22023
          expect(lastNameError.getText()).toContain('minlength');                                                      // 22024
          expect(formValid.getText()).toContain('false');                                                              // 22025
        });                                                                                                            // 22026
                                                                                                                       // 22027
        it('should be invalid if longer than max length', function() {                                                 // 22028
          userLastInput.clear();                                                                                       // 22029
          userLastInput.sendKeys('some ridiculously long name');                                                       // 22030
                                                                                                                       // 22031
          expect(user.getText()).toContain('{"name":"guest"}');                                                        // 22032
          expect(lastNameValid.getText()).toContain('false');                                                          // 22033
          expect(lastNameError.getText()).toContain('maxlength');                                                      // 22034
          expect(formValid.getText()).toContain('false');                                                              // 22035
        });                                                                                                            // 22036
      </file>                                                                                                          // 22037
    </example>                                                                                                         // 22038
 */                                                                                                                    // 22039
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',                                                     // 22040
    function($browser, $sniffer, $filter, $parse) {                                                                    // 22041
  return {                                                                                                             // 22042
    restrict: 'E',                                                                                                     // 22043
    require: ['?ngModel'],                                                                                             // 22044
    link: {                                                                                                            // 22045
      pre: function(scope, element, attr, ctrls) {                                                                     // 22046
        if (ctrls[0]) {                                                                                                // 22047
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,                // 22048
                                                              $browser, $filter, $parse);                              // 22049
        }                                                                                                              // 22050
      }                                                                                                                // 22051
    }                                                                                                                  // 22052
  };                                                                                                                   // 22053
}];                                                                                                                    // 22054
                                                                                                                       // 22055
                                                                                                                       // 22056
                                                                                                                       // 22057
var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;                                                                      // 22058
/**                                                                                                                    // 22059
 * @ngdoc directive                                                                                                    // 22060
 * @name ngValue                                                                                                       // 22061
 *                                                                                                                     // 22062
 * @description                                                                                                        // 22063
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},                       // 22064
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to                       // 22065
 * the bound value.                                                                                                    // 22066
 *                                                                                                                     // 22067
 * `ngValue` is useful when dynamically generating lists of radio buttons using                                        // 22068
 * {@link ngRepeat `ngRepeat`}, as shown below.                                                                        // 22069
 *                                                                                                                     // 22070
 * Likewise, `ngValue` can be used to generate `<option>` elements for                                                 // 22071
 * the {@link select `select`} element. In that case however, only strings are supported                               // 22072
 * for the `value `attribute, so the resulting `ngModel` will always be a string.                                      // 22073
 * Support for `select` models with non-string values is available via `ngOptions`.                                    // 22074
 *                                                                                                                     // 22075
 * @element input                                                                                                      // 22076
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute                     // 22077
 *   of the `input` element                                                                                            // 22078
 *                                                                                                                     // 22079
 * @example                                                                                                            // 22080
    <example name="ngValue-directive" module="valueExample">                                                           // 22081
      <file name="index.html">                                                                                         // 22082
       <script>                                                                                                        // 22083
          angular.module('valueExample', [])                                                                           // 22084
            .controller('ExampleController', ['$scope', function($scope) {                                             // 22085
              $scope.names = ['pizza', 'unicorns', 'robots'];                                                          // 22086
              $scope.my = { favorite: 'unicorns' };                                                                    // 22087
            }]);                                                                                                       // 22088
       </script>                                                                                                       // 22089
        <form ng-controller="ExampleController">                                                                       // 22090
          <h2>Which is your favorite?</h2>                                                                             // 22091
            <label ng-repeat="name in names" for="{{name}}">                                                           // 22092
              {{name}}                                                                                                 // 22093
              <input type="radio"                                                                                      // 22094
                     ng-model="my.favorite"                                                                            // 22095
                     ng-value="name"                                                                                   // 22096
                     id="{{name}}"                                                                                     // 22097
                     name="favorite">                                                                                  // 22098
            </label>                                                                                                   // 22099
          <div>You chose {{my.favorite}}</div>                                                                         // 22100
        </form>                                                                                                        // 22101
      </file>                                                                                                          // 22102
      <file name="protractor.js" type="protractor">                                                                    // 22103
        var favorite = element(by.binding('my.favorite'));                                                             // 22104
                                                                                                                       // 22105
        it('should initialize to model', function() {                                                                  // 22106
          expect(favorite.getText()).toContain('unicorns');                                                            // 22107
        });                                                                                                            // 22108
        it('should bind the values to the inputs', function() {                                                        // 22109
          element.all(by.model('my.favorite')).get(0).click();                                                         // 22110
          expect(favorite.getText()).toContain('pizza');                                                               // 22111
        });                                                                                                            // 22112
      </file>                                                                                                          // 22113
    </example>                                                                                                         // 22114
 */                                                                                                                    // 22115
var ngValueDirective = function() {                                                                                    // 22116
  return {                                                                                                             // 22117
    restrict: 'A',                                                                                                     // 22118
    priority: 100,                                                                                                     // 22119
    compile: function(tpl, tplAttr) {                                                                                  // 22120
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {                                                               // 22121
        return function ngValueConstantLink(scope, elm, attr) {                                                        // 22122
          attr.$set('value', scope.$eval(attr.ngValue));                                                               // 22123
        };                                                                                                             // 22124
      } else {                                                                                                         // 22125
        return function ngValueLink(scope, elm, attr) {                                                                // 22126
          scope.$watch(attr.ngValue, function valueWatchAction(value) {                                                // 22127
            attr.$set('value', value);                                                                                 // 22128
          });                                                                                                          // 22129
        };                                                                                                             // 22130
      }                                                                                                                // 22131
    }                                                                                                                  // 22132
  };                                                                                                                   // 22133
};                                                                                                                     // 22134
                                                                                                                       // 22135
/**                                                                                                                    // 22136
 * @ngdoc directive                                                                                                    // 22137
 * @name ngBind                                                                                                        // 22138
 * @restrict AC                                                                                                        // 22139
 *                                                                                                                     // 22140
 * @description                                                                                                        // 22141
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element                      // 22142
 * with the value of a given expression, and to update the text content when the value of that                         // 22143
 * expression changes.                                                                                                 // 22144
 *                                                                                                                     // 22145
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like                        // 22146
 * `{{ expression }}` which is similar but less verbose.                                                               // 22147
 *                                                                                                                     // 22148
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily                         // 22149
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an                          // 22150
 * element attribute, it makes the bindings invisible to the user while the page is loading.                           // 22151
 *                                                                                                                     // 22152
 * An alternative solution to this problem would be using the                                                          // 22153
 * {@link ng.directive:ngCloak ngCloak} directive.                                                                     // 22154
 *                                                                                                                     // 22155
 *                                                                                                                     // 22156
 * @element ANY                                                                                                        // 22157
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.                                         // 22158
 *                                                                                                                     // 22159
 * @example                                                                                                            // 22160
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.                       // 22161
   <example module="bindExample">                                                                                      // 22162
     <file name="index.html">                                                                                          // 22163
       <script>                                                                                                        // 22164
         angular.module('bindExample', [])                                                                             // 22165
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22166
             $scope.name = 'Whirled';                                                                                  // 22167
           }]);                                                                                                        // 22168
       </script>                                                                                                       // 22169
       <div ng-controller="ExampleController">                                                                         // 22170
         <label>Enter name: <input type="text" ng-model="name"></label><br>                                            // 22171
         Hello <span ng-bind="name"></span>!                                                                           // 22172
       </div>                                                                                                          // 22173
     </file>                                                                                                           // 22174
     <file name="protractor.js" type="protractor">                                                                     // 22175
       it('should check ng-bind', function() {                                                                         // 22176
         var nameInput = element(by.model('name'));                                                                    // 22177
                                                                                                                       // 22178
         expect(element(by.binding('name')).getText()).toBe('Whirled');                                                // 22179
         nameInput.clear();                                                                                            // 22180
         nameInput.sendKeys('world');                                                                                  // 22181
         expect(element(by.binding('name')).getText()).toBe('world');                                                  // 22182
       });                                                                                                             // 22183
     </file>                                                                                                           // 22184
   </example>                                                                                                          // 22185
 */                                                                                                                    // 22186
var ngBindDirective = ['$compile', function($compile) {                                                                // 22187
  return {                                                                                                             // 22188
    restrict: 'AC',                                                                                                    // 22189
    compile: function ngBindCompile(templateElement) {                                                                 // 22190
      $compile.$$addBindingClass(templateElement);                                                                     // 22191
      return function ngBindLink(scope, element, attr) {                                                               // 22192
        $compile.$$addBindingInfo(element, attr.ngBind);                                                               // 22193
        element = element[0];                                                                                          // 22194
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {                                                  // 22195
          element.textContent = value === undefined ? '' : value;                                                      // 22196
        });                                                                                                            // 22197
      };                                                                                                               // 22198
    }                                                                                                                  // 22199
  };                                                                                                                   // 22200
}];                                                                                                                    // 22201
                                                                                                                       // 22202
                                                                                                                       // 22203
/**                                                                                                                    // 22204
 * @ngdoc directive                                                                                                    // 22205
 * @name ngBindTemplate                                                                                                // 22206
 *                                                                                                                     // 22207
 * @description                                                                                                        // 22208
 * The `ngBindTemplate` directive specifies that the element                                                           // 22209
 * text content should be replaced with the interpolation of the template                                              // 22210
 * in the `ngBindTemplate` attribute.                                                                                  // 22211
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`                                                // 22212
 * expressions. This directive is needed since some HTML elements                                                      // 22213
 * (such as TITLE and OPTION) cannot contain SPAN elements.                                                            // 22214
 *                                                                                                                     // 22215
 * @element ANY                                                                                                        // 22216
 * @param {string} ngBindTemplate template of form                                                                     // 22217
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.                                                              // 22218
 *                                                                                                                     // 22219
 * @example                                                                                                            // 22220
 * Try it here: enter text in text box and watch the greeting change.                                                  // 22221
   <example module="bindExample">                                                                                      // 22222
     <file name="index.html">                                                                                          // 22223
       <script>                                                                                                        // 22224
         angular.module('bindExample', [])                                                                             // 22225
           .controller('ExampleController', ['$scope', function($scope) {                                              // 22226
             $scope.salutation = 'Hello';                                                                              // 22227
             $scope.name = 'World';                                                                                    // 22228
           }]);                                                                                                        // 22229
       </script>                                                                                                       // 22230
       <div ng-controller="ExampleController">                                                                         // 22231
        <label>Salutation: <input type="text" ng-model="salutation"></label><br>                                       // 22232
        <label>Name: <input type="text" ng-model="name"></label><br>                                                   // 22233
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>                                                        // 22234
       </div>                                                                                                          // 22235
     </file>                                                                                                           // 22236
     <file name="protractor.js" type="protractor">                                                                     // 22237
       it('should check ng-bind', function() {                                                                         // 22238
         var salutationElem = element(by.binding('salutation'));                                                       // 22239
         var salutationInput = element(by.model('salutation'));                                                        // 22240
         var nameInput = element(by.model('name'));                                                                    // 22241
                                                                                                                       // 22242
         expect(salutationElem.getText()).toBe('Hello World!');                                                        // 22243
                                                                                                                       // 22244
         salutationInput.clear();                                                                                      // 22245
         salutationInput.sendKeys('Greetings');                                                                        // 22246
         nameInput.clear();                                                                                            // 22247
         nameInput.sendKeys('user');                                                                                   // 22248
                                                                                                                       // 22249
         expect(salutationElem.getText()).toBe('Greetings user!');                                                     // 22250
       });                                                                                                             // 22251
     </file>                                                                                                           // 22252
   </example>                                                                                                          // 22253
 */                                                                                                                    // 22254
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {                          // 22255
  return {                                                                                                             // 22256
    compile: function ngBindTemplateCompile(templateElement) {                                                         // 22257
      $compile.$$addBindingClass(templateElement);                                                                     // 22258
      return function ngBindTemplateLink(scope, element, attr) {                                                       // 22259
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));                                     // 22260
        $compile.$$addBindingInfo(element, interpolateFn.expressions);                                                 // 22261
        element = element[0];                                                                                          // 22262
        attr.$observe('ngBindTemplate', function(value) {                                                              // 22263
          element.textContent = value === undefined ? '' : value;                                                      // 22264
        });                                                                                                            // 22265
      };                                                                                                               // 22266
    }                                                                                                                  // 22267
  };                                                                                                                   // 22268
}];                                                                                                                    // 22269
                                                                                                                       // 22270
                                                                                                                       // 22271
/**                                                                                                                    // 22272
 * @ngdoc directive                                                                                                    // 22273
 * @name ngBindHtml                                                                                                    // 22274
 *                                                                                                                     // 22275
 * @description                                                                                                        // 22276
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,               // 22277
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.              // 22278
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link               // 22279
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}                 // 22280
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.                       // 22281
 *                                                                                                                     // 22282
 * You may also bypass sanitization for values you know are safe. To do so, bind to                                    // 22283
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example                      // 22284
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.                               // 22285
 *                                                                                                                     // 22286
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you                     // 22287
 * will have an exception (instead of an exploit.)                                                                     // 22288
 *                                                                                                                     // 22289
 * @element ANY                                                                                                        // 22290
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.                                     // 22291
 *                                                                                                                     // 22292
 * @example                                                                                                            // 22293
                                                                                                                       // 22294
   <example module="bindHtmlExample" deps="angular-sanitize.js">                                                       // 22295
     <file name="index.html">                                                                                          // 22296
       <div ng-controller="ExampleController">                                                                         // 22297
        <p ng-bind-html="myHTML"></p>                                                                                  // 22298
       </div>                                                                                                          // 22299
     </file>                                                                                                           // 22300
                                                                                                                       // 22301
     <file name="script.js">                                                                                           // 22302
       angular.module('bindHtmlExample', ['ngSanitize'])                                                               // 22303
         .controller('ExampleController', ['$scope', function($scope) {                                                // 22304
           $scope.myHTML =                                                                                             // 22305
              'I am an <code>HTML</code>string with ' +                                                                // 22306
              '<a href="#">links!</a> and other <em>stuff</em>';                                                       // 22307
         }]);                                                                                                          // 22308
     </file>                                                                                                           // 22309
                                                                                                                       // 22310
     <file name="protractor.js" type="protractor">                                                                     // 22311
       it('should check ng-bind-html', function() {                                                                    // 22312
         expect(element(by.binding('myHTML')).getText()).toBe(                                                         // 22313
             'I am an HTMLstring with links! and other stuff');                                                        // 22314
       });                                                                                                             // 22315
     </file>                                                                                                           // 22316
   </example>                                                                                                          // 22317
 */                                                                                                                    // 22318
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {                            // 22319
  return {                                                                                                             // 22320
    restrict: 'A',                                                                                                     // 22321
    compile: function ngBindHtmlCompile(tElement, tAttrs) {                                                            // 22322
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);                                                                // 22323
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {                                 // 22324
        return (value || '').toString();                                                                               // 22325
      });                                                                                                              // 22326
      $compile.$$addBindingClass(tElement);                                                                            // 22327
                                                                                                                       // 22328
      return function ngBindHtmlLink(scope, element, attr) {                                                           // 22329
        $compile.$$addBindingInfo(element, attr.ngBindHtml);                                                           // 22330
                                                                                                                       // 22331
        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {                                               // 22332
          // we re-evaluate the expr because we want a TrustedValueHolderType                                          // 22333
          // for $sce, not a string                                                                                    // 22334
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');                                            // 22335
        });                                                                                                            // 22336
      };                                                                                                               // 22337
    }                                                                                                                  // 22338
  };                                                                                                                   // 22339
}];                                                                                                                    // 22340
                                                                                                                       // 22341
/**                                                                                                                    // 22342
 * @ngdoc directive                                                                                                    // 22343
 * @name ngChange                                                                                                      // 22344
 *                                                                                                                     // 22345
 * @description                                                                                                        // 22346
 * Evaluate the given expression when the user changes the input.                                                      // 22347
 * The expression is evaluated immediately, unlike the JavaScript onchange event                                       // 22348
 * which only triggers at the end of a change (usually, when the user leaves the                                       // 22349
 * form element or presses the return key).                                                                            // 22350
 *                                                                                                                     // 22351
 * The `ngChange` expression is only evaluated when a change in the input value causes                                 // 22352
 * a new value to be committed to the model.                                                                           // 22353
 *                                                                                                                     // 22354
 * It will not be evaluated:                                                                                           // 22355
 * * if the value returned from the `$parsers` transformation pipeline has not changed                                 // 22356
 * * if the input has continued to be invalid since the model will stay `null`                                         // 22357
 * * if the model is changed programmatically and not by a change to the input value                                   // 22358
 *                                                                                                                     // 22359
 *                                                                                                                     // 22360
 * Note, this directive requires `ngModel` to be present.                                                              // 22361
 *                                                                                                                     // 22362
 * @element input                                                                                                      // 22363
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change                            // 22364
 * in input value.                                                                                                     // 22365
 *                                                                                                                     // 22366
 * @example                                                                                                            // 22367
 * <example name="ngChange-directive" module="changeExample">                                                          // 22368
 *   <file name="index.html">                                                                                          // 22369
 *     <script>                                                                                                        // 22370
 *       angular.module('changeExample', [])                                                                           // 22371
 *         .controller('ExampleController', ['$scope', function($scope) {                                              // 22372
 *           $scope.counter = 0;                                                                                       // 22373
 *           $scope.change = function() {                                                                              // 22374
 *             $scope.counter++;                                                                                       // 22375
 *           };                                                                                                        // 22376
 *         }]);                                                                                                        // 22377
 *     </script>                                                                                                       // 22378
 *     <div ng-controller="ExampleController">                                                                         // 22379
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />                   // 22380
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />                                        // 22381
 *       <label for="ng-change-example2">Confirmed</label><br />                                                       // 22382
 *       <tt>debug = {{confirmed}}</tt><br/>                                                                           // 22383
 *       <tt>counter = {{counter}}</tt><br/>                                                                           // 22384
 *     </div>                                                                                                          // 22385
 *   </file>                                                                                                           // 22386
 *   <file name="protractor.js" type="protractor">                                                                     // 22387
 *     var counter = element(by.binding('counter'));                                                                   // 22388
 *     var debug = element(by.binding('confirmed'));                                                                   // 22389
 *                                                                                                                     // 22390
 *     it('should evaluate the expression if changing from view', function() {                                         // 22391
 *       expect(counter.getText()).toContain('0');                                                                     // 22392
 *                                                                                                                     // 22393
 *       element(by.id('ng-change-example1')).click();                                                                 // 22394
 *                                                                                                                     // 22395
 *       expect(counter.getText()).toContain('1');                                                                     // 22396
 *       expect(debug.getText()).toContain('true');                                                                    // 22397
 *     });                                                                                                             // 22398
 *                                                                                                                     // 22399
 *     it('should not evaluate the expression if changing from model', function() {                                    // 22400
 *       element(by.id('ng-change-example2')).click();                                                                 // 22401
                                                                                                                       // 22402
 *       expect(counter.getText()).toContain('0');                                                                     // 22403
 *       expect(debug.getText()).toContain('true');                                                                    // 22404
 *     });                                                                                                             // 22405
 *   </file>                                                                                                           // 22406
 * </example>                                                                                                          // 22407
 */                                                                                                                    // 22408
var ngChangeDirective = valueFn({                                                                                      // 22409
  restrict: 'A',                                                                                                       // 22410
  require: 'ngModel',                                                                                                  // 22411
  link: function(scope, element, attr, ctrl) {                                                                         // 22412
    ctrl.$viewChangeListeners.push(function() {                                                                        // 22413
      scope.$eval(attr.ngChange);                                                                                      // 22414
    });                                                                                                                // 22415
  }                                                                                                                    // 22416
});                                                                                                                    // 22417
                                                                                                                       // 22418
function classDirective(name, selector) {                                                                              // 22419
  name = 'ngClass' + name;                                                                                             // 22420
  return ['$animate', function($animate) {                                                                             // 22421
    return {                                                                                                           // 22422
      restrict: 'AC',                                                                                                  // 22423
      link: function(scope, element, attr) {                                                                           // 22424
        var oldVal;                                                                                                    // 22425
                                                                                                                       // 22426
        scope.$watch(attr[name], ngClassWatchAction, true);                                                            // 22427
                                                                                                                       // 22428
        attr.$observe('class', function(value) {                                                                       // 22429
          ngClassWatchAction(scope.$eval(attr[name]));                                                                 // 22430
        });                                                                                                            // 22431
                                                                                                                       // 22432
                                                                                                                       // 22433
        if (name !== 'ngClass') {                                                                                      // 22434
          scope.$watch('$index', function($index, old$index) {                                                         // 22435
            // jshint bitwise: false                                                                                   // 22436
            var mod = $index & 1;                                                                                      // 22437
            if (mod !== (old$index & 1)) {                                                                             // 22438
              var classes = arrayClasses(scope.$eval(attr[name]));                                                     // 22439
              mod === selector ?                                                                                       // 22440
                addClasses(classes) :                                                                                  // 22441
                removeClasses(classes);                                                                                // 22442
            }                                                                                                          // 22443
          });                                                                                                          // 22444
        }                                                                                                              // 22445
                                                                                                                       // 22446
        function addClasses(classes) {                                                                                 // 22447
          var newClasses = digestClassCounts(classes, 1);                                                              // 22448
          attr.$addClass(newClasses);                                                                                  // 22449
        }                                                                                                              // 22450
                                                                                                                       // 22451
        function removeClasses(classes) {                                                                              // 22452
          var newClasses = digestClassCounts(classes, -1);                                                             // 22453
          attr.$removeClass(newClasses);                                                                               // 22454
        }                                                                                                              // 22455
                                                                                                                       // 22456
        function digestClassCounts(classes, count) {                                                                   // 22457
          // Use createMap() to prevent class assumptions involving property                                           // 22458
          // names in Object.prototype                                                                                 // 22459
          var classCounts = element.data('$classCounts') || createMap();                                               // 22460
          var classesToUpdate = [];                                                                                    // 22461
          forEach(classes, function(className) {                                                                       // 22462
            if (count > 0 || classCounts[className]) {                                                                 // 22463
              classCounts[className] = (classCounts[className] || 0) + count;                                          // 22464
              if (classCounts[className] === +(count > 0)) {                                                           // 22465
                classesToUpdate.push(className);                                                                       // 22466
              }                                                                                                        // 22467
            }                                                                                                          // 22468
          });                                                                                                          // 22469
          element.data('$classCounts', classCounts);                                                                   // 22470
          return classesToUpdate.join(' ');                                                                            // 22471
        }                                                                                                              // 22472
                                                                                                                       // 22473
        function updateClasses(oldClasses, newClasses) {                                                               // 22474
          var toAdd = arrayDifference(newClasses, oldClasses);                                                         // 22475
          var toRemove = arrayDifference(oldClasses, newClasses);                                                      // 22476
          toAdd = digestClassCounts(toAdd, 1);                                                                         // 22477
          toRemove = digestClassCounts(toRemove, -1);                                                                  // 22478
          if (toAdd && toAdd.length) {                                                                                 // 22479
            $animate.addClass(element, toAdd);                                                                         // 22480
          }                                                                                                            // 22481
          if (toRemove && toRemove.length) {                                                                           // 22482
            $animate.removeClass(element, toRemove);                                                                   // 22483
          }                                                                                                            // 22484
        }                                                                                                              // 22485
                                                                                                                       // 22486
        function ngClassWatchAction(newVal) {                                                                          // 22487
          if (selector === true || scope.$index % 2 === selector) {                                                    // 22488
            var newClasses = arrayClasses(newVal || []);                                                               // 22489
            if (!oldVal) {                                                                                             // 22490
              addClasses(newClasses);                                                                                  // 22491
            } else if (!equals(newVal,oldVal)) {                                                                       // 22492
              var oldClasses = arrayClasses(oldVal);                                                                   // 22493
              updateClasses(oldClasses, newClasses);                                                                   // 22494
            }                                                                                                          // 22495
          }                                                                                                            // 22496
          oldVal = shallowCopy(newVal);                                                                                // 22497
        }                                                                                                              // 22498
      }                                                                                                                // 22499
    };                                                                                                                 // 22500
                                                                                                                       // 22501
    function arrayDifference(tokens1, tokens2) {                                                                       // 22502
      var values = [];                                                                                                 // 22503
                                                                                                                       // 22504
      outer:                                                                                                           // 22505
      for (var i = 0; i < tokens1.length; i++) {                                                                       // 22506
        var token = tokens1[i];                                                                                        // 22507
        for (var j = 0; j < tokens2.length; j++) {                                                                     // 22508
          if (token == tokens2[j]) continue outer;                                                                     // 22509
        }                                                                                                              // 22510
        values.push(token);                                                                                            // 22511
      }                                                                                                                // 22512
      return values;                                                                                                   // 22513
    }                                                                                                                  // 22514
                                                                                                                       // 22515
    function arrayClasses(classVal) {                                                                                  // 22516
      var classes = [];                                                                                                // 22517
      if (isArray(classVal)) {                                                                                         // 22518
        forEach(classVal, function(v) {                                                                                // 22519
          classes = classes.concat(arrayClasses(v));                                                                   // 22520
        });                                                                                                            // 22521
        return classes;                                                                                                // 22522
      } else if (isString(classVal)) {                                                                                 // 22523
        return classVal.split(' ');                                                                                    // 22524
      } else if (isObject(classVal)) {                                                                                 // 22525
        forEach(classVal, function(v, k) {                                                                             // 22526
          if (v) {                                                                                                     // 22527
            classes = classes.concat(k.split(' '));                                                                    // 22528
          }                                                                                                            // 22529
        });                                                                                                            // 22530
        return classes;                                                                                                // 22531
      }                                                                                                                // 22532
      return classVal;                                                                                                 // 22533
    }                                                                                                                  // 22534
  }];                                                                                                                  // 22535
}                                                                                                                      // 22536
                                                                                                                       // 22537
/**                                                                                                                    // 22538
 * @ngdoc directive                                                                                                    // 22539
 * @name ngClass                                                                                                       // 22540
 * @restrict AC                                                                                                        // 22541
 *                                                                                                                     // 22542
 * @description                                                                                                        // 22543
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding                 // 22544
 * an expression that represents all classes to be added.                                                              // 22545
 *                                                                                                                     // 22546
 * The directive operates in three different ways, depending on which of three types the expression                    // 22547
 * evaluates to:                                                                                                       // 22548
 *                                                                                                                     // 22549
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class                  // 22550
 * names.                                                                                                              // 22551
 *                                                                                                                     // 22552
 * 2. If the expression evaluates to an object, then for each key-value pair of the                                    // 22553
 * object with a truthy value the corresponding key is used as a class name.                                           // 22554
 *                                                                                                                     // 22555
 * 3. If the expression evaluates to an array, each element of the array should either be a string as in               // 22556
 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array              // 22557
 * to give you more control over what CSS classes appear. See the code below for an example of this.                   // 22558
 *                                                                                                                     // 22559
 *                                                                                                                     // 22560
 * The directive won't add duplicate classes if a particular class was already set.                                    // 22561
 *                                                                                                                     // 22562
 * When the expression changes, the previously added classes are removed and only then are the                         // 22563
 * new classes added.                                                                                                  // 22564
 *                                                                                                                     // 22565
 * @animations                                                                                                         // 22566
 * **add** - happens just before the class is applied to the elements                                                  // 22567
 *                                                                                                                     // 22568
 * **remove** - happens just before the class is removed from the element                                              // 22569
 *                                                                                                                     // 22570
 * @element ANY                                                                                                        // 22571
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result                                 // 22572
 *   of the evaluation can be a string representing space delimited class                                              // 22573
 *   names, an array, or a map of class names to boolean values. In the case of a map, the                             // 22574
 *   names of the properties whose values are truthy will be added as css classes to the                               // 22575
 *   element.                                                                                                          // 22576
 *                                                                                                                     // 22577
 * @example Example that demonstrates basic bindings via ngClass directive.                                            // 22578
   <example>                                                                                                           // 22579
     <file name="index.html">                                                                                          // 22580
       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>                     // 22581
       <label>                                                                                                         // 22582
          <input type="checkbox" ng-model="deleted">                                                                   // 22583
          deleted (apply "strike" class)                                                                               // 22584
       </label><br>                                                                                                    // 22585
       <label>                                                                                                         // 22586
          <input type="checkbox" ng-model="important">                                                                 // 22587
          important (apply "bold" class)                                                                               // 22588
       </label><br>                                                                                                    // 22589
       <label>                                                                                                         // 22590
          <input type="checkbox" ng-model="error">                                                                     // 22591
          error (apply "has-error" class)                                                                              // 22592
       </label>                                                                                                        // 22593
       <hr>                                                                                                            // 22594
       <p ng-class="style">Using String Syntax</p>                                                                     // 22595
       <input type="text" ng-model="style"                                                                             // 22596
              placeholder="Type: bold strike red" aria-label="Type: bold strike red">                                  // 22597
       <hr>                                                                                                            // 22598
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>                                                   // 22599
       <input ng-model="style1"                                                                                        // 22600
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>                      // 22601
       <input ng-model="style2"                                                                                        // 22602
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>                    // 22603
       <input ng-model="style3"                                                                                        // 22604
              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>                    // 22605
       <hr>                                                                                                            // 22606
       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>                                        // 22607
       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>                  // 22608
       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>                        // 22609
     </file>                                                                                                           // 22610
     <file name="style.css">                                                                                           // 22611
       .strike {                                                                                                       // 22612
           text-decoration: line-through;                                                                              // 22613
       }                                                                                                               // 22614
       .bold {                                                                                                         // 22615
           font-weight: bold;                                                                                          // 22616
       }                                                                                                               // 22617
       .red {                                                                                                          // 22618
           color: red;                                                                                                 // 22619
       }                                                                                                               // 22620
       .has-error {                                                                                                    // 22621
           color: red;                                                                                                 // 22622
           background-color: yellow;                                                                                   // 22623
       }                                                                                                               // 22624
       .orange {                                                                                                       // 22625
           color: orange;                                                                                              // 22626
       }                                                                                                               // 22627
     </file>                                                                                                           // 22628
     <file name="protractor.js" type="protractor">                                                                     // 22629
       var ps = element.all(by.css('p'));                                                                              // 22630
                                                                                                                       // 22631
       it('should let you toggle the class', function() {                                                              // 22632
                                                                                                                       // 22633
         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);                                                 // 22634
         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);                                            // 22635
                                                                                                                       // 22636
         element(by.model('important')).click();                                                                       // 22637
         expect(ps.first().getAttribute('class')).toMatch(/bold/);                                                     // 22638
                                                                                                                       // 22639
         element(by.model('error')).click();                                                                           // 22640
         expect(ps.first().getAttribute('class')).toMatch(/has-error/);                                                // 22641
       });                                                                                                             // 22642
                                                                                                                       // 22643
       it('should let you toggle string example', function() {                                                         // 22644
         expect(ps.get(1).getAttribute('class')).toBe('');                                                             // 22645
         element(by.model('style')).clear();                                                                           // 22646
         element(by.model('style')).sendKeys('red');                                                                   // 22647
         expect(ps.get(1).getAttribute('class')).toBe('red');                                                          // 22648
       });                                                                                                             // 22649
                                                                                                                       // 22650
       it('array example should have 3 classes', function() {                                                          // 22651
         expect(ps.get(2).getAttribute('class')).toBe('');                                                             // 22652
         element(by.model('style1')).sendKeys('bold');                                                                 // 22653
         element(by.model('style2')).sendKeys('strike');                                                               // 22654
         element(by.model('style3')).sendKeys('red');                                                                  // 22655
         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');                                              // 22656
       });                                                                                                             // 22657
                                                                                                                       // 22658
       it('array with map example should have 2 classes', function() {                                                 // 22659
         expect(ps.last().getAttribute('class')).toBe('');                                                             // 22660
         element(by.model('style4')).sendKeys('bold');                                                                 // 22661
         element(by.model('warning')).click();                                                                         // 22662
         expect(ps.last().getAttribute('class')).toBe('bold orange');                                                  // 22663
       });                                                                                                             // 22664
     </file>                                                                                                           // 22665
   </example>                                                                                                          // 22666
                                                                                                                       // 22667
   ## Animations                                                                                                       // 22668
                                                                                                                       // 22669
   The example below demonstrates how to perform animations using ngClass.                                             // 22670
                                                                                                                       // 22671
   <example module="ngAnimate" deps="angular-animate.js" animations="true">                                            // 22672
     <file name="index.html">                                                                                          // 22673
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">                                        // 22674
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">                                            // 22675
      <br>                                                                                                             // 22676
      <span class="base-class" ng-class="myVar">Sample Text</span>                                                     // 22677
     </file>                                                                                                           // 22678
     <file name="style.css">                                                                                           // 22679
       .base-class {                                                                                                   // 22680
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                 // 22681
       }                                                                                                               // 22682
                                                                                                                       // 22683
       .base-class.my-class {                                                                                          // 22684
         color: red;                                                                                                   // 22685
         font-size:3em;                                                                                                // 22686
       }                                                                                                               // 22687
     </file>                                                                                                           // 22688
     <file name="protractor.js" type="protractor">                                                                     // 22689
       it('should check ng-class', function() {                                                                        // 22690
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22691
           toMatch(/my-class/);                                                                                        // 22692
                                                                                                                       // 22693
         element(by.id('setbtn')).click();                                                                             // 22694
                                                                                                                       // 22695
         expect(element(by.css('.base-class')).getAttribute('class')).                                                 // 22696
           toMatch(/my-class/);                                                                                        // 22697
                                                                                                                       // 22698
         element(by.id('clearbtn')).click();                                                                           // 22699
                                                                                                                       // 22700
         expect(element(by.css('.base-class')).getAttribute('class')).not.                                             // 22701
           toMatch(/my-class/);                                                                                        // 22702
       });                                                                                                             // 22703
     </file>                                                                                                           // 22704
   </example>                                                                                                          // 22705
                                                                                                                       // 22706
                                                                                                                       // 22707
   ## ngClass and pre-existing CSS3 Transitions/Animations                                                             // 22708
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link $animate#addClass $animate.addClass} and                                 // 22712
   {@link $animate#removeClass $animate.removeClass}.                                                                  // 22713
 */                                                                                                                    // 22714
var ngClassDirective = classDirective('', true);                                                                       // 22715
                                                                                                                       // 22716
/**                                                                                                                    // 22717
 * @ngdoc directive                                                                                                    // 22718
 * @name ngClassOdd                                                                                                    // 22719
 * @restrict AC                                                                                                        // 22720
 *                                                                                                                     // 22721
 * @description                                                                                                        // 22722
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22723
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22724
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22725
 *                                                                                                                     // 22726
 * This directive can be applied only within the scope of an                                                           // 22727
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22728
 *                                                                                                                     // 22729
 * @element ANY                                                                                                        // 22730
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result                              // 22731
 *   of the evaluation can be a string representing space delimited class names or an array.                           // 22732
 *                                                                                                                     // 22733
 * @example                                                                                                            // 22734
   <example>                                                                                                           // 22735
     <file name="index.html">                                                                                          // 22736
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22737
          <li ng-repeat="name in names">                                                                               // 22738
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22739
             {{name}}                                                                                                  // 22740
           </span>                                                                                                     // 22741
          </li>                                                                                                        // 22742
        </ol>                                                                                                          // 22743
     </file>                                                                                                           // 22744
     <file name="style.css">                                                                                           // 22745
       .odd {                                                                                                          // 22746
         color: red;                                                                                                   // 22747
       }                                                                                                               // 22748
       .even {                                                                                                         // 22749
         color: blue;                                                                                                  // 22750
       }                                                                                                               // 22751
     </file>                                                                                                           // 22752
     <file name="protractor.js" type="protractor">                                                                     // 22753
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22754
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22755
           toMatch(/odd/);                                                                                             // 22756
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22757
           toMatch(/even/);                                                                                            // 22758
       });                                                                                                             // 22759
     </file>                                                                                                           // 22760
   </example>                                                                                                          // 22761
 */                                                                                                                    // 22762
var ngClassOddDirective = classDirective('Odd', 0);                                                                    // 22763
                                                                                                                       // 22764
/**                                                                                                                    // 22765
 * @ngdoc directive                                                                                                    // 22766
 * @name ngClassEven                                                                                                   // 22767
 * @restrict AC                                                                                                        // 22768
 *                                                                                                                     // 22769
 * @description                                                                                                        // 22770
 * The `ngClassOdd` and `ngClassEven` directives work exactly as                                                       // 22771
 * {@link ng.directive:ngClass ngClass}, except they work in                                                           // 22772
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.                                                // 22773
 *                                                                                                                     // 22774
 * This directive can be applied only within the scope of an                                                           // 22775
 * {@link ng.directive:ngRepeat ngRepeat}.                                                                             // 22776
 *                                                                                                                     // 22777
 * @element ANY                                                                                                        // 22778
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The                                    // 22779
 *   result of the evaluation can be a string representing space delimited class names or an array.                    // 22780
 *                                                                                                                     // 22781
 * @example                                                                                                            // 22782
   <example>                                                                                                           // 22783
     <file name="index.html">                                                                                          // 22784
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">                                                           // 22785
          <li ng-repeat="name in names">                                                                               // 22786
           <span ng-class-odd="'odd'" ng-class-even="'even'">                                                          // 22787
             {{name}} &nbsp; &nbsp; &nbsp;                                                                             // 22788
           </span>                                                                                                     // 22789
          </li>                                                                                                        // 22790
        </ol>                                                                                                          // 22791
     </file>                                                                                                           // 22792
     <file name="style.css">                                                                                           // 22793
       .odd {                                                                                                          // 22794
         color: red;                                                                                                   // 22795
       }                                                                                                               // 22796
       .even {                                                                                                         // 22797
         color: blue;                                                                                                  // 22798
       }                                                                                                               // 22799
     </file>                                                                                                           // 22800
     <file name="protractor.js" type="protractor">                                                                     // 22801
       it('should check ng-class-odd and ng-class-even', function() {                                                  // 22802
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).                    // 22803
           toMatch(/odd/);                                                                                             // 22804
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).                    // 22805
           toMatch(/even/);                                                                                            // 22806
       });                                                                                                             // 22807
     </file>                                                                                                           // 22808
   </example>                                                                                                          // 22809
 */                                                                                                                    // 22810
var ngClassEvenDirective = classDirective('Even', 1);                                                                  // 22811
                                                                                                                       // 22812
/**                                                                                                                    // 22813
 * @ngdoc directive                                                                                                    // 22814
 * @name ngCloak                                                                                                       // 22815
 * @restrict AC                                                                                                        // 22816
 *                                                                                                                     // 22817
 * @description                                                                                                        // 22818
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly                             // 22819
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this                   // 22820
 * directive to avoid the undesirable flicker effect caused by the html template display.                              // 22821
 *                                                                                                                     // 22822
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply                           // 22823
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering                         // 22824
 * of the browser view.                                                                                                // 22825
 *                                                                                                                     // 22826
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and                         // 22827
 * `angular.min.js`.                                                                                                   // 22828
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 22829
 *                                                                                                                     // 22830
 * ```css                                                                                                              // 22831
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {                                    // 22832
 *   display: none !important;                                                                                         // 22833
 * }                                                                                                                   // 22834
 * ```                                                                                                                 // 22835
 *                                                                                                                     // 22836
 * When this css rule is loaded by the browser, all html elements (including their children) that                      // 22837
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive                          // 22838
 * during the compilation of the template it deletes the `ngCloak` element attribute, making                           // 22839
 * the compiled element visible.                                                                                       // 22840
 *                                                                                                                     // 22841
 * For the best result, the `angular.js` script must be loaded in the head section of the html                         // 22842
 * document; alternatively, the css rule above must be included in the external stylesheet of the                      // 22843
 * application.                                                                                                        // 22844
 *                                                                                                                     // 22845
 * @element ANY                                                                                                        // 22846
 *                                                                                                                     // 22847
 * @example                                                                                                            // 22848
   <example>                                                                                                           // 22849
     <file name="index.html">                                                                                          // 22850
        <div id="template1" ng-cloak>{{ 'hello' }}</div>                                                               // 22851
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>                                                       // 22852
     </file>                                                                                                           // 22853
     <file name="protractor.js" type="protractor">                                                                     // 22854
       it('should remove the template directive and css class', function() {                                           // 22855
         expect($('#template1').getAttribute('ng-cloak')).                                                             // 22856
           toBeNull();                                                                                                 // 22857
         expect($('#template2').getAttribute('ng-cloak')).                                                             // 22858
           toBeNull();                                                                                                 // 22859
       });                                                                                                             // 22860
     </file>                                                                                                           // 22861
   </example>                                                                                                          // 22862
 *                                                                                                                     // 22863
 */                                                                                                                    // 22864
var ngCloakDirective = ngDirective({                                                                                   // 22865
  compile: function(element, attr) {                                                                                   // 22866
    attr.$set('ngCloak', undefined);                                                                                   // 22867
    element.removeClass('ng-cloak');                                                                                   // 22868
  }                                                                                                                    // 22869
});                                                                                                                    // 22870
                                                                                                                       // 22871
/**                                                                                                                    // 22872
 * @ngdoc directive                                                                                                    // 22873
 * @name ngController                                                                                                  // 22874
 *                                                                                                                     // 22875
 * @description                                                                                                        // 22876
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular           // 22877
 * supports the principles behind the Model-View-Controller design pattern.                                            // 22878
 *                                                                                                                     // 22879
 * MVC components in angular:                                                                                          // 22880
 *                                                                                                                     // 22881
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties               // 22882
 *   are accessed through bindings.                                                                                    // 22883
 * * View — The template (HTML with data bindings) that is rendered into the View.                                     // 22884
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business               // 22885
 *   logic behind the application to decorate the scope with functions and values                                      // 22886
 *                                                                                                                     // 22887
 * Note that you can also attach controllers to the DOM by declaring it in a route definition                          // 22888
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller                        // 22889
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached                  // 22890
 * and executed twice.                                                                                                 // 22891
 *                                                                                                                     // 22892
 * @element ANY                                                                                                        // 22893
 * @scope                                                                                                              // 22894
 * @priority 500                                                                                                       // 22895
 * @param {expression} ngController Name of a constructor function registered with the current                         // 22896
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}                        // 22897
 * that on the current scope evaluates to a constructor function.                                                      // 22898
 *                                                                                                                     // 22899
 * The controller instance can be published into a scope property by specifying                                        // 22900
 * `ng-controller="as propertyName"`.                                                                                  // 22901
 *                                                                                                                     // 22902
 * If the current `$controllerProvider` is configured to use globals (via                                              // 22903
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may                        // 22904
 * also be the name of a globally accessible constructor function (not recommended).                                   // 22905
 *                                                                                                                     // 22906
 * @example                                                                                                            // 22907
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and                         // 22908
 * greeting are methods declared on the controller (see source tab). These methods can                                 // 22909
 * easily be called from the angular markup. Any changes to the data are automatically reflected                       // 22910
 * in the View without the need for a manual update.                                                                   // 22911
 *                                                                                                                     // 22912
 * Two different declaration styles are included below:                                                                // 22913
 *                                                                                                                     // 22914
 * * one binds methods and properties directly onto the controller using `this`:                                       // 22915
 * `ng-controller="SettingsController1 as settings"`                                                                   // 22916
 * * one injects `$scope` into the controller:                                                                         // 22917
 * `ng-controller="SettingsController2"`                                                                               // 22918
 *                                                                                                                     // 22919
 * The second option is more common in the Angular community, and is generally used in boilerplates                    // 22920
 * and in this guide. However, there are advantages to binding properties directly to the controller                   // 22921
 * and avoiding scope.                                                                                                 // 22922
 *                                                                                                                     // 22923
 * * Using `controller as` makes it obvious which controller you are accessing in the template when                    // 22924
 * multiple controllers apply to an element.                                                                           // 22925
 * * If you are writing your controllers as classes you have easier access to the properties and                       // 22926
 * methods, which will appear on the scope, from inside the controller code.                                           // 22927
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal                             // 22928
 * inheritance masking primitives.                                                                                     // 22929
 *                                                                                                                     // 22930
 * This example demonstrates the `controller as` syntax.                                                               // 22931
 *                                                                                                                     // 22932
 * <example name="ngControllerAs" module="controllerAsExample">                                                        // 22933
 *   <file name="index.html">                                                                                          // 22934
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">                                         // 22935
 *      <label>Name: <input type="text" ng-model="settings.name"/></label>                                             // 22936
 *      <button ng-click="settings.greet()">greet</button><br/>                                                        // 22937
 *      Contact:                                                                                                       // 22938
 *      <ul>                                                                                                           // 22939
 *        <li ng-repeat="contact in settings.contacts">                                                                // 22940
 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">                        // 22941
 *             <option>phone</option>                                                                                  // 22942
 *             <option>email</option>                                                                                  // 22943
 *          </select>                                                                                                  // 22944
 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                         // 22945
 *          <button ng-click="settings.clearContact(contact)">clear</button>                                           // 22946
 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>                          // 22947
 *        </li>                                                                                                        // 22948
 *        <li><button ng-click="settings.addContact()">add</button></li>                                               // 22949
 *     </ul>                                                                                                           // 22950
 *    </div>                                                                                                           // 22951
 *   </file>                                                                                                           // 22952
 *   <file name="app.js">                                                                                              // 22953
 *    angular.module('controllerAsExample', [])                                                                        // 22954
 *      .controller('SettingsController1', SettingsController1);                                                       // 22955
 *                                                                                                                     // 22956
 *    function SettingsController1() {                                                                                 // 22957
 *      this.name = "John Smith";                                                                                      // 22958
 *      this.contacts = [                                                                                              // 22959
 *        {type: 'phone', value: '408 555 1212'},                                                                      // 22960
 *        {type: 'email', value: 'john.smith@example.org'} ];                                                          // 22961
 *    }                                                                                                                // 22962
 *                                                                                                                     // 22963
 *    SettingsController1.prototype.greet = function() {                                                               // 22964
 *      alert(this.name);                                                                                              // 22965
 *    };                                                                                                               // 22966
 *                                                                                                                     // 22967
 *    SettingsController1.prototype.addContact = function() {                                                          // 22968
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});                                            // 22969
 *    };                                                                                                               // 22970
 *                                                                                                                     // 22971
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {                                        // 22972
 *     var index = this.contacts.indexOf(contactToRemove);                                                             // 22973
 *      this.contacts.splice(index, 1);                                                                                // 22974
 *    };                                                                                                               // 22975
 *                                                                                                                     // 22976
 *    SettingsController1.prototype.clearContact = function(contact) {                                                 // 22977
 *      contact.type = 'phone';                                                                                        // 22978
 *      contact.value = '';                                                                                            // 22979
 *    };                                                                                                               // 22980
 *   </file>                                                                                                           // 22981
 *   <file name="protractor.js" type="protractor">                                                                     // 22982
 *     it('should check controller as', function() {                                                                   // 22983
 *       var container = element(by.id('ctrl-as-exmpl'));                                                              // 22984
 *         expect(container.element(by.model('settings.name'))                                                         // 22985
 *           .getAttribute('value')).toBe('John Smith');                                                               // 22986
 *                                                                                                                     // 22987
 *       var firstRepeat =                                                                                             // 22988
 *           container.element(by.repeater('contact in settings.contacts').row(0));                                    // 22989
 *       var secondRepeat =                                                                                            // 22990
 *           container.element(by.repeater('contact in settings.contacts').row(1));                                    // 22991
 *                                                                                                                     // 22992
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 22993
 *           .toBe('408 555 1212');                                                                                    // 22994
 *                                                                                                                     // 22995
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                 // 22996
 *           .toBe('john.smith@example.org');                                                                          // 22997
 *                                                                                                                     // 22998
 *       firstRepeat.element(by.buttonText('clear')).click();                                                          // 22999
 *                                                                                                                     // 23000
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23001
 *           .toBe('');                                                                                                // 23002
 *                                                                                                                     // 23003
 *       container.element(by.buttonText('add')).click();                                                              // 23004
 *                                                                                                                     // 23005
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))                                  // 23006
 *           .element(by.model('contact.value'))                                                                       // 23007
 *           .getAttribute('value'))                                                                                   // 23008
 *           .toBe('yourname@example.org');                                                                            // 23009
 *     });                                                                                                             // 23010
 *   </file>                                                                                                           // 23011
 * </example>                                                                                                          // 23012
 *                                                                                                                     // 23013
 * This example demonstrates the "attach to `$scope`" style of controller.                                             // 23014
 *                                                                                                                     // 23015
 * <example name="ngController" module="controllerExample">                                                            // 23016
 *  <file name="index.html">                                                                                           // 23017
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">                                                         // 23018
 *     <label>Name: <input type="text" ng-model="name"/></label>                                                       // 23019
 *     <button ng-click="greet()">greet</button><br/>                                                                  // 23020
 *     Contact:                                                                                                        // 23021
 *     <ul>                                                                                                            // 23022
 *       <li ng-repeat="contact in contacts">                                                                          // 23023
 *         <select ng-model="contact.type" id="select_{{$index}}">                                                     // 23024
 *            <option>phone</option>                                                                                   // 23025
 *            <option>email</option>                                                                                   // 23026
 *         </select>                                                                                                   // 23027
 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />                          // 23028
 *         <button ng-click="clearContact(contact)">clear</button>                                                     // 23029
 *         <button ng-click="removeContact(contact)">X</button>                                                        // 23030
 *       </li>                                                                                                         // 23031
 *       <li>[ <button ng-click="addContact()">add</button> ]</li>                                                     // 23032
 *    </ul>                                                                                                            // 23033
 *   </div>                                                                                                            // 23034
 *  </file>                                                                                                            // 23035
 *  <file name="app.js">                                                                                               // 23036
 *   angular.module('controllerExample', [])                                                                           // 23037
 *     .controller('SettingsController2', ['$scope', SettingsController2]);                                            // 23038
 *                                                                                                                     // 23039
 *   function SettingsController2($scope) {                                                                            // 23040
 *     $scope.name = "John Smith";                                                                                     // 23041
 *     $scope.contacts = [                                                                                             // 23042
 *       {type:'phone', value:'408 555 1212'},                                                                         // 23043
 *       {type:'email', value:'john.smith@example.org'} ];                                                             // 23044
 *                                                                                                                     // 23045
 *     $scope.greet = function() {                                                                                     // 23046
 *       alert($scope.name);                                                                                           // 23047
 *     };                                                                                                              // 23048
 *                                                                                                                     // 23049
 *     $scope.addContact = function() {                                                                                // 23050
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});                                           // 23051
 *     };                                                                                                              // 23052
 *                                                                                                                     // 23053
 *     $scope.removeContact = function(contactToRemove) {                                                              // 23054
 *       var index = $scope.contacts.indexOf(contactToRemove);                                                         // 23055
 *       $scope.contacts.splice(index, 1);                                                                             // 23056
 *     };                                                                                                              // 23057
 *                                                                                                                     // 23058
 *     $scope.clearContact = function(contact) {                                                                       // 23059
 *       contact.type = 'phone';                                                                                       // 23060
 *       contact.value = '';                                                                                           // 23061
 *     };                                                                                                              // 23062
 *   }                                                                                                                 // 23063
 *  </file>                                                                                                            // 23064
 *  <file name="protractor.js" type="protractor">                                                                      // 23065
 *    it('should check controller', function() {                                                                       // 23066
 *      var container = element(by.id('ctrl-exmpl'));                                                                  // 23067
 *                                                                                                                     // 23068
 *      expect(container.element(by.model('name'))                                                                     // 23069
 *          .getAttribute('value')).toBe('John Smith');                                                                // 23070
 *                                                                                                                     // 23071
 *      var firstRepeat =                                                                                              // 23072
 *          container.element(by.repeater('contact in contacts').row(0));                                              // 23073
 *      var secondRepeat =                                                                                             // 23074
 *          container.element(by.repeater('contact in contacts').row(1));                                              // 23075
 *                                                                                                                     // 23076
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23077
 *          .toBe('408 555 1212');                                                                                     // 23078
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))                                  // 23079
 *          .toBe('john.smith@example.org');                                                                           // 23080
 *                                                                                                                     // 23081
 *      firstRepeat.element(by.buttonText('clear')).click();                                                           // 23082
 *                                                                                                                     // 23083
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))                                   // 23084
 *          .toBe('');                                                                                                 // 23085
 *                                                                                                                     // 23086
 *      container.element(by.buttonText('add')).click();                                                               // 23087
 *                                                                                                                     // 23088
 *      expect(container.element(by.repeater('contact in contacts').row(2))                                            // 23089
 *          .element(by.model('contact.value'))                                                                        // 23090
 *          .getAttribute('value'))                                                                                    // 23091
 *          .toBe('yourname@example.org');                                                                             // 23092
 *    });                                                                                                              // 23093
 *  </file>                                                                                                            // 23094
 *</example>                                                                                                           // 23095
                                                                                                                       // 23096
 */                                                                                                                    // 23097
var ngControllerDirective = [function() {                                                                              // 23098
  return {                                                                                                             // 23099
    restrict: 'A',                                                                                                     // 23100
    scope: true,                                                                                                       // 23101
    controller: '@',                                                                                                   // 23102
    priority: 500                                                                                                      // 23103
  };                                                                                                                   // 23104
}];                                                                                                                    // 23105
                                                                                                                       // 23106
/**                                                                                                                    // 23107
 * @ngdoc directive                                                                                                    // 23108
 * @name ngCsp                                                                                                         // 23109
 *                                                                                                                     // 23110
 * @element html                                                                                                       // 23111
 * @description                                                                                                        // 23112
 *                                                                                                                     // 23113
 * Angular has some features that can break certain                                                                    // 23114
 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.                               // 23115
 *                                                                                                                     // 23116
 * If you intend to implement these rules then you must tell Angular not to use these features.                        // 23117
 *                                                                                                                     // 23118
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.                   // 23119
 *                                                                                                                     // 23120
 *                                                                                                                     // 23121
 * The following rules affect Angular:                                                                                 // 23122
 *                                                                                                                     // 23123
 * * `unsafe-eval`: this rule forbids apps to use `eval` or `Function(string)` generated functions                     // 23124
 * (among other things). Angular makes use of this in the {@link $parse} service to provide a 30%                      // 23125
 * increase in the speed of evaluating Angular expressions.                                                            // 23126
 *                                                                                                                     // 23127
 * * `unsafe-inline`: this rule forbids apps from inject custom styles into the document. Angular                      // 23128
 * makes use of this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}).                              // 23129
 * To make these directives work when a CSP rule is blocking inline styles, you must link to the                       // 23130
 * `angular-csp.css` in your HTML manually.                                                                            // 23131
 *                                                                                                                     // 23132
 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking unsafe-eval                       // 23133
 * and automatically deactivates this feature in the {@link $parse} service. This autodetection,                       // 23134
 * however, triggers a CSP error to be logged in the console:                                                          // 23135
 *                                                                                                                     // 23136
 * ```                                                                                                                 // 23137
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of                        // 23138
 * script in the following Content Security Policy directive: "default-src 'self'". Note that                          // 23139
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.                                        // 23140
 * ```                                                                                                                 // 23141
 *                                                                                                                     // 23142
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`                          // 23143
 * directive on an element of the HTML document that appears before the `<script>` tag that loads                      // 23144
 * the `angular.js` file.                                                                                              // 23145
 *                                                                                                                     // 23146
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*                          // 23147
 *                                                                                                                     // 23148
 * You can specify which of the CSP related Angular features should be deactivated by providing                        // 23149
 * a value for the `ng-csp` attribute. The options are as follows:                                                     // 23150
 *                                                                                                                     // 23151
 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM                                        // 23152
 *                                                                                                                     // 23153
 * * no-unsafe-eval: this stops Angular from optimising $parse with unsafe eval of strings                             // 23154
 *                                                                                                                     // 23155
 * You can use these values in the following combinations:                                                             // 23156
 *                                                                                                                     // 23157
 *                                                                                                                     // 23158
 * * No declaration means that Angular will assume that you can do inline styles, but it will do                       // 23159
 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous versions                // 23160
 * of Angular.                                                                                                         // 23161
 *                                                                                                                     // 23162
 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline                        // 23163
 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous versions                  // 23164
 * of Angular.                                                                                                         // 23165
 *                                                                                                                     // 23166
 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can inject                  // 23167
 * inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.                                                               // 23168
 *                                                                                                                     // 23169
 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can                   // 23170
 * run eval - no automcatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`                   // 23171
 *                                                                                                                     // 23172
 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject                      // 23173
 * styles nor use eval, which is the same as an empty: ng-csp.                                                         // 23174
 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`                                                                // 23175
 *                                                                                                                     // 23176
 * @example                                                                                                            // 23177
 * This example shows how to apply the `ngCsp` directive to the `html` tag.                                            // 23178
   ```html                                                                                                             // 23179
     <!doctype html>                                                                                                   // 23180
     <html ng-app ng-csp>                                                                                              // 23181
     ...                                                                                                               // 23182
     ...                                                                                                               // 23183
     </html>                                                                                                           // 23184
   ```                                                                                                                 // 23185
  * @example                                                                                                           // 23186
      // Note: the suffix `.csp` in the example name triggers                                                          // 23187
      // csp mode in our http server!                                                                                  // 23188
      <example name="example.csp" module="cspExample" ng-csp="true">                                                   // 23189
        <file name="index.html">                                                                                       // 23190
          <div ng-controller="MainController as ctrl">                                                                 // 23191
            <div>                                                                                                      // 23192
              <button ng-click="ctrl.inc()" id="inc">Increment</button>                                                // 23193
              <span id="counter">                                                                                      // 23194
                {{ctrl.counter}}                                                                                       // 23195
              </span>                                                                                                  // 23196
            </div>                                                                                                     // 23197
                                                                                                                       // 23198
            <div>                                                                                                      // 23199
              <button ng-click="ctrl.evil()" id="evil">Evil</button>                                                   // 23200
              <span id="evilError">                                                                                    // 23201
                {{ctrl.evilError}}                                                                                     // 23202
              </span>                                                                                                  // 23203
            </div>                                                                                                     // 23204
          </div>                                                                                                       // 23205
        </file>                                                                                                        // 23206
        <file name="script.js">                                                                                        // 23207
           angular.module('cspExample', [])                                                                            // 23208
             .controller('MainController', function() {                                                                // 23209
                this.counter = 0;                                                                                      // 23210
                this.inc = function() {                                                                                // 23211
                  this.counter++;                                                                                      // 23212
                };                                                                                                     // 23213
                this.evil = function() {                                                                               // 23214
                  // jshint evil:true                                                                                  // 23215
                  try {                                                                                                // 23216
                    eval('1+2');                                                                                       // 23217
                  } catch (e) {                                                                                        // 23218
                    this.evilError = e.message;                                                                        // 23219
                  }                                                                                                    // 23220
                };                                                                                                     // 23221
              });                                                                                                      // 23222
        </file>                                                                                                        // 23223
        <file name="protractor.js" type="protractor">                                                                  // 23224
          var util, webdriver;                                                                                         // 23225
                                                                                                                       // 23226
          var incBtn = element(by.id('inc'));                                                                          // 23227
          var counter = element(by.id('counter'));                                                                     // 23228
          var evilBtn = element(by.id('evil'));                                                                        // 23229
          var evilError = element(by.id('evilError'));                                                                 // 23230
                                                                                                                       // 23231
          function getAndClearSevereErrors() {                                                                         // 23232
            return browser.manage().logs().get('browser').then(function(browserLog) {                                  // 23233
              return browserLog.filter(function(logEntry) {                                                            // 23234
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;                                   // 23235
              });                                                                                                      // 23236
            });                                                                                                        // 23237
          }                                                                                                            // 23238
                                                                                                                       // 23239
          function clearErrors() {                                                                                     // 23240
            getAndClearSevereErrors();                                                                                 // 23241
          }                                                                                                            // 23242
                                                                                                                       // 23243
          function expectNoErrors() {                                                                                  // 23244
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23245
              expect(filteredLog.length).toEqual(0);                                                                   // 23246
              if (filteredLog.length) {                                                                                // 23247
                console.log('browser console errors: ' + util.inspect(filteredLog));                                   // 23248
              }                                                                                                        // 23249
            });                                                                                                        // 23250
          }                                                                                                            // 23251
                                                                                                                       // 23252
          function expectError(regex) {                                                                                // 23253
            getAndClearSevereErrors().then(function(filteredLog) {                                                     // 23254
              var found = false;                                                                                       // 23255
              filteredLog.forEach(function(log) {                                                                      // 23256
                if (log.message.match(regex)) {                                                                        // 23257
                  found = true;                                                                                        // 23258
                }                                                                                                      // 23259
              });                                                                                                      // 23260
              if (!found) {                                                                                            // 23261
                throw new Error('expected an error that matches ' + regex);                                            // 23262
              }                                                                                                        // 23263
            });                                                                                                        // 23264
          }                                                                                                            // 23265
                                                                                                                       // 23266
          beforeEach(function() {                                                                                      // 23267
            util = require('util');                                                                                    // 23268
            webdriver = require('protractor/node_modules/selenium-webdriver');                                         // 23269
          });                                                                                                          // 23270
                                                                                                                       // 23271
          // For now, we only test on Chrome,                                                                          // 23272
          // as Safari does not load the page with Protractor's injected scripts,                                      // 23273
          // and Firefox webdriver always disables content security policy (#6358)                                     // 23274
          if (browser.params.browser !== 'chrome') {                                                                   // 23275
            return;                                                                                                    // 23276
          }                                                                                                            // 23277
                                                                                                                       // 23278
          it('should not report errors when the page is loaded', function() {                                          // 23279
            // clear errors so we are not dependent on previous tests                                                  // 23280
            clearErrors();                                                                                             // 23281
            // Need to reload the page as the page is already loaded when                                              // 23282
            // we come here                                                                                            // 23283
            browser.driver.getCurrentUrl().then(function(url) {                                                        // 23284
              browser.get(url);                                                                                        // 23285
            });                                                                                                        // 23286
            expectNoErrors();                                                                                          // 23287
          });                                                                                                          // 23288
                                                                                                                       // 23289
          it('should evaluate expressions', function() {                                                               // 23290
            expect(counter.getText()).toEqual('0');                                                                    // 23291
            incBtn.click();                                                                                            // 23292
            expect(counter.getText()).toEqual('1');                                                                    // 23293
            expectNoErrors();                                                                                          // 23294
          });                                                                                                          // 23295
                                                                                                                       // 23296
          it('should throw and report an error when using "eval"', function() {                                        // 23297
            evilBtn.click();                                                                                           // 23298
            expect(evilError.getText()).toMatch(/Content Security Policy/);                                            // 23299
            expectError(/Content Security Policy/);                                                                    // 23300
          });                                                                                                          // 23301
        </file>                                                                                                        // 23302
      </example>                                                                                                       // 23303
  */                                                                                                                   // 23304
                                                                                                                       // 23305
// ngCsp is not implemented as a proper directive any more, because we need it be processed while we                   // 23306
// bootstrap the system (before $parse is instantiated), for this reason we just have                                  // 23307
// the csp() fn that looks for the `ng-csp` attribute anywhere in the current doc                                      // 23308
                                                                                                                       // 23309
/**                                                                                                                    // 23310
 * @ngdoc directive                                                                                                    // 23311
 * @name ngClick                                                                                                       // 23312
 *                                                                                                                     // 23313
 * @description                                                                                                        // 23314
 * The ngClick directive allows you to specify custom behavior when                                                    // 23315
 * an element is clicked.                                                                                              // 23316
 *                                                                                                                     // 23317
 * @element ANY                                                                                                        // 23318
 * @priority 0                                                                                                         // 23319
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon                                    // 23320
 * click. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23321
 *                                                                                                                     // 23322
 * @example                                                                                                            // 23323
   <example>                                                                                                           // 23324
     <file name="index.html">                                                                                          // 23325
      <button ng-click="count = count + 1" ng-init="count=0">                                                          // 23326
        Increment                                                                                                      // 23327
      </button>                                                                                                        // 23328
      <span>                                                                                                           // 23329
        count: {{count}}                                                                                               // 23330
      </span>                                                                                                          // 23331
     </file>                                                                                                           // 23332
     <file name="protractor.js" type="protractor">                                                                     // 23333
       it('should check ng-click', function() {                                                                        // 23334
         expect(element(by.binding('count')).getText()).toMatch('0');                                                  // 23335
         element(by.css('button')).click();                                                                            // 23336
         expect(element(by.binding('count')).getText()).toMatch('1');                                                  // 23337
       });                                                                                                             // 23338
     </file>                                                                                                           // 23339
   </example>                                                                                                          // 23340
 */                                                                                                                    // 23341
/*                                                                                                                     // 23342
 * A collection of directives that allows creation of custom event handlers that are defined as                        // 23343
 * angular expressions and are compiled and executed within the current scope.                                         // 23344
 */                                                                                                                    // 23345
var ngEventDirectives = {};                                                                                            // 23346
                                                                                                                       // 23347
// For events that might fire synchronously during DOM manipulation                                                    // 23348
// we need to execute their event handlers asynchronously using $evalAsync,                                            // 23349
// so that they are not executed in an inconsistent state.                                                             // 23350
var forceAsyncEvents = {                                                                                               // 23351
  'blur': true,                                                                                                        // 23352
  'focus': true                                                                                                        // 23353
};                                                                                                                     // 23354
forEach(                                                                                                               // 23355
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {                                                                                                // 23357
    var directiveName = directiveNormalize('ng-' + eventName);                                                         // 23358
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {                         // 23359
      return {                                                                                                         // 23360
        restrict: 'A',                                                                                                 // 23361
        compile: function($element, attr) {                                                                            // 23362
          // We expose the powerful $event object on the scope that provides access to the Window,                     // 23363
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better                      // 23364
          // checks at the cost of speed since event handler expressions are not executed as                           // 23365
          // frequently as regular change detection.                                                                   // 23366
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);                  // 23367
          return function ngEventHandler(scope, element) {                                                             // 23368
            element.on(eventName, function(event) {                                                                    // 23369
              var callback = function() {                                                                              // 23370
                fn(scope, {$event:event});                                                                             // 23371
              };                                                                                                       // 23372
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {                                                 // 23373
                scope.$evalAsync(callback);                                                                            // 23374
              } else {                                                                                                 // 23375
                scope.$apply(callback);                                                                                // 23376
              }                                                                                                        // 23377
            });                                                                                                        // 23378
          };                                                                                                           // 23379
        }                                                                                                              // 23380
      };                                                                                                               // 23381
    }];                                                                                                                // 23382
  }                                                                                                                    // 23383
);                                                                                                                     // 23384
                                                                                                                       // 23385
/**                                                                                                                    // 23386
 * @ngdoc directive                                                                                                    // 23387
 * @name ngDblclick                                                                                                    // 23388
 *                                                                                                                     // 23389
 * @description                                                                                                        // 23390
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.                               // 23391
 *                                                                                                                     // 23392
 * @element ANY                                                                                                        // 23393
 * @priority 0                                                                                                         // 23394
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon                                 // 23395
 * a dblclick. (The Event object is available as `$event`)                                                             // 23396
 *                                                                                                                     // 23397
 * @example                                                                                                            // 23398
   <example>                                                                                                           // 23399
     <file name="index.html">                                                                                          // 23400
      <button ng-dblclick="count = count + 1" ng-init="count=0">                                                       // 23401
        Increment (on double click)                                                                                    // 23402
      </button>                                                                                                        // 23403
      count: {{count}}                                                                                                 // 23404
     </file>                                                                                                           // 23405
   </example>                                                                                                          // 23406
 */                                                                                                                    // 23407
                                                                                                                       // 23408
                                                                                                                       // 23409
/**                                                                                                                    // 23410
 * @ngdoc directive                                                                                                    // 23411
 * @name ngMousedown                                                                                                   // 23412
 *                                                                                                                     // 23413
 * @description                                                                                                        // 23414
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.                                 // 23415
 *                                                                                                                     // 23416
 * @element ANY                                                                                                        // 23417
 * @priority 0                                                                                                         // 23418
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon                                // 23419
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23420
 *                                                                                                                     // 23421
 * @example                                                                                                            // 23422
   <example>                                                                                                           // 23423
     <file name="index.html">                                                                                          // 23424
      <button ng-mousedown="count = count + 1" ng-init="count=0">                                                      // 23425
        Increment (on mouse down)                                                                                      // 23426
      </button>                                                                                                        // 23427
      count: {{count}}                                                                                                 // 23428
     </file>                                                                                                           // 23429
   </example>                                                                                                          // 23430
 */                                                                                                                    // 23431
                                                                                                                       // 23432
                                                                                                                       // 23433
/**                                                                                                                    // 23434
 * @ngdoc directive                                                                                                    // 23435
 * @name ngMouseup                                                                                                     // 23436
 *                                                                                                                     // 23437
 * @description                                                                                                        // 23438
 * Specify custom behavior on mouseup event.                                                                           // 23439
 *                                                                                                                     // 23440
 * @element ANY                                                                                                        // 23441
 * @priority 0                                                                                                         // 23442
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon                                  // 23443
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})                                   // 23444
 *                                                                                                                     // 23445
 * @example                                                                                                            // 23446
   <example>                                                                                                           // 23447
     <file name="index.html">                                                                                          // 23448
      <button ng-mouseup="count = count + 1" ng-init="count=0">                                                        // 23449
        Increment (on mouse up)                                                                                        // 23450
      </button>                                                                                                        // 23451
      count: {{count}}                                                                                                 // 23452
     </file>                                                                                                           // 23453
   </example>                                                                                                          // 23454
 */                                                                                                                    // 23455
                                                                                                                       // 23456
/**                                                                                                                    // 23457
 * @ngdoc directive                                                                                                    // 23458
 * @name ngMouseover                                                                                                   // 23459
 *                                                                                                                     // 23460
 * @description                                                                                                        // 23461
 * Specify custom behavior on mouseover event.                                                                         // 23462
 *                                                                                                                     // 23463
 * @element ANY                                                                                                        // 23464
 * @priority 0                                                                                                         // 23465
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon                                // 23466
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23467
 *                                                                                                                     // 23468
 * @example                                                                                                            // 23469
   <example>                                                                                                           // 23470
     <file name="index.html">                                                                                          // 23471
      <button ng-mouseover="count = count + 1" ng-init="count=0">                                                      // 23472
        Increment (when mouse is over)                                                                                 // 23473
      </button>                                                                                                        // 23474
      count: {{count}}                                                                                                 // 23475
     </file>                                                                                                           // 23476
   </example>                                                                                                          // 23477
 */                                                                                                                    // 23478
                                                                                                                       // 23479
                                                                                                                       // 23480
/**                                                                                                                    // 23481
 * @ngdoc directive                                                                                                    // 23482
 * @name ngMouseenter                                                                                                  // 23483
 *                                                                                                                     // 23484
 * @description                                                                                                        // 23485
 * Specify custom behavior on mouseenter event.                                                                        // 23486
 *                                                                                                                     // 23487
 * @element ANY                                                                                                        // 23488
 * @priority 0                                                                                                         // 23489
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon                               // 23490
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23491
 *                                                                                                                     // 23492
 * @example                                                                                                            // 23493
   <example>                                                                                                           // 23494
     <file name="index.html">                                                                                          // 23495
      <button ng-mouseenter="count = count + 1" ng-init="count=0">                                                     // 23496
        Increment (when mouse enters)                                                                                  // 23497
      </button>                                                                                                        // 23498
      count: {{count}}                                                                                                 // 23499
     </file>                                                                                                           // 23500
   </example>                                                                                                          // 23501
 */                                                                                                                    // 23502
                                                                                                                       // 23503
                                                                                                                       // 23504
/**                                                                                                                    // 23505
 * @ngdoc directive                                                                                                    // 23506
 * @name ngMouseleave                                                                                                  // 23507
 *                                                                                                                     // 23508
 * @description                                                                                                        // 23509
 * Specify custom behavior on mouseleave event.                                                                        // 23510
 *                                                                                                                     // 23511
 * @element ANY                                                                                                        // 23512
 * @priority 0                                                                                                         // 23513
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon                               // 23514
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})                                // 23515
 *                                                                                                                     // 23516
 * @example                                                                                                            // 23517
   <example>                                                                                                           // 23518
     <file name="index.html">                                                                                          // 23519
      <button ng-mouseleave="count = count + 1" ng-init="count=0">                                                     // 23520
        Increment (when mouse leaves)                                                                                  // 23521
      </button>                                                                                                        // 23522
      count: {{count}}                                                                                                 // 23523
     </file>                                                                                                           // 23524
   </example>                                                                                                          // 23525
 */                                                                                                                    // 23526
                                                                                                                       // 23527
                                                                                                                       // 23528
/**                                                                                                                    // 23529
 * @ngdoc directive                                                                                                    // 23530
 * @name ngMousemove                                                                                                   // 23531
 *                                                                                                                     // 23532
 * @description                                                                                                        // 23533
 * Specify custom behavior on mousemove event.                                                                         // 23534
 *                                                                                                                     // 23535
 * @element ANY                                                                                                        // 23536
 * @priority 0                                                                                                         // 23537
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon                                // 23538
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})                                 // 23539
 *                                                                                                                     // 23540
 * @example                                                                                                            // 23541
   <example>                                                                                                           // 23542
     <file name="index.html">                                                                                          // 23543
      <button ng-mousemove="count = count + 1" ng-init="count=0">                                                      // 23544
        Increment (when mouse moves)                                                                                   // 23545
      </button>                                                                                                        // 23546
      count: {{count}}                                                                                                 // 23547
     </file>                                                                                                           // 23548
   </example>                                                                                                          // 23549
 */                                                                                                                    // 23550
                                                                                                                       // 23551
                                                                                                                       // 23552
/**                                                                                                                    // 23553
 * @ngdoc directive                                                                                                    // 23554
 * @name ngKeydown                                                                                                     // 23555
 *                                                                                                                     // 23556
 * @description                                                                                                        // 23557
 * Specify custom behavior on keydown event.                                                                           // 23558
 *                                                                                                                     // 23559
 * @element ANY                                                                                                        // 23560
 * @priority 0                                                                                                         // 23561
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon                                  // 23562
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                  // 23563
 *                                                                                                                     // 23564
 * @example                                                                                                            // 23565
   <example>                                                                                                           // 23566
     <file name="index.html">                                                                                          // 23567
      <input ng-keydown="count = count + 1" ng-init="count=0">                                                         // 23568
      key down count: {{count}}                                                                                        // 23569
     </file>                                                                                                           // 23570
   </example>                                                                                                          // 23571
 */                                                                                                                    // 23572
                                                                                                                       // 23573
                                                                                                                       // 23574
/**                                                                                                                    // 23575
 * @ngdoc directive                                                                                                    // 23576
 * @name ngKeyup                                                                                                       // 23577
 *                                                                                                                     // 23578
 * @description                                                                                                        // 23579
 * Specify custom behavior on keyup event.                                                                             // 23580
 *                                                                                                                     // 23581
 * @element ANY                                                                                                        // 23582
 * @priority 0                                                                                                         // 23583
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon                                    // 23584
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)                    // 23585
 *                                                                                                                     // 23586
 * @example                                                                                                            // 23587
   <example>                                                                                                           // 23588
     <file name="index.html">                                                                                          // 23589
       <p>Typing in the input box below updates the key count</p>                                                      // 23590
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}                                  // 23591
                                                                                                                       // 23592
       <p>Typing in the input box below updates the keycode</p>                                                        // 23593
       <input ng-keyup="event=$event">                                                                                 // 23594
       <p>event keyCode: {{ event.keyCode }}</p>                                                                       // 23595
       <p>event altKey: {{ event.altKey }}</p>                                                                         // 23596
     </file>                                                                                                           // 23597
   </example>                                                                                                          // 23598
 */                                                                                                                    // 23599
                                                                                                                       // 23600
                                                                                                                       // 23601
/**                                                                                                                    // 23602
 * @ngdoc directive                                                                                                    // 23603
 * @name ngKeypress                                                                                                    // 23604
 *                                                                                                                     // 23605
 * @description                                                                                                        // 23606
 * Specify custom behavior on keypress event.                                                                          // 23607
 *                                                                                                                     // 23608
 * @element ANY                                                                                                        // 23609
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon                                 // 23610
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}                                   // 23611
 * and can be interrogated for keyCode, altKey, etc.)                                                                  // 23612
 *                                                                                                                     // 23613
 * @example                                                                                                            // 23614
   <example>                                                                                                           // 23615
     <file name="index.html">                                                                                          // 23616
      <input ng-keypress="count = count + 1" ng-init="count=0">                                                        // 23617
      key press count: {{count}}                                                                                       // 23618
     </file>                                                                                                           // 23619
   </example>                                                                                                          // 23620
 */                                                                                                                    // 23621
                                                                                                                       // 23622
                                                                                                                       // 23623
/**                                                                                                                    // 23624
 * @ngdoc directive                                                                                                    // 23625
 * @name ngSubmit                                                                                                      // 23626
 *                                                                                                                     // 23627
 * @description                                                                                                        // 23628
 * Enables binding angular expressions to onsubmit events.                                                             // 23629
 *                                                                                                                     // 23630
 * Additionally it prevents the default action (which for form means sending the request to the                        // 23631
 * server and reloading the current page), but only if the form does not contain `action`,                             // 23632
 * `data-action`, or `x-action` attributes.                                                                            // 23633
 *                                                                                                                     // 23634
 * <div class="alert alert-warning">                                                                                   // 23635
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and                            // 23636
 * `ngSubmit` handlers together. See the                                                                               // 23637
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}                     // 23638
 * for a detailed discussion of when `ngSubmit` may be triggered.                                                      // 23639
 * </div>                                                                                                              // 23640
 *                                                                                                                     // 23641
 * @element form                                                                                                       // 23642
 * @priority 0                                                                                                         // 23643
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.                                           // 23644
 * ({@link guide/expression#-event- Event object is available as `$event`})                                            // 23645
 *                                                                                                                     // 23646
 * @example                                                                                                            // 23647
   <example module="submitExample">                                                                                    // 23648
     <file name="index.html">                                                                                          // 23649
      <script>                                                                                                         // 23650
        angular.module('submitExample', [])                                                                            // 23651
          .controller('ExampleController', ['$scope', function($scope) {                                               // 23652
            $scope.list = [];                                                                                          // 23653
            $scope.text = 'hello';                                                                                     // 23654
            $scope.submit = function() {                                                                               // 23655
              if ($scope.text) {                                                                                       // 23656
                $scope.list.push(this.text);                                                                           // 23657
                $scope.text = '';                                                                                      // 23658
              }                                                                                                        // 23659
            };                                                                                                         // 23660
          }]);                                                                                                         // 23661
      </script>                                                                                                        // 23662
      <form ng-submit="submit()" ng-controller="ExampleController">                                                    // 23663
        Enter text and hit enter:                                                                                      // 23664
        <input type="text" ng-model="text" name="text" />                                                              // 23665
        <input type="submit" id="submit" value="Submit" />                                                             // 23666
        <pre>list={{list}}</pre>                                                                                       // 23667
      </form>                                                                                                          // 23668
     </file>                                                                                                           // 23669
     <file name="protractor.js" type="protractor">                                                                     // 23670
       it('should check ng-submit', function() {                                                                       // 23671
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23672
         element(by.css('#submit')).click();                                                                           // 23673
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23674
         expect(element(by.model('text')).getAttribute('value')).toBe('');                                             // 23675
       });                                                                                                             // 23676
       it('should ignore empty strings', function() {                                                                  // 23677
         expect(element(by.binding('list')).getText()).toBe('list=[]');                                                // 23678
         element(by.css('#submit')).click();                                                                           // 23679
         element(by.css('#submit')).click();                                                                           // 23680
         expect(element(by.binding('list')).getText()).toContain('hello');                                             // 23681
        });                                                                                                            // 23682
     </file>                                                                                                           // 23683
   </example>                                                                                                          // 23684
 */                                                                                                                    // 23685
                                                                                                                       // 23686
/**                                                                                                                    // 23687
 * @ngdoc directive                                                                                                    // 23688
 * @name ngFocus                                                                                                       // 23689
 *                                                                                                                     // 23690
 * @description                                                                                                        // 23691
 * Specify custom behavior on focus event.                                                                             // 23692
 *                                                                                                                     // 23693
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`                                   // 23694
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23695
 * during an `$apply` to ensure a consistent state.                                                                    // 23696
 *                                                                                                                     // 23697
 * @element window, input, select, textarea, a                                                                         // 23698
 * @priority 0                                                                                                         // 23699
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon                                    // 23700
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23701
 *                                                                                                                     // 23702
 * @example                                                                                                            // 23703
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23704
 */                                                                                                                    // 23705
                                                                                                                       // 23706
/**                                                                                                                    // 23707
 * @ngdoc directive                                                                                                    // 23708
 * @name ngBlur                                                                                                        // 23709
 *                                                                                                                     // 23710
 * @description                                                                                                        // 23711
 * Specify custom behavior on blur event.                                                                              // 23712
 *                                                                                                                     // 23713
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when                                 // 23714
 * an element has lost focus.                                                                                          // 23715
 *                                                                                                                     // 23716
 * Note: As the `blur` event is executed synchronously also during DOM manipulations                                   // 23717
 * (e.g. removing a focussed input),                                                                                   // 23718
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired                                    // 23719
 * during an `$apply` to ensure a consistent state.                                                                    // 23720
 *                                                                                                                     // 23721
 * @element window, input, select, textarea, a                                                                         // 23722
 * @priority 0                                                                                                         // 23723
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon                                     // 23724
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23725
 *                                                                                                                     // 23726
 * @example                                                                                                            // 23727
 * See {@link ng.directive:ngClick ngClick}                                                                            // 23728
 */                                                                                                                    // 23729
                                                                                                                       // 23730
/**                                                                                                                    // 23731
 * @ngdoc directive                                                                                                    // 23732
 * @name ngCopy                                                                                                        // 23733
 *                                                                                                                     // 23734
 * @description                                                                                                        // 23735
 * Specify custom behavior on copy event.                                                                              // 23736
 *                                                                                                                     // 23737
 * @element window, input, select, textarea, a                                                                         // 23738
 * @priority 0                                                                                                         // 23739
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon                                     // 23740
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})                                      // 23741
 *                                                                                                                     // 23742
 * @example                                                                                                            // 23743
   <example>                                                                                                           // 23744
     <file name="index.html">                                                                                          // 23745
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">                           // 23746
      copied: {{copied}}                                                                                               // 23747
     </file>                                                                                                           // 23748
   </example>                                                                                                          // 23749
 */                                                                                                                    // 23750
                                                                                                                       // 23751
/**                                                                                                                    // 23752
 * @ngdoc directive                                                                                                    // 23753
 * @name ngCut                                                                                                         // 23754
 *                                                                                                                     // 23755
 * @description                                                                                                        // 23756
 * Specify custom behavior on cut event.                                                                               // 23757
 *                                                                                                                     // 23758
 * @element window, input, select, textarea, a                                                                         // 23759
 * @priority 0                                                                                                         // 23760
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon                                      // 23761
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})                                       // 23762
 *                                                                                                                     // 23763
 * @example                                                                                                            // 23764
   <example>                                                                                                           // 23765
     <file name="index.html">                                                                                          // 23766
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">                                   // 23767
      cut: {{cut}}                                                                                                     // 23768
     </file>                                                                                                           // 23769
   </example>                                                                                                          // 23770
 */                                                                                                                    // 23771
                                                                                                                       // 23772
/**                                                                                                                    // 23773
 * @ngdoc directive                                                                                                    // 23774
 * @name ngPaste                                                                                                       // 23775
 *                                                                                                                     // 23776
 * @description                                                                                                        // 23777
 * Specify custom behavior on paste event.                                                                             // 23778
 *                                                                                                                     // 23779
 * @element window, input, select, textarea, a                                                                         // 23780
 * @priority 0                                                                                                         // 23781
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon                                    // 23782
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})                                     // 23783
 *                                                                                                                     // 23784
 * @example                                                                                                            // 23785
   <example>                                                                                                           // 23786
     <file name="index.html">                                                                                          // 23787
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>                                     // 23788
      pasted: {{paste}}                                                                                                // 23789
     </file>                                                                                                           // 23790
   </example>                                                                                                          // 23791
 */                                                                                                                    // 23792
                                                                                                                       // 23793
/**                                                                                                                    // 23794
 * @ngdoc directive                                                                                                    // 23795
 * @name ngIf                                                                                                          // 23796
 * @restrict A                                                                                                         // 23797
 * @multiElement                                                                                                       // 23798
 *                                                                                                                     // 23799
 * @description                                                                                                        // 23800
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an                                     // 23801
 * {expression}. If the expression assigned to `ngIf` evaluates to a false                                             // 23802
 * value then the element is removed from the DOM, otherwise a clone of the                                            // 23803
 * element is reinserted into the DOM.                                                                                 // 23804
 *                                                                                                                     // 23805
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the                       // 23806
 * element in the DOM rather than changing its visibility via the `display` css property.  A common                    // 23807
 * case when this difference is significant is when using css selectors that rely on an element's                      // 23808
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.                                // 23809
 *                                                                                                                     // 23810
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope                            // 23811
 * is created when the element is restored.  The scope created within `ngIf` inherits from                             // 23812
 * its parent scope using                                                                                              // 23813
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to                                   // 23815
 * a javascript primitive defined in the parent scope. In this case any modifications made to the                      // 23816
 * variable within the child scope will override (hide) the value in the parent scope.                                 // 23817
 *                                                                                                                     // 23818
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior                             // 23819
 * is if an element's class attribute is directly modified after it's compiled, using something like                   // 23820
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element                  // 23821
 * the added class will be lost because the original compiled state is used to regenerate the element.                 // 23822
 *                                                                                                                     // 23823
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`                          // 23824
 * and `leave` effects.                                                                                                // 23825
 *                                                                                                                     // 23826
 * @animations                                                                                                         // 23827
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM                                            // 23829
 *                                                                                                                     // 23830
 * @element ANY                                                                                                        // 23831
 * @scope                                                                                                              // 23832
 * @priority 600                                                                                                       // 23833
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then                                   // 23834
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled                                // 23835
 *     element is added to the DOM tree.                                                                               // 23836
 *                                                                                                                     // 23837
 * @example                                                                                                            // 23838
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 23839
    <file name="index.html">                                                                                           // 23840
      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>                // 23841
      Show when checked:                                                                                               // 23842
      <span ng-if="checked" class="animate-if">                                                                        // 23843
        This is removed when the checkbox is unchecked.                                                                // 23844
      </span>                                                                                                          // 23845
    </file>                                                                                                            // 23846
    <file name="animations.css">                                                                                       // 23847
      .animate-if {                                                                                                    // 23848
        background:white;                                                                                              // 23849
        border:1px solid black;                                                                                        // 23850
        padding:10px;                                                                                                  // 23851
      }                                                                                                                // 23852
                                                                                                                       // 23853
      .animate-if.ng-enter, .animate-if.ng-leave {                                                                     // 23854
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 23855
      }                                                                                                                // 23856
                                                                                                                       // 23857
      .animate-if.ng-enter,                                                                                            // 23858
      .animate-if.ng-leave.ng-leave-active {                                                                           // 23859
        opacity:0;                                                                                                     // 23860
      }                                                                                                                // 23861
                                                                                                                       // 23862
      .animate-if.ng-leave,                                                                                            // 23863
      .animate-if.ng-enter.ng-enter-active {                                                                           // 23864
        opacity:1;                                                                                                     // 23865
      }                                                                                                                // 23866
    </file>                                                                                                            // 23867
  </example>                                                                                                           // 23868
 */                                                                                                                    // 23869
var ngIfDirective = ['$animate', function($animate) {                                                                  // 23870
  return {                                                                                                             // 23871
    multiElement: true,                                                                                                // 23872
    transclude: 'element',                                                                                             // 23873
    priority: 600,                                                                                                     // 23874
    terminal: true,                                                                                                    // 23875
    restrict: 'A',                                                                                                     // 23876
    $$tlb: true,                                                                                                       // 23877
    link: function($scope, $element, $attr, ctrl, $transclude) {                                                       // 23878
        var block, childScope, previousElements;                                                                       // 23879
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {                                                    // 23880
                                                                                                                       // 23881
          if (value) {                                                                                                 // 23882
            if (!childScope) {                                                                                         // 23883
              $transclude(function(clone, newScope) {                                                                  // 23884
                childScope = newScope;                                                                                 // 23885
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');                      // 23886
                // Note: We only need the first/last node of the cloned nodes.                                         // 23887
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 23888
                // by a directive with templateUrl when its template arrives.                                          // 23889
                block = {                                                                                              // 23890
                  clone: clone                                                                                         // 23891
                };                                                                                                     // 23892
                $animate.enter(clone, $element.parent(), $element);                                                    // 23893
              });                                                                                                      // 23894
            }                                                                                                          // 23895
          } else {                                                                                                     // 23896
            if (previousElements) {                                                                                    // 23897
              previousElements.remove();                                                                               // 23898
              previousElements = null;                                                                                 // 23899
            }                                                                                                          // 23900
            if (childScope) {                                                                                          // 23901
              childScope.$destroy();                                                                                   // 23902
              childScope = null;                                                                                       // 23903
            }                                                                                                          // 23904
            if (block) {                                                                                               // 23905
              previousElements = getBlockNodes(block.clone);                                                           // 23906
              $animate.leave(previousElements).then(function() {                                                       // 23907
                previousElements = null;                                                                               // 23908
              });                                                                                                      // 23909
              block = null;                                                                                            // 23910
            }                                                                                                          // 23911
          }                                                                                                            // 23912
        });                                                                                                            // 23913
    }                                                                                                                  // 23914
  };                                                                                                                   // 23915
}];                                                                                                                    // 23916
                                                                                                                       // 23917
/**                                                                                                                    // 23918
 * @ngdoc directive                                                                                                    // 23919
 * @name ngInclude                                                                                                     // 23920
 * @restrict ECA                                                                                                       // 23921
 *                                                                                                                     // 23922
 * @description                                                                                                        // 23923
 * Fetches, compiles and includes an external HTML fragment.                                                           // 23924
 *                                                                                                                     // 23925
 * By default, the template URL is restricted to the same domain and protocol as the                                   // 23926
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl                                     // 23927
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols                                // 23928
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or                               // 23929
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link                              // 23930
 * ng.$sce Strict Contextual Escaping}.                                                                                // 23931
 *                                                                                                                     // 23932
 * In addition, the browser's                                                                                          // 23933
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)         // 23934
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)                                              // 23935
 * policy may further restrict whether the template is successfully loaded.                                            // 23936
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`                     // 23937
 * access on some browsers.                                                                                            // 23938
 *                                                                                                                     // 23939
 * @animations                                                                                                         // 23940
 * enter - animation is used to bring new content into the browser.                                                    // 23941
 * leave - animation is used to animate existing content away.                                                         // 23942
 *                                                                                                                     // 23943
 * The enter and leave animation occur concurrently.                                                                   // 23944
 *                                                                                                                     // 23945
 * @scope                                                                                                              // 23946
 * @priority 400                                                                                                       // 23947
 *                                                                                                                     // 23948
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,             // 23949
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.                  // 23950
 * @param {string=} onload Expression to evaluate when a new partial is loaded.                                        // 23951
 *                                                                                                                     // 23952
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll                                 // 23953
 *                  $anchorScroll} to scroll the viewport after the content is loaded.                                 // 23954
 *                                                                                                                     // 23955
 *                  - If the attribute is not set, disable scrolling.                                                  // 23956
 *                  - If the attribute is set without value, enable scrolling.                                         // 23957
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.                     // 23958
 *                                                                                                                     // 23959
 * @example                                                                                                            // 23960
  <example module="includeExample" deps="angular-animate.js" animations="true">                                        // 23961
    <file name="index.html">                                                                                           // 23962
     <div ng-controller="ExampleController">                                                                           // 23963
       <select ng-model="template" ng-options="t.name for t in templates">                                             // 23964
        <option value="">(blank)</option>                                                                              // 23965
       </select>                                                                                                       // 23966
       url of the template: <code>{{template.url}}</code>                                                              // 23967
       <hr/>                                                                                                           // 23968
       <div class="slide-animate-container">                                                                           // 23969
         <div class="slide-animate" ng-include="template.url"></div>                                                   // 23970
       </div>                                                                                                          // 23971
     </div>                                                                                                            // 23972
    </file>                                                                                                            // 23973
    <file name="script.js">                                                                                            // 23974
      angular.module('includeExample', ['ngAnimate'])                                                                  // 23975
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 23976
          $scope.templates =                                                                                           // 23977
            [ { name: 'template1.html', url: 'template1.html'},                                                        // 23978
              { name: 'template2.html', url: 'template2.html'} ];                                                      // 23979
          $scope.template = $scope.templates[0];                                                                       // 23980
        }]);                                                                                                           // 23981
     </file>                                                                                                           // 23982
    <file name="template1.html">                                                                                       // 23983
      Content of template1.html                                                                                        // 23984
    </file>                                                                                                            // 23985
    <file name="template2.html">                                                                                       // 23986
      Content of template2.html                                                                                        // 23987
    </file>                                                                                                            // 23988
    <file name="animations.css">                                                                                       // 23989
      .slide-animate-container {                                                                                       // 23990
        position:relative;                                                                                             // 23991
        background:white;                                                                                              // 23992
        border:1px solid black;                                                                                        // 23993
        height:40px;                                                                                                   // 23994
        overflow:hidden;                                                                                               // 23995
      }                                                                                                                // 23996
                                                                                                                       // 23997
      .slide-animate {                                                                                                 // 23998
        padding:10px;                                                                                                  // 23999
      }                                                                                                                // 24000
                                                                                                                       // 24001
      .slide-animate.ng-enter, .slide-animate.ng-leave {                                                               // 24002
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 24003
                                                                                                                       // 24004
        position:absolute;                                                                                             // 24005
        top:0;                                                                                                         // 24006
        left:0;                                                                                                        // 24007
        right:0;                                                                                                       // 24008
        bottom:0;                                                                                                      // 24009
        display:block;                                                                                                 // 24010
        padding:10px;                                                                                                  // 24011
      }                                                                                                                // 24012
                                                                                                                       // 24013
      .slide-animate.ng-enter {                                                                                        // 24014
        top:-50px;                                                                                                     // 24015
      }                                                                                                                // 24016
      .slide-animate.ng-enter.ng-enter-active {                                                                        // 24017
        top:0;                                                                                                         // 24018
      }                                                                                                                // 24019
                                                                                                                       // 24020
      .slide-animate.ng-leave {                                                                                        // 24021
        top:0;                                                                                                         // 24022
      }                                                                                                                // 24023
      .slide-animate.ng-leave.ng-leave-active {                                                                        // 24024
        top:50px;                                                                                                      // 24025
      }                                                                                                                // 24026
    </file>                                                                                                            // 24027
    <file name="protractor.js" type="protractor">                                                                      // 24028
      var templateSelect = element(by.model('template'));                                                              // 24029
      var includeElem = element(by.css('[ng-include]'));                                                               // 24030
                                                                                                                       // 24031
      it('should load template1.html', function() {                                                                    // 24032
        expect(includeElem.getText()).toMatch(/Content of template1.html/);                                            // 24033
      });                                                                                                              // 24034
                                                                                                                       // 24035
      it('should load template2.html', function() {                                                                    // 24036
        if (browser.params.browser == 'firefox') {                                                                     // 24037
          // Firefox can't handle using selects                                                                        // 24038
          // See https://github.com/angular/protractor/issues/480                                                      // 24039
          return;                                                                                                      // 24040
        }                                                                                                              // 24041
        templateSelect.click();                                                                                        // 24042
        templateSelect.all(by.css('option')).get(2).click();                                                           // 24043
        expect(includeElem.getText()).toMatch(/Content of template2.html/);                                            // 24044
      });                                                                                                              // 24045
                                                                                                                       // 24046
      it('should change to blank', function() {                                                                        // 24047
        if (browser.params.browser == 'firefox') {                                                                     // 24048
          // Firefox can't handle using selects                                                                        // 24049
          return;                                                                                                      // 24050
        }                                                                                                              // 24051
        templateSelect.click();                                                                                        // 24052
        templateSelect.all(by.css('option')).get(0).click();                                                           // 24053
        expect(includeElem.isPresent()).toBe(false);                                                                   // 24054
      });                                                                                                              // 24055
    </file>                                                                                                            // 24056
  </example>                                                                                                           // 24057
 */                                                                                                                    // 24058
                                                                                                                       // 24059
                                                                                                                       // 24060
/**                                                                                                                    // 24061
 * @ngdoc event                                                                                                        // 24062
 * @name ngInclude#$includeContentRequested                                                                            // 24063
 * @eventType emit on the scope ngInclude was declared in                                                              // 24064
 * @description                                                                                                        // 24065
 * Emitted every time the ngInclude content is requested.                                                              // 24066
 *                                                                                                                     // 24067
 * @param {Object} angularEvent Synthetic event object.                                                                // 24068
 * @param {String} src URL of content to load.                                                                         // 24069
 */                                                                                                                    // 24070
                                                                                                                       // 24071
                                                                                                                       // 24072
/**                                                                                                                    // 24073
 * @ngdoc event                                                                                                        // 24074
 * @name ngInclude#$includeContentLoaded                                                                               // 24075
 * @eventType emit on the current ngInclude scope                                                                      // 24076
 * @description                                                                                                        // 24077
 * Emitted every time the ngInclude content is reloaded.                                                               // 24078
 *                                                                                                                     // 24079
 * @param {Object} angularEvent Synthetic event object.                                                                // 24080
 * @param {String} src URL of content to load.                                                                         // 24081
 */                                                                                                                    // 24082
                                                                                                                       // 24083
                                                                                                                       // 24084
/**                                                                                                                    // 24085
 * @ngdoc event                                                                                                        // 24086
 * @name ngInclude#$includeContentError                                                                                // 24087
 * @eventType emit on the scope ngInclude was declared in                                                              // 24088
 * @description                                                                                                        // 24089
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)                    // 24090
 *                                                                                                                     // 24091
 * @param {Object} angularEvent Synthetic event object.                                                                // 24092
 * @param {String} src URL of content to load.                                                                         // 24093
 */                                                                                                                    // 24094
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',                                             // 24095
                  function($templateRequest,   $anchorScroll,   $animate) {                                            // 24096
  return {                                                                                                             // 24097
    restrict: 'ECA',                                                                                                   // 24098
    priority: 400,                                                                                                     // 24099
    terminal: true,                                                                                                    // 24100
    transclude: 'element',                                                                                             // 24101
    controller: angular.noop,                                                                                          // 24102
    compile: function(element, attr) {                                                                                 // 24103
      var srcExp = attr.ngInclude || attr.src,                                                                         // 24104
          onloadExp = attr.onload || '',                                                                               // 24105
          autoScrollExp = attr.autoscroll;                                                                             // 24106
                                                                                                                       // 24107
      return function(scope, $element, $attr, ctrl, $transclude) {                                                     // 24108
        var changeCounter = 0,                                                                                         // 24109
            currentScope,                                                                                              // 24110
            previousElement,                                                                                           // 24111
            currentElement;                                                                                            // 24112
                                                                                                                       // 24113
        var cleanupLastIncludeContent = function() {                                                                   // 24114
          if (previousElement) {                                                                                       // 24115
            previousElement.remove();                                                                                  // 24116
            previousElement = null;                                                                                    // 24117
          }                                                                                                            // 24118
          if (currentScope) {                                                                                          // 24119
            currentScope.$destroy();                                                                                   // 24120
            currentScope = null;                                                                                       // 24121
          }                                                                                                            // 24122
          if (currentElement) {                                                                                        // 24123
            $animate.leave(currentElement).then(function() {                                                           // 24124
              previousElement = null;                                                                                  // 24125
            });                                                                                                        // 24126
            previousElement = currentElement;                                                                          // 24127
            currentElement = null;                                                                                     // 24128
          }                                                                                                            // 24129
        };                                                                                                             // 24130
                                                                                                                       // 24131
        scope.$watch(srcExp, function ngIncludeWatchAction(src) {                                                      // 24132
          var afterAnimation = function() {                                                                            // 24133
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {                          // 24134
              $anchorScroll();                                                                                         // 24135
            }                                                                                                          // 24136
          };                                                                                                           // 24137
          var thisChangeId = ++changeCounter;                                                                          // 24138
                                                                                                                       // 24139
          if (src) {                                                                                                   // 24140
            //set the 2nd param to true to ignore the template request error so that the inner                         // 24141
            //contents and scope can be cleaned up.                                                                    // 24142
            $templateRequest(src, true).then(function(response) {                                                      // 24143
              if (thisChangeId !== changeCounter) return;                                                              // 24144
              var newScope = scope.$new();                                                                             // 24145
              ctrl.template = response;                                                                                // 24146
                                                                                                                       // 24147
              // Note: This will also link all children of ng-include that were contained in the original              // 24148
              // html. If that content contains controllers, ... they could pollute/change the scope.                  // 24149
              // However, using ng-include on an element with additional content does not make sense...                // 24150
              // Note: We can't remove them in the cloneAttchFn of $transclude as that                                 // 24151
              // function is called before linking the content, which would apply child                                // 24152
              // directives to non existing elements.                                                                  // 24153
              var clone = $transclude(newScope, function(clone) {                                                      // 24154
                cleanupLastIncludeContent();                                                                           // 24155
                $animate.enter(clone, null, $element).then(afterAnimation);                                            // 24156
              });                                                                                                      // 24157
                                                                                                                       // 24158
              currentScope = newScope;                                                                                 // 24159
              currentElement = clone;                                                                                  // 24160
                                                                                                                       // 24161
              currentScope.$emit('$includeContentLoaded', src);                                                        // 24162
              scope.$eval(onloadExp);                                                                                  // 24163
            }, function() {                                                                                            // 24164
              if (thisChangeId === changeCounter) {                                                                    // 24165
                cleanupLastIncludeContent();                                                                           // 24166
                scope.$emit('$includeContentError', src);                                                              // 24167
              }                                                                                                        // 24168
            });                                                                                                        // 24169
            scope.$emit('$includeContentRequested', src);                                                              // 24170
          } else {                                                                                                     // 24171
            cleanupLastIncludeContent();                                                                               // 24172
            ctrl.template = null;                                                                                      // 24173
          }                                                                                                            // 24174
        });                                                                                                            // 24175
      };                                                                                                               // 24176
    }                                                                                                                  // 24177
  };                                                                                                                   // 24178
}];                                                                                                                    // 24179
                                                                                                                       // 24180
// This directive is called during the $transclude call of the first `ngInclude` directive.                            // 24181
// It will replace and compile the content of the element with the loaded template.                                    // 24182
// We need this directive so that the element content is already filled when                                           // 24183
// the link function of another directive on the same element as ngInclude                                             // 24184
// is called.                                                                                                          // 24185
var ngIncludeFillContentDirective = ['$compile',                                                                       // 24186
  function($compile) {                                                                                                 // 24187
    return {                                                                                                           // 24188
      restrict: 'ECA',                                                                                                 // 24189
      priority: -400,                                                                                                  // 24190
      require: 'ngInclude',                                                                                            // 24191
      link: function(scope, $element, $attr, ctrl) {                                                                   // 24192
        if (/SVG/.test($element[0].toString())) {                                                                      // 24193
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not                            // 24194
          // support innerHTML, so detect this here and try to generate the contents                                   // 24195
          // specially.                                                                                                // 24196
          $element.empty();                                                                                            // 24197
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,                                     // 24198
              function namespaceAdaptedClone(clone) {                                                                  // 24199
            $element.append(clone);                                                                                    // 24200
          }, {futureParentElement: $element});                                                                         // 24201
          return;                                                                                                      // 24202
        }                                                                                                              // 24203
                                                                                                                       // 24204
        $element.html(ctrl.template);                                                                                  // 24205
        $compile($element.contents())(scope);                                                                          // 24206
      }                                                                                                                // 24207
    };                                                                                                                 // 24208
  }];                                                                                                                  // 24209
                                                                                                                       // 24210
/**                                                                                                                    // 24211
 * @ngdoc directive                                                                                                    // 24212
 * @name ngInit                                                                                                        // 24213
 * @restrict AC                                                                                                        // 24214
 *                                                                                                                     // 24215
 * @description                                                                                                        // 24216
 * The `ngInit` directive allows you to evaluate an expression in the                                                  // 24217
 * current scope.                                                                                                      // 24218
 *                                                                                                                     // 24219
 * <div class="alert alert-danger">                                                                                    // 24220
 * The only appropriate use of `ngInit` is for aliasing special properties of                                          // 24221
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you                         // 24222
 * should use {@link guide/controller controllers} rather than `ngInit`                                                // 24223
 * to initialize values on a scope.                                                                                    // 24224
 * </div>                                                                                                              // 24225
 * <div class="alert alert-warning">                                                                                   // 24226
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make                          // 24227
 * sure you have parenthesis for correct precedence:                                                                   // 24228
 * <pre class="prettyprint">                                                                                           // 24229
 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`                                                             // 24230
 * </pre>                                                                                                              // 24231
 * </div>                                                                                                              // 24232
 *                                                                                                                     // 24233
 * @priority 450                                                                                                       // 24234
 *                                                                                                                     // 24235
 * @element ANY                                                                                                        // 24236
 * @param {expression} ngInit {@link guide/expression Expression} to eval.                                             // 24237
 *                                                                                                                     // 24238
 * @example                                                                                                            // 24239
   <example module="initExample">                                                                                      // 24240
     <file name="index.html">                                                                                          // 24241
   <script>                                                                                                            // 24242
     angular.module('initExample', [])                                                                                 // 24243
       .controller('ExampleController', ['$scope', function($scope) {                                                  // 24244
         $scope.list = [['a', 'b'], ['c', 'd']];                                                                       // 24245
       }]);                                                                                                            // 24246
   </script>                                                                                                           // 24247
   <div ng-controller="ExampleController">                                                                             // 24248
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">                                                 // 24249
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">                                              // 24250
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>                      // 24251
       </div>                                                                                                          // 24252
     </div>                                                                                                            // 24253
   </div>                                                                                                              // 24254
     </file>                                                                                                           // 24255
     <file name="protractor.js" type="protractor">                                                                     // 24256
       it('should alias index positions', function() {                                                                 // 24257
         var elements = element.all(by.css('.example-init'));                                                          // 24258
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');                                                // 24259
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');                                                // 24260
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');                                                // 24261
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');                                                // 24262
       });                                                                                                             // 24263
     </file>                                                                                                           // 24264
   </example>                                                                                                          // 24265
 */                                                                                                                    // 24266
var ngInitDirective = ngDirective({                                                                                    // 24267
  priority: 450,                                                                                                       // 24268
  compile: function() {                                                                                                // 24269
    return {                                                                                                           // 24270
      pre: function(scope, element, attrs) {                                                                           // 24271
        scope.$eval(attrs.ngInit);                                                                                     // 24272
      }                                                                                                                // 24273
    };                                                                                                                 // 24274
  }                                                                                                                    // 24275
});                                                                                                                    // 24276
                                                                                                                       // 24277
/**                                                                                                                    // 24278
 * @ngdoc directive                                                                                                    // 24279
 * @name ngList                                                                                                        // 24280
 *                                                                                                                     // 24281
 * @description                                                                                                        // 24282
 * Text input that converts between a delimited string and an array of strings. The default                            // 24283
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom                   // 24284
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.                                    // 24285
 *                                                                                                                     // 24286
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.                                    // 24287
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each                                // 24288
 *   list item is respected. This implies that the user of the directive is responsible for                            // 24289
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a                           // 24290
 *   tab or newline character.                                                                                         // 24291
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected                     // 24292
 *   when joining the list items back together) and whitespace around each list item is stripped                       // 24293
 *   before it is added to the model.                                                                                  // 24294
 *                                                                                                                     // 24295
 * ### Example with Validation                                                                                         // 24296
 *                                                                                                                     // 24297
 * <example name="ngList-directive" module="listExample">                                                              // 24298
 *   <file name="app.js">                                                                                              // 24299
 *      angular.module('listExample', [])                                                                              // 24300
 *        .controller('ExampleController', ['$scope', function($scope) {                                               // 24301
 *          $scope.names = ['morpheus', 'neo', 'trinity'];                                                             // 24302
 *        }]);                                                                                                         // 24303
 *   </file>                                                                                                           // 24304
 *   <file name="index.html">                                                                                          // 24305
 *    <form name="myForm" ng-controller="ExampleController">                                                           // 24306
 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>                               // 24307
 *      <span role="alert">                                                                                            // 24308
 *        <span class="error" ng-show="myForm.namesInput.$error.required">                                             // 24309
 *        Required!</span>                                                                                             // 24310
 *      </span>                                                                                                        // 24311
 *      <br>                                                                                                           // 24312
 *      <tt>names = {{names}}</tt><br/>                                                                                // 24313
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>                                          // 24314
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>                                          // 24315
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>                                                                // 24316
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>                                            // 24317
 *     </form>                                                                                                         // 24318
 *   </file>                                                                                                           // 24319
 *   <file name="protractor.js" type="protractor">                                                                     // 24320
 *     var listInput = element(by.model('names'));                                                                     // 24321
 *     var names = element(by.exactBinding('names'));                                                                  // 24322
 *     var valid = element(by.binding('myForm.namesInput.$valid'));                                                    // 24323
 *     var error = element(by.css('span.error'));                                                                      // 24324
 *                                                                                                                     // 24325
 *     it('should initialize to model', function() {                                                                   // 24326
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');                                            // 24327
 *       expect(valid.getText()).toContain('true');                                                                    // 24328
 *       expect(error.getCssValue('display')).toBe('none');                                                            // 24329
 *     });                                                                                                             // 24330
 *                                                                                                                     // 24331
 *     it('should be invalid if empty', function() {                                                                   // 24332
 *       listInput.clear();                                                                                            // 24333
 *       listInput.sendKeys('');                                                                                       // 24334
 *                                                                                                                     // 24335
 *       expect(names.getText()).toContain('');                                                                        // 24336
 *       expect(valid.getText()).toContain('false');                                                                   // 24337
 *       expect(error.getCssValue('display')).not.toBe('none');                                                        // 24338
 *     });                                                                                                             // 24339
 *   </file>                                                                                                           // 24340
 * </example>                                                                                                          // 24341
 *                                                                                                                     // 24342
 * ### Example - splitting on whitespace                                                                               // 24343
 * <example name="ngList-directive-newlines">                                                                          // 24344
 *   <file name="index.html">                                                                                          // 24345
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>                                            // 24346
 *    <pre>{{ list | json }}</pre>                                                                                     // 24347
 *   </file>                                                                                                           // 24348
 *   <file name="protractor.js" type="protractor">                                                                     // 24349
 *     it("should split the text by newlines", function() {                                                            // 24350
 *       var listInput = element(by.model('list'));                                                                    // 24351
 *       var output = element(by.binding('list | json'));                                                              // 24352
 *       listInput.sendKeys('abc\ndef\nghi');                                                                          // 24353
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');                                      // 24354
 *     });                                                                                                             // 24355
 *   </file>                                                                                                           // 24356
 * </example>                                                                                                          // 24357
 *                                                                                                                     // 24358
 * @element input                                                                                                      // 24359
 * @param {string=} ngList optional delimiter that should be used to split the value.                                  // 24360
 */                                                                                                                    // 24361
var ngListDirective = function() {                                                                                     // 24362
  return {                                                                                                             // 24363
    restrict: 'A',                                                                                                     // 24364
    priority: 100,                                                                                                     // 24365
    require: 'ngModel',                                                                                                // 24366
    link: function(scope, element, attr, ctrl) {                                                                       // 24367
      // We want to control whitespace trimming so we use this convoluted approach                                     // 24368
      // to access the ngList attribute, which doesn't pre-trim the attribute                                          // 24369
      var ngList = element.attr(attr.$attr.ngList) || ', ';                                                            // 24370
      var trimValues = attr.ngTrim !== 'false';                                                                        // 24371
      var separator = trimValues ? trim(ngList) : ngList;                                                              // 24372
                                                                                                                       // 24373
      var parse = function(viewValue) {                                                                                // 24374
        // If the viewValue is invalid (say required but empty) it will be `undefined`                                 // 24375
        if (isUndefined(viewValue)) return;                                                                            // 24376
                                                                                                                       // 24377
        var list = [];                                                                                                 // 24378
                                                                                                                       // 24379
        if (viewValue) {                                                                                               // 24380
          forEach(viewValue.split(separator), function(value) {                                                        // 24381
            if (value) list.push(trimValues ? trim(value) : value);                                                    // 24382
          });                                                                                                          // 24383
        }                                                                                                              // 24384
                                                                                                                       // 24385
        return list;                                                                                                   // 24386
      };                                                                                                               // 24387
                                                                                                                       // 24388
      ctrl.$parsers.push(parse);                                                                                       // 24389
      ctrl.$formatters.push(function(value) {                                                                          // 24390
        if (isArray(value)) {                                                                                          // 24391
          return value.join(ngList);                                                                                   // 24392
        }                                                                                                              // 24393
                                                                                                                       // 24394
        return undefined;                                                                                              // 24395
      });                                                                                                              // 24396
                                                                                                                       // 24397
      // Override the standard $isEmpty because an empty array means the input is empty.                               // 24398
      ctrl.$isEmpty = function(value) {                                                                                // 24399
        return !value || !value.length;                                                                                // 24400
      };                                                                                                               // 24401
    }                                                                                                                  // 24402
  };                                                                                                                   // 24403
};                                                                                                                     // 24404
                                                                                                                       // 24405
/* global VALID_CLASS: true,                                                                                           // 24406
  INVALID_CLASS: true,                                                                                                 // 24407
  PRISTINE_CLASS: true,                                                                                                // 24408
  DIRTY_CLASS: true,                                                                                                   // 24409
  UNTOUCHED_CLASS: true,                                                                                               // 24410
  TOUCHED_CLASS: true,                                                                                                 // 24411
*/                                                                                                                     // 24412
                                                                                                                       // 24413
var VALID_CLASS = 'ng-valid',                                                                                          // 24414
    INVALID_CLASS = 'ng-invalid',                                                                                      // 24415
    PRISTINE_CLASS = 'ng-pristine',                                                                                    // 24416
    DIRTY_CLASS = 'ng-dirty',                                                                                          // 24417
    UNTOUCHED_CLASS = 'ng-untouched',                                                                                  // 24418
    TOUCHED_CLASS = 'ng-touched',                                                                                      // 24419
    PENDING_CLASS = 'ng-pending';                                                                                      // 24420
                                                                                                                       // 24421
var ngModelMinErr = minErr('ngModel');                                                                                 // 24422
                                                                                                                       // 24423
/**                                                                                                                    // 24424
 * @ngdoc type                                                                                                         // 24425
 * @name ngModel.NgModelController                                                                                     // 24426
 *                                                                                                                     // 24427
 * @property {string} $viewValue Actual string value in the view.                                                      // 24428
 * @property {*} $modelValue The value in the model that the control is bound to.                                      // 24429
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever                        // 24430
       the control reads value from the DOM. The functions are called in array order, each passing                     // 24431
       its return value through to the next. The last return value is forwarded to the                                 // 24432
       {@link ngModel.NgModelController#$validators `$validators`} collection.                                         // 24433
                                                                                                                       // 24434
Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue                                 // 24435
`$viewValue`}.                                                                                                         // 24436
                                                                                                                       // 24437
Returning `undefined` from a parser means a parse error occurred. In that case,                                        // 24438
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`                              // 24439
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}                                 // 24440
is set to `true`. The parse error is stored in `ngModel.$error.parse`.                                                 // 24441
                                                                                                                       // 24442
 *                                                                                                                     // 24443
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever                     // 24444
       the model value changes. The functions are called in reverse array order, each passing the value through to the // 24445
       next. The last return value is used as the actual DOM value.                                                    // 24446
       Used to format / convert values for display in the control.                                                     // 24447
 * ```js                                                                                                               // 24448
 * function formatter(value) {                                                                                         // 24449
 *   if (value) {                                                                                                      // 24450
 *     return value.toUpperCase();                                                                                     // 24451
 *   }                                                                                                                 // 24452
 * }                                                                                                                   // 24453
 * ngModel.$formatters.push(formatter);                                                                                // 24454
 * ```                                                                                                                 // 24455
 *                                                                                                                     // 24456
 * @property {Object.<string, function>} $validators A collection of validators that are applied                       // 24457
 *      whenever the model value changes. The key value within the object refers to the name of the                    // 24458
 *      validator while the function refers to the validation operation. The validation operation is                   // 24459
 *      provided with the model value as an argument and must return a true or false value depending                   // 24460
 *      on the response of that validation.                                                                            // 24461
 *                                                                                                                     // 24462
 * ```js                                                                                                               // 24463
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {                                             // 24464
 *   var value = modelValue || viewValue;                                                                              // 24465
 *   return /[0-9]+/.test(value) &&                                                                                    // 24466
 *          /[a-z]+/.test(value) &&                                                                                    // 24467
 *          /[A-Z]+/.test(value) &&                                                                                    // 24468
 *          /\W+/.test(value);                                                                                         // 24469
 * };                                                                                                                  // 24470
 * ```                                                                                                                 // 24471
 *                                                                                                                     // 24472
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to             // 24473
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided             // 24474
 *      is expected to return a promise when it is run during the model validation process. Once the promise           // 24475
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.            // 24476
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model      // 24477
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator       // 24478
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.                                                     // 24480
 *                                                                                                                     // 24481
 * Please note that if $http is used then it is important that the server returns a success HTTP response code         // 24482
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.                   // 24483
 *                                                                                                                     // 24484
 * ```js                                                                                                               // 24485
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {                                         // 24486
 *   var value = modelValue || viewValue;                                                                              // 24487
 *                                                                                                                     // 24488
 *   // Lookup user by username                                                                                        // 24489
 *   return $http.get('/api/users/' + value).                                                                          // 24490
 *      then(function resolved() {                                                                                     // 24491
 *        //username exists, this means validation fails                                                               // 24492
 *        return $q.reject('exists');                                                                                  // 24493
 *      }, function rejected() {                                                                                       // 24494
 *        //username does not exist, therefore this validation passes                                                  // 24495
 *        return true;                                                                                                 // 24496
 *      });                                                                                                            // 24497
 * };                                                                                                                  // 24498
 * ```                                                                                                                 // 24499
 *                                                                                                                     // 24500
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the                        // 24501
 *     view value has changed. It is called with no arguments, and its return value is ignored.                        // 24502
 *     This can be used in place of additional $watches against the model value.                                       // 24503
 *                                                                                                                     // 24504
 * @property {Object} $error An object hash with all failing validator ids as keys.                                    // 24505
 * @property {Object} $pending An object hash with all pending validator ids as keys.                                  // 24506
 *                                                                                                                     // 24507
 * @property {boolean} $untouched True if control has not lost focus yet.                                              // 24508
 * @property {boolean} $touched True if control has lost focus.                                                        // 24509
 * @property {boolean} $pristine True if user has not interacted with the control yet.                                 // 24510
 * @property {boolean} $dirty True if user has already interacted with the control.                                    // 24511
 * @property {boolean} $valid True if there is no error.                                                               // 24512
 * @property {boolean} $invalid True if at least one error on the control.                                             // 24513
 * @property {string} $name The name attribute of the control.                                                         // 24514
 *                                                                                                                     // 24515
 * @description                                                                                                        // 24516
 *                                                                                                                     // 24517
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.                                       // 24518
 * The controller contains services for data-binding, validation, CSS updates, and value formatting                    // 24519
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or                           // 24520
 * listening to DOM events.                                                                                            // 24521
 * Such DOM related logic should be provided by other directives which make use of                                     // 24522
 * `NgModelController` for data-binding to control elements.                                                           // 24523
 * Angular provides this DOM logic for most {@link input `input`} elements.                                            // 24524
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example                      // 24525
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.                        // 24526
 *                                                                                                                     // 24527
 * @example                                                                                                            // 24528
 * ### Custom Control Example                                                                                          // 24529
 * This example shows how to use `NgModelController` with a custom control to achieve                                  // 24530
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)                       // 24531
 * collaborate together to achieve the desired result.                                                                 // 24532
 *                                                                                                                     // 24533
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element                                 // 24534
 * contents be edited in place by the user.                                                                            // 24535
 *                                                                                                                     // 24536
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}             // 24537
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).              // 24538
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks                    // 24539
 * that content using the `$sce` service.                                                                              // 24540
 *                                                                                                                     // 24541
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">                                // 24542
    <file name="style.css">                                                                                            // 24543
      [contenteditable] {                                                                                              // 24544
        border: 1px solid black;                                                                                       // 24545
        background-color: white;                                                                                       // 24546
        min-height: 20px;                                                                                              // 24547
      }                                                                                                                // 24548
                                                                                                                       // 24549
      .ng-invalid {                                                                                                    // 24550
        border: 1px solid red;                                                                                         // 24551
      }                                                                                                                // 24552
                                                                                                                       // 24553
    </file>                                                                                                            // 24554
    <file name="script.js">                                                                                            // 24555
      angular.module('customControl', ['ngSanitize']).                                                                 // 24556
        directive('contenteditable', ['$sce', function($sce) {                                                         // 24557
          return {                                                                                                     // 24558
            restrict: 'A', // only activate on element attribute                                                       // 24559
            require: '?ngModel', // get a hold of NgModelController                                                    // 24560
            link: function(scope, element, attrs, ngModel) {                                                           // 24561
              if (!ngModel) return; // do nothing if no ng-model                                                       // 24562
                                                                                                                       // 24563
              // Specify how UI should be updated                                                                      // 24564
              ngModel.$render = function() {                                                                           // 24565
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));                                           // 24566
              };                                                                                                       // 24567
                                                                                                                       // 24568
              // Listen for change events to enable binding                                                            // 24569
              element.on('blur keyup change', function() {                                                             // 24570
                scope.$evalAsync(read);                                                                                // 24571
              });                                                                                                      // 24572
              read(); // initialize                                                                                    // 24573
                                                                                                                       // 24574
              // Write data to the model                                                                               // 24575
              function read() {                                                                                        // 24576
                var html = element.html();                                                                             // 24577
                // When we clear the content editable the browser leaves a <br> behind                                 // 24578
                // If strip-br attribute is provided then we strip this out                                            // 24579
                if ( attrs.stripBr && html == '<br>' ) {                                                               // 24580
                  html = '';                                                                                           // 24581
                }                                                                                                      // 24582
                ngModel.$setViewValue(html);                                                                           // 24583
              }                                                                                                        // 24584
            }                                                                                                          // 24585
          };                                                                                                           // 24586
        }]);                                                                                                           // 24587
    </file>                                                                                                            // 24588
    <file name="index.html">                                                                                           // 24589
      <form name="myForm">                                                                                             // 24590
       <div contenteditable                                                                                            // 24591
            name="myWidget" ng-model="userContent"                                                                     // 24592
            strip-br="true"                                                                                            // 24593
            required>Change me!</div>                                                                                  // 24594
        <span ng-show="myForm.myWidget.$error.required">Required!</span>                                               // 24595
       <hr>                                                                                                            // 24596
       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>                                      // 24597
      </form>                                                                                                          // 24598
    </file>                                                                                                            // 24599
    <file name="protractor.js" type="protractor">                                                                      // 24600
    it('should data-bind and become invalid', function() {                                                             // 24601
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {                                 // 24602
        // SafariDriver can't handle contenteditable                                                                   // 24603
        // and Firefox driver can't clear contenteditables very well                                                   // 24604
        return;                                                                                                        // 24605
      }                                                                                                                // 24606
      var contentEditable = element(by.css('[contenteditable]'));                                                      // 24607
      var content = 'Change me!';                                                                                      // 24608
                                                                                                                       // 24609
      expect(contentEditable.getText()).toEqual(content);                                                              // 24610
                                                                                                                       // 24611
      contentEditable.clear();                                                                                         // 24612
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);                                                             // 24613
      expect(contentEditable.getText()).toEqual('');                                                                   // 24614
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);                                    // 24615
    });                                                                                                                // 24616
    </file>                                                                                                            // 24617
 * </example>                                                                                                          // 24618
 *                                                                                                                     // 24619
 *                                                                                                                     // 24620
 */                                                                                                                    // 24621
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {   // 24623
  this.$viewValue = Number.NaN;                                                                                        // 24624
  this.$modelValue = Number.NaN;                                                                                       // 24625
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.     // 24626
  this.$validators = {};                                                                                               // 24627
  this.$asyncValidators = {};                                                                                          // 24628
  this.$parsers = [];                                                                                                  // 24629
  this.$formatters = [];                                                                                               // 24630
  this.$viewChangeListeners = [];                                                                                      // 24631
  this.$untouched = true;                                                                                              // 24632
  this.$touched = false;                                                                                               // 24633
  this.$pristine = true;                                                                                               // 24634
  this.$dirty = false;                                                                                                 // 24635
  this.$valid = true;                                                                                                  // 24636
  this.$invalid = false;                                                                                               // 24637
  this.$error = {}; // keep invalid keys here                                                                          // 24638
  this.$$success = {}; // keep valid keys here                                                                         // 24639
  this.$pending = undefined; // keep pending keys here                                                                 // 24640
  this.$name = $interpolate($attr.name || '', false)($scope);                                                          // 24641
                                                                                                                       // 24642
                                                                                                                       // 24643
  var parsedNgModel = $parse($attr.ngModel),                                                                           // 24644
      parsedNgModelAssign = parsedNgModel.assign,                                                                      // 24645
      ngModelGet = parsedNgModel,                                                                                      // 24646
      ngModelSet = parsedNgModelAssign,                                                                                // 24647
      pendingDebounce = null,                                                                                          // 24648
      parserValid,                                                                                                     // 24649
      ctrl = this;                                                                                                     // 24650
                                                                                                                       // 24651
  this.$$setOptions = function(options) {                                                                              // 24652
    ctrl.$options = options;                                                                                           // 24653
    if (options && options.getterSetter) {                                                                             // 24654
      var invokeModelGetter = $parse($attr.ngModel + '()'),                                                            // 24655
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');                                                        // 24656
                                                                                                                       // 24657
      ngModelGet = function($scope) {                                                                                  // 24658
        var modelValue = parsedNgModel($scope);                                                                        // 24659
        if (isFunction(modelValue)) {                                                                                  // 24660
          modelValue = invokeModelGetter($scope);                                                                      // 24661
        }                                                                                                              // 24662
        return modelValue;                                                                                             // 24663
      };                                                                                                               // 24664
      ngModelSet = function($scope, newValue) {                                                                        // 24665
        if (isFunction(parsedNgModel($scope))) {                                                                       // 24666
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});                                                         // 24667
        } else {                                                                                                       // 24668
          parsedNgModelAssign($scope, ctrl.$modelValue);                                                               // 24669
        }                                                                                                              // 24670
      };                                                                                                               // 24671
    } else if (!parsedNgModel.assign) {                                                                                // 24672
      throw ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",                             // 24673
          $attr.ngModel, startingTag($element));                                                                       // 24674
    }                                                                                                                  // 24675
  };                                                                                                                   // 24676
                                                                                                                       // 24677
  /**                                                                                                                  // 24678
   * @ngdoc method                                                                                                     // 24679
   * @name ngModel.NgModelController#$render                                                                           // 24680
   *                                                                                                                   // 24681
   * @description                                                                                                      // 24682
   * Called when the view needs to be updated. It is expected that the user of the ng-model                            // 24683
   * directive will implement this method.                                                                             // 24684
   *                                                                                                                   // 24685
   * The `$render()` method is invoked in the following situations:                                                    // 24686
   *                                                                                                                   // 24687
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last                            // 24688
   *   committed value then `$render()` is called to update the input control.                                         // 24689
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and                   // 24690
   *   the `$viewValue` are different from last time.                                                                  // 24691
   *                                                                                                                   // 24692
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of                           // 24693
   * `$modelValue` and `$viewValue` are actually different from their previous value. If `$modelValue`                 // 24694
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be                         // 24695
   * invoked if you only change a property on the objects.                                                             // 24696
   */                                                                                                                  // 24697
  this.$render = noop;                                                                                                 // 24698
                                                                                                                       // 24699
  /**                                                                                                                  // 24700
   * @ngdoc method                                                                                                     // 24701
   * @name ngModel.NgModelController#$isEmpty                                                                          // 24702
   *                                                                                                                   // 24703
   * @description                                                                                                      // 24704
   * This is called when we need to determine if the value of an input is empty.                                       // 24705
   *                                                                                                                   // 24706
   * For instance, the required directive does this to work out if the input has data or not.                          // 24707
   *                                                                                                                   // 24708
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.                   // 24709
   *                                                                                                                   // 24710
   * You can override this for input directives whose concept of being empty is different from the                     // 24711
   * default. The `checkboxInputType` directive does this because in its case a value of `false`                       // 24712
   * implies empty.                                                                                                    // 24713
   *                                                                                                                   // 24714
   * @param {*} value The value of the input to check for emptiness.                                                   // 24715
   * @returns {boolean} True if `value` is "empty".                                                                    // 24716
   */                                                                                                                  // 24717
  this.$isEmpty = function(value) {                                                                                    // 24718
    return isUndefined(value) || value === '' || value === null || value !== value;                                    // 24719
  };                                                                                                                   // 24720
                                                                                                                       // 24721
  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,                                          // 24722
      currentValidationRunId = 0;                                                                                      // 24723
                                                                                                                       // 24724
  /**                                                                                                                  // 24725
   * @ngdoc method                                                                                                     // 24726
   * @name ngModel.NgModelController#$setValidity                                                                      // 24727
   *                                                                                                                   // 24728
   * @description                                                                                                      // 24729
   * Change the validity state, and notify the form.                                                                   // 24730
   *                                                                                                                   // 24731
   * This method can be called within $parsers/$formatters or a custom validation implementation.                      // 24732
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and                               // 24733
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.                              // 24734
   *                                                                                                                   // 24735
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned               // 24736
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`                                   // 24737
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.                            // 24738
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case                      // 24739
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`            // 24740
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .                                  // 24741
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),         // 24742
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.                   // 24743
   *                          Skipped is used by Angular when validators do not run because of parse errors and        // 24744
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.              // 24745
   */                                                                                                                  // 24746
  addSetValidityMethod({                                                                                               // 24747
    ctrl: this,                                                                                                        // 24748
    $element: $element,                                                                                                // 24749
    set: function(object, property) {                                                                                  // 24750
      object[property] = true;                                                                                         // 24751
    },                                                                                                                 // 24752
    unset: function(object, property) {                                                                                // 24753
      delete object[property];                                                                                         // 24754
    },                                                                                                                 // 24755
    parentForm: parentForm,                                                                                            // 24756
    $animate: $animate                                                                                                 // 24757
  });                                                                                                                  // 24758
                                                                                                                       // 24759
  /**                                                                                                                  // 24760
   * @ngdoc method                                                                                                     // 24761
   * @name ngModel.NgModelController#$setPristine                                                                      // 24762
   *                                                                                                                   // 24763
   * @description                                                                                                      // 24764
   * Sets the control to its pristine state.                                                                           // 24765
   *                                                                                                                   // 24766
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine                      // 24767
   * state (`ng-pristine` class). A model is considered to be pristine when the control                                // 24768
   * has not been changed from when first compiled.                                                                    // 24769
   */                                                                                                                  // 24770
  this.$setPristine = function() {                                                                                     // 24771
    ctrl.$dirty = false;                                                                                               // 24772
    ctrl.$pristine = true;                                                                                             // 24773
    $animate.removeClass($element, DIRTY_CLASS);                                                                       // 24774
    $animate.addClass($element, PRISTINE_CLASS);                                                                       // 24775
  };                                                                                                                   // 24776
                                                                                                                       // 24777
  /**                                                                                                                  // 24778
   * @ngdoc method                                                                                                     // 24779
   * @name ngModel.NgModelController#$setDirty                                                                         // 24780
   *                                                                                                                   // 24781
   * @description                                                                                                      // 24782
   * Sets the control to its dirty state.                                                                              // 24783
   *                                                                                                                   // 24784
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty                      // 24785
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed                     // 24786
   * from when first compiled.                                                                                         // 24787
   */                                                                                                                  // 24788
  this.$setDirty = function() {                                                                                        // 24789
    ctrl.$dirty = true;                                                                                                // 24790
    ctrl.$pristine = false;                                                                                            // 24791
    $animate.removeClass($element, PRISTINE_CLASS);                                                                    // 24792
    $animate.addClass($element, DIRTY_CLASS);                                                                          // 24793
    parentForm.$setDirty();                                                                                            // 24794
  };                                                                                                                   // 24795
                                                                                                                       // 24796
  /**                                                                                                                  // 24797
   * @ngdoc method                                                                                                     // 24798
   * @name ngModel.NgModelController#$setUntouched                                                                     // 24799
   *                                                                                                                   // 24800
   * @description                                                                                                      // 24801
   * Sets the control to its untouched state.                                                                          // 24802
   *                                                                                                                   // 24803
   * This method can be called to remove the `ng-touched` class and set the control to its                             // 24804
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched                             // 24805
   * by default, however this function can be used to restore that state if the model has                              // 24806
   * already been touched by the user.                                                                                 // 24807
   */                                                                                                                  // 24808
  this.$setUntouched = function() {                                                                                    // 24809
    ctrl.$touched = false;                                                                                             // 24810
    ctrl.$untouched = true;                                                                                            // 24811
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);                                                       // 24812
  };                                                                                                                   // 24813
                                                                                                                       // 24814
  /**                                                                                                                  // 24815
   * @ngdoc method                                                                                                     // 24816
   * @name ngModel.NgModelController#$setTouched                                                                       // 24817
   *                                                                                                                   // 24818
   * @description                                                                                                      // 24819
   * Sets the control to its touched state.                                                                            // 24820
   *                                                                                                                   // 24821
   * This method can be called to remove the `ng-untouched` class and set the control to its                           // 24822
   * touched state (`ng-touched` class). A model is considered to be touched when the user has                         // 24823
   * first focused the control element and then shifted focus away from the control (blur event).                      // 24824
   */                                                                                                                  // 24825
  this.$setTouched = function() {                                                                                      // 24826
    ctrl.$touched = true;                                                                                              // 24827
    ctrl.$untouched = false;                                                                                           // 24828
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);                                                       // 24829
  };                                                                                                                   // 24830
                                                                                                                       // 24831
  /**                                                                                                                  // 24832
   * @ngdoc method                                                                                                     // 24833
   * @name ngModel.NgModelController#$rollbackViewValue                                                                // 24834
   *                                                                                                                   // 24835
   * @description                                                                                                      // 24836
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,                   // 24837
   * which may be caused by a pending debounced event or because the input is waiting for a some                       // 24838
   * future event.                                                                                                     // 24839
   *                                                                                                                   // 24840
   * If you have an input that uses `ng-model-options` to set up debounced events or events such                       // 24841
   * as blur you can have a situation where there is a period when the `$viewValue`                                    // 24842
   * is out of synch with the ngModel's `$modelValue`.                                                                 // 24843
   *                                                                                                                   // 24844
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`                      // 24845
   * programmatically before these debounced/future events have resolved/occurred, because Angular's                   // 24846
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.                       // 24847
   *                                                                                                                   // 24848
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an               // 24849
   * input which may have such events pending. This is important in order to make sure that the                        // 24850
   * input field will be updated with the new model value and any pending operations are cancelled.                    // 24851
   *                                                                                                                   // 24852
   * <example name="ng-model-cancel-update" module="cancel-update-example">                                            // 24853
   *   <file name="app.js">                                                                                            // 24854
   *     angular.module('cancel-update-example', [])                                                                   // 24855
   *                                                                                                                   // 24856
   *     .controller('CancelUpdateController', ['$scope', function($scope) {                                           // 24857
   *       $scope.resetWithCancel = function(e) {                                                                      // 24858
   *         if (e.keyCode == 27) {                                                                                    // 24859
   *           $scope.myForm.myInput1.$rollbackViewValue();                                                            // 24860
   *           $scope.myValue = '';                                                                                    // 24861
   *         }                                                                                                         // 24862
   *       };                                                                                                          // 24863
   *       $scope.resetWithoutCancel = function(e) {                                                                   // 24864
   *         if (e.keyCode == 27) {                                                                                    // 24865
   *           $scope.myValue = '';                                                                                    // 24866
   *         }                                                                                                         // 24867
   *       };                                                                                                          // 24868
   *     }]);                                                                                                          // 24869
   *   </file>                                                                                                         // 24870
   *   <file name="index.html">                                                                                        // 24871
   *     <div ng-controller="CancelUpdateController">                                                                  // 24872
   *       <p>Try typing something in each input.  See that the model only updates when you                            // 24873
   *          blur off the input.                                                                                      // 24874
   *        </p>                                                                                                       // 24875
   *        <p>Now see what happens if you start typing then press the Escape key</p>                                  // 24876
   *                                                                                                                   // 24877
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">                                                // 24878
   *         <p id="inputDescription1">With $rollbackViewValue()</p>                                                   // 24879
   *         <input name="myInput1" aria-describedby="inputDescription1" ng-model="myValue"                            // 24880
   *                ng-keydown="resetWithCancel($event)"><br/>                                                         // 24881
   *         myValue: "{{ myValue }}"                                                                                  // 24882
   *                                                                                                                   // 24883
   *         <p id="inputDescription2">Without $rollbackViewValue()</p>                                                // 24884
   *         <input name="myInput2" aria-describedby="inputDescription2" ng-model="myValue"                            // 24885
   *                ng-keydown="resetWithoutCancel($event)"><br/>                                                      // 24886
   *         myValue: "{{ myValue }}"                                                                                  // 24887
   *       </form>                                                                                                     // 24888
   *     </div>                                                                                                        // 24889
   *   </file>                                                                                                         // 24890
   * </example>                                                                                                        // 24891
   */                                                                                                                  // 24892
  this.$rollbackViewValue = function() {                                                                               // 24893
    $timeout.cancel(pendingDebounce);                                                                                  // 24894
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;                                                                   // 24895
    ctrl.$render();                                                                                                    // 24896
  };                                                                                                                   // 24897
                                                                                                                       // 24898
  /**                                                                                                                  // 24899
   * @ngdoc method                                                                                                     // 24900
   * @name ngModel.NgModelController#$validate                                                                         // 24901
   *                                                                                                                   // 24902
   * @description                                                                                                      // 24903
   * Runs each of the registered validators (first synchronous validators and then                                     // 24904
   * asynchronous validators).                                                                                         // 24905
   * If the validity changes to invalid, the model will be set to `undefined`,                                         // 24906
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.                                            // 24907
   * If the validity changes to valid, it will set the model to the last available valid                               // 24908
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.                            // 24909
   */                                                                                                                  // 24910
  this.$validate = function() {                                                                                        // 24911
    // ignore $validate before model is initialized                                                                    // 24912
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 24913
      return;                                                                                                          // 24914
    }                                                                                                                  // 24915
                                                                                                                       // 24916
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 24917
    // Note: we use the $$rawModelValue as $modelValue might have been                                                 // 24918
    // set to undefined during a view -> model update that found validation                                            // 24919
    // errors. We can't parse the view here, since that could change                                                   // 24920
    // the model although neither viewValue nor the model on the scope changed                                         // 24921
    var modelValue = ctrl.$$rawModelValue;                                                                             // 24922
                                                                                                                       // 24923
    var prevValid = ctrl.$valid;                                                                                       // 24924
    var prevModelValue = ctrl.$modelValue;                                                                             // 24925
                                                                                                                       // 24926
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 24927
                                                                                                                       // 24928
    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {                                                   // 24929
      // If there was no change in validity, don't update the model                                                    // 24930
      // This prevents changing an invalid modelValue to undefined                                                     // 24931
      if (!allowInvalid && prevValid !== allValid) {                                                                   // 24932
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 24933
        // external validators (e.g. calculated on the server),                                                        // 24934
        // that just call $setValidity and need the model value                                                        // 24935
        // to calculate their validity.                                                                                // 24936
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 24937
                                                                                                                       // 24938
        if (ctrl.$modelValue !== prevModelValue) {                                                                     // 24939
          ctrl.$$writeModelToScope();                                                                                  // 24940
        }                                                                                                              // 24941
      }                                                                                                                // 24942
    });                                                                                                                // 24943
                                                                                                                       // 24944
  };                                                                                                                   // 24945
                                                                                                                       // 24946
  this.$$runValidators = function(modelValue, viewValue, doneCallback) {                                               // 24947
    currentValidationRunId++;                                                                                          // 24948
    var localValidationRunId = currentValidationRunId;                                                                 // 24949
                                                                                                                       // 24950
    // check parser error                                                                                              // 24951
    if (!processParseErrors()) {                                                                                       // 24952
      validationDone(false);                                                                                           // 24953
      return;                                                                                                          // 24954
    }                                                                                                                  // 24955
    if (!processSyncValidators()) {                                                                                    // 24956
      validationDone(false);                                                                                           // 24957
      return;                                                                                                          // 24958
    }                                                                                                                  // 24959
    processAsyncValidators();                                                                                          // 24960
                                                                                                                       // 24961
    function processParseErrors() {                                                                                    // 24962
      var errorKey = ctrl.$$parserName || 'parse';                                                                     // 24963
      if (parserValid === undefined) {                                                                                 // 24964
        setValidity(errorKey, null);                                                                                   // 24965
      } else {                                                                                                         // 24966
        if (!parserValid) {                                                                                            // 24967
          forEach(ctrl.$validators, function(v, name) {                                                                // 24968
            setValidity(name, null);                                                                                   // 24969
          });                                                                                                          // 24970
          forEach(ctrl.$asyncValidators, function(v, name) {                                                           // 24971
            setValidity(name, null);                                                                                   // 24972
          });                                                                                                          // 24973
        }                                                                                                              // 24974
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName                   // 24975
        setValidity(errorKey, parserValid);                                                                            // 24976
        return parserValid;                                                                                            // 24977
      }                                                                                                                // 24978
      return true;                                                                                                     // 24979
    }                                                                                                                  // 24980
                                                                                                                       // 24981
    function processSyncValidators() {                                                                                 // 24982
      var syncValidatorsValid = true;                                                                                  // 24983
      forEach(ctrl.$validators, function(validator, name) {                                                            // 24984
        var result = validator(modelValue, viewValue);                                                                 // 24985
        syncValidatorsValid = syncValidatorsValid && result;                                                           // 24986
        setValidity(name, result);                                                                                     // 24987
      });                                                                                                              // 24988
      if (!syncValidatorsValid) {                                                                                      // 24989
        forEach(ctrl.$asyncValidators, function(v, name) {                                                             // 24990
          setValidity(name, null);                                                                                     // 24991
        });                                                                                                            // 24992
        return false;                                                                                                  // 24993
      }                                                                                                                // 24994
      return true;                                                                                                     // 24995
    }                                                                                                                  // 24996
                                                                                                                       // 24997
    function processAsyncValidators() {                                                                                // 24998
      var validatorPromises = [];                                                                                      // 24999
      var allValid = true;                                                                                             // 25000
      forEach(ctrl.$asyncValidators, function(validator, name) {                                                       // 25001
        var promise = validator(modelValue, viewValue);                                                                // 25002
        if (!isPromiseLike(promise)) {                                                                                 // 25003
          throw ngModelMinErr("$asyncValidators",                                                                      // 25004
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);                    // 25005
        }                                                                                                              // 25006
        setValidity(name, undefined);                                                                                  // 25007
        validatorPromises.push(promise.then(function() {                                                               // 25008
          setValidity(name, true);                                                                                     // 25009
        }, function(error) {                                                                                           // 25010
          allValid = false;                                                                                            // 25011
          setValidity(name, false);                                                                                    // 25012
        }));                                                                                                           // 25013
      });                                                                                                              // 25014
      if (!validatorPromises.length) {                                                                                 // 25015
        validationDone(true);                                                                                          // 25016
      } else {                                                                                                         // 25017
        $q.all(validatorPromises).then(function() {                                                                    // 25018
          validationDone(allValid);                                                                                    // 25019
        }, noop);                                                                                                      // 25020
      }                                                                                                                // 25021
    }                                                                                                                  // 25022
                                                                                                                       // 25023
    function setValidity(name, isValid) {                                                                              // 25024
      if (localValidationRunId === currentValidationRunId) {                                                           // 25025
        ctrl.$setValidity(name, isValid);                                                                              // 25026
      }                                                                                                                // 25027
    }                                                                                                                  // 25028
                                                                                                                       // 25029
    function validationDone(allValid) {                                                                                // 25030
      if (localValidationRunId === currentValidationRunId) {                                                           // 25031
                                                                                                                       // 25032
        doneCallback(allValid);                                                                                        // 25033
      }                                                                                                                // 25034
    }                                                                                                                  // 25035
  };                                                                                                                   // 25036
                                                                                                                       // 25037
  /**                                                                                                                  // 25038
   * @ngdoc method                                                                                                     // 25039
   * @name ngModel.NgModelController#$commitViewValue                                                                  // 25040
   *                                                                                                                   // 25041
   * @description                                                                                                      // 25042
   * Commit a pending update to the `$modelValue`.                                                                     // 25043
   *                                                                                                                   // 25044
   * Updates may be pending by a debounced event or because the input is waiting for a some future                     // 25045
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`                          // 25046
   * usually handles calling this in response to input events.                                                         // 25047
   */                                                                                                                  // 25048
  this.$commitViewValue = function() {                                                                                 // 25049
    var viewValue = ctrl.$viewValue;                                                                                   // 25050
                                                                                                                       // 25051
    $timeout.cancel(pendingDebounce);                                                                                  // 25052
                                                                                                                       // 25053
    // If the view value has not changed then we should just exit, except in the case where there is                   // 25054
    // a native validator on the element. In this case the validation state may have changed even though               // 25055
    // the viewValue has stayed empty.                                                                                 // 25056
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {            // 25057
      return;                                                                                                          // 25058
    }                                                                                                                  // 25059
    ctrl.$$lastCommittedViewValue = viewValue;                                                                         // 25060
                                                                                                                       // 25061
    // change to dirty                                                                                                 // 25062
    if (ctrl.$pristine) {                                                                                              // 25063
      this.$setDirty();                                                                                                // 25064
    }                                                                                                                  // 25065
    this.$$parseAndValidate();                                                                                         // 25066
  };                                                                                                                   // 25067
                                                                                                                       // 25068
  this.$$parseAndValidate = function() {                                                                               // 25069
    var viewValue = ctrl.$$lastCommittedViewValue;                                                                     // 25070
    var modelValue = viewValue;                                                                                        // 25071
    parserValid = isUndefined(modelValue) ? undefined : true;                                                          // 25072
                                                                                                                       // 25073
    if (parserValid) {                                                                                                 // 25074
      for (var i = 0; i < ctrl.$parsers.length; i++) {                                                                 // 25075
        modelValue = ctrl.$parsers[i](modelValue);                                                                     // 25076
        if (isUndefined(modelValue)) {                                                                                 // 25077
          parserValid = false;                                                                                         // 25078
          break;                                                                                                       // 25079
        }                                                                                                              // 25080
      }                                                                                                                // 25081
    }                                                                                                                  // 25082
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {                                                       // 25083
      // ctrl.$modelValue has not been touched yet...                                                                  // 25084
      ctrl.$modelValue = ngModelGet($scope);                                                                           // 25085
    }                                                                                                                  // 25086
    var prevModelValue = ctrl.$modelValue;                                                                             // 25087
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;                                                    // 25088
    ctrl.$$rawModelValue = modelValue;                                                                                 // 25089
                                                                                                                       // 25090
    if (allowInvalid) {                                                                                                // 25091
      ctrl.$modelValue = modelValue;                                                                                   // 25092
      writeToModelIfNeeded();                                                                                          // 25093
    }                                                                                                                  // 25094
                                                                                                                       // 25095
    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.                      // 25096
    // This can happen if e.g. $setViewValue is called from inside a parser                                            // 25097
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {                               // 25098
      if (!allowInvalid) {                                                                                             // 25099
        // Note: Don't check ctrl.$valid here, as we could have                                                        // 25100
        // external validators (e.g. calculated on the server),                                                        // 25101
        // that just call $setValidity and need the model value                                                        // 25102
        // to calculate their validity.                                                                                // 25103
        ctrl.$modelValue = allValid ? modelValue : undefined;                                                          // 25104
        writeToModelIfNeeded();                                                                                        // 25105
      }                                                                                                                // 25106
    });                                                                                                                // 25107
                                                                                                                       // 25108
    function writeToModelIfNeeded() {                                                                                  // 25109
      if (ctrl.$modelValue !== prevModelValue) {                                                                       // 25110
        ctrl.$$writeModelToScope();                                                                                    // 25111
      }                                                                                                                // 25112
    }                                                                                                                  // 25113
  };                                                                                                                   // 25114
                                                                                                                       // 25115
  this.$$writeModelToScope = function() {                                                                              // 25116
    ngModelSet($scope, ctrl.$modelValue);                                                                              // 25117
    forEach(ctrl.$viewChangeListeners, function(listener) {                                                            // 25118
      try {                                                                                                            // 25119
        listener();                                                                                                    // 25120
      } catch (e) {                                                                                                    // 25121
        $exceptionHandler(e);                                                                                          // 25122
      }                                                                                                                // 25123
    });                                                                                                                // 25124
  };                                                                                                                   // 25125
                                                                                                                       // 25126
  /**                                                                                                                  // 25127
   * @ngdoc method                                                                                                     // 25128
   * @name ngModel.NgModelController#$setViewValue                                                                     // 25129
   *                                                                                                                   // 25130
   * @description                                                                                                      // 25131
   * Update the view value.                                                                                            // 25132
   *                                                                                                                   // 25133
   * This method should be called when an input directive want to change the view value; typically,                    // 25134
   * this is done from within a DOM event handler.                                                                     // 25135
   *                                                                                                                   // 25136
   * For example {@link ng.directive:input input} calls it when the value of the input changes and                     // 25137
   * {@link ng.directive:select select} calls it when an option is selected.                                           // 25138
   *                                                                                                                   // 25139
   * If the new `value` is an object (rather than a string or a number), we should make a copy of the                  // 25140
   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep                   // 25141
   * watch of objects, it only looks for a change of identity. If you only change the property of                      // 25142
   * the object then ngModel will not realise that the object has changed and will not invoke the                      // 25143
   * `$parsers` and `$validators` pipelines.                                                                           // 25144
   *                                                                                                                   // 25145
   * For this reason, you should not change properties of the copy once it has been passed to                          // 25146
   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.                      // 25147
   *                                                                                                                   // 25148
   * When this method is called, the new `value` will be staged for committing through the `$parsers`                  // 25149
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged             // 25150
   * value sent directly for processing, finally to be applied to `$modelValue` and then the                           // 25151
   * **expression** specified in the `ng-model` attribute.                                                             // 25152
   *                                                                                                                   // 25153
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.                      // 25154
   *                                                                                                                   // 25155
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`                  // 25156
   * and the `default` trigger is not listed, all those actions will remain pending until one of the                   // 25157
   * `updateOn` events is triggered on the DOM element.                                                                // 25158
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}                     // 25159
   * directive is used with a custom debounce for this particular event.                                               // 25160
   *                                                                                                                   // 25161
   * Note that calling this function does not trigger a `$digest`.                                                     // 25162
   *                                                                                                                   // 25163
   * @param {string} value Value from the view.                                                                        // 25164
   * @param {string} trigger Event that triggered the update.                                                          // 25165
   */                                                                                                                  // 25166
  this.$setViewValue = function(value, trigger) {                                                                      // 25167
    ctrl.$viewValue = value;                                                                                           // 25168
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {                                                             // 25169
      ctrl.$$debounceViewValueCommit(trigger);                                                                         // 25170
    }                                                                                                                  // 25171
  };                                                                                                                   // 25172
                                                                                                                       // 25173
  this.$$debounceViewValueCommit = function(trigger) {                                                                 // 25174
    var debounceDelay = 0,                                                                                             // 25175
        options = ctrl.$options,                                                                                       // 25176
        debounce;                                                                                                      // 25177
                                                                                                                       // 25178
    if (options && isDefined(options.debounce)) {                                                                      // 25179
      debounce = options.debounce;                                                                                     // 25180
      if (isNumber(debounce)) {                                                                                        // 25181
        debounceDelay = debounce;                                                                                      // 25182
      } else if (isNumber(debounce[trigger])) {                                                                        // 25183
        debounceDelay = debounce[trigger];                                                                             // 25184
      } else if (isNumber(debounce['default'])) {                                                                      // 25185
        debounceDelay = debounce['default'];                                                                           // 25186
      }                                                                                                                // 25187
    }                                                                                                                  // 25188
                                                                                                                       // 25189
    $timeout.cancel(pendingDebounce);                                                                                  // 25190
    if (debounceDelay) {                                                                                               // 25191
      pendingDebounce = $timeout(function() {                                                                          // 25192
        ctrl.$commitViewValue();                                                                                       // 25193
      }, debounceDelay);                                                                                               // 25194
    } else if ($rootScope.$$phase) {                                                                                   // 25195
      ctrl.$commitViewValue();                                                                                         // 25196
    } else {                                                                                                           // 25197
      $scope.$apply(function() {                                                                                       // 25198
        ctrl.$commitViewValue();                                                                                       // 25199
      });                                                                                                              // 25200
    }                                                                                                                  // 25201
  };                                                                                                                   // 25202
                                                                                                                       // 25203
  // model -> value                                                                                                    // 25204
  // Note: we cannot use a normal scope.$watch as we want to detect the following:                                     // 25205
  // 1. scope value is 'a'                                                                                             // 25206
  // 2. user enters 'b'                                                                                                // 25207
  // 3. ng-change kicks in and reverts scope value to 'a'                                                              // 25208
  //    -> scope value did not change since the last digest as                                                         // 25209
  //       ng-change executes in apply phase                                                                           // 25210
  // 4. view should be changed back to 'a'                                                                             // 25211
  $scope.$watch(function ngModelWatch() {                                                                              // 25212
    var modelValue = ngModelGet($scope);                                                                               // 25213
                                                                                                                       // 25214
    // if scope model value and ngModel value are out of sync                                                          // 25215
    // TODO(perf): why not move this to the action fn?                                                                 // 25216
    if (modelValue !== ctrl.$modelValue &&                                                                             // 25217
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator                    // 25218
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)                                            // 25219
    ) {                                                                                                                // 25220
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;                                                            // 25221
      parserValid = undefined;                                                                                         // 25222
                                                                                                                       // 25223
      var formatters = ctrl.$formatters,                                                                               // 25224
          idx = formatters.length;                                                                                     // 25225
                                                                                                                       // 25226
      var viewValue = modelValue;                                                                                      // 25227
      while (idx--) {                                                                                                  // 25228
        viewValue = formatters[idx](viewValue);                                                                        // 25229
      }                                                                                                                // 25230
      if (ctrl.$viewValue !== viewValue) {                                                                             // 25231
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;                                                   // 25232
        ctrl.$render();                                                                                                // 25233
                                                                                                                       // 25234
        ctrl.$$runValidators(modelValue, viewValue, noop);                                                             // 25235
      }                                                                                                                // 25236
    }                                                                                                                  // 25237
                                                                                                                       // 25238
    return modelValue;                                                                                                 // 25239
  });                                                                                                                  // 25240
}];                                                                                                                    // 25241
                                                                                                                       // 25242
                                                                                                                       // 25243
/**                                                                                                                    // 25244
 * @ngdoc directive                                                                                                    // 25245
 * @name ngModel                                                                                                       // 25246
 *                                                                                                                     // 25247
 * @element input                                                                                                      // 25248
 * @priority 1                                                                                                         // 25249
 *                                                                                                                     // 25250
 * @description                                                                                                        // 25251
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a                         // 25252
 * property on the scope using {@link ngModel.NgModelController NgModelController},                                    // 25253
 * which is created and exposed by this directive.                                                                     // 25254
 *                                                                                                                     // 25255
 * `ngModel` is responsible for:                                                                                       // 25256
 *                                                                                                                     // 25257
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`                   // 25258
 *   require.                                                                                                          // 25259
 * - Providing validation behavior (i.e. required, number, email, url).                                                // 25260
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).           // 25261
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.                                           // 25263
 *                                                                                                                     // 25264
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the                          // 25265
 * current scope. If the property doesn't already exist on this scope, it will be created                              // 25266
 * implicitly and added to the scope.                                                                                  // 25267
 *                                                                                                                     // 25268
 * For best practices on using `ngModel`, see:                                                                         // 25269
 *                                                                                                                     // 25270
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)                          // 25271
 *                                                                                                                     // 25272
 * For basic examples, how to use `ngModel`, see:                                                                      // 25273
 *                                                                                                                     // 25274
 *  - {@link ng.directive:input input}                                                                                 // 25275
 *    - {@link input[text] text}                                                                                       // 25276
 *    - {@link input[checkbox] checkbox}                                                                               // 25277
 *    - {@link input[radio] radio}                                                                                     // 25278
 *    - {@link input[number] number}                                                                                   // 25279
 *    - {@link input[email] email}                                                                                     // 25280
 *    - {@link input[url] url}                                                                                         // 25281
 *    - {@link input[date] date}                                                                                       // 25282
 *    - {@link input[datetime-local] datetime-local}                                                                   // 25283
 *    - {@link input[time] time}                                                                                       // 25284
 *    - {@link input[month] month}                                                                                     // 25285
 *    - {@link input[week] week}                                                                                       // 25286
 *  - {@link ng.directive:select select}                                                                               // 25287
 *  - {@link ng.directive:textarea textarea}                                                                           // 25288
 *                                                                                                                     // 25289
 * # CSS classes                                                                                                       // 25290
 * The following CSS classes are added and removed on the associated input/select/textarea element                     // 25291
 * depending on the validity of the model.                                                                             // 25292
 *                                                                                                                     // 25293
 *  - `ng-valid`: the model is valid                                                                                   // 25294
 *  - `ng-invalid`: the model is invalid                                                                               // 25295
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`                                                     // 25296
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`                                                 // 25297
 *  - `ng-pristine`: the control hasn't been interacted with yet                                                       // 25298
 *  - `ng-dirty`: the control has been interacted with                                                                 // 25299
 *  - `ng-touched`: the control has been blurred                                                                       // 25300
 *  - `ng-untouched`: the control hasn't been blurred                                                                  // 25301
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled                                                             // 25302
 *                                                                                                                     // 25303
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.                                // 25304
 *                                                                                                                     // 25305
 * ## Animation Hooks                                                                                                  // 25306
 *                                                                                                                     // 25307
 * Animations within models are triggered when any of the associated CSS classes are added and removed                 // 25308
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,                // 25309
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.              // 25310
 * The animations that are triggered within ngModel are similar to how they work in ngClass and                        // 25311
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.                            // 25312
 *                                                                                                                     // 25313
 * The following example shows a simple way to utilize CSS transitions to style an input element                       // 25314
 * that has been rendered as invalid after it has been validated:                                                      // 25315
 *                                                                                                                     // 25316
 * <pre>                                                                                                               // 25317
 * //be sure to include ngAnimate as a module to hook into more                                                        // 25318
 * //advanced animations                                                                                               // 25319
 * .my-input {                                                                                                         // 25320
 *   transition:0.5s linear all;                                                                                       // 25321
 *   background: white;                                                                                                // 25322
 * }                                                                                                                   // 25323
 * .my-input.ng-invalid {                                                                                              // 25324
 *   background: red;                                                                                                  // 25325
 *   color:white;                                                                                                      // 25326
 * }                                                                                                                   // 25327
 * </pre>                                                                                                              // 25328
 *                                                                                                                     // 25329
 * @example                                                                                                            // 25330
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">                          // 25331
     <file name="index.html">                                                                                          // 25332
       <script>                                                                                                        // 25333
        angular.module('inputExample', [])                                                                             // 25334
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25335
            $scope.val = '1';                                                                                          // 25336
          }]);                                                                                                         // 25337
       </script>                                                                                                       // 25338
       <style>                                                                                                         // 25339
         .my-input {                                                                                                   // 25340
           transition:all linear 0.5s;                                                                                 // 25341
           background: transparent;                                                                                    // 25342
         }                                                                                                             // 25343
         .my-input.ng-invalid {                                                                                        // 25344
           color:white;                                                                                                // 25345
           background: red;                                                                                            // 25346
         }                                                                                                             // 25347
       </style>                                                                                                        // 25348
       <p id="inputDescription">                                                                                       // 25349
        Update input to see transitions when valid/invalid.                                                            // 25350
        Integer is a valid value.                                                                                      // 25351
       </p>                                                                                                            // 25352
       <form name="testForm" ng-controller="ExampleController">                                                        // 25353
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"                                       // 25354
                aria-describedby="inputDescription" />                                                                 // 25355
       </form>                                                                                                         // 25356
     </file>                                                                                                           // 25357
 * </example>                                                                                                          // 25358
 *                                                                                                                     // 25359
 * ## Binding to a getter/setter                                                                                       // 25360
 *                                                                                                                     // 25361
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a                         // 25362
 * function that returns a representation of the model when called with zero arguments, and sets                       // 25363
 * the internal state of a model when called with an argument. It's sometimes useful to use this                       // 25364
 * for models that have an internal representation that's different from what the model exposes                        // 25365
 * to the view.                                                                                                        // 25366
 *                                                                                                                     // 25367
 * <div class="alert alert-success">                                                                                   // 25368
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more                       // 25369
 * frequently than other parts of your code.                                                                           // 25370
 * </div>                                                                                                              // 25371
 *                                                                                                                     // 25372
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that                      // 25373
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to                      // 25374
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See                                       // 25375
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.                                                      // 25376
 *                                                                                                                     // 25377
 * The following example shows how to use `ngModel` with a getter/setter:                                              // 25378
 *                                                                                                                     // 25379
 * @example                                                                                                            // 25380
 * <example name="ngModel-getter-setter" module="getterSetterExample">                                                 // 25381
     <file name="index.html">                                                                                          // 25382
       <div ng-controller="ExampleController">                                                                         // 25383
         <form name="userForm">                                                                                        // 25384
           <label>Name:                                                                                                // 25385
             <input type="text" name="userName"                                                                        // 25386
                    ng-model="user.name"                                                                               // 25387
                    ng-model-options="{ getterSetter: true }" />                                                       // 25388
           </label>                                                                                                    // 25389
         </form>                                                                                                       // 25390
         <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                    // 25391
       </div>                                                                                                          // 25392
     </file>                                                                                                           // 25393
     <file name="app.js">                                                                                              // 25394
       angular.module('getterSetterExample', [])                                                                       // 25395
         .controller('ExampleController', ['$scope', function($scope) {                                                // 25396
           var _name = 'Brian';                                                                                        // 25397
           $scope.user = {                                                                                             // 25398
             name: function(newName) {                                                                                 // 25399
              // Note that newName can be undefined for two reasons:                                                   // 25400
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25401
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25402
              //    input is invalid                                                                                   // 25403
              return arguments.length ? (_name = newName) : _name;                                                     // 25404
             }                                                                                                         // 25405
           };                                                                                                          // 25406
         }]);                                                                                                          // 25407
     </file>                                                                                                           // 25408
 * </example>                                                                                                          // 25409
 */                                                                                                                    // 25410
var ngModelDirective = ['$rootScope', function($rootScope) {                                                           // 25411
  return {                                                                                                             // 25412
    restrict: 'A',                                                                                                     // 25413
    require: ['ngModel', '^?form', '^?ngModelOptions'],                                                                // 25414
    controller: NgModelController,                                                                                     // 25415
    // Prelink needs to run before any input directive                                                                 // 25416
    // so that we can set the NgModelOptions in NgModelController                                                      // 25417
    // before anyone else uses it.                                                                                     // 25418
    priority: 1,                                                                                                       // 25419
    compile: function ngModelCompile(element) {                                                                        // 25420
      // Setup initial state of the control                                                                            // 25421
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);                                // 25422
                                                                                                                       // 25423
      return {                                                                                                         // 25424
        pre: function ngModelPreLink(scope, element, attr, ctrls) {                                                    // 25425
          var modelCtrl = ctrls[0],                                                                                    // 25426
              formCtrl = ctrls[1] || nullFormCtrl;                                                                     // 25427
                                                                                                                       // 25428
          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);                                                       // 25429
                                                                                                                       // 25430
          // notify others, especially parent forms                                                                    // 25431
          formCtrl.$addControl(modelCtrl);                                                                             // 25432
                                                                                                                       // 25433
          attr.$observe('name', function(newValue) {                                                                   // 25434
            if (modelCtrl.$name !== newValue) {                                                                        // 25435
              formCtrl.$$renameControl(modelCtrl, newValue);                                                           // 25436
            }                                                                                                          // 25437
          });                                                                                                          // 25438
                                                                                                                       // 25439
          scope.$on('$destroy', function() {                                                                           // 25440
            formCtrl.$removeControl(modelCtrl);                                                                        // 25441
          });                                                                                                          // 25442
        },                                                                                                             // 25443
        post: function ngModelPostLink(scope, element, attr, ctrls) {                                                  // 25444
          var modelCtrl = ctrls[0];                                                                                    // 25445
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {                                                     // 25446
            element.on(modelCtrl.$options.updateOn, function(ev) {                                                     // 25447
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);                                                      // 25448
            });                                                                                                        // 25449
          }                                                                                                            // 25450
                                                                                                                       // 25451
          element.on('blur', function(ev) {                                                                            // 25452
            if (modelCtrl.$touched) return;                                                                            // 25453
                                                                                                                       // 25454
            if ($rootScope.$$phase) {                                                                                  // 25455
              scope.$evalAsync(modelCtrl.$setTouched);                                                                 // 25456
            } else {                                                                                                   // 25457
              scope.$apply(modelCtrl.$setTouched);                                                                     // 25458
            }                                                                                                          // 25459
          });                                                                                                          // 25460
        }                                                                                                              // 25461
      };                                                                                                               // 25462
    }                                                                                                                  // 25463
  };                                                                                                                   // 25464
}];                                                                                                                    // 25465
                                                                                                                       // 25466
var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;                                                                          // 25467
                                                                                                                       // 25468
/**                                                                                                                    // 25469
 * @ngdoc directive                                                                                                    // 25470
 * @name ngModelOptions                                                                                                // 25471
 *                                                                                                                     // 25472
 * @description                                                                                                        // 25473
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of                   // 25474
 * events that will trigger a model update and/or a debouncing delay so that the actual update only                    // 25475
 * takes place when a timer expires; this timer will be reset after another change takes place.                        // 25476
 *                                                                                                                     // 25477
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might                     // 25478
 * be different from the value in the actual model. This means that if you update the model you                        // 25479
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in            // 25480
 * order to make sure it is synchronized with the model and that any debounced action is canceled.                     // 25481
 *                                                                                                                     // 25482
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}                   // 25483
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is                     // 25484
 * important because `form` controllers are published to the related scope under the name in their                     // 25485
 * `name` attribute.                                                                                                   // 25486
 *                                                                                                                     // 25487
 * Any pending changes will take place immediately when an enclosing form is submitted via the                         // 25488
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`                   // 25489
 * to have access to the updated model.                                                                                // 25490
 *                                                                                                                     // 25491
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.                                 // 25492
 *                                                                                                                     // 25493
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:                               // 25494
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several                     // 25495
 *     events using an space delimited list. There is a special event called `default` that                            // 25496
 *     matches the default events belonging of the control.                                                            // 25497
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A                     // 25498
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a                    // 25499
 *     custom value for each event. For example:                                                                       // 25500
 *     `ng-model-options="{ updateOn: 'default blur', debounce: { 'default': 500, 'blur': 0 } }"`                      // 25501
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did                    // 25502
 *     not validate correctly instead of the default behavior of setting the model to undefined.                       // 25503
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to                       // 25504
       `ngModel` as getters/setters.                                                                                   // 25505
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for                  // 25506
 *     `<input type="date">`, `<input type="time">`, ... . It understands UTC/GMT and the                              // 25507
 *     continental US time zone abbreviations, but for general use, use a time zone offset, for                        // 25508
 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)                                         // 25509
 *     If not specified, the timezone of the browser will be used.                                                     // 25510
 *                                                                                                                     // 25511
 * @example                                                                                                            // 25512
                                                                                                                       // 25513
  The following example shows how to override immediate updates. Changes on the inputs within the                      // 25514
  form will update the model only when the control loses focus (blur event). If `escape` key is                        // 25515
  pressed while the input field is focused, the value is reset to the value in the current model.                      // 25516
                                                                                                                       // 25517
  <example name="ngModelOptions-directive-blur" module="optionsExample">                                               // 25518
    <file name="index.html">                                                                                           // 25519
      <div ng-controller="ExampleController">                                                                          // 25520
        <form name="userForm">                                                                                         // 25521
          <label>Name:                                                                                                 // 25522
            <input type="text" name="userName"                                                                         // 25523
                   ng-model="user.name"                                                                                // 25524
                   ng-model-options="{ updateOn: 'blur' }"                                                             // 25525
                   ng-keyup="cancel($event)" />                                                                        // 25526
          </label><br />                                                                                               // 25527
          <label>Other data:                                                                                           // 25528
            <input type="text" ng-model="user.data" />                                                                 // 25529
          </label><br />                                                                                               // 25530
        </form>                                                                                                        // 25531
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25532
      </div>                                                                                                           // 25533
    </file>                                                                                                            // 25534
    <file name="app.js">                                                                                               // 25535
      angular.module('optionsExample', [])                                                                             // 25536
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25537
          $scope.user = { name: 'say', data: '' };                                                                     // 25538
                                                                                                                       // 25539
          $scope.cancel = function(e) {                                                                                // 25540
            if (e.keyCode == 27) {                                                                                     // 25541
              $scope.userForm.userName.$rollbackViewValue();                                                           // 25542
            }                                                                                                          // 25543
          };                                                                                                           // 25544
        }]);                                                                                                           // 25545
    </file>                                                                                                            // 25546
    <file name="protractor.js" type="protractor">                                                                      // 25547
      var model = element(by.binding('user.name'));                                                                    // 25548
      var input = element(by.model('user.name'));                                                                      // 25549
      var other = element(by.model('user.data'));                                                                      // 25550
                                                                                                                       // 25551
      it('should allow custom events', function() {                                                                    // 25552
        input.sendKeys(' hello');                                                                                      // 25553
        input.click();                                                                                                 // 25554
        expect(model.getText()).toEqual('say');                                                                        // 25555
        other.click();                                                                                                 // 25556
        expect(model.getText()).toEqual('say hello');                                                                  // 25557
      });                                                                                                              // 25558
                                                                                                                       // 25559
      it('should $rollbackViewValue when model changes', function() {                                                  // 25560
        input.sendKeys(' hello');                                                                                      // 25561
        expect(input.getAttribute('value')).toEqual('say hello');                                                      // 25562
        input.sendKeys(protractor.Key.ESCAPE);                                                                         // 25563
        expect(input.getAttribute('value')).toEqual('say');                                                            // 25564
        other.click();                                                                                                 // 25565
        expect(model.getText()).toEqual('say');                                                                        // 25566
      });                                                                                                              // 25567
    </file>                                                                                                            // 25568
  </example>                                                                                                           // 25569
                                                                                                                       // 25570
  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.                    // 25571
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.                      // 25572
                                                                                                                       // 25573
  <example name="ngModelOptions-directive-debounce" module="optionsExample">                                           // 25574
    <file name="index.html">                                                                                           // 25575
      <div ng-controller="ExampleController">                                                                          // 25576
        <form name="userForm">                                                                                         // 25577
          <label>Name:                                                                                                 // 25578
            <input type="text" name="userName"                                                                         // 25579
                   ng-model="user.name"                                                                                // 25580
                   ng-model-options="{ debounce: 1000 }" />                                                            // 25581
          </label>                                                                                                     // 25582
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button>                       // 25583
          <br />                                                                                                       // 25584
        </form>                                                                                                        // 25585
        <pre>user.name = <span ng-bind="user.name"></span></pre>                                                       // 25586
      </div>                                                                                                           // 25587
    </file>                                                                                                            // 25588
    <file name="app.js">                                                                                               // 25589
      angular.module('optionsExample', [])                                                                             // 25590
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25591
          $scope.user = { name: 'say' };                                                                               // 25592
        }]);                                                                                                           // 25593
    </file>                                                                                                            // 25594
  </example>                                                                                                           // 25595
                                                                                                                       // 25596
  This one shows how to bind to getter/setters:                                                                        // 25597
                                                                                                                       // 25598
  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">                                 // 25599
    <file name="index.html">                                                                                           // 25600
      <div ng-controller="ExampleController">                                                                          // 25601
        <form name="userForm">                                                                                         // 25602
          <label>Name:                                                                                                 // 25603
            <input type="text" name="userName"                                                                         // 25604
                   ng-model="user.name"                                                                                // 25605
                   ng-model-options="{ getterSetter: true }" />                                                        // 25606
          </label>                                                                                                     // 25607
        </form>                                                                                                        // 25608
        <pre>user.name = <span ng-bind="user.name()"></span></pre>                                                     // 25609
      </div>                                                                                                           // 25610
    </file>                                                                                                            // 25611
    <file name="app.js">                                                                                               // 25612
      angular.module('getterSetterExample', [])                                                                        // 25613
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 25614
          var _name = 'Brian';                                                                                         // 25615
          $scope.user = {                                                                                              // 25616
            name: function(newName) {                                                                                  // 25617
              // Note that newName can be undefined for two reasons:                                                   // 25618
              // 1. Because it is called as a getter and thus called with no arguments                                 // 25619
              // 2. Because the property should actually be set to undefined. This happens e.g. if the                 // 25620
              //    input is invalid                                                                                   // 25621
              return arguments.length ? (_name = newName) : _name;                                                     // 25622
            }                                                                                                          // 25623
          };                                                                                                           // 25624
        }]);                                                                                                           // 25625
    </file>                                                                                                            // 25626
  </example>                                                                                                           // 25627
 */                                                                                                                    // 25628
var ngModelOptionsDirective = function() {                                                                             // 25629
  return {                                                                                                             // 25630
    restrict: 'A',                                                                                                     // 25631
    controller: ['$scope', '$attrs', function($scope, $attrs) {                                                        // 25632
      var that = this;                                                                                                 // 25633
      this.$options = copy($scope.$eval($attrs.ngModelOptions));                                                       // 25634
      // Allow adding/overriding bound events                                                                          // 25635
      if (this.$options.updateOn !== undefined) {                                                                      // 25636
        this.$options.updateOnDefault = false;                                                                         // 25637
        // extract "default" pseudo-event from list of events that can trigger a model update                          // 25638
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {                      // 25639
          that.$options.updateOnDefault = true;                                                                        // 25640
          return ' ';                                                                                                  // 25641
        }));                                                                                                           // 25642
      } else {                                                                                                         // 25643
        this.$options.updateOnDefault = true;                                                                          // 25644
      }                                                                                                                // 25645
    }]                                                                                                                 // 25646
  };                                                                                                                   // 25647
};                                                                                                                     // 25648
                                                                                                                       // 25649
                                                                                                                       // 25650
                                                                                                                       // 25651
// helper methods                                                                                                      // 25652
function addSetValidityMethod(context) {                                                                               // 25653
  var ctrl = context.ctrl,                                                                                             // 25654
      $element = context.$element,                                                                                     // 25655
      classCache = {},                                                                                                 // 25656
      set = context.set,                                                                                               // 25657
      unset = context.unset,                                                                                           // 25658
      parentForm = context.parentForm,                                                                                 // 25659
      $animate = context.$animate;                                                                                     // 25660
                                                                                                                       // 25661
  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));                             // 25662
                                                                                                                       // 25663
  ctrl.$setValidity = setValidity;                                                                                     // 25664
                                                                                                                       // 25665
  function setValidity(validationErrorKey, state, controller) {                                                        // 25666
    if (state === undefined) {                                                                                         // 25667
      createAndSet('$pending', validationErrorKey, controller);                                                        // 25668
    } else {                                                                                                           // 25669
      unsetAndCleanup('$pending', validationErrorKey, controller);                                                     // 25670
    }                                                                                                                  // 25671
    if (!isBoolean(state)) {                                                                                           // 25672
      unset(ctrl.$error, validationErrorKey, controller);                                                              // 25673
      unset(ctrl.$$success, validationErrorKey, controller);                                                           // 25674
    } else {                                                                                                           // 25675
      if (state) {                                                                                                     // 25676
        unset(ctrl.$error, validationErrorKey, controller);                                                            // 25677
        set(ctrl.$$success, validationErrorKey, controller);                                                           // 25678
      } else {                                                                                                         // 25679
        set(ctrl.$error, validationErrorKey, controller);                                                              // 25680
        unset(ctrl.$$success, validationErrorKey, controller);                                                         // 25681
      }                                                                                                                // 25682
    }                                                                                                                  // 25683
    if (ctrl.$pending) {                                                                                               // 25684
      cachedToggleClass(PENDING_CLASS, true);                                                                          // 25685
      ctrl.$valid = ctrl.$invalid = undefined;                                                                         // 25686
      toggleValidationCss('', null);                                                                                   // 25687
    } else {                                                                                                           // 25688
      cachedToggleClass(PENDING_CLASS, false);                                                                         // 25689
      ctrl.$valid = isObjectEmpty(ctrl.$error);                                                                        // 25690
      ctrl.$invalid = !ctrl.$valid;                                                                                    // 25691
      toggleValidationCss('', ctrl.$valid);                                                                            // 25692
    }                                                                                                                  // 25693
                                                                                                                       // 25694
    // re-read the state as the set/unset methods could have                                                           // 25695
    // combined state in ctrl.$error[validationError] (used for forms),                                                // 25696
    // where setting/unsetting only increments/decrements the value,                                                   // 25697
    // and does not replace it.                                                                                        // 25698
    var combinedState;                                                                                                 // 25699
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {                                                          // 25700
      combinedState = undefined;                                                                                       // 25701
    } else if (ctrl.$error[validationErrorKey]) {                                                                      // 25702
      combinedState = false;                                                                                           // 25703
    } else if (ctrl.$$success[validationErrorKey]) {                                                                   // 25704
      combinedState = true;                                                                                            // 25705
    } else {                                                                                                           // 25706
      combinedState = null;                                                                                            // 25707
    }                                                                                                                  // 25708
                                                                                                                       // 25709
    toggleValidationCss(validationErrorKey, combinedState);                                                            // 25710
    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);                                                  // 25711
  }                                                                                                                    // 25712
                                                                                                                       // 25713
  function createAndSet(name, value, controller) {                                                                     // 25714
    if (!ctrl[name]) {                                                                                                 // 25715
      ctrl[name] = {};                                                                                                 // 25716
    }                                                                                                                  // 25717
    set(ctrl[name], value, controller);                                                                                // 25718
  }                                                                                                                    // 25719
                                                                                                                       // 25720
  function unsetAndCleanup(name, value, controller) {                                                                  // 25721
    if (ctrl[name]) {                                                                                                  // 25722
      unset(ctrl[name], value, controller);                                                                            // 25723
    }                                                                                                                  // 25724
    if (isObjectEmpty(ctrl[name])) {                                                                                   // 25725
      ctrl[name] = undefined;                                                                                          // 25726
    }                                                                                                                  // 25727
  }                                                                                                                    // 25728
                                                                                                                       // 25729
  function cachedToggleClass(className, switchValue) {                                                                 // 25730
    if (switchValue && !classCache[className]) {                                                                       // 25731
      $animate.addClass($element, className);                                                                          // 25732
      classCache[className] = true;                                                                                    // 25733
    } else if (!switchValue && classCache[className]) {                                                                // 25734
      $animate.removeClass($element, className);                                                                       // 25735
      classCache[className] = false;                                                                                   // 25736
    }                                                                                                                  // 25737
  }                                                                                                                    // 25738
                                                                                                                       // 25739
  function toggleValidationCss(validationErrorKey, isValid) {                                                          // 25740
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';                          // 25741
                                                                                                                       // 25742
    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);                                             // 25743
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);                                          // 25744
  }                                                                                                                    // 25745
}                                                                                                                      // 25746
                                                                                                                       // 25747
function isObjectEmpty(obj) {                                                                                          // 25748
  if (obj) {                                                                                                           // 25749
    for (var prop in obj) {                                                                                            // 25750
      if (obj.hasOwnProperty(prop)) {                                                                                  // 25751
        return false;                                                                                                  // 25752
      }                                                                                                                // 25753
    }                                                                                                                  // 25754
  }                                                                                                                    // 25755
  return true;                                                                                                         // 25756
}                                                                                                                      // 25757
                                                                                                                       // 25758
/**                                                                                                                    // 25759
 * @ngdoc directive                                                                                                    // 25760
 * @name ngNonBindable                                                                                                 // 25761
 * @restrict AC                                                                                                        // 25762
 * @priority 1000                                                                                                      // 25763
 *                                                                                                                     // 25764
 * @description                                                                                                        // 25765
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current                      // 25766
 * DOM element. This is useful if the element contains what appears to be Angular directives and                       // 25767
 * bindings but which should be ignored by Angular. This could be the case if you have a site that                     // 25768
 * displays snippets of code, for instance.                                                                            // 25769
 *                                                                                                                     // 25770
 * @element ANY                                                                                                        // 25771
 *                                                                                                                     // 25772
 * @example                                                                                                            // 25773
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,                   // 25774
 * but the one wrapped in `ngNonBindable` is left alone.                                                               // 25775
 *                                                                                                                     // 25776
 * @example                                                                                                            // 25777
    <example>                                                                                                          // 25778
      <file name="index.html">                                                                                         // 25779
        <div>Normal: {{1 + 2}}</div>                                                                                   // 25780
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>                                                                  // 25781
      </file>                                                                                                          // 25782
      <file name="protractor.js" type="protractor">                                                                    // 25783
       it('should check ng-non-bindable', function() {                                                                 // 25784
         expect(element(by.binding('1 + 2')).getText()).toContain('3');                                                // 25785
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);                                        // 25786
       });                                                                                                             // 25787
      </file>                                                                                                          // 25788
    </example>                                                                                                         // 25789
 */                                                                                                                    // 25790
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });                                          // 25791
                                                                                                                       // 25792
/* global jqLiteRemove */                                                                                              // 25793
                                                                                                                       // 25794
var ngOptionsMinErr = minErr('ngOptions');                                                                             // 25795
                                                                                                                       // 25796
/**                                                                                                                    // 25797
 * @ngdoc directive                                                                                                    // 25798
 * @name ngOptions                                                                                                     // 25799
 * @restrict A                                                                                                         // 25800
 *                                                                                                                     // 25801
 * @description                                                                                                        // 25802
 *                                                                                                                     // 25803
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`                                  // 25804
 * elements for the `<select>` element using the array or object obtained by evaluating the                            // 25805
 * `ngOptions` comprehension expression.                                                                               // 25806
 *                                                                                                                     // 25807
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a                    // 25808
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and                             // 25809
 * increasing speed by not creating a new scope for each repeated instance, as well as providing                       // 25810
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 25811
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound                    // 25812
 *  to a non-string value. This is because an option element can only be bound to string values at                     // 25813
 * present.                                                                                                            // 25814
 *                                                                                                                     // 25815
 * When an item in the `<select>` menu is selected, the array element or object property                               // 25816
 * represented by the selected option will be bound to the model identified by the `ngModel`                           // 25817
 * directive.                                                                                                          // 25818
 *                                                                                                                     // 25819
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 25820
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 25821
 * option. See example below for demonstration.                                                                        // 25822
 *                                                                                                                     // 25823
 * ## Complex Models (objects or collections)                                                                          // 25824
 *                                                                                                                     // 25825
 * **Note:** By default, `ngModel` watches the model by reference, not value. This is important when                   // 25826
 * binding any input directive to a model that is an object or a collection.                                           // 25827
 *                                                                                                                     // 25828
 * Since this is a common situation for `ngOptions` the directive additionally watches the model using                 // 25829
 * `$watchCollection` when the select has the `multiple` attribute or when there is a `track by` clause in             // 25830
 * the options expression. This allows ngOptions to trigger a re-rendering of the options even if the actual           // 25831
 * object/collection has not changed identity but only a property on the object or an item in the collection           // 25832
 * changes.                                                                                                            // 25833
 *                                                                                                                     // 25834
 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
 * if the model is an array). This means that changing a property deeper inside the object/collection that the         // 25836
 * first level will not trigger a re-rendering.                                                                        // 25837
 *                                                                                                                     // 25838
 *                                                                                                                     // 25839
 * ## `select` **`as`**                                                                                                // 25840
 *                                                                                                                     // 25841
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but                           // 25842
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)          // 25843
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression       // 25844
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.              // 25845
 *                                                                                                                     // 25846
 *                                                                                                                     // 25847
 * ### `select` **`as`** and **`track by`**                                                                            // 25848
 *                                                                                                                     // 25849
 * <div class="alert alert-warning">                                                                                   // 25850
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.     // 25851
 * </div>                                                                                                              // 25852
 *                                                                                                                     // 25853
 * Consider the following example:                                                                                     // 25854
 *                                                                                                                     // 25855
 * ```html                                                                                                             // 25856
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected"></select>   // 25857
 * ```                                                                                                                 // 25858
 *                                                                                                                     // 25859
 * ```js                                                                                                               // 25860
 * $scope.values = [{                                                                                                  // 25861
 *   id: 1,                                                                                                            // 25862
 *   label: 'aLabel',                                                                                                  // 25863
 *   subItem: { name: 'aSubItem' }                                                                                     // 25864
 * }, {                                                                                                                // 25865
 *   id: 2,                                                                                                            // 25866
 *   label: 'bLabel',                                                                                                  // 25867
 *   subItem: { name: 'bSubItem' }                                                                                     // 25868
 * }];                                                                                                                 // 25869
 *                                                                                                                     // 25870
 * $scope.selected = { name: 'aSubItem' };                                                                             // 25871
 * ```                                                                                                                 // 25872
 *                                                                                                                     // 25873
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element        // 25874
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the              // 25875
 * following:                                                                                                          // 25876
 *                                                                                                                     // 25877
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`                                      // 25878
 * 2. Apply **`track by`** to the already selected value in `ngModel`.                                                 // 25879
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected                     // 25880
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to                     // 25881
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not                      // 25882
 *    selected" option.                                                                                                // 25883
 *                                                                                                                     // 25884
 *                                                                                                                     // 25885
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 25886
 * @param {string=} name Property name of the form under which the control is published.                               // 25887
 * @param {string=} required The control is considered valid only if value is entered.                                 // 25888
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to                       // 25889
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of                        // 25890
 *    `required` when you want to data-bind to the `required` attribute.                                               // 25891
 * @param {comprehension_expression=} ngOptions in one of the following forms:                                         // 25892
 *                                                                                                                     // 25893
 *   * for array data sources:                                                                                         // 25894
 *     * `label` **`for`** `value` **`in`** `array`                                                                    // 25895
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`                                                  // 25896
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`                                             // 25897
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`                                       // 25898
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`                  // 25899
 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`            // 25900
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`                   // 25901
 *        (for including a filter with `track by`)                                                                     // 25902
 *   * for object data sources:                                                                                        // 25903
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                                   // 25904
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`                                 // 25905
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`                             // 25906
 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`                       // 25907
 *     * `select` **`as`** `label` **`group by`** `group`                                                              // 25908
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 25909
 *     * `select` **`as`** `label` **`disable when`** `disable`                                                        // 25910
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`                                                        // 25911
 *                                                                                                                     // 25912
 * Where:                                                                                                              // 25913
 *                                                                                                                     // 25914
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.                         // 25915
 *   * `value`: local variable which will refer to each item in the `array` or each property value                     // 25916
 *      of `object` during iteration.                                                                                  // 25917
 *   * `key`: local variable which will refer to a property name in `object` during iteration.                         // 25918
 *   * `label`: The result of this expression will be the label for `<option>` element. The                            // 25919
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).                        // 25920
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`                     // 25921
 *      element. If not specified, `select` expression will default to `value`.                                        // 25922
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`                     // 25923
 *      DOM element.                                                                                                   // 25924
 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`                        // 25925
 *      element. Return `true` to disable.                                                                             // 25926
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be                  // 25927
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the                       // 25928
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved                              // 25929
 *      even when the options are recreated (e.g. reloaded from the server).                                           // 25930
 *                                                                                                                     // 25931
 * @example                                                                                                            // 25932
    <example module="selectExample">                                                                                   // 25933
      <file name="index.html">                                                                                         // 25934
        <script>                                                                                                       // 25935
        angular.module('selectExample', [])                                                                            // 25936
          .controller('ExampleController', ['$scope', function($scope) {                                               // 25937
            $scope.colors = [                                                                                          // 25938
              {name:'black', shade:'dark'},                                                                            // 25939
              {name:'white', shade:'light', notAnOption: true},                                                        // 25940
              {name:'red', shade:'dark'},                                                                              // 25941
              {name:'blue', shade:'dark', notAnOption: true},                                                          // 25942
              {name:'yellow', shade:'light', notAnOption: false}                                                       // 25943
            ];                                                                                                         // 25944
            $scope.myColor = $scope.colors[2]; // red                                                                  // 25945
          }]);                                                                                                         // 25946
        </script>                                                                                                      // 25947
        <div ng-controller="ExampleController">                                                                        // 25948
          <ul>                                                                                                         // 25949
            <li ng-repeat="color in colors">                                                                           // 25950
              <label>Name: <input ng-model="color.name"></label>                                                       // 25951
              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>                            // 25952
              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>                               // 25953
            </li>                                                                                                      // 25954
            <li>                                                                                                       // 25955
              <button ng-click="colors.push({})">add</button>                                                          // 25956
            </li>                                                                                                      // 25957
          </ul>                                                                                                        // 25958
          <hr/>                                                                                                        // 25959
          <label>Color (null not allowed):                                                                             // 25960
            <select ng-model="myColor" ng-options="color.name for color in colors"></select>                           // 25961
          </label><br/>                                                                                                // 25962
          <label>Color (null allowed):                                                                                 // 25963
          <span  class="nullable">                                                                                     // 25964
            <select ng-model="myColor" ng-options="color.name for color in colors">                                    // 25965
              <option value="">-- choose color --</option>                                                             // 25966
            </select>                                                                                                  // 25967
          </span></label><br/>                                                                                         // 25968
                                                                                                                       // 25969
          <label>Color grouped by shade:                                                                               // 25970
            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">               // 25971
            </select>                                                                                                  // 25972
          </label><br/>                                                                                                // 25973
                                                                                                                       // 25974
          <label>Color grouped by shade, with some disabled:                                                           // 25975
            <select ng-model="myColor"                                                                                 // 25976
                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">     // 25977
            </select>                                                                                                  // 25978
          </label><br/>                                                                                                // 25979
                                                                                                                       // 25980
                                                                                                                       // 25981
                                                                                                                       // 25982
          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.                   // 25983
          <br/>                                                                                                        // 25984
          <hr/>                                                                                                        // 25985
          Currently selected: {{ {selected_color:myColor} }}                                                           // 25986
          <div style="border:solid 1px black; height:20px"                                                             // 25987
               ng-style="{'background-color':myColor.name}">                                                           // 25988
          </div>                                                                                                       // 25989
        </div>                                                                                                         // 25990
      </file>                                                                                                          // 25991
      <file name="protractor.js" type="protractor">                                                                    // 25992
         it('should check ng-options', function() {                                                                    // 25993
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');                           // 25994
           element.all(by.model('myColor')).first().click();                                                           // 25995
           element.all(by.css('select[ng-model="myColor"] option')).first().click();                                   // 25996
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');                         // 25997
           element(by.css('.nullable select[ng-model="myColor"]')).click();                                            // 25998
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();                         // 25999
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');                          // 26000
         });                                                                                                           // 26001
      </file>                                                                                                          // 26002
    </example>                                                                                                         // 26003
 */                                                                                                                    // 26004
                                                                                                                       // 26005
// jshint maxlen: false                                                                                                // 26006
//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555550000000006666666666666660000000777777777777777000000000000000888888888800000000000000000009999999999
var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
                        // 1: value expression (valueFn)                                                               // 26009
                        // 2: label expression (displayFn)                                                             // 26010
                        // 3: group by expression (groupByFn)                                                          // 26011
                        // 4: disable when expression (disableWhenFn)                                                  // 26012
                        // 5: array item variable name                                                                 // 26013
                        // 6: object item key variable name                                                            // 26014
                        // 7: object item value variable name                                                          // 26015
                        // 8: collection expression                                                                    // 26016
                        // 9: track by expression                                                                      // 26017
// jshint maxlen: 100                                                                                                  // 26018
                                                                                                                       // 26019
                                                                                                                       // 26020
var ngOptionsDirective = ['$compile', '$parse', function($compile, $parse) {                                           // 26021
                                                                                                                       // 26022
  function parseOptionsExpression(optionsExp, selectElement, scope) {                                                  // 26023
                                                                                                                       // 26024
    var match = optionsExp.match(NG_OPTIONS_REGEXP);                                                                   // 26025
    if (!(match)) {                                                                                                    // 26026
      throw ngOptionsMinErr('iexp',                                                                                    // 26027
        "Expected expression in form of " +                                                                            // 26028
        "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +                                              // 26029
        " but got '{0}'. Element: {1}",                                                                                // 26030
        optionsExp, startingTag(selectElement));                                                                       // 26031
    }                                                                                                                  // 26032
                                                                                                                       // 26033
    // Extract the parts from the ngOptions expression                                                                 // 26034
                                                                                                                       // 26035
    // The variable name for the value of the item in the collection                                                   // 26036
    var valueName = match[5] || match[7];                                                                              // 26037
    // The variable name for the key of the item in the collection                                                     // 26038
    var keyName = match[6];                                                                                            // 26039
                                                                                                                       // 26040
    // An expression that generates the viewValue for an option if there is a label expression                         // 26041
    var selectAs = / as /.test(match[0]) && match[1];                                                                  // 26042
    // An expression that is used to track the id of each object in the options collection                             // 26043
    var trackBy = match[9];                                                                                            // 26044
    // An expression that generates the viewValue for an option if there is no label expression                        // 26045
    var valueFn = $parse(match[2] ? match[1] : valueName);                                                             // 26046
    var selectAsFn = selectAs && $parse(selectAs);                                                                     // 26047
    var viewValueFn = selectAsFn || valueFn;                                                                           // 26048
    var trackByFn = trackBy && $parse(trackBy);                                                                        // 26049
                                                                                                                       // 26050
    // Get the value by which we are going to track the option                                                         // 26051
    // if we have a trackFn then use that (passing scope and locals)                                                   // 26052
    // otherwise just hash the given viewValue                                                                         // 26053
    var getTrackByValueFn = trackBy ?                                                                                  // 26054
                              function(value, locals) { return trackByFn(scope, locals); } :                           // 26055
                              function getHashOfValue(value) { return hashKey(value); };                               // 26056
    var getTrackByValue = function(value, key) {                                                                       // 26057
      return getTrackByValueFn(value, getLocals(value, key));                                                          // 26058
    };                                                                                                                 // 26059
                                                                                                                       // 26060
    var displayFn = $parse(match[2] || match[1]);                                                                      // 26061
    var groupByFn = $parse(match[3] || '');                                                                            // 26062
    var disableWhenFn = $parse(match[4] || '');                                                                        // 26063
    var valuesFn = $parse(match[8]);                                                                                   // 26064
                                                                                                                       // 26065
    var locals = {};                                                                                                   // 26066
    var getLocals = keyName ? function(value, key) {                                                                   // 26067
      locals[keyName] = key;                                                                                           // 26068
      locals[valueName] = value;                                                                                       // 26069
      return locals;                                                                                                   // 26070
    } : function(value) {                                                                                              // 26071
      locals[valueName] = value;                                                                                       // 26072
      return locals;                                                                                                   // 26073
    };                                                                                                                 // 26074
                                                                                                                       // 26075
                                                                                                                       // 26076
    function Option(selectValue, viewValue, label, group, disabled) {                                                  // 26077
      this.selectValue = selectValue;                                                                                  // 26078
      this.viewValue = viewValue;                                                                                      // 26079
      this.label = label;                                                                                              // 26080
      this.group = group;                                                                                              // 26081
      this.disabled = disabled;                                                                                        // 26082
    }                                                                                                                  // 26083
                                                                                                                       // 26084
    function getOptionValuesKeys(optionValues) {                                                                       // 26085
      var optionValuesKeys;                                                                                            // 26086
                                                                                                                       // 26087
      if (!keyName && isArrayLike(optionValues)) {                                                                     // 26088
        optionValuesKeys = optionValues;                                                                               // 26089
      } else {                                                                                                         // 26090
        // if object, extract keys, in enumeration order, unsorted                                                     // 26091
        optionValuesKeys = [];                                                                                         // 26092
        for (var itemKey in optionValues) {                                                                            // 26093
          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                     // 26094
            optionValuesKeys.push(itemKey);                                                                            // 26095
          }                                                                                                            // 26096
        }                                                                                                              // 26097
      }                                                                                                                // 26098
      return optionValuesKeys;                                                                                         // 26099
    }                                                                                                                  // 26100
                                                                                                                       // 26101
    return {                                                                                                           // 26102
      trackBy: trackBy,                                                                                                // 26103
      getTrackByValue: getTrackByValue,                                                                                // 26104
      getWatchables: $parse(valuesFn, function(optionValues) {                                                         // 26105
        // Create a collection of things that we would like to watch (watchedArray)                                    // 26106
        // so that they can all be watched using a single $watchCollection                                             // 26107
        // that only runs the handler once if anything changes                                                         // 26108
        var watchedArray = [];                                                                                         // 26109
        optionValues = optionValues || [];                                                                             // 26110
                                                                                                                       // 26111
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26112
        var optionValuesLength = optionValuesKeys.length;                                                              // 26113
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26114
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26115
          var value = optionValues[key];                                                                               // 26116
                                                                                                                       // 26117
          var locals = getLocals(optionValues[key], key);                                                              // 26118
          var selectValue = getTrackByValueFn(optionValues[key], locals);                                              // 26119
          watchedArray.push(selectValue);                                                                              // 26120
                                                                                                                       // 26121
          // Only need to watch the displayFn if there is a specific label expression                                  // 26122
          if (match[2] || match[1]) {                                                                                  // 26123
            var label = displayFn(scope, locals);                                                                      // 26124
            watchedArray.push(label);                                                                                  // 26125
          }                                                                                                            // 26126
                                                                                                                       // 26127
          // Only need to watch the disableWhenFn if there is a specific disable expression                            // 26128
          if (match[4]) {                                                                                              // 26129
            var disableWhen = disableWhenFn(scope, locals);                                                            // 26130
            watchedArray.push(disableWhen);                                                                            // 26131
          }                                                                                                            // 26132
        }                                                                                                              // 26133
        return watchedArray;                                                                                           // 26134
      }),                                                                                                              // 26135
                                                                                                                       // 26136
      getOptions: function() {                                                                                         // 26137
                                                                                                                       // 26138
        var optionItems = [];                                                                                          // 26139
        var selectValueMap = {};                                                                                       // 26140
                                                                                                                       // 26141
        // The option values were already computed in the `getWatchables` fn,                                          // 26142
        // which must have been called to trigger `getOptions`                                                         // 26143
        var optionValues = valuesFn(scope) || [];                                                                      // 26144
        var optionValuesKeys = getOptionValuesKeys(optionValues);                                                      // 26145
        var optionValuesLength = optionValuesKeys.length;                                                              // 26146
                                                                                                                       // 26147
        for (var index = 0; index < optionValuesLength; index++) {                                                     // 26148
          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];                             // 26149
          var value = optionValues[key];                                                                               // 26150
          var locals = getLocals(value, key);                                                                          // 26151
          var viewValue = viewValueFn(scope, locals);                                                                  // 26152
          var selectValue = getTrackByValueFn(viewValue, locals);                                                      // 26153
          var label = displayFn(scope, locals);                                                                        // 26154
          var group = groupByFn(scope, locals);                                                                        // 26155
          var disabled = disableWhenFn(scope, locals);                                                                 // 26156
          var optionItem = new Option(selectValue, viewValue, label, group, disabled);                                 // 26157
                                                                                                                       // 26158
          optionItems.push(optionItem);                                                                                // 26159
          selectValueMap[selectValue] = optionItem;                                                                    // 26160
        }                                                                                                              // 26161
                                                                                                                       // 26162
        return {                                                                                                       // 26163
          items: optionItems,                                                                                          // 26164
          selectValueMap: selectValueMap,                                                                              // 26165
          getOptionFromViewValue: function(value) {                                                                    // 26166
            return selectValueMap[getTrackByValue(value)];                                                             // 26167
          },                                                                                                           // 26168
          getViewValueFromOption: function(option) {                                                                   // 26169
            // If the viewValue could be an object that may be mutated by the application,                             // 26170
            // we need to make a copy and not return the reference to the value on the option.                         // 26171
            return trackBy ? angular.copy(option.viewValue) : option.viewValue;                                        // 26172
          }                                                                                                            // 26173
        };                                                                                                             // 26174
      }                                                                                                                // 26175
    };                                                                                                                 // 26176
  }                                                                                                                    // 26177
                                                                                                                       // 26178
                                                                                                                       // 26179
  // we can't just jqLite('<option>') since jqLite is not smart enough                                                 // 26180
  // to create it in <select> and IE barfs otherwise.                                                                  // 26181
  var optionTemplate = document.createElement('option'),                                                               // 26182
      optGroupTemplate = document.createElement('optgroup');                                                           // 26183
                                                                                                                       // 26184
  return {                                                                                                             // 26185
    restrict: 'A',                                                                                                     // 26186
    terminal: true,                                                                                                    // 26187
    require: ['select', '?ngModel'],                                                                                   // 26188
    link: function(scope, selectElement, attr, ctrls) {                                                                // 26189
                                                                                                                       // 26190
      // if ngModel is not defined, we don't need to do anything                                                       // 26191
      var ngModelCtrl = ctrls[1];                                                                                      // 26192
      if (!ngModelCtrl) return;                                                                                        // 26193
                                                                                                                       // 26194
      var selectCtrl = ctrls[0];                                                                                       // 26195
      var multiple = attr.multiple;                                                                                    // 26196
                                                                                                                       // 26197
      // The emptyOption allows the application developer to provide their own custom "empty"                          // 26198
      // option when the viewValue does not match any of the option values.                                            // 26199
      var emptyOption;                                                                                                 // 26200
      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {                        // 26201
        if (children[i].value === '') {                                                                                // 26202
          emptyOption = children.eq(i);                                                                                // 26203
          break;                                                                                                       // 26204
        }                                                                                                              // 26205
      }                                                                                                                // 26206
                                                                                                                       // 26207
      var providedEmptyOption = !!emptyOption;                                                                         // 26208
                                                                                                                       // 26209
      var unknownOption = jqLite(optionTemplate.cloneNode(false));                                                     // 26210
      unknownOption.val('?');                                                                                          // 26211
                                                                                                                       // 26212
      var options;                                                                                                     // 26213
      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);                                    // 26214
                                                                                                                       // 26215
                                                                                                                       // 26216
      var renderEmptyOption = function() {                                                                             // 26217
        if (!providedEmptyOption) {                                                                                    // 26218
          selectElement.prepend(emptyOption);                                                                          // 26219
        }                                                                                                              // 26220
        selectElement.val('');                                                                                         // 26221
        emptyOption.prop('selected', true); // needed for IE                                                           // 26222
        emptyOption.attr('selected', true);                                                                            // 26223
      };                                                                                                               // 26224
                                                                                                                       // 26225
      var removeEmptyOption = function() {                                                                             // 26226
        if (!providedEmptyOption) {                                                                                    // 26227
          emptyOption.remove();                                                                                        // 26228
        }                                                                                                              // 26229
      };                                                                                                               // 26230
                                                                                                                       // 26231
                                                                                                                       // 26232
      var renderUnknownOption = function() {                                                                           // 26233
        selectElement.prepend(unknownOption);                                                                          // 26234
        selectElement.val('?');                                                                                        // 26235
        unknownOption.prop('selected', true); // needed for IE                                                         // 26236
        unknownOption.attr('selected', true);                                                                          // 26237
      };                                                                                                               // 26238
                                                                                                                       // 26239
      var removeUnknownOption = function() {                                                                           // 26240
        unknownOption.remove();                                                                                        // 26241
      };                                                                                                               // 26242
                                                                                                                       // 26243
                                                                                                                       // 26244
      // Update the controller methods for multiple selectable options                                                 // 26245
      if (!multiple) {                                                                                                 // 26246
                                                                                                                       // 26247
        selectCtrl.writeValue = function writeNgOptionsValue(value) {                                                  // 26248
          var option = options.getOptionFromViewValue(value);                                                          // 26249
                                                                                                                       // 26250
          if (option && !option.disabled) {                                                                            // 26251
            if (selectElement[0].value !== option.selectValue) {                                                       // 26252
              removeUnknownOption();                                                                                   // 26253
              removeEmptyOption();                                                                                     // 26254
                                                                                                                       // 26255
              selectElement[0].value = option.selectValue;                                                             // 26256
              option.element.selected = true;                                                                          // 26257
              option.element.setAttribute('selected', 'selected');                                                     // 26258
            }                                                                                                          // 26259
          } else {                                                                                                     // 26260
            if (value === null || providedEmptyOption) {                                                               // 26261
              removeUnknownOption();                                                                                   // 26262
              renderEmptyOption();                                                                                     // 26263
            } else {                                                                                                   // 26264
              removeEmptyOption();                                                                                     // 26265
              renderUnknownOption();                                                                                   // 26266
            }                                                                                                          // 26267
          }                                                                                                            // 26268
        };                                                                                                             // 26269
                                                                                                                       // 26270
        selectCtrl.readValue = function readNgOptionsValue() {                                                         // 26271
                                                                                                                       // 26272
          var selectedOption = options.selectValueMap[selectElement.val()];                                            // 26273
                                                                                                                       // 26274
          if (selectedOption && !selectedOption.disabled) {                                                            // 26275
            removeEmptyOption();                                                                                       // 26276
            removeUnknownOption();                                                                                     // 26277
            return options.getViewValueFromOption(selectedOption);                                                     // 26278
          }                                                                                                            // 26279
          return null;                                                                                                 // 26280
        };                                                                                                             // 26281
                                                                                                                       // 26282
        // If we are using `track by` then we must watch the tracked value on the model                                // 26283
        // since ngModel only watches for object identity change                                                       // 26284
        if (ngOptions.trackBy) {                                                                                       // 26285
          scope.$watch(                                                                                                // 26286
            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },                                  // 26287
            function() { ngModelCtrl.$render(); }                                                                      // 26288
          );                                                                                                           // 26289
        }                                                                                                              // 26290
                                                                                                                       // 26291
      } else {                                                                                                         // 26292
                                                                                                                       // 26293
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 26294
          return !value || value.length === 0;                                                                         // 26295
        };                                                                                                             // 26296
                                                                                                                       // 26297
                                                                                                                       // 26298
        selectCtrl.writeValue = function writeNgOptionsMultiple(value) {                                               // 26299
          options.items.forEach(function(option) {                                                                     // 26300
            option.element.selected = false;                                                                           // 26301
          });                                                                                                          // 26302
                                                                                                                       // 26303
          if (value) {                                                                                                 // 26304
            value.forEach(function(item) {                                                                             // 26305
              var option = options.getOptionFromViewValue(item);                                                       // 26306
              if (option && !option.disabled) option.element.selected = true;                                          // 26307
            });                                                                                                        // 26308
          }                                                                                                            // 26309
        };                                                                                                             // 26310
                                                                                                                       // 26311
                                                                                                                       // 26312
        selectCtrl.readValue = function readNgOptionsMultiple() {                                                      // 26313
          var selectedValues = selectElement.val() || [],                                                              // 26314
              selections = [];                                                                                         // 26315
                                                                                                                       // 26316
          forEach(selectedValues, function(value) {                                                                    // 26317
            var option = options.selectValueMap[value];                                                                // 26318
            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));                   // 26319
          });                                                                                                          // 26320
                                                                                                                       // 26321
          return selections;                                                                                           // 26322
        };                                                                                                             // 26323
                                                                                                                       // 26324
        // If we are using `track by` then we must watch these tracked values on the model                             // 26325
        // since ngModel only watches for object identity change                                                       // 26326
        if (ngOptions.trackBy) {                                                                                       // 26327
                                                                                                                       // 26328
          scope.$watchCollection(function() {                                                                          // 26329
            if (isArray(ngModelCtrl.$viewValue)) {                                                                     // 26330
              return ngModelCtrl.$viewValue.map(function(value) {                                                      // 26331
                return ngOptions.getTrackByValue(value);                                                               // 26332
              });                                                                                                      // 26333
            }                                                                                                          // 26334
          }, function() {                                                                                              // 26335
            ngModelCtrl.$render();                                                                                     // 26336
          });                                                                                                          // 26337
                                                                                                                       // 26338
        }                                                                                                              // 26339
      }                                                                                                                // 26340
                                                                                                                       // 26341
                                                                                                                       // 26342
      if (providedEmptyOption) {                                                                                       // 26343
                                                                                                                       // 26344
        // we need to remove it before calling selectElement.empty() because otherwise IE will                         // 26345
        // remove the label from the element. wtf?                                                                     // 26346
        emptyOption.remove();                                                                                          // 26347
                                                                                                                       // 26348
        // compile the element since there might be bindings in it                                                     // 26349
        $compile(emptyOption)(scope);                                                                                  // 26350
                                                                                                                       // 26351
        // remove the class, which is added automatically because we recompile the element and it                      // 26352
        // becomes the compilation root                                                                                // 26353
        emptyOption.removeClass('ng-scope');                                                                           // 26354
      } else {                                                                                                         // 26355
        emptyOption = jqLite(optionTemplate.cloneNode(false));                                                         // 26356
      }                                                                                                                // 26357
                                                                                                                       // 26358
      // We need to do this here to ensure that the options object is defined                                          // 26359
      // when we first hit it in writeNgOptionsValue                                                                   // 26360
      updateOptions();                                                                                                 // 26361
                                                                                                                       // 26362
      // We will re-render the option elements if the option values or labels change                                   // 26363
      scope.$watchCollection(ngOptions.getWatchables, updateOptions);                                                  // 26364
                                                                                                                       // 26365
      // ------------------------------------------------------------------ //                                         // 26366
                                                                                                                       // 26367
                                                                                                                       // 26368
      function updateOptionElement(option, element) {                                                                  // 26369
        option.element = element;                                                                                      // 26370
        element.disabled = option.disabled;                                                                            // 26371
        if (option.value !== element.value) element.value = option.selectValue;                                        // 26372
        if (option.label !== element.label) {                                                                          // 26373
          element.label = option.label;                                                                                // 26374
          element.textContent = option.label;                                                                          // 26375
        }                                                                                                              // 26376
      }                                                                                                                // 26377
                                                                                                                       // 26378
      function addOrReuseElement(parent, current, type, templateElement) {                                             // 26379
        var element;                                                                                                   // 26380
        // Check whether we can reuse the next element                                                                 // 26381
        if (current && lowercase(current.nodeName) === type) {                                                         // 26382
          // The next element is the right type so reuse it                                                            // 26383
          element = current;                                                                                           // 26384
        } else {                                                                                                       // 26385
          // The next element is not the right type so create a new one                                                // 26386
          element = templateElement.cloneNode(false);                                                                  // 26387
          if (!current) {                                                                                              // 26388
            // There are no more elements so just append it to the select                                              // 26389
            parent.appendChild(element);                                                                               // 26390
          } else {                                                                                                     // 26391
            // The next element is not a group so insert the new one                                                   // 26392
            parent.insertBefore(element, current);                                                                     // 26393
          }                                                                                                            // 26394
        }                                                                                                              // 26395
        return element;                                                                                                // 26396
      }                                                                                                                // 26397
                                                                                                                       // 26398
                                                                                                                       // 26399
      function removeExcessElements(current) {                                                                         // 26400
        var next;                                                                                                      // 26401
        while (current) {                                                                                              // 26402
          next = current.nextSibling;                                                                                  // 26403
          jqLiteRemove(current);                                                                                       // 26404
          current = next;                                                                                              // 26405
        }                                                                                                              // 26406
      }                                                                                                                // 26407
                                                                                                                       // 26408
                                                                                                                       // 26409
      function skipEmptyAndUnknownOptions(current) {                                                                   // 26410
        var emptyOption_ = emptyOption && emptyOption[0];                                                              // 26411
        var unknownOption_ = unknownOption && unknownOption[0];                                                        // 26412
                                                                                                                       // 26413
        if (emptyOption_ || unknownOption_) {                                                                          // 26414
          while (current &&                                                                                            // 26415
                (current === emptyOption_ ||                                                                           // 26416
                current === unknownOption_)) {                                                                         // 26417
            current = current.nextSibling;                                                                             // 26418
          }                                                                                                            // 26419
        }                                                                                                              // 26420
        return current;                                                                                                // 26421
      }                                                                                                                // 26422
                                                                                                                       // 26423
                                                                                                                       // 26424
      function updateOptions() {                                                                                       // 26425
                                                                                                                       // 26426
        var previousValue = options && selectCtrl.readValue();                                                         // 26427
                                                                                                                       // 26428
        options = ngOptions.getOptions();                                                                              // 26429
                                                                                                                       // 26430
        var groupMap = {};                                                                                             // 26431
        var currentElement = selectElement[0].firstChild;                                                              // 26432
                                                                                                                       // 26433
        // Ensure that the empty option is always there if it was explicitly provided                                  // 26434
        if (providedEmptyOption) {                                                                                     // 26435
          selectElement.prepend(emptyOption);                                                                          // 26436
        }                                                                                                              // 26437
                                                                                                                       // 26438
        currentElement = skipEmptyAndUnknownOptions(currentElement);                                                   // 26439
                                                                                                                       // 26440
        options.items.forEach(function updateOption(option) {                                                          // 26441
          var group;                                                                                                   // 26442
          var groupElement;                                                                                            // 26443
          var optionElement;                                                                                           // 26444
                                                                                                                       // 26445
          if (option.group) {                                                                                          // 26446
                                                                                                                       // 26447
            // This option is to live in a group                                                                       // 26448
            // See if we have already created this group                                                               // 26449
            group = groupMap[option.group];                                                                            // 26450
                                                                                                                       // 26451
            if (!group) {                                                                                              // 26452
                                                                                                                       // 26453
              // We have not already created this group                                                                // 26454
              groupElement = addOrReuseElement(selectElement[0],                                                       // 26455
                                               currentElement,                                                         // 26456
                                               'optgroup',                                                             // 26457
                                               optGroupTemplate);                                                      // 26458
              // Move to the next element                                                                              // 26459
              currentElement = groupElement.nextSibling;                                                               // 26460
                                                                                                                       // 26461
              // Update the label on the group element                                                                 // 26462
              groupElement.label = option.group;                                                                       // 26463
                                                                                                                       // 26464
              // Store it for use later                                                                                // 26465
              group = groupMap[option.group] = {                                                                       // 26466
                groupElement: groupElement,                                                                            // 26467
                currentOptionElement: groupElement.firstChild                                                          // 26468
              };                                                                                                       // 26469
                                                                                                                       // 26470
            }                                                                                                          // 26471
                                                                                                                       // 26472
            // So now we have a group for this option we add the option to the group                                   // 26473
            optionElement = addOrReuseElement(group.groupElement,                                                      // 26474
                                              group.currentOptionElement,                                              // 26475
                                              'option',                                                                // 26476
                                              optionTemplate);                                                         // 26477
            updateOptionElement(option, optionElement);                                                                // 26478
            // Move to the next element                                                                                // 26479
            group.currentOptionElement = optionElement.nextSibling;                                                    // 26480
                                                                                                                       // 26481
          } else {                                                                                                     // 26482
                                                                                                                       // 26483
            // This option is not in a group                                                                           // 26484
            optionElement = addOrReuseElement(selectElement[0],                                                        // 26485
                                              currentElement,                                                          // 26486
                                              'option',                                                                // 26487
                                              optionTemplate);                                                         // 26488
            updateOptionElement(option, optionElement);                                                                // 26489
            // Move to the next element                                                                                // 26490
            currentElement = optionElement.nextSibling;                                                                // 26491
          }                                                                                                            // 26492
        });                                                                                                            // 26493
                                                                                                                       // 26494
                                                                                                                       // 26495
        // Now remove all excess options and group                                                                     // 26496
        Object.keys(groupMap).forEach(function(key) {                                                                  // 26497
          removeExcessElements(groupMap[key].currentOptionElement);                                                    // 26498
        });                                                                                                            // 26499
        removeExcessElements(currentElement);                                                                          // 26500
                                                                                                                       // 26501
        ngModelCtrl.$render();                                                                                         // 26502
                                                                                                                       // 26503
        // Check to see if the value has changed due to the update to the options                                      // 26504
        if (!ngModelCtrl.$isEmpty(previousValue)) {                                                                    // 26505
          var nextValue = selectCtrl.readValue();                                                                      // 26506
          if (ngOptions.trackBy ? !equals(previousValue, nextValue) : previousValue !== nextValue) {                   // 26507
            ngModelCtrl.$setViewValue(nextValue);                                                                      // 26508
            ngModelCtrl.$render();                                                                                     // 26509
          }                                                                                                            // 26510
        }                                                                                                              // 26511
                                                                                                                       // 26512
      }                                                                                                                // 26513
                                                                                                                       // 26514
    }                                                                                                                  // 26515
  };                                                                                                                   // 26516
}];                                                                                                                    // 26517
                                                                                                                       // 26518
/**                                                                                                                    // 26519
 * @ngdoc directive                                                                                                    // 26520
 * @name ngPluralize                                                                                                   // 26521
 * @restrict EA                                                                                                        // 26522
 *                                                                                                                     // 26523
 * @description                                                                                                        // 26524
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.                          // 26525
 * These rules are bundled with angular.js, but can be overridden                                                      // 26526
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive                                // 26527
 * by specifying the mappings between                                                                                  // 26528
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26529
 * and the strings to be displayed.                                                                                    // 26530
 *                                                                                                                     // 26531
 * # Plural categories and explicit number rules                                                                       // 26532
 * There are two                                                                                                       // 26533
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)           // 26534
 * in Angular's default en-US locale: "one" and "other".                                                               // 26535
 *                                                                                                                     // 26536
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match                     // 26537
 * any number that is not 1), an explicit number rule can only match one number. For example, the                      // 26538
 * explicit number rule for "3" matches the number 3. There are examples of plural categories                          // 26539
 * and explicit number rules throughout the rest of this documentation.                                                // 26540
 *                                                                                                                     // 26541
 * # Configuring ngPluralize                                                                                           // 26542
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.                                            // 26543
 * You can also provide an optional attribute, `offset`.                                                               // 26544
 *                                                                                                                     // 26545
 * The value of the `count` attribute can be either a string or an {@link guide/expression                             // 26546
 * Angular expression}; these are evaluated on the current scope for its bound value.                                  // 26547
 *                                                                                                                     // 26548
 * The `when` attribute specifies the mappings between plural categories and the actual                                // 26549
 * string to be displayed. The value of the attribute should be a JSON object.                                         // 26550
 *                                                                                                                     // 26551
 * The following example shows how to configure ngPluralize:                                                           // 26552
 *                                                                                                                     // 26553
 * ```html                                                                                                             // 26554
 * <ng-pluralize count="personCount"                                                                                   // 26555
                 when="{'0': 'Nobody is viewing.',                                                                     // 26556
 *                      'one': '1 person is viewing.',                                                                 // 26557
 *                      'other': '{} people are viewing.'}">                                                           // 26558
 * </ng-pluralize>                                                                                                     // 26559
 *```                                                                                                                  // 26560
 *                                                                                                                     // 26561
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not                                // 26562
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"                            // 26563
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for                          // 26564
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can                          // 26565
 * show "a dozen people are viewing".                                                                                  // 26566
 *                                                                                                                     // 26567
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted                 // 26568
 * into pluralized strings. In the previous example, Angular will replace `{}` with                                    // 26569
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder                             // 26570
 * for <span ng-non-bindable>{{numberExpression}}</span>.                                                              // 26571
 *                                                                                                                     // 26572
 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.                 // 26573
 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.  // 26574
 *                                                                                                                     // 26575
 * # Configuring ngPluralize with offset                                                                               // 26576
 * The `offset` attribute allows further customization of pluralized text, which can result in                         // 26577
 * a better user experience. For example, instead of the message "4 people are viewing this document",                 // 26578
 * you might display "John, Kate and 2 others are viewing this document".                                              // 26579
 * The offset attribute allows you to offset a number by any desired value.                                            // 26580
 * Let's take a look at an example:                                                                                    // 26581
 *                                                                                                                     // 26582
 * ```html                                                                                                             // 26583
 * <ng-pluralize count="personCount" offset=2                                                                          // 26584
 *               when="{'0': 'Nobody is viewing.',                                                                     // 26585
 *                      '1': '{{person1}} is viewing.',                                                                // 26586
 *                      '2': '{{person1}} and {{person2}} are viewing.',                                               // 26587
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',                           // 26588
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                        // 26589
 * </ng-pluralize>                                                                                                     // 26590
 * ```                                                                                                                 // 26591
 *                                                                                                                     // 26592
 * Notice that we are still using two plural categories(one, other), but we added                                      // 26593
 * three explicit number rules 0, 1 and 2.                                                                             // 26594
 * When one person, perhaps John, views the document, "John is viewing" will be shown.                                 // 26595
 * When three people view the document, no explicit number rule is found, so                                           // 26596
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.                                    // 26597
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"                    // 26598
 * is shown.                                                                                                           // 26599
 *                                                                                                                     // 26600
 * Note that when you specify offsets, you must provide explicit number rules for                                      // 26601
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,                              // 26602
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for                  // 26603
 * plural categories "one" and "other".                                                                                // 26604
 *                                                                                                                     // 26605
 * @param {string|expression} count The variable to be bound to.                                                       // 26606
 * @param {string} when The mapping between plural category to its corresponding strings.                              // 26607
 * @param {number=} offset Offset to deduct from the total number.                                                     // 26608
 *                                                                                                                     // 26609
 * @example                                                                                                            // 26610
    <example module="pluralizeExample">                                                                                // 26611
      <file name="index.html">                                                                                         // 26612
        <script>                                                                                                       // 26613
          angular.module('pluralizeExample', [])                                                                       // 26614
            .controller('ExampleController', ['$scope', function($scope) {                                             // 26615
              $scope.person1 = 'Igor';                                                                                 // 26616
              $scope.person2 = 'Misko';                                                                                // 26617
              $scope.personCount = 1;                                                                                  // 26618
            }]);                                                                                                       // 26619
        </script>                                                                                                      // 26620
        <div ng-controller="ExampleController">                                                                        // 26621
          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>                           // 26622
          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>                          // 26623
          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>                  // 26624
                                                                                                                       // 26625
          <!--- Example with simple pluralization rules for en locale --->                                             // 26626
          Without Offset:                                                                                              // 26627
          <ng-pluralize count="personCount"                                                                            // 26628
                        when="{'0': 'Nobody is viewing.',                                                              // 26629
                               'one': '1 person is viewing.',                                                          // 26630
                               'other': '{} people are viewing.'}">                                                    // 26631
          </ng-pluralize><br>                                                                                          // 26632
                                                                                                                       // 26633
          <!--- Example with offset --->                                                                               // 26634
          With Offset(2):                                                                                              // 26635
          <ng-pluralize count="personCount" offset=2                                                                   // 26636
                        when="{'0': 'Nobody is viewing.',                                                              // 26637
                               '1': '{{person1}} is viewing.',                                                         // 26638
                               '2': '{{person1}} and {{person2}} are viewing.',                                        // 26639
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',                    // 26640
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">                 // 26641
          </ng-pluralize>                                                                                              // 26642
        </div>                                                                                                         // 26643
      </file>                                                                                                          // 26644
      <file name="protractor.js" type="protractor">                                                                    // 26645
        it('should show correct pluralized string', function() {                                                       // 26646
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);                                              // 26647
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26648
          var countInput = element(by.model('personCount'));                                                           // 26649
                                                                                                                       // 26650
          expect(withoutOffset.getText()).toEqual('1 person is viewing.');                                             // 26651
          expect(withOffset.getText()).toEqual('Igor is viewing.');                                                    // 26652
                                                                                                                       // 26653
          countInput.clear();                                                                                          // 26654
          countInput.sendKeys('0');                                                                                    // 26655
                                                                                                                       // 26656
          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');                                               // 26657
          expect(withOffset.getText()).toEqual('Nobody is viewing.');                                                  // 26658
                                                                                                                       // 26659
          countInput.clear();                                                                                          // 26660
          countInput.sendKeys('2');                                                                                    // 26661
                                                                                                                       // 26662
          expect(withoutOffset.getText()).toEqual('2 people are viewing.');                                            // 26663
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');                                         // 26664
                                                                                                                       // 26665
          countInput.clear();                                                                                          // 26666
          countInput.sendKeys('3');                                                                                    // 26667
                                                                                                                       // 26668
          expect(withoutOffset.getText()).toEqual('3 people are viewing.');                                            // 26669
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');                       // 26670
                                                                                                                       // 26671
          countInput.clear();                                                                                          // 26672
          countInput.sendKeys('4');                                                                                    // 26673
                                                                                                                       // 26674
          expect(withoutOffset.getText()).toEqual('4 people are viewing.');                                            // 26675
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');                         // 26676
        });                                                                                                            // 26677
        it('should show data-bound names', function() {                                                                // 26678
          var withOffset = element.all(by.css('ng-pluralize')).get(1);                                                 // 26679
          var personCount = element(by.model('personCount'));                                                          // 26680
          var person1 = element(by.model('person1'));                                                                  // 26681
          var person2 = element(by.model('person2'));                                                                  // 26682
          personCount.clear();                                                                                         // 26683
          personCount.sendKeys('4');                                                                                   // 26684
          person1.clear();                                                                                             // 26685
          person1.sendKeys('Di');                                                                                      // 26686
          person2.clear();                                                                                             // 26687
          person2.sendKeys('Vojta');                                                                                   // 26688
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');                           // 26689
        });                                                                                                            // 26690
      </file>                                                                                                          // 26691
    </example>                                                                                                         // 26692
 */                                                                                                                    // 26693
var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {                 // 26694
  var BRACE = /{}/g,                                                                                                   // 26695
      IS_WHEN = /^when(Minus)?(.+)$/;                                                                                  // 26696
                                                                                                                       // 26697
  return {                                                                                                             // 26698
    link: function(scope, element, attr) {                                                                             // 26699
      var numberExp = attr.count,                                                                                      // 26700
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs                         // 26701
          offset = attr.offset || 0,                                                                                   // 26702
          whens = scope.$eval(whenExp) || {},                                                                          // 26703
          whensExpFns = {},                                                                                            // 26704
          startSymbol = $interpolate.startSymbol(),                                                                    // 26705
          endSymbol = $interpolate.endSymbol(),                                                                        // 26706
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,                                       // 26707
          watchRemover = angular.noop,                                                                                 // 26708
          lastCount;                                                                                                   // 26709
                                                                                                                       // 26710
      forEach(attr, function(expression, attributeName) {                                                              // 26711
        var tmpMatch = IS_WHEN.exec(attributeName);                                                                    // 26712
        if (tmpMatch) {                                                                                                // 26713
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);                                             // 26714
          whens[whenKey] = element.attr(attr.$attr[attributeName]);                                                    // 26715
        }                                                                                                              // 26716
      });                                                                                                              // 26717
      forEach(whens, function(expression, key) {                                                                       // 26718
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));                                  // 26719
                                                                                                                       // 26720
      });                                                                                                              // 26721
                                                                                                                       // 26722
      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {                                                // 26723
        var count = parseFloat(newVal);                                                                                // 26724
        var countIsNaN = isNaN(count);                                                                                 // 26725
                                                                                                                       // 26726
        if (!countIsNaN && !(count in whens)) {                                                                        // 26727
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.                                    // 26728
          // Otherwise, check it against pluralization rules in $locale service.                                       // 26729
          count = $locale.pluralCat(count - offset);                                                                   // 26730
        }                                                                                                              // 26731
                                                                                                                       // 26732
        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.                              // 26733
        // In JS `NaN !== NaN`, so we have to exlicitly check.                                                         // 26734
        if ((count !== lastCount) && !(countIsNaN && isNumber(lastCount) && isNaN(lastCount))) {                       // 26735
          watchRemover();                                                                                              // 26736
          var whenExpFn = whensExpFns[count];                                                                          // 26737
          if (isUndefined(whenExpFn)) {                                                                                // 26738
            if (newVal != null) {                                                                                      // 26739
              $log.debug("ngPluralize: no rule defined for '" + count + "' in " + whenExp);                            // 26740
            }                                                                                                          // 26741
            watchRemover = noop;                                                                                       // 26742
            updateElementText();                                                                                       // 26743
          } else {                                                                                                     // 26744
            watchRemover = scope.$watch(whenExpFn, updateElementText);                                                 // 26745
          }                                                                                                            // 26746
          lastCount = count;                                                                                           // 26747
        }                                                                                                              // 26748
      });                                                                                                              // 26749
                                                                                                                       // 26750
      function updateElementText(newText) {                                                                            // 26751
        element.text(newText || '');                                                                                   // 26752
      }                                                                                                                // 26753
    }                                                                                                                  // 26754
  };                                                                                                                   // 26755
}];                                                                                                                    // 26756
                                                                                                                       // 26757
/**                                                                                                                    // 26758
 * @ngdoc directive                                                                                                    // 26759
 * @name ngRepeat                                                                                                      // 26760
 * @multiElement                                                                                                       // 26761
 *                                                                                                                     // 26762
 * @description                                                                                                        // 26763
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template                     // 26764
 * instance gets its own scope, where the given loop variable is set to the current collection item,                   // 26765
 * and `$index` is set to the item index or key.                                                                       // 26766
 *                                                                                                                     // 26767
 * Special properties are exposed on the local scope of each template instance, including:                             // 26768
 *                                                                                                                     // 26769
 * | Variable  | Type            | Details                                                                     |       // 26770
 * |-----------|-----------------|-----------------------------------------------------------------------------|       // 26771
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |       // 26772
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |       // 26773
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |       // 26774
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |       // 26775
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |       // 26776
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |       // 26777
 *                                                                                                                     // 26778
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.                        // 26779
 * This may be useful when, for instance, nesting ngRepeats.                                                           // 26780
 *                                                                                                                     // 26781
 *                                                                                                                     // 26782
 * # Iterating over object properties                                                                                  // 26783
 *                                                                                                                     // 26784
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following                    // 26785
 * syntax:                                                                                                             // 26786
 *                                                                                                                     // 26787
 * ```js                                                                                                               // 26788
 * <div ng-repeat="(key, value) in myObj"> ... </div>                                                                  // 26789
 * ```                                                                                                                 // 26790
 *                                                                                                                     // 26791
 * You need to be aware that the JavaScript specification does not define the order of keys                            // 26792
 * returned for an object. (To mitigate this in Angular 1.3 the `ngRepeat` directive                                   // 26793
 * used to sort the keys alphabetically.)                                                                              // 26794
 *                                                                                                                     // 26795
 * Version 1.4 removed the alphabetic sorting. We now rely on the order returned by the browser                        // 26796
 * when running `for key in myObj`. It seems that browsers generally follow the strategy of providing                  // 26797
 * keys in the order in which they were defined, although there are exceptions when keys are deleted                   // 26798
 * and reinstated. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_issues
 *                                                                                                                     // 26800
 * If this is not desired, the recommended workaround is to convert your object into an array                          // 26801
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could                         // 26802
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)                   // 26803
 * or implement a `$watch` on the object yourself.                                                                     // 26804
 *                                                                                                                     // 26805
 *                                                                                                                     // 26806
 * # Tracking and Duplicates                                                                                           // 26807
 *                                                                                                                     // 26808
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:                  // 26809
 *                                                                                                                     // 26810
 * * When an item is added, a new instance of the template is added to the DOM.                                        // 26811
 * * When an item is removed, its template instance is removed from the DOM.                                           // 26812
 * * When items are reordered, their respective templates are reordered in the DOM.                                    // 26813
 *                                                                                                                     // 26814
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when                               // 26815
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection                        // 26816
 * items and DOM elements.                                                                                             // 26817
 *                                                                                                                     // 26818
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior                          // 26819
 * with your own using the `track by` expression.                                                                      // 26820
 *                                                                                                                     // 26821
 * For example, you may track items by the index of each item in the collection, using the                             // 26822
 * special scope property `$index`:                                                                                    // 26823
 * ```html                                                                                                             // 26824
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">                                                          // 26825
 *      {{n}}                                                                                                          // 26826
 *    </div>                                                                                                           // 26827
 * ```                                                                                                                 // 26828
 *                                                                                                                     // 26829
 * You may use arbitrary expressions in `track by`, including references to custom functions                           // 26830
 * on the scope:                                                                                                       // 26831
 * ```html                                                                                                             // 26832
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">                                           // 26833
 *      {{n}}                                                                                                          // 26834
 *    </div>                                                                                                           // 26835
 * ```                                                                                                                 // 26836
 *                                                                                                                     // 26837
 * If you are working with objects that have an identifier property, you can track                                     // 26838
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`                        // 26839
 * will not have to rebuild the DOM elements for items it has already rendered, even if the                            // 26840
 * JavaScript objects in the collection have been substituted for new ones:                                            // 26841
 * ```html                                                                                                             // 26842
 *    <div ng-repeat="model in collection track by model.id">                                                          // 26843
 *      {{model.name}}                                                                                                 // 26844
 *    </div>                                                                                                           // 26845
 * ```                                                                                                                 // 26846
 *                                                                                                                     // 26847
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in                             // 26848
 * `$id` function, which tracks items by their identity:                                                               // 26849
 * ```html                                                                                                             // 26850
 *    <div ng-repeat="obj in collection track by $id(obj)">                                                            // 26851
 *      {{obj.prop}}                                                                                                   // 26852
 *    </div>                                                                                                           // 26853
 * ```                                                                                                                 // 26854
 *                                                                                                                     // 26855
 * <div class="alert alert-warning">                                                                                   // 26856
 * **Note:** `track by` must always be the last expression:                                                            // 26857
 * </div>                                                                                                              // 26858
 * ```                                                                                                                 // 26859
 * <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">                          // 26860
 *     {{model.name}}                                                                                                  // 26861
 * </div>                                                                                                              // 26862
 * ```                                                                                                                 // 26863
 *                                                                                                                     // 26864
 * # Special repeat start and end points                                                                               // 26865
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.                                          // 26869
 *                                                                                                                     // 26870
 * The example below makes use of this feature:                                                                        // 26871
 * ```html                                                                                                             // 26872
 *   <header ng-repeat-start="item in items">                                                                          // 26873
 *     Header {{ item }}                                                                                               // 26874
 *   </header>                                                                                                         // 26875
 *   <div class="body">                                                                                                // 26876
 *     Body {{ item }}                                                                                                 // 26877
 *   </div>                                                                                                            // 26878
 *   <footer ng-repeat-end>                                                                                            // 26879
 *     Footer {{ item }}                                                                                               // 26880
 *   </footer>                                                                                                         // 26881
 * ```                                                                                                                 // 26882
 *                                                                                                                     // 26883
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:    // 26884
 * ```html                                                                                                             // 26885
 *   <header>                                                                                                          // 26886
 *     Header A                                                                                                        // 26887
 *   </header>                                                                                                         // 26888
 *   <div class="body">                                                                                                // 26889
 *     Body A                                                                                                          // 26890
 *   </div>                                                                                                            // 26891
 *   <footer>                                                                                                          // 26892
 *     Footer A                                                                                                        // 26893
 *   </footer>                                                                                                         // 26894
 *   <header>                                                                                                          // 26895
 *     Header B                                                                                                        // 26896
 *   </header>                                                                                                         // 26897
 *   <div class="body">                                                                                                // 26898
 *     Body B                                                                                                          // 26899
 *   </div>                                                                                                            // 26900
 *   <footer>                                                                                                          // 26901
 *     Footer B                                                                                                        // 26902
 *   </footer>                                                                                                         // 26903
 * ```                                                                                                                 // 26904
 *                                                                                                                     // 26905
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).                                        // 26907
 *                                                                                                                     // 26908
 * @animations                                                                                                         // 26909
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter                        // 26910
 *                                                                                                                     // 26911
 * **.leave** - when an item is removed from the list or when an item is filtered out                                  // 26912
 *                                                                                                                     // 26913
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered         // 26914
 *                                                                                                                     // 26915
 * @element ANY                                                                                                        // 26916
 * @scope                                                                                                              // 26917
 * @priority 1000                                                                                                      // 26918
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These                  // 26919
 *   formats are currently supported:                                                                                  // 26920
 *                                                                                                                     // 26921
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`                    // 26922
 *     is a scope expression giving the collection to enumerate.                                                       // 26923
 *                                                                                                                     // 26924
 *     For example: `album in artist.albums`.                                                                          // 26925
 *                                                                                                                     // 26926
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,                     // 26927
 *     and `expression` is the scope expression giving the collection to enumerate.                                    // 26928
 *                                                                                                                     // 26929
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.                                                         // 26930
 *                                                                                                                     // 26931
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression    // 26932
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression   // 26933
 *     is specified, ng-repeat associates elements by identity. It is an error to have                                 // 26934
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are // 26935
 *     mapped to the same DOM element, which is not possible.)                                                         // 26936
 *                                                                                                                     // 26937
 *     Note that the tracking expression must come last, after any filters, and the alias expression.                  // 26938
 *                                                                                                                     // 26939
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.                                                               // 26941
 *                                                                                                                     // 26942
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique     // 26943
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements  // 26944
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM        // 26945
 *     element in the same way in the DOM.                                                                             // 26946
 *                                                                                                                     // 26947
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`           // 26949
 *     property is same.                                                                                               // 26950
 *                                                                                                                     // 26951
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.                                                             // 26953
 *                                                                                                                     // 26954
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.                                  // 26957
 *                                                                                                                     // 26958
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.                                                               // 26960
 *                                                                                                                     // 26961
 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
 *     (and not as operator, inside an expression).                                                                    // 26963
 *                                                                                                                     // 26964
 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .                      // 26965
 *                                                                                                                     // 26966
 * @example                                                                                                            // 26967
 * This example initializes the scope to a list of names and                                                           // 26968
 * then uses `ngRepeat` to display every person:                                                                       // 26969
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 26970
    <file name="index.html">                                                                                           // 26971
      <div ng-init="friends = [                                                                                        // 26972
        {name:'John', age:25, gender:'boy'},                                                                           // 26973
        {name:'Jessie', age:30, gender:'girl'},                                                                        // 26974
        {name:'Johanna', age:28, gender:'girl'},                                                                       // 26975
        {name:'Joy', age:15, gender:'girl'},                                                                           // 26976
        {name:'Mary', age:28, gender:'girl'},                                                                          // 26977
        {name:'Peter', age:95, gender:'boy'},                                                                          // 26978
        {name:'Sebastian', age:50, gender:'boy'},                                                                      // 26979
        {name:'Erika', age:27, gender:'girl'},                                                                         // 26980
        {name:'Patrick', age:40, gender:'boy'},                                                                        // 26981
        {name:'Samantha', age:60, gender:'girl'}                                                                       // 26982
      ]">                                                                                                              // 26983
        I have {{friends.length}} friends. They are:                                                                   // 26984
        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />               // 26985
        <ul class="example-animate-container">                                                                         // 26986
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">                              // 26987
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.                                          // 26988
          </li>                                                                                                        // 26989
          <li class="animate-repeat" ng-if="results.length == 0">                                                      // 26990
            <strong>No results found...</strong>                                                                       // 26991
          </li>                                                                                                        // 26992
        </ul>                                                                                                          // 26993
      </div>                                                                                                           // 26994
    </file>                                                                                                            // 26995
    <file name="animations.css">                                                                                       // 26996
      .example-animate-container {                                                                                     // 26997
        background:white;                                                                                              // 26998
        border:1px solid black;                                                                                        // 26999
        list-style:none;                                                                                               // 27000
        margin:0;                                                                                                      // 27001
        padding:0 10px;                                                                                                // 27002
      }                                                                                                                // 27003
                                                                                                                       // 27004
      .animate-repeat {                                                                                                // 27005
        line-height:40px;                                                                                              // 27006
        list-style:none;                                                                                               // 27007
        box-sizing:border-box;                                                                                         // 27008
      }                                                                                                                // 27009
                                                                                                                       // 27010
      .animate-repeat.ng-move,                                                                                         // 27011
      .animate-repeat.ng-enter,                                                                                        // 27012
      .animate-repeat.ng-leave {                                                                                       // 27013
        transition:all linear 0.5s;                                                                                    // 27014
      }                                                                                                                // 27015
                                                                                                                       // 27016
      .animate-repeat.ng-leave.ng-leave-active,                                                                        // 27017
      .animate-repeat.ng-move,                                                                                         // 27018
      .animate-repeat.ng-enter {                                                                                       // 27019
        opacity:0;                                                                                                     // 27020
        max-height:0;                                                                                                  // 27021
      }                                                                                                                // 27022
                                                                                                                       // 27023
      .animate-repeat.ng-leave,                                                                                        // 27024
      .animate-repeat.ng-move.ng-move-active,                                                                          // 27025
      .animate-repeat.ng-enter.ng-enter-active {                                                                       // 27026
        opacity:1;                                                                                                     // 27027
        max-height:40px;                                                                                               // 27028
      }                                                                                                                // 27029
    </file>                                                                                                            // 27030
    <file name="protractor.js" type="protractor">                                                                      // 27031
      var friends = element.all(by.repeater('friend in friends'));                                                     // 27032
                                                                                                                       // 27033
      it('should render initial data set', function() {                                                                // 27034
        expect(friends.count()).toBe(10);                                                                              // 27035
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');                                     // 27036
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');                                   // 27037
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');                                // 27038
        expect(element(by.binding('friends.length')).getText())                                                        // 27039
            .toMatch("I have 10 friends. They are:");                                                                  // 27040
      });                                                                                                              // 27041
                                                                                                                       // 27042
       it('should update repeater when filter predicate changes', function() {                                         // 27043
         expect(friends.count()).toBe(10);                                                                             // 27044
                                                                                                                       // 27045
         element(by.model('q')).sendKeys('ma');                                                                        // 27046
                                                                                                                       // 27047
         expect(friends.count()).toBe(2);                                                                              // 27048
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');                                    // 27049
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');                                // 27050
       });                                                                                                             // 27051
      </file>                                                                                                          // 27052
    </example>                                                                                                         // 27053
 */                                                                                                                    // 27054
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {                                            // 27055
  var NG_REMOVED = '$$NG_REMOVED';                                                                                     // 27056
  var ngRepeatMinErr = minErr('ngRepeat');                                                                             // 27057
                                                                                                                       // 27058
  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {                  // 27059
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%                                                       // 27060
    scope[valueIdentifier] = value;                                                                                    // 27061
    if (keyIdentifier) scope[keyIdentifier] = key;                                                                     // 27062
    scope.$index = index;                                                                                              // 27063
    scope.$first = (index === 0);                                                                                      // 27064
    scope.$last = (index === (arrayLength - 1));                                                                       // 27065
    scope.$middle = !(scope.$first || scope.$last);                                                                    // 27066
    // jshint bitwise: false                                                                                           // 27067
    scope.$odd = !(scope.$even = (index&1) === 0);                                                                     // 27068
    // jshint bitwise: true                                                                                            // 27069
  };                                                                                                                   // 27070
                                                                                                                       // 27071
  var getBlockStart = function(block) {                                                                                // 27072
    return block.clone[0];                                                                                             // 27073
  };                                                                                                                   // 27074
                                                                                                                       // 27075
  var getBlockEnd = function(block) {                                                                                  // 27076
    return block.clone[block.clone.length - 1];                                                                        // 27077
  };                                                                                                                   // 27078
                                                                                                                       // 27079
                                                                                                                       // 27080
  return {                                                                                                             // 27081
    restrict: 'A',                                                                                                     // 27082
    multiElement: true,                                                                                                // 27083
    transclude: 'element',                                                                                             // 27084
    priority: 1000,                                                                                                    // 27085
    terminal: true,                                                                                                    // 27086
    $$tlb: true,                                                                                                       // 27087
    compile: function ngRepeatCompile($element, $attr) {                                                               // 27088
      var expression = $attr.ngRepeat;                                                                                 // 27089
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');                           // 27090
                                                                                                                       // 27091
      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
                                                                                                                       // 27093
      if (!match) {                                                                                                    // 27094
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);                                                                                               // 27096
      }                                                                                                                // 27097
                                                                                                                       // 27098
      var lhs = match[1];                                                                                              // 27099
      var rhs = match[2];                                                                                              // 27100
      var aliasAs = match[3];                                                                                          // 27101
      var trackByExp = match[4];                                                                                       // 27102
                                                                                                                       // 27103
      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);                                     // 27104
                                                                                                                       // 27105
      if (!match) {                                                                                                    // 27106
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);                                                                                                      // 27108
      }                                                                                                                // 27109
      var valueIdentifier = match[3] || match[1];                                                                      // 27110
      var keyIdentifier = match[2];                                                                                    // 27111
                                                                                                                       // 27112
      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||                                                   // 27113
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);                                                                                                    // 27116
      }                                                                                                                // 27117
                                                                                                                       // 27118
      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;                                          // 27119
      var hashFnLocals = {$id: hashKey};                                                                               // 27120
                                                                                                                       // 27121
      if (trackByExp) {                                                                                                // 27122
        trackByExpGetter = $parse(trackByExp);                                                                         // 27123
      } else {                                                                                                         // 27124
        trackByIdArrayFn = function(key, value) {                                                                      // 27125
          return hashKey(value);                                                                                       // 27126
        };                                                                                                             // 27127
        trackByIdObjFn = function(key) {                                                                               // 27128
          return key;                                                                                                  // 27129
        };                                                                                                             // 27130
      }                                                                                                                // 27131
                                                                                                                       // 27132
      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {                                       // 27133
                                                                                                                       // 27134
        if (trackByExpGetter) {                                                                                        // 27135
          trackByIdExpFn = function(key, value, index) {                                                               // 27136
            // assign key, value, and $index to the locals so that they can be used in hash functions                  // 27137
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;                                                      // 27138
            hashFnLocals[valueIdentifier] = value;                                                                     // 27139
            hashFnLocals.$index = index;                                                                               // 27140
            return trackByExpGetter($scope, hashFnLocals);                                                             // 27141
          };                                                                                                           // 27142
        }                                                                                                              // 27143
                                                                                                                       // 27144
        // Store a list of elements from previous run. This is a hash where key is the item from the                   // 27145
        // iterator, and the value is objects with following properties.                                               // 27146
        //   - scope: bound scope                                                                                      // 27147
        //   - element: previous element.                                                                              // 27148
        //   - index: position                                                                                         // 27149
        //                                                                                                             // 27150
        // We are using no-proto object so that we don't need to guard against inherited props via                     // 27151
        // hasOwnProperty.                                                                                             // 27152
        var lastBlockMap = createMap();                                                                                // 27153
                                                                                                                       // 27154
        //watch props                                                                                                  // 27155
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {                                             // 27156
          var index, length,                                                                                           // 27157
              previousNode = $element[0],     // node that cloned nodes should be inserted after                       // 27158
                                              // initialized to the comment node anchor                                // 27159
              nextNode,                                                                                                // 27160
              // Same as lastBlockMap but it has the current state. It will become the                                 // 27161
              // lastBlockMap on the next iteration.                                                                   // 27162
              nextBlockMap = createMap(),                                                                              // 27163
              collectionLength,                                                                                        // 27164
              key, value, // key/value of iteration                                                                    // 27165
              trackById,                                                                                               // 27166
              trackByIdFn,                                                                                             // 27167
              collectionKeys,                                                                                          // 27168
              block,       // last object information {scope, element, id}                                             // 27169
              nextBlockOrder,                                                                                          // 27170
              elementsToRemove;                                                                                        // 27171
                                                                                                                       // 27172
          if (aliasAs) {                                                                                               // 27173
            $scope[aliasAs] = collection;                                                                              // 27174
          }                                                                                                            // 27175
                                                                                                                       // 27176
          if (isArrayLike(collection)) {                                                                               // 27177
            collectionKeys = collection;                                                                               // 27178
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;                                                          // 27179
          } else {                                                                                                     // 27180
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;                                                            // 27181
            // if object, extract keys, in enumeration order, unsorted                                                 // 27182
            collectionKeys = [];                                                                                       // 27183
            for (var itemKey in collection) {                                                                          // 27184
              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {                                   // 27185
                collectionKeys.push(itemKey);                                                                          // 27186
              }                                                                                                        // 27187
            }                                                                                                          // 27188
          }                                                                                                            // 27189
                                                                                                                       // 27190
          collectionLength = collectionKeys.length;                                                                    // 27191
          nextBlockOrder = new Array(collectionLength);                                                                // 27192
                                                                                                                       // 27193
          // locate existing items                                                                                     // 27194
          for (index = 0; index < collectionLength; index++) {                                                         // 27195
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27196
            value = collection[key];                                                                                   // 27197
            trackById = trackByIdFn(key, value, index);                                                                // 27198
            if (lastBlockMap[trackById]) {                                                                             // 27199
              // found previously seen block                                                                           // 27200
              block = lastBlockMap[trackById];                                                                         // 27201
              delete lastBlockMap[trackById];                                                                          // 27202
              nextBlockMap[trackById] = block;                                                                         // 27203
              nextBlockOrder[index] = block;                                                                           // 27204
            } else if (nextBlockMap[trackById]) {                                                                      // 27205
              // if collision detected. restore lastBlockMap and throw an error                                        // 27206
              forEach(nextBlockOrder, function(block) {                                                                // 27207
                if (block && block.scope) lastBlockMap[block.id] = block;                                              // 27208
              });                                                                                                      // 27209
              throw ngRepeatMinErr('dupes',                                                                            // 27210
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);                                                                       // 27212
            } else {                                                                                                   // 27213
              // new never before seen block                                                                           // 27214
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};                             // 27215
              nextBlockMap[trackById] = true;                                                                          // 27216
            }                                                                                                          // 27217
          }                                                                                                            // 27218
                                                                                                                       // 27219
          // remove leftover items                                                                                     // 27220
          for (var blockKey in lastBlockMap) {                                                                         // 27221
            block = lastBlockMap[blockKey];                                                                            // 27222
            elementsToRemove = getBlockNodes(block.clone);                                                             // 27223
            $animate.leave(elementsToRemove);                                                                          // 27224
            if (elementsToRemove[0].parentNode) {                                                                      // 27225
              // if the element was not removed yet because of pending animation, mark it as deleted                   // 27226
              // so that we can ignore it later                                                                        // 27227
              for (index = 0, length = elementsToRemove.length; index < length; index++) {                             // 27228
                elementsToRemove[index][NG_REMOVED] = true;                                                            // 27229
              }                                                                                                        // 27230
            }                                                                                                          // 27231
            block.scope.$destroy();                                                                                    // 27232
          }                                                                                                            // 27233
                                                                                                                       // 27234
          // we are not using forEach for perf reasons (trying to avoid #call)                                         // 27235
          for (index = 0; index < collectionLength; index++) {                                                         // 27236
            key = (collection === collectionKeys) ? index : collectionKeys[index];                                     // 27237
            value = collection[key];                                                                                   // 27238
            block = nextBlockOrder[index];                                                                             // 27239
                                                                                                                       // 27240
            if (block.scope) {                                                                                         // 27241
              // if we have already seen this object, then we need to reuse the                                        // 27242
              // associated scope/element                                                                              // 27243
                                                                                                                       // 27244
              nextNode = previousNode;                                                                                 // 27245
                                                                                                                       // 27246
              // skip nodes that are already pending removal via leave animation                                       // 27247
              do {                                                                                                     // 27248
                nextNode = nextNode.nextSibling;                                                                       // 27249
              } while (nextNode && nextNode[NG_REMOVED]);                                                              // 27250
                                                                                                                       // 27251
              if (getBlockStart(block) != nextNode) {                                                                  // 27252
                // existing item which got moved                                                                       // 27253
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));                                 // 27254
              }                                                                                                        // 27255
              previousNode = getBlockEnd(block);                                                                       // 27256
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);           // 27257
            } else {                                                                                                   // 27258
              // new item which we don't know about                                                                    // 27259
              $transclude(function ngRepeatTransclude(clone, scope) {                                                  // 27260
                block.scope = scope;                                                                                   // 27261
                // http://jsperf.com/clone-vs-createcomment                                                            // 27262
                var endNode = ngRepeatEndComment.cloneNode(false);                                                     // 27263
                clone[clone.length++] = endNode;                                                                       // 27264
                                                                                                                       // 27265
                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?              // 27266
                $animate.enter(clone, null, jqLite(previousNode));                                                     // 27267
                previousNode = endNode;                                                                                // 27268
                // Note: We only need the first/last node of the cloned nodes.                                         // 27269
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later           // 27270
                // by a directive with templateUrl when its template arrives.                                          // 27271
                block.clone = clone;                                                                                   // 27272
                nextBlockMap[block.id] = block;                                                                        // 27273
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);         // 27274
              });                                                                                                      // 27275
            }                                                                                                          // 27276
          }                                                                                                            // 27277
          lastBlockMap = nextBlockMap;                                                                                 // 27278
        });                                                                                                            // 27279
      };                                                                                                               // 27280
    }                                                                                                                  // 27281
  };                                                                                                                   // 27282
}];                                                                                                                    // 27283
                                                                                                                       // 27284
var NG_HIDE_CLASS = 'ng-hide';                                                                                         // 27285
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';                                                                     // 27286
/**                                                                                                                    // 27287
 * @ngdoc directive                                                                                                    // 27288
 * @name ngShow                                                                                                        // 27289
 * @multiElement                                                                                                       // 27290
 *                                                                                                                     // 27291
 * @description                                                                                                        // 27292
 * The `ngShow` directive shows or hides the given HTML element based on the expression                                // 27293
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding                            // 27294
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                   // 27295
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27296
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27297
 *                                                                                                                     // 27298
 * ```html                                                                                                             // 27299
 * <!-- when $scope.myValue is truthy (element is visible) -->                                                         // 27300
 * <div ng-show="myValue"></div>                                                                                       // 27301
 *                                                                                                                     // 27302
 * <!-- when $scope.myValue is falsy (element is hidden) -->                                                           // 27303
 * <div ng-show="myValue" class="ng-hide"></div>                                                                       // 27304
 * ```                                                                                                                 // 27305
 *                                                                                                                     // 27306
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class         // 27307
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed              // 27308
 * from the element causing the element not to appear hidden.                                                          // 27309
 *                                                                                                                     // 27310
 * ## Why is !important used?                                                                                          // 27311
 *                                                                                                                     // 27312
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27313
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27314
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27315
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27316
 *                                                                                                                     // 27317
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27318
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27319
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27320
 *                                                                                                                     // 27321
 * ### Overriding `.ng-hide`                                                                                           // 27322
 *                                                                                                                     // 27323
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27324
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27325
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope        // 27326
 * with extra animation classes that can be added.                                                                     // 27327
 *                                                                                                                     // 27328
 * ```css                                                                                                              // 27329
 * .ng-hide:not(.ng-hide-animate) {                                                                                    // 27330
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27331
 *   display: block!important;                                                                                         // 27332
 *   position: absolute;                                                                                               // 27333
 *   top: -9999px;                                                                                                     // 27334
 *   left: -9999px;                                                                                                    // 27335
 * }                                                                                                                   // 27336
 * ```                                                                                                                 // 27337
 *                                                                                                                     // 27338
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27339
 *                                                                                                                     // 27340
 * ## A note about animations with `ngShow`                                                                            // 27341
 *                                                                                                                     // 27342
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27343
 * is true and false. This system works like the animation system present with ngClass except that                     // 27344
 * you must also include the !important flag to override the display property                                          // 27345
 * so that you can perform an animation when the element is hidden during the time of the animation.                   // 27346
 *                                                                                                                     // 27347
 * ```css                                                                                                              // 27348
 * //                                                                                                                  // 27349
 * //a working example can be found at the bottom of this page                                                         // 27350
 * //                                                                                                                  // 27351
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27352
 *   /&#42; this is required as of 1.3x to properly                                                                    // 27353
 *      apply all styling in a show/hide animation &#42;/                                                              // 27354
 *   transition: 0s linear all;                                                                                        // 27355
 * }                                                                                                                   // 27356
 *                                                                                                                     // 27357
 * .my-element.ng-hide-add-active,                                                                                     // 27358
 * .my-element.ng-hide-remove-active {                                                                                 // 27359
 *   /&#42; the transition is defined in the active class &#42;/                                                       // 27360
 *   transition: 1s linear all;                                                                                        // 27361
 * }                                                                                                                   // 27362
 *                                                                                                                     // 27363
 * .my-element.ng-hide-add { ... }                                                                                     // 27364
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27365
 * .my-element.ng-hide-remove { ... }                                                                                  // 27366
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27367
 * ```                                                                                                                 // 27368
 *                                                                                                                     // 27369
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27370
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27371
 *                                                                                                                     // 27372
 * @animations                                                                                                         // 27373
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *                                                                                                                     // 27376
 * @element ANY                                                                                                        // 27377
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy                                     // 27378
 *     then the element is shown or hidden respectively.                                                               // 27379
 *                                                                                                                     // 27380
 * @example                                                                                                            // 27381
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27382
    <file name="index.html">                                                                                           // 27383
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>                             // 27384
      <div>                                                                                                            // 27385
        Show:                                                                                                          // 27386
        <div class="check-element animate-show" ng-show="checked">                                                     // 27387
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27388
        </div>                                                                                                         // 27389
      </div>                                                                                                           // 27390
      <div>                                                                                                            // 27391
        Hide:                                                                                                          // 27392
        <div class="check-element animate-show" ng-hide="checked">                                                     // 27393
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27394
        </div>                                                                                                         // 27395
      </div>                                                                                                           // 27396
    </file>                                                                                                            // 27397
    <file name="glyphicons.css">                                                                                       // 27398
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27399
    </file>                                                                                                            // 27400
    <file name="animations.css">                                                                                       // 27401
      .animate-show {                                                                                                  // 27402
        line-height: 20px;                                                                                             // 27403
        opacity: 1;                                                                                                    // 27404
        padding: 10px;                                                                                                 // 27405
        border: 1px solid black;                                                                                       // 27406
        background: white;                                                                                             // 27407
      }                                                                                                                // 27408
                                                                                                                       // 27409
      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {                                                        // 27410
        transition: all linear 0.5s;                                                                                   // 27411
      }                                                                                                                // 27412
                                                                                                                       // 27413
      .animate-show.ng-hide {                                                                                          // 27414
        line-height: 0;                                                                                                // 27415
        opacity: 0;                                                                                                    // 27416
        padding: 0 10px;                                                                                               // 27417
      }                                                                                                                // 27418
                                                                                                                       // 27419
      .check-element {                                                                                                 // 27420
        padding: 10px;                                                                                                 // 27421
        border: 1px solid black;                                                                                       // 27422
        background: white;                                                                                             // 27423
      }                                                                                                                // 27424
    </file>                                                                                                            // 27425
    <file name="protractor.js" type="protractor">                                                                      // 27426
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27427
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27428
                                                                                                                       // 27429
      it('should check ng-show / ng-hide', function() {                                                                // 27430
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27431
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27432
                                                                                                                       // 27433
        element(by.model('checked')).click();                                                                          // 27434
                                                                                                                       // 27435
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27436
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27437
      });                                                                                                              // 27438
    </file>                                                                                                            // 27439
  </example>                                                                                                           // 27440
 */                                                                                                                    // 27441
var ngShowDirective = ['$animate', function($animate) {                                                                // 27442
  return {                                                                                                             // 27443
    restrict: 'A',                                                                                                     // 27444
    multiElement: true,                                                                                                // 27445
    link: function(scope, element, attr) {                                                                             // 27446
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {                                                    // 27447
        // we're adding a temporary, animation-specific class for ng-hide since this way                               // 27448
        // we can control when the element is actually displayed on screen without having                              // 27449
        // to have a global/greedy CSS selector that breaks when other animations are run.                             // 27450
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845                               // 27451
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {                                         // 27452
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27453
        });                                                                                                            // 27454
      });                                                                                                              // 27455
    }                                                                                                                  // 27456
  };                                                                                                                   // 27457
}];                                                                                                                    // 27458
                                                                                                                       // 27459
                                                                                                                       // 27460
/**                                                                                                                    // 27461
 * @ngdoc directive                                                                                                    // 27462
 * @name ngHide                                                                                                        // 27463
 * @multiElement                                                                                                       // 27464
 *                                                                                                                     // 27465
 * @description                                                                                                        // 27466
 * The `ngHide` directive shows or hides the given HTML element based on the expression                                // 27467
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding                            // 27468
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined                                    // 27469
 * in AngularJS and sets the display style to none (using an !important flag).                                         // 27470
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).                 // 27471
 *                                                                                                                     // 27472
 * ```html                                                                                                             // 27473
 * <!-- when $scope.myValue is truthy (element is hidden) -->                                                          // 27474
 * <div ng-hide="myValue" class="ng-hide"></div>                                                                       // 27475
 *                                                                                                                     // 27476
 * <!-- when $scope.myValue is falsy (element is visible) -->                                                          // 27477
 * <div ng-hide="myValue"></div>                                                                                       // 27478
 * ```                                                                                                                 // 27479
 *                                                                                                                     // 27480
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class        // 27481
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed               // 27482
 * from the element causing the element not to appear hidden.                                                          // 27483
 *                                                                                                                     // 27484
 * ## Why is !important used?                                                                                          // 27485
 *                                                                                                                     // 27486
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector   // 27487
 * can be easily overridden by heavier selectors. For example, something as simple                                     // 27488
 * as changing the display style on a HTML list item would make hidden elements appear visible.                        // 27489
 * This also becomes a bigger issue when dealing with CSS frameworks.                                                  // 27490
 *                                                                                                                     // 27491
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector        // 27492
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the        // 27493
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.        // 27494
 *                                                                                                                     // 27495
 * ### Overriding `.ng-hide`                                                                                           // 27496
 *                                                                                                                     // 27497
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change       // 27498
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`           // 27499
 * class in CSS:                                                                                                       // 27500
 *                                                                                                                     // 27501
 * ```css                                                                                                              // 27502
 * .ng-hide {                                                                                                          // 27503
 *   /&#42; this is just another form of hiding an element &#42;/                                                      // 27504
 *   display: block!important;                                                                                         // 27505
 *   position: absolute;                                                                                               // 27506
 *   top: -9999px;                                                                                                     // 27507
 *   left: -9999px;                                                                                                    // 27508
 * }                                                                                                                   // 27509
 * ```                                                                                                                 // 27510
 *                                                                                                                     // 27511
 * By default you don't need to override in CSS anything and the animations will work around the display style.        // 27512
 *                                                                                                                     // 27513
 * ## A note about animations with `ngHide`                                                                            // 27514
 *                                                                                                                     // 27515
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression     // 27516
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`     // 27517
 * CSS class is added and removed for you instead of your own CSS class.                                               // 27518
 *                                                                                                                     // 27519
 * ```css                                                                                                              // 27520
 * //                                                                                                                  // 27521
 * //a working example can be found at the bottom of this page                                                         // 27522
 * //                                                                                                                  // 27523
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {                                                               // 27524
 *   transition: 0.5s linear all;                                                                                      // 27525
 * }                                                                                                                   // 27526
 *                                                                                                                     // 27527
 * .my-element.ng-hide-add { ... }                                                                                     // 27528
 * .my-element.ng-hide-add.ng-hide-add-active { ... }                                                                  // 27529
 * .my-element.ng-hide-remove { ... }                                                                                  // 27530
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }                                                            // 27531
 * ```                                                                                                                 // 27532
 *                                                                                                                     // 27533
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display                    // 27534
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.          // 27535
 *                                                                                                                     // 27536
 * @animations                                                                                                         // 27537
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *                                                                                                                     // 27540
 * @element ANY                                                                                                        // 27541
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then                                // 27542
 *     the element is shown or hidden respectively.                                                                    // 27543
 *                                                                                                                     // 27544
 * @example                                                                                                            // 27545
  <example module="ngAnimate" deps="angular-animate.js" animations="true">                                             // 27546
    <file name="index.html">                                                                                           // 27547
      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>                             // 27548
      <div>                                                                                                            // 27549
        Show:                                                                                                          // 27550
        <div class="check-element animate-hide" ng-show="checked">                                                     // 27551
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.                 // 27552
        </div>                                                                                                         // 27553
      </div>                                                                                                           // 27554
      <div>                                                                                                            // 27555
        Hide:                                                                                                          // 27556
        <div class="check-element animate-hide" ng-hide="checked">                                                     // 27557
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.                  // 27558
        </div>                                                                                                         // 27559
      </div>                                                                                                           // 27560
    </file>                                                                                                            // 27561
    <file name="glyphicons.css">                                                                                       // 27562
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);                                                 // 27563
    </file>                                                                                                            // 27564
    <file name="animations.css">                                                                                       // 27565
      .animate-hide {                                                                                                  // 27566
        transition: all linear 0.5s;                                                                                   // 27567
        line-height: 20px;                                                                                             // 27568
        opacity: 1;                                                                                                    // 27569
        padding: 10px;                                                                                                 // 27570
        border: 1px solid black;                                                                                       // 27571
        background: white;                                                                                             // 27572
      }                                                                                                                // 27573
                                                                                                                       // 27574
      .animate-hide.ng-hide {                                                                                          // 27575
        line-height: 0;                                                                                                // 27576
        opacity: 0;                                                                                                    // 27577
        padding: 0 10px;                                                                                               // 27578
      }                                                                                                                // 27579
                                                                                                                       // 27580
      .check-element {                                                                                                 // 27581
        padding: 10px;                                                                                                 // 27582
        border: 1px solid black;                                                                                       // 27583
        background: white;                                                                                             // 27584
      }                                                                                                                // 27585
    </file>                                                                                                            // 27586
    <file name="protractor.js" type="protractor">                                                                      // 27587
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));                                                      // 27588
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));                                                  // 27589
                                                                                                                       // 27590
      it('should check ng-show / ng-hide', function() {                                                                // 27591
        expect(thumbsUp.isDisplayed()).toBeFalsy();                                                                    // 27592
        expect(thumbsDown.isDisplayed()).toBeTruthy();                                                                 // 27593
                                                                                                                       // 27594
        element(by.model('checked')).click();                                                                          // 27595
                                                                                                                       // 27596
        expect(thumbsUp.isDisplayed()).toBeTruthy();                                                                   // 27597
        expect(thumbsDown.isDisplayed()).toBeFalsy();                                                                  // 27598
      });                                                                                                              // 27599
    </file>                                                                                                            // 27600
  </example>                                                                                                           // 27601
 */                                                                                                                    // 27602
var ngHideDirective = ['$animate', function($animate) {                                                                // 27603
  return {                                                                                                             // 27604
    restrict: 'A',                                                                                                     // 27605
    multiElement: true,                                                                                                // 27606
    link: function(scope, element, attr) {                                                                             // 27607
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {                                                    // 27608
        // The comment inside of the ngShowDirective explains why we add and                                           // 27609
        // remove a temporary class for the show/hide animation                                                        // 27610
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {                                          // 27611
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS                                                                       // 27612
        });                                                                                                            // 27613
      });                                                                                                              // 27614
    }                                                                                                                  // 27615
  };                                                                                                                   // 27616
}];                                                                                                                    // 27617
                                                                                                                       // 27618
/**                                                                                                                    // 27619
 * @ngdoc directive                                                                                                    // 27620
 * @name ngStyle                                                                                                       // 27621
 * @restrict AC                                                                                                        // 27622
 *                                                                                                                     // 27623
 * @description                                                                                                        // 27624
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.                               // 27625
 *                                                                                                                     // 27626
 * @element ANY                                                                                                        // 27627
 * @param {expression} ngStyle                                                                                         // 27628
 *                                                                                                                     // 27629
 * {@link guide/expression Expression} which evals to an                                                               // 27630
 * object whose keys are CSS style names and values are corresponding values for those CSS                             // 27631
 * keys.                                                                                                               // 27632
 *                                                                                                                     // 27633
 * Since some CSS style names are not valid keys for an object, they must be quoted.                                   // 27634
 * See the 'background-color' style in the example below.                                                              // 27635
 *                                                                                                                     // 27636
 * @example                                                                                                            // 27637
   <example>                                                                                                           // 27638
     <file name="index.html">                                                                                          // 27639
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">                                       // 27640
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">                    // 27641
        <input type="button" value="clear" ng-click="myStyle={}">                                                      // 27642
        <br/>                                                                                                          // 27643
        <span ng-style="myStyle">Sample Text</span>                                                                    // 27644
        <pre>myStyle={{myStyle}}</pre>                                                                                 // 27645
     </file>                                                                                                           // 27646
     <file name="style.css">                                                                                           // 27647
       span {                                                                                                          // 27648
         color: black;                                                                                                 // 27649
       }                                                                                                               // 27650
     </file>                                                                                                           // 27651
     <file name="protractor.js" type="protractor">                                                                     // 27652
       var colorSpan = element(by.css('span'));                                                                        // 27653
                                                                                                                       // 27654
       it('should check ng-style', function() {                                                                        // 27655
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27656
         element(by.css('input[value=\'set color\']')).click();                                                        // 27657
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');                                            // 27658
         element(by.css('input[value=clear]')).click();                                                                // 27659
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');                                              // 27660
       });                                                                                                             // 27661
     </file>                                                                                                           // 27662
   </example>                                                                                                          // 27663
 */                                                                                                                    // 27664
var ngStyleDirective = ngDirective(function(scope, element, attr) {                                                    // 27665
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {                                       // 27666
    if (oldStyles && (newStyles !== oldStyles)) {                                                                      // 27667
      forEach(oldStyles, function(val, style) { element.css(style, '');});                                             // 27668
    }                                                                                                                  // 27669
    if (newStyles) element.css(newStyles);                                                                             // 27670
  }, true);                                                                                                            // 27671
});                                                                                                                    // 27672
                                                                                                                       // 27673
/**                                                                                                                    // 27674
 * @ngdoc directive                                                                                                    // 27675
 * @name ngSwitch                                                                                                      // 27676
 * @restrict EA                                                                                                        // 27677
 *                                                                                                                     // 27678
 * @description                                                                                                        // 27679
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.  // 27680
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.                                                                                       // 27682
 *                                                                                                                     // 27683
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it       // 27684
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element            // 27686
 * (where you place the directive), place an expression on the **`on="..."` attribute**                                // 27687
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place               // 27688
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on    // 27689
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.                                                                                             // 27691
 *                                                                                                                     // 27692
 * <div class="alert alert-info">                                                                                      // 27693
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted                     // 27694
 * as literal string values to match against.                                                                          // 27695
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the               // 27696
 * value of the expression `$scope.someVal`.                                                                           // 27697
 * </div>                                                                                                              // 27698
                                                                                                                       // 27699
 * @animations                                                                                                         // 27700
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container     // 27701
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *                                                                                                                     // 27703
 * @usage                                                                                                              // 27704
 *                                                                                                                     // 27705
 * ```                                                                                                                 // 27706
 * <ANY ng-switch="expression">                                                                                        // 27707
 *   <ANY ng-switch-when="matchValue1">...</ANY>                                                                       // 27708
 *   <ANY ng-switch-when="matchValue2">...</ANY>                                                                       // 27709
 *   <ANY ng-switch-default>...</ANY>                                                                                  // 27710
 * </ANY>                                                                                                              // 27711
 * ```                                                                                                                 // 27712
 *                                                                                                                     // 27713
 *                                                                                                                     // 27714
 * @scope                                                                                                              // 27715
 * @priority 1200                                                                                                      // 27716
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.                                     // 27717
 * On child elements add:                                                                                              // 27718
 *                                                                                                                     // 27719
 * * `ngSwitchWhen`: the case statement to match against. If match then this                                           // 27720
 *   case will be displayed. If the same match appears multiple times, all the                                         // 27721
 *   elements will be displayed.                                                                                       // 27722
 * * `ngSwitchDefault`: the default case when no other case match. If there                                            // 27723
 *   are multiple default cases, all of them will be displayed when no other                                           // 27724
 *   case match.                                                                                                       // 27725
 *                                                                                                                     // 27726
 *                                                                                                                     // 27727
 * @example                                                                                                            // 27728
  <example module="switchExample" deps="angular-animate.js" animations="true">                                         // 27729
    <file name="index.html">                                                                                           // 27730
      <div ng-controller="ExampleController">                                                                          // 27731
        <select ng-model="selection" ng-options="item for item in items">                                              // 27732
        </select>                                                                                                      // 27733
        <code>selection={{selection}}</code>                                                                           // 27734
        <hr/>                                                                                                          // 27735
        <div class="animate-switch-container"                                                                          // 27736
          ng-switch on="selection">                                                                                    // 27737
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>                                   // 27738
            <div class="animate-switch" ng-switch-when="home">Home Span</div>                                          // 27739
            <div class="animate-switch" ng-switch-default>default</div>                                                // 27740
        </div>                                                                                                         // 27741
      </div>                                                                                                           // 27742
    </file>                                                                                                            // 27743
    <file name="script.js">                                                                                            // 27744
      angular.module('switchExample', ['ngAnimate'])                                                                   // 27745
        .controller('ExampleController', ['$scope', function($scope) {                                                 // 27746
          $scope.items = ['settings', 'home', 'other'];                                                                // 27747
          $scope.selection = $scope.items[0];                                                                          // 27748
        }]);                                                                                                           // 27749
    </file>                                                                                                            // 27750
    <file name="animations.css">                                                                                       // 27751
      .animate-switch-container {                                                                                      // 27752
        position:relative;                                                                                             // 27753
        background:white;                                                                                              // 27754
        border:1px solid black;                                                                                        // 27755
        height:40px;                                                                                                   // 27756
        overflow:hidden;                                                                                               // 27757
      }                                                                                                                // 27758
                                                                                                                       // 27759
      .animate-switch {                                                                                                // 27760
        padding:10px;                                                                                                  // 27761
      }                                                                                                                // 27762
                                                                                                                       // 27763
      .animate-switch.ng-animate {                                                                                     // 27764
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;                                                  // 27765
                                                                                                                       // 27766
        position:absolute;                                                                                             // 27767
        top:0;                                                                                                         // 27768
        left:0;                                                                                                        // 27769
        right:0;                                                                                                       // 27770
        bottom:0;                                                                                                      // 27771
      }                                                                                                                // 27772
                                                                                                                       // 27773
      .animate-switch.ng-leave.ng-leave-active,                                                                        // 27774
      .animate-switch.ng-enter {                                                                                       // 27775
        top:-50px;                                                                                                     // 27776
      }                                                                                                                // 27777
      .animate-switch.ng-leave,                                                                                        // 27778
      .animate-switch.ng-enter.ng-enter-active {                                                                       // 27779
        top:0;                                                                                                         // 27780
      }                                                                                                                // 27781
    </file>                                                                                                            // 27782
    <file name="protractor.js" type="protractor">                                                                      // 27783
      var switchElem = element(by.css('[ng-switch]'));                                                                 // 27784
      var select = element(by.model('selection'));                                                                     // 27785
                                                                                                                       // 27786
      it('should start in settings', function() {                                                                      // 27787
        expect(switchElem.getText()).toMatch(/Settings Div/);                                                          // 27788
      });                                                                                                              // 27789
      it('should change to home', function() {                                                                         // 27790
        select.all(by.css('option')).get(1).click();                                                                   // 27791
        expect(switchElem.getText()).toMatch(/Home Span/);                                                             // 27792
      });                                                                                                              // 27793
      it('should select default', function() {                                                                         // 27794
        select.all(by.css('option')).get(2).click();                                                                   // 27795
        expect(switchElem.getText()).toMatch(/default/);                                                               // 27796
      });                                                                                                              // 27797
    </file>                                                                                                            // 27798
  </example>                                                                                                           // 27799
 */                                                                                                                    // 27800
var ngSwitchDirective = ['$animate', function($animate) {                                                              // 27801
  return {                                                                                                             // 27802
    require: 'ngSwitch',                                                                                               // 27803
                                                                                                                       // 27804
    // asks for $scope to fool the BC controller module                                                                // 27805
    controller: ['$scope', function ngSwitchController() {                                                             // 27806
     this.cases = {};                                                                                                  // 27807
    }],                                                                                                                // 27808
    link: function(scope, element, attr, ngSwitchController) {                                                         // 27809
      var watchExpr = attr.ngSwitch || attr.on,                                                                        // 27810
          selectedTranscludes = [],                                                                                    // 27811
          selectedElements = [],                                                                                       // 27812
          previousLeaveAnimations = [],                                                                                // 27813
          selectedScopes = [];                                                                                         // 27814
                                                                                                                       // 27815
      var spliceFactory = function(array, index) {                                                                     // 27816
          return function() { array.splice(index, 1); };                                                               // 27817
      };                                                                                                               // 27818
                                                                                                                       // 27819
      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {                                                    // 27820
        var i, ii;                                                                                                     // 27821
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {                                                // 27822
          $animate.cancel(previousLeaveAnimations[i]);                                                                 // 27823
        }                                                                                                              // 27824
        previousLeaveAnimations.length = 0;                                                                            // 27825
                                                                                                                       // 27826
        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {                                                         // 27827
          var selected = getBlockNodes(selectedElements[i].clone);                                                     // 27828
          selectedScopes[i].$destroy();                                                                                // 27829
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);                                         // 27830
          promise.then(spliceFactory(previousLeaveAnimations, i));                                                     // 27831
        }                                                                                                              // 27832
                                                                                                                       // 27833
        selectedElements.length = 0;                                                                                   // 27834
        selectedScopes.length = 0;                                                                                     // 27835
                                                                                                                       // 27836
        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {          // 27837
          forEach(selectedTranscludes, function(selectedTransclude) {                                                  // 27838
            selectedTransclude.transclude(function(caseElement, selectedScope) {                                       // 27839
              selectedScopes.push(selectedScope);                                                                      // 27840
              var anchor = selectedTransclude.element;                                                                 // 27841
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');                       // 27842
              var block = { clone: caseElement };                                                                      // 27843
                                                                                                                       // 27844
              selectedElements.push(block);                                                                            // 27845
              $animate.enter(caseElement, anchor.parent(), anchor);                                                    // 27846
            });                                                                                                        // 27847
          });                                                                                                          // 27848
        }                                                                                                              // 27849
      });                                                                                                              // 27850
    }                                                                                                                  // 27851
  };                                                                                                                   // 27852
}];                                                                                                                    // 27853
                                                                                                                       // 27854
var ngSwitchWhenDirective = ngDirective({                                                                              // 27855
  transclude: 'element',                                                                                               // 27856
  priority: 1200,                                                                                                      // 27857
  require: '^ngSwitch',                                                                                                // 27858
  multiElement: true,                                                                                                  // 27859
  link: function(scope, element, attrs, ctrl, $transclude) {                                                           // 27860
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);                               // 27861
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });                          // 27862
  }                                                                                                                    // 27863
});                                                                                                                    // 27864
                                                                                                                       // 27865
var ngSwitchDefaultDirective = ngDirective({                                                                           // 27866
  transclude: 'element',                                                                                               // 27867
  priority: 1200,                                                                                                      // 27868
  require: '^ngSwitch',                                                                                                // 27869
  multiElement: true,                                                                                                  // 27870
  link: function(scope, element, attr, ctrl, $transclude) {                                                            // 27871
    ctrl.cases['?'] = (ctrl.cases['?'] || []);                                                                         // 27872
    ctrl.cases['?'].push({ transclude: $transclude, element: element });                                               // 27873
   }                                                                                                                   // 27874
});                                                                                                                    // 27875
                                                                                                                       // 27876
/**                                                                                                                    // 27877
 * @ngdoc directive                                                                                                    // 27878
 * @name ngTransclude                                                                                                  // 27879
 * @restrict EAC                                                                                                       // 27880
 *                                                                                                                     // 27881
 * @description                                                                                                        // 27882
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *                                                                                                                     // 27884
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *                                                                                                                     // 27886
 * @element ANY                                                                                                        // 27887
 *                                                                                                                     // 27888
 * @example                                                                                                            // 27889
   <example module="transcludeExample">                                                                                // 27890
     <file name="index.html">                                                                                          // 27891
       <script>                                                                                                        // 27892
         angular.module('transcludeExample', [])                                                                       // 27893
          .directive('pane', function(){                                                                               // 27894
             return {                                                                                                  // 27895
               restrict: 'E',                                                                                          // 27896
               transclude: true,                                                                                       // 27897
               scope: { title:'@' },                                                                                   // 27898
               template: '<div style="border: 1px solid black;">' +                                                    // 27899
                           '<div style="background-color: gray">{{title}}</div>' +                                     // 27900
                           '<ng-transclude></ng-transclude>' +                                                         // 27901
                         '</div>'                                                                                      // 27902
             };                                                                                                        // 27903
         })                                                                                                            // 27904
         .controller('ExampleController', ['$scope', function($scope) {                                                // 27905
           $scope.title = 'Lorem Ipsum';                                                                               // 27906
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';                                   // 27907
         }]);                                                                                                          // 27908
       </script>                                                                                                       // 27909
       <div ng-controller="ExampleController">                                                                         // 27910
         <input ng-model="title" aria-label="title"> <br/>                                                             // 27911
         <textarea ng-model="text" aria-label="text"></textarea> <br/>                                                 // 27912
         <pane title="{{title}}">{{text}}</pane>                                                                       // 27913
       </div>                                                                                                          // 27914
     </file>                                                                                                           // 27915
     <file name="protractor.js" type="protractor">                                                                     // 27916
        it('should have transcluded', function() {                                                                     // 27917
          var titleElement = element(by.model('title'));                                                               // 27918
          titleElement.clear();                                                                                        // 27919
          titleElement.sendKeys('TITLE');                                                                              // 27920
          var textElement = element(by.model('text'));                                                                 // 27921
          textElement.clear();                                                                                         // 27922
          textElement.sendKeys('TEXT');                                                                                // 27923
          expect(element(by.binding('title')).getText()).toEqual('TITLE');                                             // 27924
          expect(element(by.binding('text')).getText()).toEqual('TEXT');                                               // 27925
        });                                                                                                            // 27926
     </file>                                                                                                           // 27927
   </example>                                                                                                          // 27928
 *                                                                                                                     // 27929
 */                                                                                                                    // 27930
var ngTranscludeDirective = ngDirective({                                                                              // 27931
  restrict: 'EAC',                                                                                                     // 27932
  link: function($scope, $element, $attrs, controller, $transclude) {                                                  // 27933
    if (!$transclude) {                                                                                                // 27934
      throw minErr('ngTransclude')('orphan',                                                                           // 27935
       'Illegal use of ngTransclude directive in the template! ' +                                                     // 27936
       'No parent directive that requires a transclusion found. ' +                                                    // 27937
       'Element: {0}',                                                                                                 // 27938
       startingTag($element));                                                                                         // 27939
    }                                                                                                                  // 27940
                                                                                                                       // 27941
    $transclude(function(clone) {                                                                                      // 27942
      $element.empty();                                                                                                // 27943
      $element.append(clone);                                                                                          // 27944
    });                                                                                                                // 27945
  }                                                                                                                    // 27946
});                                                                                                                    // 27947
                                                                                                                       // 27948
/**                                                                                                                    // 27949
 * @ngdoc directive                                                                                                    // 27950
 * @name script                                                                                                        // 27951
 * @restrict E                                                                                                         // 27952
 *                                                                                                                     // 27953
 * @description                                                                                                        // 27954
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the               // 27955
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},                                                 // 27956
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the                   // 27957
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be               // 27958
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.                         // 27959
 *                                                                                                                     // 27960
 * @param {string} type Must be set to `'text/ng-template'`.                                                           // 27961
 * @param {string} id Cache name of the template.                                                                      // 27962
 *                                                                                                                     // 27963
 * @example                                                                                                            // 27964
  <example>                                                                                                            // 27965
    <file name="index.html">                                                                                           // 27966
      <script type="text/ng-template" id="/tpl.html">                                                                  // 27967
        Content of the template.                                                                                       // 27968
      </script>                                                                                                        // 27969
                                                                                                                       // 27970
      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>                                     // 27971
      <div id="tpl-content" ng-include src="currentTpl"></div>                                                         // 27972
    </file>                                                                                                            // 27973
    <file name="protractor.js" type="protractor">                                                                      // 27974
      it('should load template defined inside script tag', function() {                                                // 27975
        element(by.css('#tpl-link')).click();                                                                          // 27976
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);                          // 27977
      });                                                                                                              // 27978
    </file>                                                                                                            // 27979
  </example>                                                                                                           // 27980
 */                                                                                                                    // 27981
var scriptDirective = ['$templateCache', function($templateCache) {                                                    // 27982
  return {                                                                                                             // 27983
    restrict: 'E',                                                                                                     // 27984
    terminal: true,                                                                                                    // 27985
    compile: function(element, attr) {                                                                                 // 27986
      if (attr.type == 'text/ng-template') {                                                                           // 27987
        var templateUrl = attr.id,                                                                                     // 27988
            text = element[0].text;                                                                                    // 27989
                                                                                                                       // 27990
        $templateCache.put(templateUrl, text);                                                                         // 27991
      }                                                                                                                // 27992
    }                                                                                                                  // 27993
  };                                                                                                                   // 27994
}];                                                                                                                    // 27995
                                                                                                                       // 27996
var noopNgModelController = { $setViewValue: noop, $render: noop };                                                    // 27997
                                                                                                                       // 27998
/**                                                                                                                    // 27999
 * @ngdoc type                                                                                                         // 28000
 * @name  select.SelectController                                                                                      // 28001
 * @description                                                                                                        // 28002
 * The controller for the `<select>` directive. This provides support for reading                                      // 28003
 * and writing the selected value(s) of the control and also coordinates dynamically                                   // 28004
 * added `<option>` elements, perhaps by an `ngRepeat` directive.                                                      // 28005
 */                                                                                                                    // 28006
var SelectController =                                                                                                 // 28007
        ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {                                          // 28008
                                                                                                                       // 28009
  var self = this,                                                                                                     // 28010
      optionsMap = new HashMap();                                                                                      // 28011
                                                                                                                       // 28012
  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors                           // 28013
  self.ngModelCtrl = noopNgModelController;                                                                            // 28014
                                                                                                                       // 28015
  // The "unknown" option is one that is prepended to the list if the viewValue                                        // 28016
  // does not match any of the options. When it is rendered the value of the unknown                                   // 28017
  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.                                      // 28018
  //                                                                                                                   // 28019
  // We can't just jqLite('<option>') since jqLite is not smart enough                                                 // 28020
  // to create it in <select> and IE barfs otherwise.                                                                  // 28021
  self.unknownOption = jqLite(document.createElement('option'));                                                       // 28022
  self.renderUnknownOption = function(val) {                                                                           // 28023
    var unknownVal = '? ' + hashKey(val) + ' ?';                                                                       // 28024
    self.unknownOption.val(unknownVal);                                                                                // 28025
    $element.prepend(self.unknownOption);                                                                              // 28026
    $element.val(unknownVal);                                                                                          // 28027
  };                                                                                                                   // 28028
                                                                                                                       // 28029
  $scope.$on('$destroy', function() {                                                                                  // 28030
    // disable unknown option so that we don't do work when the whole select is being destroyed                        // 28031
    self.renderUnknownOption = noop;                                                                                   // 28032
  });                                                                                                                  // 28033
                                                                                                                       // 28034
  self.removeUnknownOption = function() {                                                                              // 28035
    if (self.unknownOption.parent()) self.unknownOption.remove();                                                      // 28036
  };                                                                                                                   // 28037
                                                                                                                       // 28038
                                                                                                                       // 28039
  // Read the value of the select control, the implementation of this changes depending                                // 28040
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28041
  self.readValue = function readSingleValue() {                                                                        // 28042
    self.removeUnknownOption();                                                                                        // 28043
    return $element.val();                                                                                             // 28044
  };                                                                                                                   // 28045
                                                                                                                       // 28046
                                                                                                                       // 28047
  // Write the value to the select control, the implementation of this changes depending                               // 28048
  // upon whether the select can have multiple values and whether ngOptions is at work.                                // 28049
  self.writeValue = function writeSingleValue(value) {                                                                 // 28050
    if (self.hasOption(value)) {                                                                                       // 28051
      self.removeUnknownOption();                                                                                      // 28052
      $element.val(value);                                                                                             // 28053
      if (value === '') self.emptyOption.prop('selected', true); // to make IE9 happy                                  // 28054
    } else {                                                                                                           // 28055
      if (value == null && self.emptyOption) {                                                                         // 28056
        self.removeUnknownOption();                                                                                    // 28057
        $element.val('');                                                                                              // 28058
      } else {                                                                                                         // 28059
        self.renderUnknownOption(value);                                                                               // 28060
      }                                                                                                                // 28061
    }                                                                                                                  // 28062
  };                                                                                                                   // 28063
                                                                                                                       // 28064
                                                                                                                       // 28065
  // Tell the select control that an option, with the given value, has been added                                      // 28066
  self.addOption = function(value, element) {                                                                          // 28067
    assertNotHasOwnProperty(value, '"option value"');                                                                  // 28068
    if (value === '') {                                                                                                // 28069
      self.emptyOption = element;                                                                                      // 28070
    }                                                                                                                  // 28071
    var count = optionsMap.get(value) || 0;                                                                            // 28072
    optionsMap.put(value, count + 1);                                                                                  // 28073
  };                                                                                                                   // 28074
                                                                                                                       // 28075
  // Tell the select control that an option, with the given value, has been removed                                    // 28076
  self.removeOption = function(value) {                                                                                // 28077
    var count = optionsMap.get(value);                                                                                 // 28078
    if (count) {                                                                                                       // 28079
      if (count === 1) {                                                                                               // 28080
        optionsMap.remove(value);                                                                                      // 28081
        if (value === '') {                                                                                            // 28082
          self.emptyOption = undefined;                                                                                // 28083
        }                                                                                                              // 28084
      } else {                                                                                                         // 28085
        optionsMap.put(value, count - 1);                                                                              // 28086
      }                                                                                                                // 28087
    }                                                                                                                  // 28088
  };                                                                                                                   // 28089
                                                                                                                       // 28090
  // Check whether the select control has an option matching the given value                                           // 28091
  self.hasOption = function(value) {                                                                                   // 28092
    return !!optionsMap.get(value);                                                                                    // 28093
  };                                                                                                                   // 28094
}];                                                                                                                    // 28095
                                                                                                                       // 28096
/**                                                                                                                    // 28097
 * @ngdoc directive                                                                                                    // 28098
 * @name select                                                                                                        // 28099
 * @restrict E                                                                                                         // 28100
 *                                                                                                                     // 28101
 * @description                                                                                                        // 28102
 * HTML `SELECT` element with angular data-binding.                                                                    // 28103
 *                                                                                                                     // 28104
 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding                      // 28105
 * between the scope and the `<select>` control (including setting default values).                                    // 28106
 * Ìt also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or            // 28107
 * {@link ngOptions `ngOptions`} directives.                                                                           // 28108
 *                                                                                                                     // 28109
 * When an item in the `<select>` menu is selected, the value of the selected option will be bound                     // 28110
 * to the model identified by the `ngModel` directive. With static or repeated options, this is                        // 28111
 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.       // 28112
 * If you want dynamic value attributes, you can use interpolation inside the value attribute.                         // 28113
 *                                                                                                                     // 28114
 * <div class="alert alert-warning">                                                                                   // 28115
 * Note that the value of a `select` directive used without `ngOptions` is always a string.                            // 28116
 * When the model needs to be bound to a non-string value, you must either explictly convert it                        // 28117
 * using a directive (see example below) or use `ngOptions` to specify the set of options.                             // 28118
 * This is because an option element can only be bound to string values at present.                                    // 28119
 * </div>                                                                                                              // 28120
 *                                                                                                                     // 28121
 * If the viewValue of `ngModel` does not match any of the options, then the control                                   // 28122
 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.                    // 28123
 *                                                                                                                     // 28124
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can                      // 28125
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"                // 28126
 * option. See example below for demonstration.                                                                        // 28127
 *                                                                                                                     // 28128
 * <div class="alert alert-info">                                                                                      // 28129
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions               // 28130
 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits, such as                        // 28131
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the                    // 28132
 * comprehension expression, and additionally in reducing memory and increasing speed by not creating                  // 28133
 * a new scope for each repeated instance.                                                                             // 28134
 * </div>                                                                                                              // 28135
 *                                                                                                                     // 28136
 *                                                                                                                     // 28137
 * @param {string} ngModel Assignable angular expression to data-bind to.                                              // 28138
 * @param {string=} name Property name of the form under which the control is published.                               // 28139
 * @param {string=} required Sets `required` validation error key if the value is not entered.                         // 28140
 * @param {string=} ngRequired Adds required attribute and required validation constraint to                           // 28141
 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required                    // 28142
 * when you want to data-bind to the required attribute.                                                               // 28143
 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user             // 28144
 *    interaction with the select element.                                                                             // 28145
 * @param {string=} ngOptions sets the options that the select is populated with and defines what is                   // 28146
 * set on the model on selection. See {@link ngOptions `ngOptions`}.                                                   // 28147
 *                                                                                                                     // 28148
 * @example                                                                                                            // 28149
 * ### Simple `select` elements with static options                                                                    // 28150
 *                                                                                                                     // 28151
 * <example name="static-select" module="staticSelect">                                                                // 28152
 * <file name="index.html">                                                                                            // 28153
 * <div ng-controller="ExampleController">                                                                             // 28154
 *   <form name="myForm">                                                                                              // 28155
 *     <label for="singleSelect"> Single select: </label><br>                                                          // 28156
 *     <select name="singleSelect" ng-model="data.singleSelect">                                                       // 28157
 *       <option value="option-1">Option 1</option>                                                                    // 28158
 *       <option value="option-2">Option 2</option>                                                                    // 28159
 *     </select><br>                                                                                                   // 28160
 *                                                                                                                     // 28161
 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>     // 28162
 *     <select name="singleSelect" ng-model="data.singleSelect">                                                       // 28163
 *       <option value="">---Please select---</option> <!-- not selected / blank option -->                            // 28164
 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->                                     // 28165
 *       <option value="option-2">Option 2</option>                                                                    // 28166
 *     </select><br>                                                                                                   // 28167
 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>                                       // 28168
 *     <tt>singleSelect = {{data.singleSelect}}</tt>                                                                   // 28169
 *                                                                                                                     // 28170
 *     <hr>                                                                                                            // 28171
 *     <label for="multipleSelect"> Multiple select: </label><br>                                                      // 28172
 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>                      // 28173
 *       <option value="option-1">Option 1</option>                                                                    // 28174
 *       <option value="option-2">Option 2</option>                                                                    // 28175
 *       <option value="option-3">Option 3</option>                                                                    // 28176
 *     </select><br>                                                                                                   // 28177
 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>                                                          // 28178
 *   </form>                                                                                                           // 28179
 * </div>                                                                                                              // 28180
 * </file>                                                                                                             // 28181
 * <file name="app.js">                                                                                                // 28182
 *  angular.module('staticSelect', [])                                                                                 // 28183
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28184
 *      $scope.data = {                                                                                                // 28185
 *       singleSelect: null,                                                                                           // 28186
 *       multipleSelect: [],                                                                                           // 28187
 *       option1: 'option-1',                                                                                          // 28188
 *      };                                                                                                             // 28189
 *                                                                                                                     // 28190
 *      $scope.forceUnknownOption = function() {                                                                       // 28191
 *        $scope.data.singleSelect = 'nonsense';                                                                       // 28192
 *      };                                                                                                             // 28193
 *   }]);                                                                                                              // 28194
 * </file>                                                                                                             // 28195
 *</example>                                                                                                           // 28196
 *                                                                                                                     // 28197
 * ### Using `ngRepeat` to generate `select` options                                                                   // 28198
 * <example name="ngrepeat-select" module="ngrepeatSelect">                                                            // 28199
 * <file name="index.html">                                                                                            // 28200
 * <div ng-controller="ExampleController">                                                                             // 28201
 *   <form name="myForm">                                                                                              // 28202
 *     <label for="repeatSelect"> Repeat select: </label>                                                              // 28203
 *     <select name="repeatSelect" ng-model="data.repeatSelect">                                                       // 28204
 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>            // 28205
 *     </select>                                                                                                       // 28206
 *   </form>                                                                                                           // 28207
 *   <hr>                                                                                                              // 28208
 *   <tt>repeatSelect = {{data.repeatSelect}}</tt><br/>                                                                // 28209
 * </div>                                                                                                              // 28210
 * </file>                                                                                                             // 28211
 * <file name="app.js">                                                                                                // 28212
 *  angular.module('ngrepeatSelect', [])                                                                               // 28213
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28214
 *      $scope.data = {                                                                                                // 28215
 *       singleSelect: null,                                                                                           // 28216
 *       availableOptions: [                                                                                           // 28217
 *         {id: '1', name: 'Option A'},                                                                                // 28218
 *         {id: '2', name: 'Option B'},                                                                                // 28219
 *         {id: '3', name: 'Option C'}                                                                                 // 28220
 *       ],                                                                                                            // 28221
 *      };                                                                                                             // 28222
 *   }]);                                                                                                              // 28223
 * </file>                                                                                                             // 28224
 *</example>                                                                                                           // 28225
 *                                                                                                                     // 28226
 *                                                                                                                     // 28227
 * ### Using `select` with `ngOptions` and setting a default value                                                     // 28228
 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.                              // 28229
 *                                                                                                                     // 28230
 * <example name="select-with-default-values" module="defaultValueSelect">                                             // 28231
 * <file name="index.html">                                                                                            // 28232
 * <div ng-controller="ExampleController">                                                                             // 28233
 *   <form name="myForm">                                                                                              // 28234
 *     <label for="mySelect">Make a choice:</label>                                                                    // 28235
 *     <select name="mySelect" id="mySelect"                                                                           // 28236
 *       ng-options="option.name for option in data.availableOptions track by option.id"                               // 28237
 *       ng-model="data.selectedOption"></select>                                                                      // 28238
 *   </form>                                                                                                           // 28239
 *   <hr>                                                                                                              // 28240
 *   <tt>option = {{data.selectedOption}}</tt><br/>                                                                    // 28241
 * </div>                                                                                                              // 28242
 * </file>                                                                                                             // 28243
 * <file name="app.js">                                                                                                // 28244
 *  angular.module('defaultValueSelect', [])                                                                           // 28245
 *    .controller('ExampleController', ['$scope', function($scope) {                                                   // 28246
 *      $scope.data = {                                                                                                // 28247
 *       availableOptions: [                                                                                           // 28248
 *         {id: '1', name: 'Option A'},                                                                                // 28249
 *         {id: '2', name: 'Option B'},                                                                                // 28250
 *         {id: '3', name: 'Option C'}                                                                                 // 28251
 *       ],                                                                                                            // 28252
 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui             // 28253
 *       };                                                                                                            // 28254
 *   }]);                                                                                                              // 28255
 * </file>                                                                                                             // 28256
 *</example>                                                                                                           // 28257
 *                                                                                                                     // 28258
 *                                                                                                                     // 28259
 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting                                       // 28260
 *                                                                                                                     // 28261
 * <example name="select-with-non-string-options" module="nonStringSelect">                                            // 28262
 *   <file name="index.html">                                                                                          // 28263
 *     <select ng-model="model.id" convert-to-number>                                                                  // 28264
 *       <option value="0">Zero</option>                                                                               // 28265
 *       <option value="1">One</option>                                                                                // 28266
 *       <option value="2">Two</option>                                                                                // 28267
 *     </select>                                                                                                       // 28268
 *     {{ model }}                                                                                                     // 28269
 *   </file>                                                                                                           // 28270
 *   <file name="app.js">                                                                                              // 28271
 *     angular.module('nonStringSelect', [])                                                                           // 28272
 *       .run(function($rootScope) {                                                                                   // 28273
 *         $rootScope.model = { id: 2 };                                                                               // 28274
 *       })                                                                                                            // 28275
 *       .directive('convertToNumber', function() {                                                                    // 28276
 *         return {                                                                                                    // 28277
 *           require: 'ngModel',                                                                                       // 28278
 *           link: function(scope, element, attrs, ngModel) {                                                          // 28279
 *             ngModel.$parsers.push(function(val) {                                                                   // 28280
 *               return parseInt(val, 10);                                                                             // 28281
 *             });                                                                                                     // 28282
 *             ngModel.$formatters.push(function(val) {                                                                // 28283
 *               return '' + val;                                                                                      // 28284
 *             });                                                                                                     // 28285
 *           }                                                                                                         // 28286
 *         };                                                                                                          // 28287
 *       });                                                                                                           // 28288
 *   </file>                                                                                                           // 28289
 *   <file name="protractor.js" type="protractor">                                                                     // 28290
 *     it('should initialize to model', function() {                                                                   // 28291
 *       var select = element(by.css('select'));                                                                       // 28292
 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');                           // 28293
 *     });                                                                                                             // 28294
 *   </file>                                                                                                           // 28295
 * </example>                                                                                                          // 28296
 *                                                                                                                     // 28297
 */                                                                                                                    // 28298
var selectDirective = function() {                                                                                     // 28299
                                                                                                                       // 28300
  return {                                                                                                             // 28301
    restrict: 'E',                                                                                                     // 28302
    require: ['select', '?ngModel'],                                                                                   // 28303
    controller: SelectController,                                                                                      // 28304
    link: function(scope, element, attr, ctrls) {                                                                      // 28305
                                                                                                                       // 28306
      // if ngModel is not defined, we don't need to do anything                                                       // 28307
      var ngModelCtrl = ctrls[1];                                                                                      // 28308
      if (!ngModelCtrl) return;                                                                                        // 28309
                                                                                                                       // 28310
      var selectCtrl = ctrls[0];                                                                                       // 28311
                                                                                                                       // 28312
      selectCtrl.ngModelCtrl = ngModelCtrl;                                                                            // 28313
                                                                                                                       // 28314
      // We delegate rendering to the `writeValue` method, which can be changed                                        // 28315
      // if the select can have multiple selected values or if the options are being                                   // 28316
      // generated by `ngOptions`                                                                                      // 28317
      ngModelCtrl.$render = function() {                                                                               // 28318
        selectCtrl.writeValue(ngModelCtrl.$viewValue);                                                                 // 28319
      };                                                                                                               // 28320
                                                                                                                       // 28321
      // When the selected item(s) changes we delegate getting the value of the select control                         // 28322
      // to the `readValue` method, which can be changed if the select can have multiple                               // 28323
      // selected values or if the options are being generated by `ngOptions`                                          // 28324
      element.on('change', function() {                                                                                // 28325
        scope.$apply(function() {                                                                                      // 28326
          ngModelCtrl.$setViewValue(selectCtrl.readValue());                                                           // 28327
        });                                                                                                            // 28328
      });                                                                                                              // 28329
                                                                                                                       // 28330
      // If the select allows multiple values then we need to modify how we read and write                             // 28331
      // values from and to the control; also what it means for the value to be empty and                              // 28332
      // we have to add an extra watch since ngModel doesn't work well with arrays - it                                // 28333
      // doesn't trigger rendering if only an item in the array changes.                                               // 28334
      if (attr.multiple) {                                                                                             // 28335
                                                                                                                       // 28336
        // Read value now needs to check each option to see if it is selected                                          // 28337
        selectCtrl.readValue = function readMultipleValue() {                                                          // 28338
          var array = [];                                                                                              // 28339
          forEach(element.find('option'), function(option) {                                                           // 28340
            if (option.selected) {                                                                                     // 28341
              array.push(option.value);                                                                                // 28342
            }                                                                                                          // 28343
          });                                                                                                          // 28344
          return array;                                                                                                // 28345
        };                                                                                                             // 28346
                                                                                                                       // 28347
        // Write value now needs to set the selected property of each matching option                                  // 28348
        selectCtrl.writeValue = function writeMultipleValue(value) {                                                   // 28349
          var items = new HashMap(value);                                                                              // 28350
          forEach(element.find('option'), function(option) {                                                           // 28351
            option.selected = isDefined(items.get(option.value));                                                      // 28352
          });                                                                                                          // 28353
        };                                                                                                             // 28354
                                                                                                                       // 28355
        // we have to do it on each watch since ngModel watches reference, but                                         // 28356
        // we need to work of an array, so we need to see if anything was inserted/removed                             // 28357
        var lastView, lastViewRef = NaN;                                                                               // 28358
        scope.$watch(function selectMultipleWatch() {                                                                  // 28359
          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {                   // 28360
            lastView = shallowCopy(ngModelCtrl.$viewValue);                                                            // 28361
            ngModelCtrl.$render();                                                                                     // 28362
          }                                                                                                            // 28363
          lastViewRef = ngModelCtrl.$viewValue;                                                                        // 28364
        });                                                                                                            // 28365
                                                                                                                       // 28366
        // If we are a multiple select then value is now a collection                                                  // 28367
        // so the meaning of $isEmpty changes                                                                          // 28368
        ngModelCtrl.$isEmpty = function(value) {                                                                       // 28369
          return !value || value.length === 0;                                                                         // 28370
        };                                                                                                             // 28371
                                                                                                                       // 28372
      }                                                                                                                // 28373
    }                                                                                                                  // 28374
  };                                                                                                                   // 28375
};                                                                                                                     // 28376
                                                                                                                       // 28377
                                                                                                                       // 28378
// The option directive is purely designed to communicate the existence (or lack of)                                   // 28379
// of dynamically created (and destroyed) option elements to their containing select                                   // 28380
// directive via its controller.                                                                                       // 28381
var optionDirective = ['$interpolate', function($interpolate) {                                                        // 28382
                                                                                                                       // 28383
  function chromeHack(optionElement) {                                                                                 // 28384
    // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459                                       // 28385
    // Adding an <option selected="selected"> element to a <select required="required"> should                         // 28386
    // automatically select the new element                                                                            // 28387
    if (optionElement[0].hasAttribute('selected')) {                                                                   // 28388
      optionElement[0].selected = true;                                                                                // 28389
    }                                                                                                                  // 28390
  }                                                                                                                    // 28391
                                                                                                                       // 28392
  return {                                                                                                             // 28393
    restrict: 'E',                                                                                                     // 28394
    priority: 100,                                                                                                     // 28395
    compile: function(element, attr) {                                                                                 // 28396
                                                                                                                       // 28397
      // If the value attribute is not defined then we fall back to the                                                // 28398
      // text content of the option element, which may be interpolated                                                 // 28399
      if (isUndefined(attr.value)) {                                                                                   // 28400
        var interpolateFn = $interpolate(element.text(), true);                                                        // 28401
        if (!interpolateFn) {                                                                                          // 28402
          attr.$set('value', element.text());                                                                          // 28403
        }                                                                                                              // 28404
      }                                                                                                                // 28405
                                                                                                                       // 28406
      return function(scope, element, attr) {                                                                          // 28407
                                                                                                                       // 28408
        // This is an optimization over using ^^ since we don't want to have to search                                 // 28409
        // all the way to the root of the DOM for every single option element                                          // 28410
        var selectCtrlName = '$selectController',                                                                      // 28411
            parent = element.parent(),                                                                                 // 28412
            selectCtrl = parent.data(selectCtrlName) ||                                                                // 28413
              parent.parent().data(selectCtrlName); // in case we are in optgroup                                      // 28414
                                                                                                                       // 28415
        // Only update trigger option updates if this is an option within a `select`                                   // 28416
        // that also has `ngModel` attached                                                                            // 28417
        if (selectCtrl && selectCtrl.ngModelCtrl) {                                                                    // 28418
                                                                                                                       // 28419
          if (interpolateFn) {                                                                                         // 28420
            scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {                              // 28421
              attr.$set('value', newVal);                                                                              // 28422
              if (oldVal !== newVal) {                                                                                 // 28423
                selectCtrl.removeOption(oldVal);                                                                       // 28424
              }                                                                                                        // 28425
              selectCtrl.addOption(newVal, element);                                                                   // 28426
              selectCtrl.ngModelCtrl.$render();                                                                        // 28427
              chromeHack(element);                                                                                     // 28428
            });                                                                                                        // 28429
          } else {                                                                                                     // 28430
            selectCtrl.addOption(attr.value, element);                                                                 // 28431
            selectCtrl.ngModelCtrl.$render();                                                                          // 28432
            chromeHack(element);                                                                                       // 28433
          }                                                                                                            // 28434
                                                                                                                       // 28435
          element.on('$destroy', function() {                                                                          // 28436
            selectCtrl.removeOption(attr.value);                                                                       // 28437
            selectCtrl.ngModelCtrl.$render();                                                                          // 28438
          });                                                                                                          // 28439
        }                                                                                                              // 28440
      };                                                                                                               // 28441
    }                                                                                                                  // 28442
  };                                                                                                                   // 28443
}];                                                                                                                    // 28444
                                                                                                                       // 28445
var styleDirective = valueFn({                                                                                         // 28446
  restrict: 'E',                                                                                                       // 28447
  terminal: false                                                                                                      // 28448
});                                                                                                                    // 28449
                                                                                                                       // 28450
var requiredDirective = function() {                                                                                   // 28451
  return {                                                                                                             // 28452
    restrict: 'A',                                                                                                     // 28453
    require: '?ngModel',                                                                                               // 28454
    link: function(scope, elm, attr, ctrl) {                                                                           // 28455
      if (!ctrl) return;                                                                                               // 28456
      attr.required = true; // force truthy in case we are on non input element                                        // 28457
                                                                                                                       // 28458
      ctrl.$validators.required = function(modelValue, viewValue) {                                                    // 28459
        return !attr.required || !ctrl.$isEmpty(viewValue);                                                            // 28460
      };                                                                                                               // 28461
                                                                                                                       // 28462
      attr.$observe('required', function() {                                                                           // 28463
        ctrl.$validate();                                                                                              // 28464
      });                                                                                                              // 28465
    }                                                                                                                  // 28466
  };                                                                                                                   // 28467
};                                                                                                                     // 28468
                                                                                                                       // 28469
                                                                                                                       // 28470
var patternDirective = function() {                                                                                    // 28471
  return {                                                                                                             // 28472
    restrict: 'A',                                                                                                     // 28473
    require: '?ngModel',                                                                                               // 28474
    link: function(scope, elm, attr, ctrl) {                                                                           // 28475
      if (!ctrl) return;                                                                                               // 28476
                                                                                                                       // 28477
      var regexp, patternExp = attr.ngPattern || attr.pattern;                                                         // 28478
      attr.$observe('pattern', function(regex) {                                                                       // 28479
        if (isString(regex) && regex.length > 0) {                                                                     // 28480
          regex = new RegExp('^' + regex + '$');                                                                       // 28481
        }                                                                                                              // 28482
                                                                                                                       // 28483
        if (regex && !regex.test) {                                                                                    // 28484
          throw minErr('ngPattern')('noregexp',                                                                        // 28485
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,                                       // 28486
            regex, startingTag(elm));                                                                                  // 28487
        }                                                                                                              // 28488
                                                                                                                       // 28489
        regexp = regex || undefined;                                                                                   // 28490
        ctrl.$validate();                                                                                              // 28491
      });                                                                                                              // 28492
                                                                                                                       // 28493
      ctrl.$validators.pattern = function(modelValue, viewValue) {                                                     // 28494
        // HTML5 pattern constraint validates the input value, so we validate the viewValue                            // 28495
        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);                              // 28496
      };                                                                                                               // 28497
    }                                                                                                                  // 28498
  };                                                                                                                   // 28499
};                                                                                                                     // 28500
                                                                                                                       // 28501
                                                                                                                       // 28502
var maxlengthDirective = function() {                                                                                  // 28503
  return {                                                                                                             // 28504
    restrict: 'A',                                                                                                     // 28505
    require: '?ngModel',                                                                                               // 28506
    link: function(scope, elm, attr, ctrl) {                                                                           // 28507
      if (!ctrl) return;                                                                                               // 28508
                                                                                                                       // 28509
      var maxlength = -1;                                                                                              // 28510
      attr.$observe('maxlength', function(value) {                                                                     // 28511
        var intVal = toInt(value);                                                                                     // 28512
        maxlength = isNaN(intVal) ? -1 : intVal;                                                                       // 28513
        ctrl.$validate();                                                                                              // 28514
      });                                                                                                              // 28515
      ctrl.$validators.maxlength = function(modelValue, viewValue) {                                                   // 28516
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);                         // 28517
      };                                                                                                               // 28518
    }                                                                                                                  // 28519
  };                                                                                                                   // 28520
};                                                                                                                     // 28521
                                                                                                                       // 28522
var minlengthDirective = function() {                                                                                  // 28523
  return {                                                                                                             // 28524
    restrict: 'A',                                                                                                     // 28525
    require: '?ngModel',                                                                                               // 28526
    link: function(scope, elm, attr, ctrl) {                                                                           // 28527
      if (!ctrl) return;                                                                                               // 28528
                                                                                                                       // 28529
      var minlength = 0;                                                                                               // 28530
      attr.$observe('minlength', function(value) {                                                                     // 28531
        minlength = toInt(value) || 0;                                                                                 // 28532
        ctrl.$validate();                                                                                              // 28533
      });                                                                                                              // 28534
      ctrl.$validators.minlength = function(modelValue, viewValue) {                                                   // 28535
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;                                              // 28536
      };                                                                                                               // 28537
    }                                                                                                                  // 28538
  };                                                                                                                   // 28539
};                                                                                                                     // 28540
                                                                                                                       // 28541
if (window.angular.bootstrap) {                                                                                        // 28542
  //AngularJS is already loaded, so we can return here...                                                              // 28543
  console.log('WARNING: Tried to load angular more than once.');                                                       // 28544
  return;                                                                                                              // 28545
}                                                                                                                      // 28546
                                                                                                                       // 28547
//try to bind to jquery now so that one can write jqLite(document).ready()                                             // 28548
//but we will rebind on bootstrap again.                                                                               // 28549
bindJQuery();                                                                                                          // 28550
                                                                                                                       // 28551
publishExternalAPI(angular);                                                                                           // 28552
                                                                                                                       // 28553
angular.module("ngLocale", [], ["$provide", function($provide) {                                                       // 28554
var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};                // 28555
function getDecimals(n) {                                                                                              // 28556
  n = n + '';                                                                                                          // 28557
  var i = n.indexOf('.');                                                                                              // 28558
  return (i == -1) ? 0 : n.length - i - 1;                                                                             // 28559
}                                                                                                                      // 28560
                                                                                                                       // 28561
function getVF(n, opt_precision) {                                                                                     // 28562
  var v = opt_precision;                                                                                               // 28563
                                                                                                                       // 28564
  if (undefined === v) {                                                                                               // 28565
    v = Math.min(getDecimals(n), 3);                                                                                   // 28566
  }                                                                                                                    // 28567
                                                                                                                       // 28568
  var base = Math.pow(10, v);                                                                                          // 28569
  var f = ((n * base) | 0) % base;                                                                                     // 28570
  return {v: v, f: f};                                                                                                 // 28571
}                                                                                                                      // 28572
                                                                                                                       // 28573
$provide.value("$locale", {                                                                                            // 28574
  "DATETIME_FORMATS": {                                                                                                // 28575
    "AMPMS": [                                                                                                         // 28576
      "AM",                                                                                                            // 28577
      "PM"                                                                                                             // 28578
    ],                                                                                                                 // 28579
    "DAY": [                                                                                                           // 28580
      "Sunday",                                                                                                        // 28581
      "Monday",                                                                                                        // 28582
      "Tuesday",                                                                                                       // 28583
      "Wednesday",                                                                                                     // 28584
      "Thursday",                                                                                                      // 28585
      "Friday",                                                                                                        // 28586
      "Saturday"                                                                                                       // 28587
    ],                                                                                                                 // 28588
    "ERANAMES": [                                                                                                      // 28589
      "Before Christ",                                                                                                 // 28590
      "Anno Domini"                                                                                                    // 28591
    ],                                                                                                                 // 28592
    "ERAS": [                                                                                                          // 28593
      "BC",                                                                                                            // 28594
      "AD"                                                                                                             // 28595
    ],                                                                                                                 // 28596
    "FIRSTDAYOFWEEK": 6,                                                                                               // 28597
    "MONTH": [                                                                                                         // 28598
      "January",                                                                                                       // 28599
      "February",                                                                                                      // 28600
      "March",                                                                                                         // 28601
      "April",                                                                                                         // 28602
      "May",                                                                                                           // 28603
      "June",                                                                                                          // 28604
      "July",                                                                                                          // 28605
      "August",                                                                                                        // 28606
      "September",                                                                                                     // 28607
      "October",                                                                                                       // 28608
      "November",                                                                                                      // 28609
      "December"                                                                                                       // 28610
    ],                                                                                                                 // 28611
    "SHORTDAY": [                                                                                                      // 28612
      "Sun",                                                                                                           // 28613
      "Mon",                                                                                                           // 28614
      "Tue",                                                                                                           // 28615
      "Wed",                                                                                                           // 28616
      "Thu",                                                                                                           // 28617
      "Fri",                                                                                                           // 28618
      "Sat"                                                                                                            // 28619
    ],                                                                                                                 // 28620
    "SHORTMONTH": [                                                                                                    // 28621
      "Jan",                                                                                                           // 28622
      "Feb",                                                                                                           // 28623
      "Mar",                                                                                                           // 28624
      "Apr",                                                                                                           // 28625
      "May",                                                                                                           // 28626
      "Jun",                                                                                                           // 28627
      "Jul",                                                                                                           // 28628
      "Aug",                                                                                                           // 28629
      "Sep",                                                                                                           // 28630
      "Oct",                                                                                                           // 28631
      "Nov",                                                                                                           // 28632
      "Dec"                                                                                                            // 28633
    ],                                                                                                                 // 28634
    "WEEKENDRANGE": [                                                                                                  // 28635
      5,                                                                                                               // 28636
      6                                                                                                                // 28637
    ],                                                                                                                 // 28638
    "fullDate": "EEEE, MMMM d, y",                                                                                     // 28639
    "longDate": "MMMM d, y",                                                                                           // 28640
    "medium": "MMM d, y h:mm:ss a",                                                                                    // 28641
    "mediumDate": "MMM d, y",                                                                                          // 28642
    "mediumTime": "h:mm:ss a",                                                                                         // 28643
    "short": "M/d/yy h:mm a",                                                                                          // 28644
    "shortDate": "M/d/yy",                                                                                             // 28645
    "shortTime": "h:mm a"                                                                                              // 28646
  },                                                                                                                   // 28647
  "NUMBER_FORMATS": {                                                                                                  // 28648
    "CURRENCY_SYM": "$",                                                                                               // 28649
    "DECIMAL_SEP": ".",                                                                                                // 28650
    "GROUP_SEP": ",",                                                                                                  // 28651
    "PATTERNS": [                                                                                                      // 28652
      {                                                                                                                // 28653
        "gSize": 3,                                                                                                    // 28654
        "lgSize": 3,                                                                                                   // 28655
        "maxFrac": 3,                                                                                                  // 28656
        "minFrac": 0,                                                                                                  // 28657
        "minInt": 1,                                                                                                   // 28658
        "negPre": "-",                                                                                                 // 28659
        "negSuf": "",                                                                                                  // 28660
        "posPre": "",                                                                                                  // 28661
        "posSuf": ""                                                                                                   // 28662
      },                                                                                                               // 28663
      {                                                                                                                // 28664
        "gSize": 3,                                                                                                    // 28665
        "lgSize": 3,                                                                                                   // 28666
        "maxFrac": 2,                                                                                                  // 28667
        "minFrac": 2,                                                                                                  // 28668
        "minInt": 1,                                                                                                   // 28669
        "negPre": "-\u00a4",                                                                                           // 28670
        "negSuf": "",                                                                                                  // 28671
        "posPre": "\u00a4",                                                                                            // 28672
        "posSuf": ""                                                                                                   // 28673
      }                                                                                                                // 28674
    ]                                                                                                                  // 28675
  },                                                                                                                   // 28676
  "id": "en-us",                                                                                                       // 28677
  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
});                                                                                                                    // 28679
}]);                                                                                                                   // 28680
                                                                                                                       // 28681
  jqLite(document).ready(function() {                                                                                  // 28682
    angularInit(document, bootstrap);                                                                                  // 28683
  });                                                                                                                  // 28684
                                                                                                                       // 28685
})(window, document);                                                                                                  // 28686
                                                                                                                       // 28687
!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['angular:angular'] = {};

})();
